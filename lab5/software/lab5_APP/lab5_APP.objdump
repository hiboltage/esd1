
lab5_APP.elf:     file format elf32-littlenios2
lab5_APP.elf
architecture: nios2:r1, flags 0x00000112:
EXEC_P, HAS_SYMS, D_PAGED
start address 0x00008230

Program Header:
    LOAD off    0x00001000 vaddr 0x00008000 paddr 0x00008000 align 2**12
         filesz 0x00000020 memsz 0x00000020 flags r-x
    LOAD off    0x00001020 vaddr 0x00008020 paddr 0x00008020 align 2**12
         filesz 0x00004dc4 memsz 0x00004dc4 flags r-x
    LOAD off    0x00005de4 vaddr 0x0000cde4 paddr 0x0000d0f8 align 2**12
         filesz 0x00000314 memsz 0x00000314 flags rw-
    LOAD off    0x0000640c vaddr 0x0000d40c paddr 0x0000d40c align 2**12
         filesz 0x00000000 memsz 0x0000011c flags rw-

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .entry        00000020  00008000  00008000  00001000  2**5
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .exceptions   00000210  00008020  00008020  00001020  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .text         00004a7c  00008230  00008230  00001230  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  3 .rodata       00000138  0000ccac  0000ccac  00005cac  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .rwdata       00000314  0000cde4  0000d0f8  00005de4  2**2
                  CONTENTS, ALLOC, LOAD, DATA, SMALL_DATA
  5 .bss          0000011c  0000d40c  0000d40c  0000640c  2**2
                  ALLOC, SMALL_DATA
  6 .onchip_memory2_0 00000000  0000d528  0000d528  000060f8  2**0
                  CONTENTS
  7 .comment      00000023  00000000  00000000  000060f8  2**0
                  CONTENTS, READONLY
  8 .debug_aranges 000006c8  00000000  00000000  00006120  2**3
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_info   0000897c  00000000  00000000  000067e8  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_abbrev 00002fa6  00000000  00000000  0000f164  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_line   00003960  00000000  00000000  0001210a  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_frame  00000c7c  00000000  00000000  00015a6c  2**2
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_str    00002388  00000000  00000000  000166e8  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_loc    000077e2  00000000  00000000  00018a70  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_alt_sim_info 00000010  00000000  00000000  00020254  2**2
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_ranges 00000b80  00000000  00000000  00020268  2**3
                  CONTENTS, READONLY, DEBUGGING
 17 .thread_model 00000003  00000000  00000000  00022a8a  2**0
                  CONTENTS, READONLY
 18 .cpu          0000000c  00000000  00000000  00022a8d  2**0
                  CONTENTS, READONLY
 19 .qsys         00000001  00000000  00000000  00022a99  2**0
                  CONTENTS, READONLY
 20 .simulation_enabled 00000001  00000000  00000000  00022a9a  2**0
                  CONTENTS, READONLY
 21 .sysid_hash   00000004  00000000  00000000  00022a9b  2**0
                  CONTENTS, READONLY
 22 .sysid_base   00000004  00000000  00000000  00022a9f  2**0
                  CONTENTS, READONLY
 23 .sysid_time   00000004  00000000  00000000  00022aa3  2**0
                  CONTENTS, READONLY
 24 .stderr_dev   0000000b  00000000  00000000  00022aa7  2**0
                  CONTENTS, READONLY
 25 .stdin_dev    0000000b  00000000  00000000  00022ab2  2**0
                  CONTENTS, READONLY
 26 .stdout_dev   0000000b  00000000  00000000  00022abd  2**0
                  CONTENTS, READONLY
 27 .sopc_system_name 0000000b  00000000  00000000  00022ac8  2**0
                  CONTENTS, READONLY
 28 .quartus_project_dir 00000020  00000000  00000000  00022ad3  2**0
                  CONTENTS, READONLY
 29 .jdi          000000e5  00000000  00000000  00022af3  2**0
                  CONTENTS, READONLY
 30 .sopcinfo     00068aaa  00000000  00000000  00022bd8  2**0
                  CONTENTS, READONLY
SYMBOL TABLE:
00008000 l    d  .entry	00000000 .entry
00008020 l    d  .exceptions	00000000 .exceptions
00008230 l    d  .text	00000000 .text
0000ccac l    d  .rodata	00000000 .rodata
0000cde4 l    d  .rwdata	00000000 .rwdata
0000d40c l    d  .bss	00000000 .bss
0000d528 l    d  .onchip_memory2_0	00000000 .onchip_memory2_0
00000000 l    d  .comment	00000000 .comment
00000000 l    d  .debug_aranges	00000000 .debug_aranges
00000000 l    d  .debug_info	00000000 .debug_info
00000000 l    d  .debug_abbrev	00000000 .debug_abbrev
00000000 l    d  .debug_line	00000000 .debug_line
00000000 l    d  .debug_frame	00000000 .debug_frame
00000000 l    d  .debug_str	00000000 .debug_str
00000000 l    d  .debug_loc	00000000 .debug_loc
00000000 l    d  .debug_alt_sim_info	00000000 .debug_alt_sim_info
00000000 l    d  .debug_ranges	00000000 .debug_ranges
00000000 l    df *ABS*	00000000 ../lab5_APP_bsp//obj/HAL/src/crt0.o
00008268 l       .text	00000000 alt_after_alt_main
00000000 l    df *ABS*	00000000 alt_irq_handler.c
00000000 l    df *ABS*	00000000 alt_instruction_exception_entry.c
00000000 l    df *ABS*	00000000 main.c
00000000 l    df *ABS*	00000000 s_round.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 adddf3.c
00000000 l    df *ABS*	00000000 divdf3.c
00000000 l    df *ABS*	00000000 gedf2.c
00000000 l    df *ABS*	00000000 muldf3.c
00000000 l    df *ABS*	00000000 subdf3.c
00000000 l    df *ABS*	00000000 fixdfsi.c
00000000 l    df *ABS*	00000000 floatsidf.c
00000000 l    df *ABS*	00000000 floatunsidf.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 lib2-divmod.c
00000000 l    df *ABS*	00000000 lib2-mul.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 snprintf.c
00000000 l    df *ABS*	00000000 vfprintf.c
0000b300 l     F .text	0000006c print_repeat
00000000 l    df *ABS*	00000000 fvwrite_small_str.c
00000000 l    df *ABS*	00000000 impure.c
0000cdf0 l     O .rwdata	000000e0 impure_data
00000000 l    df *ABS*	00000000 memmove.c
00000000 l    df *ABS*	00000000 strlen.c
00000000 l    df *ABS*	00000000 alt_iic.c
00000000 l    df *ABS*	00000000 alt_iic_isr_register.c
00000000 l    df *ABS*	00000000 alt_irq_vars.c
00000000 l    df *ABS*	00000000 alt_load.c
0000bc78 l     F .text	00000068 alt_load_section
00000000 l    df *ABS*	00000000 alt_main.c
00000000 l    df *ABS*	00000000 alt_sys_init.c
0000bdd0 l     F .text	00000034 alt_dev_reg
0000ced0 l     O .rwdata	0000002c jtag_uart_0
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_fd.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_read.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_write.c
00000000 l    df *ABS*	00000000 alt_close.c
0000c0b4 l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_dcache_flush_all.c
00000000 l    df *ABS*	00000000 alt_dev.c
0000c1e8 l     F .text	0000002c alt_dev_null_write
00000000 l    df *ABS*	00000000 alt_dev_llist_insert.c
0000c214 l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_errno.c
00000000 l    df *ABS*	00000000 alt_icache_flush_all.c
00000000 l    df *ABS*	00000000 alt_io_redirect.c
0000c3b0 l     F .text	000000e4 alt_open_fd
00000000 l    df *ABS*	00000000 alt_open.c
0000c510 l     F .text	0000003c alt_get_errno
0000c54c l     F .text	000000ec alt_file_locked
00000000 l    df *ABS*	00000000 alt_release_fd.c
00000000 l    df *ABS*	00000000 altera_nios2_gen2_irq.c
00000000 l    df *ABS*	00000000 alt_find_dev.c
00000000 l    df *ABS*	00000000 alt_find_file.c
00000000 l    df *ABS*	00000000 alt_get_fd.c
00000000 l    df *ABS*	00000000 exit.c
00000000 l    df *ABS*	00000000 int_errno.c
00000000 l    df *ABS*	00000000 memcmp.c
00000000 l    df *ABS*	00000000 __call_atexit.c
00000000 l    df *ABS*	00000000 alt_exit.c
0000d420 g     O .bss	00000004 alt_instruction_exception_handler
0000bd64 g     F .text	0000006c alt_main
0000d428 g     O .bss	00000100 alt_irq
0000d0f8 g       *ABS*	00000000 __flash_rwdata_start
0000834c g     F .text	000000c0 deg2counts
00008720 g     F .text	00000100 round
0000b95c g     F .text	00000060 memmove
0000b248 g     F .text	000000b8 snprintf
0000d40c g     O .bss	00000001 pb_val
00009b10 g     F .text	000000dc .hidden __gtdf2
0000c818 g     F .text	00000024 altera_nios2_gen2_irq_init
0000b8b4 g     F .text	000000a8 __sfvwrite_small_str
00008000 g     F .entry	0000000c __reset
00008020 g       *ABS*	00000000 __flash_exceptions_start
0000d424 g     O .bss	00000004 errno
0000d418 g     O .bss	00000004 alt_argv
000150a4 g       *ABS*	00000000 _gp
0000cf24 g     O .rwdata	00000180 alt_fd_list
0000c83c g     F .text	00000090 alt_find_dev
0000add4 g     F .text	000000dc .hidden __floatsidf
0000c494 g     F .text	0000007c alt_io_redirect
0000c314 g     F .text	0000009c alt_exception_cause_generated_bad_addr
0000bf34 g     F .text	000000ec altera_avalon_jtag_uart_read
00008000 g       *ABS*	00000000 __alt_mem_onchip_memory2_0
0000b0b4 g     F .text	00000064 .hidden __udivsi3
00008820 g     F .text	00000074 .hidden __fixunsdfsi
0000d40d g     O .bss	00000001 min_angle_flag
0000d0f0 g     O .rwdata	00000004 alt_max_fd
00008894 g     F .text	000008ac .hidden __adddf3
0000d0d4 g     O .rwdata	00000004 _global_impure_ptr
0000d528 g       *ABS*	00000000 __bss_end
0000bb88 g     F .text	000000f0 alt_iic_isr_register
0000aeb0 g     F .text	000000a8 .hidden __floatunsidf
0000840c g     F .text	000000a0 pb_isr
0000bb3c g     F .text	0000004c alt_ic_irq_enabled
0000d410 g     O .bss	00000004 alt_irq_active
000080fc g     F .exceptions	000000d4 alt_irq_handler
0000cefc g     O .rwdata	00000028 alt_dev_null
0000cde4 g     O .rwdata	0000000a dispNums
0000c1c8 g     F .text	00000020 alt_dcache_flush_all
0000ad54 g     F .text	00000080 .hidden __fixdfsi
0000d0f8 g       *ABS*	00000000 __ram_rwdata_end
0000d0e8 g     O .rwdata	00000008 alt_dev_list
0000cde4 g       *ABS*	00000000 __ram_rodata_end
000084ac g     F .text	00000040 servo_isr
0000d0cc g     O .rwdata	00000004 max_angle
0000b118 g     F .text	00000058 .hidden __umodsi3
0000d528 g       *ABS*	00000000 end
000081d0 g     F .exceptions	00000060 alt_instruction_exception_entry
00010000 g       *ABS*	00000000 __alt_stack_pointer
0000af58 g     F .text	00000064 .hidden __clzsi2
0000b198 g     F .text	000000b0 _snprintf_r
0000c020 g     F .text	00000094 altera_avalon_jtag_uart_write
0000cae8 g     F .text	00000190 __call_exitprocs
00008230 g     F .text	0000003c _start
0000be3c g     F .text	00000038 alt_sys_init
0000b170 g     F .text	00000028 .hidden __mulsi3
0000cde4 g       *ABS*	00000000 __ram_rwdata_start
0000ccac g       *ABS*	00000000 __ram_rodata_start
0000be74 g     F .text	00000060 altera_avalon_jtag_uart_read_fd
0000c9d4 g     F .text	000000c4 alt_get_fd
0000d0bc g     O .rwdata	00000004 HEX3_Ptr
0000cab8 g     F .text	00000030 memcmp
0000d528 g       *ABS*	00000000 __alt_stack_base
00009140 g     F .text	000009d0 .hidden __divdf3
00009bec g     F .text	0000086c .hidden __muldf3
0000c8cc g     F .text	00000108 alt_find_file
0000c250 g     F .text	000000a4 alt_dev_llist_insert
0000b36c g     F .text	0000052c ___svfprintf_internal_r
0000d0b4 g     O .rwdata	00000004 HEX1_Ptr
0000d40c g       *ABS*	00000000 __bss_start
000084ec g     F .text	00000234 main
0000d41c g     O .bss	00000004 alt_envp
0000bed4 g     F .text	00000060 altera_avalon_jtag_uart_write_fd
0000d0f4 g     O .rwdata	00000004 alt_errno
0000d0d0 g     O .rwdata	00000001 max_angle_flag
0000afbc g     F .text	00000084 .hidden __divsi3
0000ccac g       *ABS*	00000000 __flash_rodata_start
0000d0b8 g     O .rwdata	00000004 HEX2_Ptr
0000be04 g     F .text	00000038 alt_irq_init
0000c794 g     F .text	00000084 alt_release_fd
0000ccaf g     O .rodata	00000100 .hidden __clz_tab
0000d0d8 g     O .rwdata	00000004 _impure_ptr
0000d414 g     O .bss	00000004 alt_argc
0000d0a8 g     O .rwdata	00000004 SW_Ptr
00008020 g       .exceptions	00000000 alt_irq_entry
0000d0e0 g     O .rwdata	00000008 alt_fs_list
0000b898 g     F .text	0000001c __vfprintf_internal_unused
0000d0ac g     O .rwdata	00000004 Servo_Ptr
00008020 g       *ABS*	00000000 __ram_exceptions_start
0000b9d8 g     F .text	00000050 alt_ic_isr_register
0000d0f8 g       *ABS*	00000000 _edata
0000d528 g       *ABS*	00000000 _end
00008230 g       *ABS*	00000000 __ram_exceptions_end
0000bab0 g     F .text	0000008c alt_ic_irq_disable
0000ca98 g     F .text	00000020 exit
0000d0a4 g     O .rwdata	00000004 PB_Ptr
0000b040 g     F .text	00000074 .hidden __modsi3
00010000 g       *ABS*	00000000 __alt_data_end
00008020 g     F .exceptions	00000000 alt_exception
0000d0c8 g     O .rwdata	00000004 min_angle
0000cc78 g     F .text	00000034 _exit
0000b9bc g     F .text	0000001c strlen
0000c638 g     F .text	0000015c open
00009b10 g     F .text	000000dc .hidden __gedf2
0000c2f4 g     F .text	00000020 alt_icache_flush_all
0000d0b0 g     O .rwdata	00000004 HEX0_Ptr
0000d0dc g     O .rwdata	00000004 alt_priority_mask
0000ba28 g     F .text	00000088 alt_ic_irq_enable
0000a458 g     F .text	000008fc .hidden __subdf3
0000d0c4 g     O .rwdata	00000004 HEX5_Ptr
0000d0c0 g     O .rwdata	00000004 HEX4_Ptr
0000826c g     F .text	000000e0 counts2deg
0000c0f0 g     F .text	000000d8 close
0000bce0 g     F .text	00000084 alt_load



Disassembly of section .entry:

00008000 <__reset>:
 * Jump to the _start entry point in the .text section if reset code
 * is allowed or if optimizing for RTL simulation.
 */
#if defined(ALT_ALLOW_CODE_AT_RESET) || defined(ALT_SIM_OPTIMIZE)
    /* Jump to the _start entry point in the .text section. */
    movhi r1, %hi(_start)
    8000:	00400034 	movhi	at,0
    ori r1, r1, %lo(_start)
    8004:	08608c14 	ori	at,at,33328
    jmp r1
    8008:	0800683a 	jmp	at
	...

Disassembly of section .exceptions:

00008020 <alt_exception>:

#else /* ALT_EXCEPTION_STACK disabled */
        /* 
         * Reserve space on normal stack for registers about to be pushed.
         */
        addi  sp, sp, -76
    8020:	deffed04 	addi	sp,sp,-76
         * documentation for details).
         *
         * Leave a gap in the stack frame at 4(sp) for the muldiv handler to
         * store zero into.
         */
        stw   ra,  0(sp)
    8024:	dfc00015 	stw	ra,0(sp)
        stw   r1,   8(sp)
    8028:	d8400215 	stw	at,8(sp)
        stw   r2,  12(sp)
    802c:	d8800315 	stw	r2,12(sp)
        stw   r3,  16(sp)
    8030:	d8c00415 	stw	r3,16(sp)
        stw   r4,  20(sp)
    8034:	d9000515 	stw	r4,20(sp)
        stw   r5,  24(sp)
    8038:	d9400615 	stw	r5,24(sp)
        stw   r6,  28(sp)
    803c:	d9800715 	stw	r6,28(sp)
        stw   r7,  32(sp)
    8040:	d9c00815 	stw	r7,32(sp)
        rdctl r5, estatus   /* Read early to avoid usage stall */
    8044:	000b307a 	rdctl	r5,estatus
        stw   r8,  36(sp)
    8048:	da000915 	stw	r8,36(sp)
        stw   r9,  40(sp)
    804c:	da400a15 	stw	r9,40(sp)
        stw   r10, 44(sp)
    8050:	da800b15 	stw	r10,44(sp)
        stw   r11, 48(sp)
    8054:	dac00c15 	stw	r11,48(sp)
        stw   r12, 52(sp)
    8058:	db000d15 	stw	r12,52(sp)
        stw   r13, 56(sp)
    805c:	db400e15 	stw	r13,56(sp)
        stw   r14, 60(sp)
    8060:	db800f15 	stw	r14,60(sp)
        stw   r15, 64(sp)
    8064:	dbc01015 	stw	r15,64(sp)
        /*
         * ea-4 contains the address of the instruction being executed
         * when the exception occured. For interrupt exceptions, we will
         * will be re-issue the isntruction. Store it in 72(sp)
         */
        stw   r5,  68(sp)  /* estatus */
    8068:	d9401115 	stw	r5,68(sp)
        addi  r15, ea, -4  /* instruction that caused exception */
    806c:	ebffff04 	addi	r15,ea,-4
        stw   r15,  72(sp)
    8070:	dbc01215 	stw	r15,72(sp)
#else
        /*
         * Test to see if the exception was a software exception or caused 
         * by an external interrupt, and vector accordingly.
         */
        rdctl r4, ipending
    8074:	0009313a 	rdctl	r4,ipending
        andi  r2, r5, 1
    8078:	2880004c 	andi	r2,r5,1
        beq   r2, zero, .Lnot_irq
    807c:	10000326 	beq	r2,zero,808c <alt_exception+0x6c>
        beq   r4, zero, .Lnot_irq
    8080:	20000226 	beq	r4,zero,808c <alt_exception+0x6c>
        /*
         * Now that all necessary registers have been preserved, call 
         * alt_irq_handler() to process the interrupts.
         */

        call alt_irq_handler
    8084:	00080fc0 	call	80fc <alt_irq_handler>

        .section .exceptions.irqreturn, "xa"

        br    .Lexception_exit
    8088:	00000706 	br	80a8 <alt_exception+0x88>
         * upon completion, so we write ea (address of instruction *after*
         * the one where the exception occured) into 72(sp). The actual
         * instruction that caused the exception is written in r2, which these
         * handlers will utilize.
         */
        stw ea, 72(sp) /* EA is PC+4 so will skip over instruction causing exception */
    808c:	df401215 	stw	ea,72(sp)
.Lunknown_16bit:
        addi.n r4, r4, 2 /* Need PC+2 to skip over instruction causing exception */
        stw r4, 72(sp)

#else /* CDX is not Enabled and all instructions are 32bits */
        ldw r2, -4(ea) /* Instruction value that caused exception */
    8090:	e8bfff17 	ldw	r2,-4(ea)
         * debugger is present) or go into an infinite loop since the
         * handling behavior is undefined; in that case we will not return here.
         */

        /* Load exception-causing address as first argument (r4) */
        addi   r4, ea, -4
    8094:	e93fff04 	addi	r4,ea,-4

        /* Call the instruction-exception entry */
        call   alt_instruction_exception_entry
    8098:	00081d00 	call	81d0 <alt_instruction_exception_entry>
         * instruction
         *
         * Return code was 0: Skip. The instruction after the exception is
         * already stored in 72(sp).
         */
        bne   r2, r0, .Lexception_exit
    809c:	1000021e 	bne	r2,zero,80a8 <alt_exception+0x88>

        /*
         * Otherwise, modify 72(sp) to re-issue the instruction that caused the
         * exception.
         */
        addi  r15, ea, -4  /* instruction that caused exception */
    80a0:	ebffff04 	addi	r15,ea,-4
        stw   r15,  72(sp)
    80a4:	dbc01215 	stw	r15,72(sp)
        /* 
         * Restore the saved registers, so that all general purpose registers 
         * have been restored to their state at the time the interrupt occured.
         */

        ldw   r5,  68(sp)
    80a8:	d9401117 	ldw	r5,68(sp)
        ldw   ea,  72(sp)  /* This becomes the PC once eret is executed */
    80ac:	df401217 	ldw	ea,72(sp)
        ldw   ra,   0(sp)
    80b0:	dfc00017 	ldw	ra,0(sp)

        wrctl estatus, r5
    80b4:	2801707a 	wrctl	estatus,r5

        ldw   r1,   8(sp)
    80b8:	d8400217 	ldw	at,8(sp)
        ldw   r2,  12(sp)
    80bc:	d8800317 	ldw	r2,12(sp)
        ldw   r3,  16(sp)
    80c0:	d8c00417 	ldw	r3,16(sp)
        ldw   r4,  20(sp)
    80c4:	d9000517 	ldw	r4,20(sp)
        ldw   r5,  24(sp)
    80c8:	d9400617 	ldw	r5,24(sp)
        ldw   r6,  28(sp)
    80cc:	d9800717 	ldw	r6,28(sp)
        ldw   r7,  32(sp)
    80d0:	d9c00817 	ldw	r7,32(sp)

#if defined(ALT_EXCEPTION_STACK) && defined(ALT_STACK_CHECK)
        ldw   et, %gprel(alt_exception_old_stack_limit)(gp)
#endif

        ldw   r8,  36(sp)
    80d4:	da000917 	ldw	r8,36(sp)
        ldw   r9,  40(sp)
    80d8:	da400a17 	ldw	r9,40(sp)
        ldw   r10, 44(sp)
    80dc:	da800b17 	ldw	r10,44(sp)
        ldw   r11, 48(sp)
    80e0:	dac00c17 	ldw	r11,48(sp)
        ldw   r12, 52(sp)
    80e4:	db000d17 	ldw	r12,52(sp)
        ldw   r13, 56(sp)
    80e8:	db400e17 	ldw	r13,56(sp)
        ldw   r14, 60(sp)
    80ec:	db800f17 	ldw	r14,60(sp)
        ldw   r15, 64(sp)
    80f0:	dbc01017 	ldw	r15,64(sp)
        stw   et, %gprel(alt_stack_limit_value)(gp)
        stw   zero, %gprel(alt_exception_old_stack_limit)(gp)
#endif /* ALT_STACK_CHECK */
        ldw   sp,  76(sp)
#else /* ALT_EXCEPTION_STACK disabled */
        addi  sp, sp, 76
    80f4:	dec01304 	addi	sp,sp,76

        /*
         * Return to the interrupted instruction.
         */

        eret
    80f8:	ef80083a 	eret

000080fc <alt_irq_handler>:
 * instruction is present if the macro ALT_CI_INTERRUPT_VECTOR defined.
 */

void alt_irq_handler (void) __attribute__ ((section (".exceptions")));
void alt_irq_handler (void)
{
    80fc:	defff904 	addi	sp,sp,-28
    8100:	dfc00615 	stw	ra,24(sp)
    8104:	df000515 	stw	fp,20(sp)
    8108:	df000504 	addi	fp,sp,20
  
  /*
   * Notify the operating system that we are at interrupt level.
   */ 
  
  ALT_OS_INT_ENTER();
    810c:	0001883a 	nop
#ifndef NIOS2_EIC_PRESENT
static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_irq_pending (void)
{
  alt_u32 active;

  NIOS2_READ_IPENDING (active);
    8110:	0005313a 	rdctl	r2,ipending
    8114:	e0bffe15 	stw	r2,-8(fp)

  return active;
    8118:	e0bffe17 	ldw	r2,-8(fp)
   * Consider the case where the high priority interupt is asserted during
   * the interrupt entry sequence for a lower priority interrupt to see why
   * this is the case.
   */

  active = alt_irq_pending ();
    811c:	e0bffb15 	stw	r2,-20(fp)

  do
  {
    i = 0;
    8120:	e03ffd15 	stw	zero,-12(fp)
    mask = 1;
    8124:	00800044 	movi	r2,1
    8128:	e0bffc15 	stw	r2,-16(fp)
     * called to clear the interrupt condition.
     */

    do
    {
      if (active & mask)
    812c:	e0fffb17 	ldw	r3,-20(fp)
    8130:	e0bffc17 	ldw	r2,-16(fp)
    8134:	1884703a 	and	r2,r3,r2
    8138:	10001426 	beq	r2,zero,818c <alt_irq_handler+0x90>
      { 
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
        alt_irq[i].handler(alt_irq[i].context); 
    813c:	00800074 	movhi	r2,1
    8140:	10b50a04 	addi	r2,r2,-11224
    8144:	e0fffd17 	ldw	r3,-12(fp)
    8148:	180690fa 	slli	r3,r3,3
    814c:	10c5883a 	add	r2,r2,r3
    8150:	10c00017 	ldw	r3,0(r2)
    8154:	00800074 	movhi	r2,1
    8158:	10b50a04 	addi	r2,r2,-11224
    815c:	e13ffd17 	ldw	r4,-12(fp)
    8160:	200890fa 	slli	r4,r4,3
    8164:	1105883a 	add	r2,r2,r4
    8168:	10800104 	addi	r2,r2,4
    816c:	10800017 	ldw	r2,0(r2)
    8170:	1009883a 	mov	r4,r2
    8174:	183ee83a 	callr	r3
#else
        alt_irq[i].handler(alt_irq[i].context, i); 
#endif
        break;
    8178:	0001883a 	nop
#ifndef NIOS2_EIC_PRESENT
static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_irq_pending (void)
{
  alt_u32 active;

  NIOS2_READ_IPENDING (active);
    817c:	0005313a 	rdctl	r2,ipending
    8180:	e0bfff15 	stw	r2,-4(fp)

  return active;
    8184:	e0bfff17 	ldw	r2,-4(fp)
    8188:	00000706 	br	81a8 <alt_irq_handler+0xac>
      }
      mask <<= 1;
    818c:	e0bffc17 	ldw	r2,-16(fp)
    8190:	1085883a 	add	r2,r2,r2
    8194:	e0bffc15 	stw	r2,-16(fp)
      i++;
    8198:	e0bffd17 	ldw	r2,-12(fp)
    819c:	10800044 	addi	r2,r2,1
    81a0:	e0bffd15 	stw	r2,-12(fp)

    } while (1);
    81a4:	003fe106 	br	812c <_gp+0xffff3088>

    active = alt_irq_pending ();
    81a8:	e0bffb15 	stw	r2,-20(fp)
    
  } while (active);
    81ac:	e0bffb17 	ldw	r2,-20(fp)
    81b0:	103fdb1e 	bne	r2,zero,8120 <_gp+0xffff307c>

  /*
   * Notify the operating system that interrupt processing is complete.
   */ 

  ALT_OS_INT_EXIT();
    81b4:	0001883a 	nop
}
    81b8:	0001883a 	nop
    81bc:	e037883a 	mov	sp,fp
    81c0:	dfc00117 	ldw	ra,4(sp)
    81c4:	df000017 	ldw	fp,0(sp)
    81c8:	dec00204 	addi	sp,sp,8
    81cc:	f800283a 	ret

000081d0 <alt_instruction_exception_entry>:
 * that handler if it has been registered. Absent a handler, it will
 * break break or hang as discussed below.
 */
int 
alt_instruction_exception_entry (alt_u32 exception_pc)
{
    81d0:	defffb04 	addi	sp,sp,-20
    81d4:	dfc00415 	stw	ra,16(sp)
    81d8:	df000315 	stw	fp,12(sp)
    81dc:	df000304 	addi	fp,sp,12
    81e0:	e13fff15 	stw	r4,-4(fp)
  cause = ( (cause & NIOS2_EXCEPTION_REG_CAUSE_MASK) >>
              NIOS2_EXCEPTION_REG_CAUSE_OFST );

  NIOS2_READ_BADADDR(badaddr);
#else
  cause = NIOS2_EXCEPTION_CAUSE_NOT_PRESENT;
    81e4:	00bfffc4 	movi	r2,-1
    81e8:	e0bffd15 	stw	r2,-12(fp)
  badaddr = 0;
    81ec:	e03ffe15 	stw	zero,-8(fp)
#endif /* NIOS2_HAS_EXTRA_EXCEPTION_INFO */

  if(alt_instruction_exception_handler) {
    81f0:	d0a0df17 	ldw	r2,-31876(gp)
    81f4:	10000726 	beq	r2,zero,8214 <alt_instruction_exception_entry+0x44>
     * Call handler. Its return value indicates whether the exception-causing
     * instruction should be re-issued. The code that called us,
     * alt_eceptions_entry.S, will look at this value and adjust the ea
     * register as necessary
     */
    return alt_instruction_exception_handler(cause, exception_pc, badaddr);
    81f8:	d0a0df17 	ldw	r2,-31876(gp)
    81fc:	e0fffd17 	ldw	r3,-12(fp)
    8200:	e1bffe17 	ldw	r6,-8(fp)
    8204:	e17fff17 	ldw	r5,-4(fp)
    8208:	1809883a 	mov	r4,r3
    820c:	103ee83a 	callr	r2
    8210:	00000206 	br	821c <alt_instruction_exception_entry+0x4c>
   *    (a peripheral which negates its interrupt output before its
   *    interrupt handler has been executed will cause spurious interrupts)
   */
  else {
#ifdef NIOS2_HAS_DEBUG_STUB
    NIOS2_BREAK();
    8214:	003da03a 	break	0
      ;
#endif /* NIOS2_HAS_DEBUG_STUB */
  }

  /* We should not get here. Remove compiler warning. */
  return NIOS2_EXCEPTION_RETURN_REISSUE_INST;
    8218:	0005883a 	mov	r2,zero
}
    821c:	e037883a 	mov	sp,fp
    8220:	dfc00117 	ldw	ra,4(sp)
    8224:	df000017 	ldw	fp,0(sp)
    8228:	dec00204 	addi	sp,sp,8
    822c:	f800283a 	ret

Disassembly of section .text:

00008230 <_start>:

    /*
     * Now that the caches are initialized, set up the stack pointer and global pointer.
     * The values provided by the linker are assumed to be correctly aligned.
     */
    movhi sp, %hi(__alt_stack_pointer)
    8230:	06c00074 	movhi	sp,1
    ori sp, sp, %lo(__alt_stack_pointer)
    8234:	dec00014 	ori	sp,sp,0
    movhi gp, %hi(_gp)
    8238:	06800074 	movhi	gp,1
    ori gp, gp, %lo(_gp)
    823c:	d6942914 	ori	gp,gp,20644
 */
#ifndef ALT_SIM_OPTIMIZE
    /* Log that the BSS is about to be cleared. */
    ALT_LOG_PUTS(alt_log_msg_bss)

    movhi r2, %hi(__bss_start)
    8240:	00800034 	movhi	r2,0
    ori r2, r2, %lo(__bss_start)
    8244:	10b50314 	ori	r2,r2,54284

    movhi r3, %hi(__bss_end)
    8248:	00c00034 	movhi	r3,0
    ori r3, r3, %lo(__bss_end)
    824c:	18f54a14 	ori	r3,r3,54568

    beq r2, r3, 1f
    8250:	10c00326 	beq	r2,r3,8260 <_start+0x30>

0:
    stw zero, (r2)
    8254:	10000015 	stw	zero,0(r2)
    addi r2, r2, 4
    8258:	10800104 	addi	r2,r2,4
    bltu r2, r3, 0b
    825c:	10fffd36 	bltu	r2,r3,8254 <_gp+0xffff31b0>
     * section aren't defined until alt_load() has been called).
     */
    mov   et, zero
#endif

    call alt_load
    8260:	000bce00 	call	bce0 <alt_load>

    /* Log that alt_main is about to be called. */
    ALT_LOG_PUTS(alt_log_msg_alt_main)

    /* Call the C entry point. It should never return. */
    call alt_main
    8264:	000bd640 	call	bd64 <alt_main>

00008268 <alt_after_alt_main>:

    /* Wait in infinite loop in case alt_main does return. */
alt_after_alt_main:
    br alt_after_alt_main
    8268:	003fff06 	br	8268 <_gp+0xffff31c4>

0000826c <counts2deg>:
uint32 max_angle = MAX_ANGLE;	// in counts
bool max_angle_flag = true;


int counts2deg(uint32 counts)
{
    826c:	defffc04 	addi	sp,sp,-16
    8270:	dfc00315 	stw	ra,12(sp)
    8274:	df000215 	stw	fp,8(sp)
    8278:	df000204 	addi	fp,sp,8
    827c:	e13fff15 	stw	r4,-4(fp)

	// multiply by 0.02 (20ns clock)
	// divide by USEC_PER_DEG (11.11us per degree)
	// round result
	// subtract 45 degrees (starting at an angle of 45)
	int degrees = round((counts * 0.02) / USEC_PER_DEG) - 45;
    8280:	e13fff17 	ldw	r4,-4(fp)
    8284:	000aeb00 	call	aeb0 <__floatunsidf>
    8288:	1011883a 	mov	r8,r2
    828c:	1813883a 	mov	r9,r3
    8290:	0191ebb4 	movhi	r6,18350
    8294:	31851ec4 	addi	r6,r6,5243
    8298:	01cfe534 	movhi	r7,16276
    829c:	39deb844 	addi	r7,r7,31457
    82a0:	4009883a 	mov	r4,r8
    82a4:	480b883a 	mov	r5,r9
    82a8:	0009bec0 	call	9bec <__muldf3>
    82ac:	1009883a 	mov	r4,r2
    82b0:	180b883a 	mov	r5,r3
    82b4:	2005883a 	mov	r2,r4
    82b8:	2807883a 	mov	r3,r5
    82bc:	01bae174 	movhi	r6,60293
    82c0:	3187ae04 	addi	r6,r6,7864
    82c4:	01d009b4 	movhi	r7,16422
    82c8:	39ce1444 	addi	r7,r7,14417
    82cc:	1009883a 	mov	r4,r2
    82d0:	180b883a 	mov	r5,r3
    82d4:	00091400 	call	9140 <__divdf3>
    82d8:	1009883a 	mov	r4,r2
    82dc:	180b883a 	mov	r5,r3
    82e0:	2005883a 	mov	r2,r4
    82e4:	2807883a 	mov	r3,r5
    82e8:	1009883a 	mov	r4,r2
    82ec:	180b883a 	mov	r5,r3
    82f0:	00087200 	call	8720 <round>
    82f4:	1011883a 	mov	r8,r2
    82f8:	1813883a 	mov	r9,r3
    82fc:	000d883a 	mov	r6,zero
    8300:	01d011f4 	movhi	r7,16455
    8304:	39e00004 	addi	r7,r7,-32768
    8308:	4009883a 	mov	r4,r8
    830c:	480b883a 	mov	r5,r9
    8310:	000a4580 	call	a458 <__subdf3>
    8314:	1009883a 	mov	r4,r2
    8318:	180b883a 	mov	r5,r3
    831c:	2005883a 	mov	r2,r4
    8320:	2807883a 	mov	r3,r5
    8324:	1009883a 	mov	r4,r2
    8328:	180b883a 	mov	r5,r3
    832c:	000ad540 	call	ad54 <__fixdfsi>
    8330:	e0bffe15 	stw	r2,-8(fp)

	return degrees;
    8334:	e0bffe17 	ldw	r2,-8(fp)
}
    8338:	e037883a 	mov	sp,fp
    833c:	dfc00117 	ldw	ra,4(sp)
    8340:	df000017 	ldw	fp,0(sp)
    8344:	dec00204 	addi	sp,sp,8
    8348:	f800283a 	ret

0000834c <deg2counts>:

uint32 deg2counts(int degrees)
{
    834c:	defffc04 	addi	sp,sp,-16
    8350:	dfc00315 	stw	ra,12(sp)
    8354:	df000215 	stw	fp,8(sp)
    8358:	df000204 	addi	fp,sp,8
    835c:	e13fff15 	stw	r4,-4(fp)

	// add 45 degrees (starting at an angle of 45)
	// multiply by USEC_PER_DEG (11.11us per degree)
	// round result
	// divide by 0.02 (20ns clock)
	uint32 counts = round((degrees + 45) * USEC_PER_DEG) / 0.02;
    8360:	e0bfff17 	ldw	r2,-4(fp)
    8364:	10800b44 	addi	r2,r2,45
    8368:	1009883a 	mov	r4,r2
    836c:	000add40 	call	add4 <__floatsidf>
    8370:	1011883a 	mov	r8,r2
    8374:	1813883a 	mov	r9,r3
    8378:	01bae174 	movhi	r6,60293
    837c:	3187ae04 	addi	r6,r6,7864
    8380:	01d009b4 	movhi	r7,16422
    8384:	39ce1444 	addi	r7,r7,14417
    8388:	4009883a 	mov	r4,r8
    838c:	480b883a 	mov	r5,r9
    8390:	0009bec0 	call	9bec <__muldf3>
    8394:	1009883a 	mov	r4,r2
    8398:	180b883a 	mov	r5,r3
    839c:	2005883a 	mov	r2,r4
    83a0:	2807883a 	mov	r3,r5
    83a4:	1009883a 	mov	r4,r2
    83a8:	180b883a 	mov	r5,r3
    83ac:	00087200 	call	8720 <round>
    83b0:	1011883a 	mov	r8,r2
    83b4:	1813883a 	mov	r9,r3
    83b8:	0191ebb4 	movhi	r6,18350
    83bc:	31851ec4 	addi	r6,r6,5243
    83c0:	01cfe534 	movhi	r7,16276
    83c4:	39deb844 	addi	r7,r7,31457
    83c8:	4009883a 	mov	r4,r8
    83cc:	480b883a 	mov	r5,r9
    83d0:	00091400 	call	9140 <__divdf3>
    83d4:	1009883a 	mov	r4,r2
    83d8:	180b883a 	mov	r5,r3
    83dc:	2005883a 	mov	r2,r4
    83e0:	2807883a 	mov	r3,r5
    83e4:	1009883a 	mov	r4,r2
    83e8:	180b883a 	mov	r5,r3
    83ec:	00088200 	call	8820 <__fixunsdfsi>
    83f0:	e0bffe15 	stw	r2,-8(fp)

	return counts;
    83f4:	e0bffe17 	ldw	r2,-8(fp)
}
    83f8:	e037883a 	mov	sp,fp
    83fc:	dfc00117 	ldw	ra,4(sp)
    8400:	df000017 	ldw	fp,0(sp)
    8404:	dec00204 	addi	sp,sp,8
    8408:	f800283a 	ret

0000840c <pb_isr>:


void pb_isr(void *context)
{
    840c:	defffd04 	addi	sp,sp,-12
    8410:	dfc00215 	stw	ra,8(sp)
    8414:	df000115 	stw	fp,4(sp)
    8418:	df000104 	addi	fp,sp,4
    841c:	e13fff15 	stw	r4,-4(fp)
	// read edge capture register
	pb_val = *(PB_Ptr + 3);
    8420:	d0a00017 	ldw	r2,-32768(gp)
    8424:	10800304 	addi	r2,r2,12
    8428:	10800017 	ldw	r2,0(r2)
    842c:	d0a0da05 	stb	r2,-31896(gp)

	// clear interrupt
	*(PB_Ptr + 3) = 0;
    8430:	d0a00017 	ldw	r2,-32768(gp)
    8434:	10800304 	addi	r2,r2,12
    8438:	10000015 	stw	zero,0(r2)

	// if KEY3 pressed
	if (pb_val == 0x08)
    843c:	d0a0da03 	ldbu	r2,-31896(gp)
    8440:	10803fcc 	andi	r2,r2,255
    8444:	10800218 	cmpnei	r2,r2,8
    8448:	1000071e 	bne	r2,zero,8468 <pb_isr+0x5c>
	{
		// read new minimum angle value from switches and indicate display update
		min_angle = deg2counts((int)*SW_Ptr);
    844c:	d0a00117 	ldw	r2,-32764(gp)
    8450:	10800017 	ldw	r2,0(r2)
    8454:	1009883a 	mov	r4,r2
    8458:	000834c0 	call	834c <deg2counts>
    845c:	d0a00915 	stw	r2,-32732(gp)
		min_angle_flag = true;
    8460:	00800044 	movi	r2,1
    8464:	d0a0da45 	stb	r2,-31895(gp)
	}

	// if KEY2 pressed
	if (pb_val == 0x04)
    8468:	d0a0da03 	ldbu	r2,-31896(gp)
    846c:	10803fcc 	andi	r2,r2,255
    8470:	10800118 	cmpnei	r2,r2,4
    8474:	1000071e 	bne	r2,zero,8494 <pb_isr+0x88>
	{
		// read new maximum angle value from switches and indicate display update
		max_angle = deg2counts((int)*SW_Ptr);
    8478:	d0a00117 	ldw	r2,-32764(gp)
    847c:	10800017 	ldw	r2,0(r2)
    8480:	1009883a 	mov	r4,r2
    8484:	000834c0 	call	834c <deg2counts>
    8488:	d0a00a15 	stw	r2,-32728(gp)
		max_angle_flag = true;
    848c:	00800044 	movi	r2,1
    8490:	d0a00b05 	stb	r2,-32724(gp)
	}

}
    8494:	0001883a 	nop
    8498:	e037883a 	mov	sp,fp
    849c:	dfc00117 	ldw	ra,4(sp)
    84a0:	df000017 	ldw	fp,0(sp)
    84a4:	dec00204 	addi	sp,sp,8
    84a8:	f800283a 	ret

000084ac <servo_isr>:

void servo_isr(void *context)
{
    84ac:	defffe04 	addi	sp,sp,-8
    84b0:	df000115 	stw	fp,4(sp)
    84b4:	df000104 	addi	fp,sp,4
    84b8:	e13fff15 	stw	r4,-4(fp)
	// write angles to servo controller registers
	*(Servo_Ptr + 0) = min_angle;
    84bc:	d0a00217 	ldw	r2,-32760(gp)
    84c0:	d0e00917 	ldw	r3,-32732(gp)
    84c4:	10c00015 	stw	r3,0(r2)
	*(Servo_Ptr + 1) = max_angle;
    84c8:	d0a00217 	ldw	r2,-32760(gp)
    84cc:	10800104 	addi	r2,r2,4
    84d0:	d0e00a17 	ldw	r3,-32728(gp)
    84d4:	10c00015 	stw	r3,0(r2)
}
    84d8:	0001883a 	nop
    84dc:	e037883a 	mov	sp,fp
    84e0:	df000017 	ldw	fp,0(sp)
    84e4:	dec00104 	addi	sp,sp,4
    84e8:	f800283a 	ret

000084ec <main>:

int main(void)
{
    84ec:	defffb04 	addi	sp,sp,-20
    84f0:	dfc00415 	stw	ra,16(sp)
    84f4:	df000315 	stw	fp,12(sp)
    84f8:	df000304 	addi	fp,sp,12
	// min and max string buffers for digit splitting
	char min_buff[3], max_buff[4];

	// enable PB interrupts on KEY2 and KEY3 and assign interrupt handler function
	*(PB_Ptr + 2) = 0x0000000C;
    84fc:	d0a00017 	ldw	r2,-32768(gp)
    8500:	10800204 	addi	r2,r2,8
    8504:	00c00304 	movi	r3,12
    8508:	10c00015 	stw	r3,0(r2)
	alt_ic_isr_register(PUSHBUTTONS_IRQ_INTERRUPT_CONTROLLER_ID,PUSHBUTTONS_IRQ,pb_isr,0,0);
    850c:	d8000015 	stw	zero,0(sp)
    8510:	000f883a 	mov	r7,zero
    8514:	01800074 	movhi	r6,1
    8518:	31a10304 	addi	r6,r6,-31732
    851c:	01400044 	movi	r5,1
    8520:	0009883a 	mov	r4,zero
    8524:	000b9d80 	call	b9d8 <alt_ic_isr_register>

	// enable servo controller interrupts
	alt_ic_isr_register(SERVO_CONTROLLER_0_IRQ_INTERRUPT_CONTROLLER_ID,
    8528:	d8000015 	stw	zero,0(sp)
    852c:	000f883a 	mov	r7,zero
    8530:	01800074 	movhi	r6,1
    8534:	31a12b04 	addi	r6,r6,-31572
    8538:	017fffc4 	movi	r5,-1
    853c:	013fffc4 	movi	r4,-1
    8540:	000b9d80 	call	b9d8 <alt_ic_isr_register>
						SERVO_CONTROLLER_0_IRQ,servo_isr,0,0);

	// initial write of default min and max values to servo controller angle registers and display
	*(Servo_Ptr + 0) = MIN_ANGLE;
    8544:	d0a00217 	ldw	r2,-32760(gp)
    8548:	00f0d414 	movui	r3,50000
    854c:	10c00015 	stw	r3,0(r2)
	*(Servo_Ptr + 1) = MAX_ANGLE;
    8550:	d0a00217 	ldw	r2,-32760(gp)
    8554:	10c00104 	addi	r3,r2,4
    8558:	008000b4 	movhi	r2,2
    855c:	10a1a804 	addi	r2,r2,-31072
    8560:	18800015 	stw	r2,0(r3)
	min_angle_flag = true;
    8564:	00800044 	movi	r2,1
    8568:	d0a0da45 	stb	r2,-31895(gp)
	max_angle_flag = true;
    856c:	00800044 	movi	r2,1
    8570:	d0a00b05 	stb	r2,-32724(gp)

	// reset displays
	*HEX0_Ptr = ZERO;
    8574:	d0a00317 	ldw	r2,-32756(gp)
    8578:	00c03004 	movi	r3,192
    857c:	10c00015 	stw	r3,0(r2)
	*HEX1_Ptr = ZERO;
    8580:	d0a00417 	ldw	r2,-32752(gp)
    8584:	00c03004 	movi	r3,192
    8588:	10c00015 	stw	r3,0(r2)
	*HEX2_Ptr = ZERO;
    858c:	d0a00517 	ldw	r2,-32748(gp)
    8590:	00c03004 	movi	r3,192
    8594:	10c00015 	stw	r3,0(r2)
	*HEX3_Ptr = DASH;
    8598:	d0a00617 	ldw	r2,-32744(gp)
    859c:	00c00fc4 	movi	r3,63
    85a0:	10c00015 	stw	r3,0(r2)
	*HEX4_Ptr = ZERO;
    85a4:	d0a00717 	ldw	r2,-32740(gp)
    85a8:	00c03004 	movi	r3,192
    85ac:	10c00015 	stw	r3,0(r2)
	*HEX5_Ptr = ZERO;
    85b0:	d0a00817 	ldw	r2,-32736(gp)
    85b4:	00c03004 	movi	r3,192
    85b8:	10c00015 	stw	r3,0(r2)

	while(1)
	{
		// if minimum angle has changed
		if (min_angle_flag)
    85bc:	d0a0da43 	ldbu	r2,-31895(gp)
    85c0:	10803fcc 	andi	r2,r2,255
    85c4:	10002226 	beq	r2,zero,8650 <main+0x164>
		{
			min_angle_flag = false;
    85c8:	d020da45 	stb	zero,-31895(gp)

			// write to display
			snprintf(min_buff, 3, "%d", counts2deg(min_angle));	// send to buffer string
    85cc:	d0a00917 	ldw	r2,-32732(gp)
    85d0:	1009883a 	mov	r4,r2
    85d4:	000826c0 	call	826c <counts2deg>
    85d8:	100f883a 	mov	r7,r2
    85dc:	01800074 	movhi	r6,1
    85e0:	31b32b04 	addi	r6,r6,-13140
    85e4:	014000c4 	movi	r5,3
    85e8:	e13ffe04 	addi	r4,fp,-8
    85ec:	000b2480 	call	b248 <snprintf>
			*HEX5_Ptr = dispNums[(int)(min_buff[0] - '0')];		// display 10s digit on HEX5
    85f0:	d0e00817 	ldw	r3,-32736(gp)
    85f4:	e0bffe03 	ldbu	r2,-8(fp)
    85f8:	10803fcc 	andi	r2,r2,255
    85fc:	1080201c 	xori	r2,r2,128
    8600:	10bfe004 	addi	r2,r2,-128
    8604:	113ff404 	addi	r4,r2,-48
    8608:	00800074 	movhi	r2,1
    860c:	10b37904 	addi	r2,r2,-12828
    8610:	1105883a 	add	r2,r2,r4
    8614:	10800003 	ldbu	r2,0(r2)
    8618:	10803fcc 	andi	r2,r2,255
    861c:	18800015 	stw	r2,0(r3)
			*HEX4_Ptr = dispNums[(int)(min_buff[1] - '0')];		// display 1s digit on HEX4
    8620:	d0e00717 	ldw	r3,-32740(gp)
    8624:	e0bffe43 	ldbu	r2,-7(fp)
    8628:	10803fcc 	andi	r2,r2,255
    862c:	1080201c 	xori	r2,r2,128
    8630:	10bfe004 	addi	r2,r2,-128
    8634:	113ff404 	addi	r4,r2,-48
    8638:	00800074 	movhi	r2,1
    863c:	10b37904 	addi	r2,r2,-12828
    8640:	1105883a 	add	r2,r2,r4
    8644:	10800003 	ldbu	r2,0(r2)
    8648:	10803fcc 	andi	r2,r2,255
    864c:	18800015 	stw	r2,0(r3)
		}

		// if maximum angle has changed
		if (max_angle_flag)
    8650:	d0a00b03 	ldbu	r2,-32724(gp)
    8654:	10803fcc 	andi	r2,r2,255
    8658:	103fd826 	beq	r2,zero,85bc <_gp+0xffff3518>
		{
			max_angle_flag = false;
    865c:	d0200b05 	stb	zero,-32724(gp)

			// write to display
			snprintf(max_buff, 4, "%d", counts2deg(max_angle));	// convert max_angle to a char array
    8660:	d0a00a17 	ldw	r2,-32728(gp)
    8664:	1009883a 	mov	r4,r2
    8668:	000826c0 	call	826c <counts2deg>
    866c:	1007883a 	mov	r3,r2
    8670:	e0bffec4 	addi	r2,fp,-5
    8674:	180f883a 	mov	r7,r3
    8678:	01800074 	movhi	r6,1
    867c:	31b32b04 	addi	r6,r6,-13140
    8680:	01400104 	movi	r5,4
    8684:	1009883a 	mov	r4,r2
    8688:	000b2480 	call	b248 <snprintf>
			*HEX2_Ptr = dispNums[(int)(max_buff[0] - '0')];		// display 100s digit on HEX2
    868c:	d0e00517 	ldw	r3,-32748(gp)
    8690:	e0bffec3 	ldbu	r2,-5(fp)
    8694:	10803fcc 	andi	r2,r2,255
    8698:	1080201c 	xori	r2,r2,128
    869c:	10bfe004 	addi	r2,r2,-128
    86a0:	113ff404 	addi	r4,r2,-48
    86a4:	00800074 	movhi	r2,1
    86a8:	10b37904 	addi	r2,r2,-12828
    86ac:	1105883a 	add	r2,r2,r4
    86b0:	10800003 	ldbu	r2,0(r2)
    86b4:	10803fcc 	andi	r2,r2,255
    86b8:	18800015 	stw	r2,0(r3)
			*HEX1_Ptr = dispNums[(int)(max_buff[1] - '0')];		// display 10s digit on HEX1
    86bc:	d0e00417 	ldw	r3,-32752(gp)
    86c0:	e0bfff03 	ldbu	r2,-4(fp)
    86c4:	10803fcc 	andi	r2,r2,255
    86c8:	1080201c 	xori	r2,r2,128
    86cc:	10bfe004 	addi	r2,r2,-128
    86d0:	113ff404 	addi	r4,r2,-48
    86d4:	00800074 	movhi	r2,1
    86d8:	10b37904 	addi	r2,r2,-12828
    86dc:	1105883a 	add	r2,r2,r4
    86e0:	10800003 	ldbu	r2,0(r2)
    86e4:	10803fcc 	andi	r2,r2,255
    86e8:	18800015 	stw	r2,0(r3)
			*HEX0_Ptr = dispNums[(int)(max_buff[2] - '0')];		// display 1s digit on HEX0
    86ec:	d0e00317 	ldw	r3,-32756(gp)
    86f0:	e0bfff43 	ldbu	r2,-3(fp)
    86f4:	10803fcc 	andi	r2,r2,255
    86f8:	1080201c 	xori	r2,r2,128
    86fc:	10bfe004 	addi	r2,r2,-128
    8700:	113ff404 	addi	r4,r2,-48
    8704:	00800074 	movhi	r2,1
    8708:	10b37904 	addi	r2,r2,-12828
    870c:	1105883a 	add	r2,r2,r4
    8710:	10800003 	ldbu	r2,0(r2)
    8714:	10803fcc 	andi	r2,r2,255
    8718:	18800015 	stw	r2,0(r3)
		}
	}
    871c:	003fa706 	br	85bc <_gp+0xffff3518>

00008720 <round>:
    8720:	289ffc2c 	andhi	r2,r5,32752
    8724:	1005d53a 	srai	r2,r2,20
    8728:	024004c4 	movi	r9,19
    872c:	2807883a 	mov	r3,r5
    8730:	123f0044 	addi	r8,r2,-1023
    8734:	200d883a 	mov	r6,r4
    8738:	280f883a 	mov	r7,r5
    873c:	4a000916 	blt	r9,r8,8764 <round+0x44>
    8740:	40002516 	blt	r8,zero,87d8 <round+0xb8>
    8744:	00800434 	movhi	r2,16
    8748:	10bfffc4 	addi	r2,r2,-1
    874c:	1205d83a 	sra	r2,r2,r8
    8750:	2888703a 	and	r4,r5,r2
    8754:	2000181e 	bne	r4,zero,87b8 <round+0x98>
    8758:	3000171e 	bne	r6,zero,87b8 <round+0x98>
    875c:	0005883a 	mov	r2,zero
    8760:	f800283a 	ret
    8764:	02400cc4 	movi	r9,51
    8768:	4a00040e 	bge	r9,r8,877c <round+0x5c>
    876c:	00810004 	movi	r2,1024
    8770:	40802126 	beq	r8,r2,87f8 <round+0xd8>
    8774:	3005883a 	mov	r2,r6
    8778:	f800283a 	ret
    877c:	013fffc4 	movi	r4,-1
    8780:	10befb44 	addi	r2,r2,-1043
    8784:	2084d83a 	srl	r2,r4,r2
    8788:	3088703a 	and	r4,r6,r2
    878c:	20001726 	beq	r4,zero,87ec <round+0xcc>
    8790:	4a11c83a 	sub	r8,r9,r8
    8794:	02400044 	movi	r9,1
    8798:	4a10983a 	sll	r8,r9,r8
    879c:	4191883a 	add	r8,r8,r6
    87a0:	4180012e 	bgeu	r8,r6,87a8 <round+0x88>
    87a4:	2a47883a 	add	r3,r5,r9
    87a8:	0084303a 	nor	r2,zero,r2
    87ac:	120c703a 	and	r6,r2,r8
    87b0:	3005883a 	mov	r2,r6
    87b4:	f800283a 	ret
    87b8:	00c00234 	movhi	r3,8
    87bc:	1a07d83a 	sra	r3,r3,r8
    87c0:	0084303a 	nor	r2,zero,r2
    87c4:	000d883a 	mov	r6,zero
    87c8:	19c7883a 	add	r3,r3,r7
    87cc:	1886703a 	and	r3,r3,r2
    87d0:	3005883a 	mov	r2,r6
    87d4:	f800283a 	ret
    87d8:	00bfffc4 	movi	r2,-1
    87dc:	28e0002c 	andhi	r3,r5,32768
    87e0:	40800c26 	beq	r8,r2,8814 <round+0xf4>
    87e4:	000d883a 	mov	r6,zero
    87e8:	003fe206 	br	8774 <_gp+0xffff36d0>
    87ec:	3005883a 	mov	r2,r6
    87f0:	2807883a 	mov	r3,r5
    87f4:	f800283a 	ret
    87f8:	deffff04 	addi	sp,sp,-4
    87fc:	280f883a 	mov	r7,r5
    8800:	dfc00015 	stw	ra,0(sp)
    8804:	00088940 	call	8894 <__adddf3>
    8808:	dfc00017 	ldw	ra,0(sp)
    880c:	dec00104 	addi	sp,sp,4
    8810:	f800283a 	ret
    8814:	18cffc34 	orhi	r3,r3,16368
    8818:	000d883a 	mov	r6,zero
    881c:	003fd506 	br	8774 <_gp+0xffff36d0>

00008820 <__fixunsdfsi>:
    8820:	defffd04 	addi	sp,sp,-12
    8824:	000d883a 	mov	r6,zero
    8828:	01d07834 	movhi	r7,16864
    882c:	dc400115 	stw	r17,4(sp)
    8830:	dc000015 	stw	r16,0(sp)
    8834:	dfc00215 	stw	ra,8(sp)
    8838:	2023883a 	mov	r17,r4
    883c:	2821883a 	mov	r16,r5
    8840:	0009b100 	call	9b10 <__gedf2>
    8844:	1000080e 	bge	r2,zero,8868 <__fixunsdfsi+0x48>
    8848:	8809883a 	mov	r4,r17
    884c:	800b883a 	mov	r5,r16
    8850:	000ad540 	call	ad54 <__fixdfsi>
    8854:	dfc00217 	ldw	ra,8(sp)
    8858:	dc400117 	ldw	r17,4(sp)
    885c:	dc000017 	ldw	r16,0(sp)
    8860:	dec00304 	addi	sp,sp,12
    8864:	f800283a 	ret
    8868:	000d883a 	mov	r6,zero
    886c:	01d07834 	movhi	r7,16864
    8870:	8809883a 	mov	r4,r17
    8874:	800b883a 	mov	r5,r16
    8878:	000a4580 	call	a458 <__subdf3>
    887c:	180b883a 	mov	r5,r3
    8880:	1009883a 	mov	r4,r2
    8884:	000ad540 	call	ad54 <__fixdfsi>
    8888:	00e00034 	movhi	r3,32768
    888c:	10c5883a 	add	r2,r2,r3
    8890:	003ff006 	br	8854 <_gp+0xffff37b0>

00008894 <__adddf3>:
    8894:	02c00434 	movhi	r11,16
    8898:	5affffc4 	addi	r11,r11,-1
    889c:	2806d7fa 	srli	r3,r5,31
    88a0:	2ad4703a 	and	r10,r5,r11
    88a4:	3ad2703a 	and	r9,r7,r11
    88a8:	3804d53a 	srli	r2,r7,20
    88ac:	3018d77a 	srli	r12,r6,29
    88b0:	280ad53a 	srli	r5,r5,20
    88b4:	501490fa 	slli	r10,r10,3
    88b8:	2010d77a 	srli	r8,r4,29
    88bc:	481290fa 	slli	r9,r9,3
    88c0:	380ed7fa 	srli	r7,r7,31
    88c4:	defffb04 	addi	sp,sp,-20
    88c8:	dc800215 	stw	r18,8(sp)
    88cc:	dc400115 	stw	r17,4(sp)
    88d0:	dc000015 	stw	r16,0(sp)
    88d4:	dfc00415 	stw	ra,16(sp)
    88d8:	dcc00315 	stw	r19,12(sp)
    88dc:	1c803fcc 	andi	r18,r3,255
    88e0:	2c01ffcc 	andi	r16,r5,2047
    88e4:	5210b03a 	or	r8,r10,r8
    88e8:	202290fa 	slli	r17,r4,3
    88ec:	1081ffcc 	andi	r2,r2,2047
    88f0:	4b12b03a 	or	r9,r9,r12
    88f4:	300c90fa 	slli	r6,r6,3
    88f8:	91c07526 	beq	r18,r7,8ad0 <__adddf3+0x23c>
    88fc:	8087c83a 	sub	r3,r16,r2
    8900:	00c0ab0e 	bge	zero,r3,8bb0 <__adddf3+0x31c>
    8904:	10002a1e 	bne	r2,zero,89b0 <__adddf3+0x11c>
    8908:	4984b03a 	or	r2,r9,r6
    890c:	1000961e 	bne	r2,zero,8b68 <__adddf3+0x2d4>
    8910:	888001cc 	andi	r2,r17,7
    8914:	10000726 	beq	r2,zero,8934 <__adddf3+0xa0>
    8918:	888003cc 	andi	r2,r17,15
    891c:	00c00104 	movi	r3,4
    8920:	10c00426 	beq	r2,r3,8934 <__adddf3+0xa0>
    8924:	88c7883a 	add	r3,r17,r3
    8928:	1c63803a 	cmpltu	r17,r3,r17
    892c:	4451883a 	add	r8,r8,r17
    8930:	1823883a 	mov	r17,r3
    8934:	4080202c 	andhi	r2,r8,128
    8938:	10005926 	beq	r2,zero,8aa0 <__adddf3+0x20c>
    893c:	84000044 	addi	r16,r16,1
    8940:	0081ffc4 	movi	r2,2047
    8944:	8080ba26 	beq	r16,r2,8c30 <__adddf3+0x39c>
    8948:	00bfe034 	movhi	r2,65408
    894c:	10bfffc4 	addi	r2,r2,-1
    8950:	4090703a 	and	r8,r8,r2
    8954:	4004977a 	slli	r2,r8,29
    8958:	4010927a 	slli	r8,r8,9
    895c:	8822d0fa 	srli	r17,r17,3
    8960:	8401ffcc 	andi	r16,r16,2047
    8964:	4010d33a 	srli	r8,r8,12
    8968:	9007883a 	mov	r3,r18
    896c:	1444b03a 	or	r2,r2,r17
    8970:	8401ffcc 	andi	r16,r16,2047
    8974:	8020953a 	slli	r16,r16,20
    8978:	18c03fcc 	andi	r3,r3,255
    897c:	01000434 	movhi	r4,16
    8980:	213fffc4 	addi	r4,r4,-1
    8984:	180697fa 	slli	r3,r3,31
    8988:	4110703a 	and	r8,r8,r4
    898c:	4410b03a 	or	r8,r8,r16
    8990:	40c6b03a 	or	r3,r8,r3
    8994:	dfc00417 	ldw	ra,16(sp)
    8998:	dcc00317 	ldw	r19,12(sp)
    899c:	dc800217 	ldw	r18,8(sp)
    89a0:	dc400117 	ldw	r17,4(sp)
    89a4:	dc000017 	ldw	r16,0(sp)
    89a8:	dec00504 	addi	sp,sp,20
    89ac:	f800283a 	ret
    89b0:	0081ffc4 	movi	r2,2047
    89b4:	80bfd626 	beq	r16,r2,8910 <_gp+0xffff386c>
    89b8:	4a402034 	orhi	r9,r9,128
    89bc:	00800e04 	movi	r2,56
    89c0:	10c09f16 	blt	r2,r3,8c40 <__adddf3+0x3ac>
    89c4:	008007c4 	movi	r2,31
    89c8:	10c0c216 	blt	r2,r3,8cd4 <__adddf3+0x440>
    89cc:	00800804 	movi	r2,32
    89d0:	10c5c83a 	sub	r2,r2,r3
    89d4:	488a983a 	sll	r5,r9,r2
    89d8:	30c8d83a 	srl	r4,r6,r3
    89dc:	3084983a 	sll	r2,r6,r2
    89e0:	48c6d83a 	srl	r3,r9,r3
    89e4:	290cb03a 	or	r6,r5,r4
    89e8:	1004c03a 	cmpne	r2,r2,zero
    89ec:	308cb03a 	or	r6,r6,r2
    89f0:	898dc83a 	sub	r6,r17,r6
    89f4:	89a3803a 	cmpltu	r17,r17,r6
    89f8:	40d1c83a 	sub	r8,r8,r3
    89fc:	4451c83a 	sub	r8,r8,r17
    8a00:	3023883a 	mov	r17,r6
    8a04:	4080202c 	andhi	r2,r8,128
    8a08:	10002326 	beq	r2,zero,8a98 <__adddf3+0x204>
    8a0c:	04c02034 	movhi	r19,128
    8a10:	9cffffc4 	addi	r19,r19,-1
    8a14:	44e6703a 	and	r19,r8,r19
    8a18:	98007626 	beq	r19,zero,8bf4 <__adddf3+0x360>
    8a1c:	9809883a 	mov	r4,r19
    8a20:	000af580 	call	af58 <__clzsi2>
    8a24:	10fffe04 	addi	r3,r2,-8
    8a28:	010007c4 	movi	r4,31
    8a2c:	20c07716 	blt	r4,r3,8c0c <__adddf3+0x378>
    8a30:	00800804 	movi	r2,32
    8a34:	10c5c83a 	sub	r2,r2,r3
    8a38:	8884d83a 	srl	r2,r17,r2
    8a3c:	98d0983a 	sll	r8,r19,r3
    8a40:	88e2983a 	sll	r17,r17,r3
    8a44:	1204b03a 	or	r2,r2,r8
    8a48:	1c007416 	blt	r3,r16,8c1c <__adddf3+0x388>
    8a4c:	1c21c83a 	sub	r16,r3,r16
    8a50:	82000044 	addi	r8,r16,1
    8a54:	00c007c4 	movi	r3,31
    8a58:	1a009116 	blt	r3,r8,8ca0 <__adddf3+0x40c>
    8a5c:	00c00804 	movi	r3,32
    8a60:	1a07c83a 	sub	r3,r3,r8
    8a64:	8a08d83a 	srl	r4,r17,r8
    8a68:	88e2983a 	sll	r17,r17,r3
    8a6c:	10c6983a 	sll	r3,r2,r3
    8a70:	1210d83a 	srl	r8,r2,r8
    8a74:	8804c03a 	cmpne	r2,r17,zero
    8a78:	1906b03a 	or	r3,r3,r4
    8a7c:	18a2b03a 	or	r17,r3,r2
    8a80:	0021883a 	mov	r16,zero
    8a84:	003fa206 	br	8910 <_gp+0xffff386c>
    8a88:	1890b03a 	or	r8,r3,r2
    8a8c:	40017d26 	beq	r8,zero,9084 <__adddf3+0x7f0>
    8a90:	1011883a 	mov	r8,r2
    8a94:	1823883a 	mov	r17,r3
    8a98:	888001cc 	andi	r2,r17,7
    8a9c:	103f9e1e 	bne	r2,zero,8918 <_gp+0xffff3874>
    8aa0:	4004977a 	slli	r2,r8,29
    8aa4:	8822d0fa 	srli	r17,r17,3
    8aa8:	4010d0fa 	srli	r8,r8,3
    8aac:	9007883a 	mov	r3,r18
    8ab0:	1444b03a 	or	r2,r2,r17
    8ab4:	0101ffc4 	movi	r4,2047
    8ab8:	81002426 	beq	r16,r4,8b4c <__adddf3+0x2b8>
    8abc:	8120703a 	and	r16,r16,r4
    8ac0:	01000434 	movhi	r4,16
    8ac4:	213fffc4 	addi	r4,r4,-1
    8ac8:	4110703a 	and	r8,r8,r4
    8acc:	003fa806 	br	8970 <_gp+0xffff38cc>
    8ad0:	8089c83a 	sub	r4,r16,r2
    8ad4:	01005e0e 	bge	zero,r4,8c50 <__adddf3+0x3bc>
    8ad8:	10002b26 	beq	r2,zero,8b88 <__adddf3+0x2f4>
    8adc:	0081ffc4 	movi	r2,2047
    8ae0:	80bf8b26 	beq	r16,r2,8910 <_gp+0xffff386c>
    8ae4:	4a402034 	orhi	r9,r9,128
    8ae8:	00800e04 	movi	r2,56
    8aec:	1100a40e 	bge	r2,r4,8d80 <__adddf3+0x4ec>
    8af0:	498cb03a 	or	r6,r9,r6
    8af4:	300ac03a 	cmpne	r5,r6,zero
    8af8:	0013883a 	mov	r9,zero
    8afc:	2c4b883a 	add	r5,r5,r17
    8b00:	2c63803a 	cmpltu	r17,r5,r17
    8b04:	4a11883a 	add	r8,r9,r8
    8b08:	8a11883a 	add	r8,r17,r8
    8b0c:	2823883a 	mov	r17,r5
    8b10:	4080202c 	andhi	r2,r8,128
    8b14:	103fe026 	beq	r2,zero,8a98 <_gp+0xffff39f4>
    8b18:	84000044 	addi	r16,r16,1
    8b1c:	0081ffc4 	movi	r2,2047
    8b20:	8080d226 	beq	r16,r2,8e6c <__adddf3+0x5d8>
    8b24:	00bfe034 	movhi	r2,65408
    8b28:	10bfffc4 	addi	r2,r2,-1
    8b2c:	4090703a 	and	r8,r8,r2
    8b30:	880ad07a 	srli	r5,r17,1
    8b34:	400897fa 	slli	r4,r8,31
    8b38:	88c0004c 	andi	r3,r17,1
    8b3c:	28e2b03a 	or	r17,r5,r3
    8b40:	4010d07a 	srli	r8,r8,1
    8b44:	2462b03a 	or	r17,r4,r17
    8b48:	003f7106 	br	8910 <_gp+0xffff386c>
    8b4c:	4088b03a 	or	r4,r8,r2
    8b50:	20014526 	beq	r4,zero,9068 <__adddf3+0x7d4>
    8b54:	01000434 	movhi	r4,16
    8b58:	42000234 	orhi	r8,r8,8
    8b5c:	213fffc4 	addi	r4,r4,-1
    8b60:	4110703a 	and	r8,r8,r4
    8b64:	003f8206 	br	8970 <_gp+0xffff38cc>
    8b68:	18ffffc4 	addi	r3,r3,-1
    8b6c:	1800491e 	bne	r3,zero,8c94 <__adddf3+0x400>
    8b70:	898bc83a 	sub	r5,r17,r6
    8b74:	8963803a 	cmpltu	r17,r17,r5
    8b78:	4251c83a 	sub	r8,r8,r9
    8b7c:	4451c83a 	sub	r8,r8,r17
    8b80:	2823883a 	mov	r17,r5
    8b84:	003f9f06 	br	8a04 <_gp+0xffff3960>
    8b88:	4984b03a 	or	r2,r9,r6
    8b8c:	103f6026 	beq	r2,zero,8910 <_gp+0xffff386c>
    8b90:	213fffc4 	addi	r4,r4,-1
    8b94:	2000931e 	bne	r4,zero,8de4 <__adddf3+0x550>
    8b98:	898d883a 	add	r6,r17,r6
    8b9c:	3463803a 	cmpltu	r17,r6,r17
    8ba0:	4251883a 	add	r8,r8,r9
    8ba4:	8a11883a 	add	r8,r17,r8
    8ba8:	3023883a 	mov	r17,r6
    8bac:	003fd806 	br	8b10 <_gp+0xffff3a6c>
    8bb0:	1800541e 	bne	r3,zero,8d04 <__adddf3+0x470>
    8bb4:	80800044 	addi	r2,r16,1
    8bb8:	1081ffcc 	andi	r2,r2,2047
    8bbc:	00c00044 	movi	r3,1
    8bc0:	1880a00e 	bge	r3,r2,8e44 <__adddf3+0x5b0>
    8bc4:	8989c83a 	sub	r4,r17,r6
    8bc8:	8905803a 	cmpltu	r2,r17,r4
    8bcc:	4267c83a 	sub	r19,r8,r9
    8bd0:	98a7c83a 	sub	r19,r19,r2
    8bd4:	9880202c 	andhi	r2,r19,128
    8bd8:	10006326 	beq	r2,zero,8d68 <__adddf3+0x4d4>
    8bdc:	3463c83a 	sub	r17,r6,r17
    8be0:	4a07c83a 	sub	r3,r9,r8
    8be4:	344d803a 	cmpltu	r6,r6,r17
    8be8:	19a7c83a 	sub	r19,r3,r6
    8bec:	3825883a 	mov	r18,r7
    8bf0:	983f8a1e 	bne	r19,zero,8a1c <_gp+0xffff3978>
    8bf4:	8809883a 	mov	r4,r17
    8bf8:	000af580 	call	af58 <__clzsi2>
    8bfc:	10800804 	addi	r2,r2,32
    8c00:	10fffe04 	addi	r3,r2,-8
    8c04:	010007c4 	movi	r4,31
    8c08:	20ff890e 	bge	r4,r3,8a30 <_gp+0xffff398c>
    8c0c:	10bff604 	addi	r2,r2,-40
    8c10:	8884983a 	sll	r2,r17,r2
    8c14:	0023883a 	mov	r17,zero
    8c18:	1c3f8c0e 	bge	r3,r16,8a4c <_gp+0xffff39a8>
    8c1c:	023fe034 	movhi	r8,65408
    8c20:	423fffc4 	addi	r8,r8,-1
    8c24:	80e1c83a 	sub	r16,r16,r3
    8c28:	1210703a 	and	r8,r2,r8
    8c2c:	003f3806 	br	8910 <_gp+0xffff386c>
    8c30:	9007883a 	mov	r3,r18
    8c34:	0011883a 	mov	r8,zero
    8c38:	0005883a 	mov	r2,zero
    8c3c:	003f4c06 	br	8970 <_gp+0xffff38cc>
    8c40:	498cb03a 	or	r6,r9,r6
    8c44:	300cc03a 	cmpne	r6,r6,zero
    8c48:	0007883a 	mov	r3,zero
    8c4c:	003f6806 	br	89f0 <_gp+0xffff394c>
    8c50:	20009c1e 	bne	r4,zero,8ec4 <__adddf3+0x630>
    8c54:	80800044 	addi	r2,r16,1
    8c58:	1141ffcc 	andi	r5,r2,2047
    8c5c:	01000044 	movi	r4,1
    8c60:	2140670e 	bge	r4,r5,8e00 <__adddf3+0x56c>
    8c64:	0101ffc4 	movi	r4,2047
    8c68:	11007f26 	beq	r2,r4,8e68 <__adddf3+0x5d4>
    8c6c:	898d883a 	add	r6,r17,r6
    8c70:	4247883a 	add	r3,r8,r9
    8c74:	3451803a 	cmpltu	r8,r6,r17
    8c78:	40d1883a 	add	r8,r8,r3
    8c7c:	402297fa 	slli	r17,r8,31
    8c80:	300cd07a 	srli	r6,r6,1
    8c84:	4010d07a 	srli	r8,r8,1
    8c88:	1021883a 	mov	r16,r2
    8c8c:	89a2b03a 	or	r17,r17,r6
    8c90:	003f1f06 	br	8910 <_gp+0xffff386c>
    8c94:	0081ffc4 	movi	r2,2047
    8c98:	80bf481e 	bne	r16,r2,89bc <_gp+0xffff3918>
    8c9c:	003f1c06 	br	8910 <_gp+0xffff386c>
    8ca0:	843ff844 	addi	r16,r16,-31
    8ca4:	01000804 	movi	r4,32
    8ca8:	1406d83a 	srl	r3,r2,r16
    8cac:	41005026 	beq	r8,r4,8df0 <__adddf3+0x55c>
    8cb0:	01001004 	movi	r4,64
    8cb4:	2211c83a 	sub	r8,r4,r8
    8cb8:	1204983a 	sll	r2,r2,r8
    8cbc:	88a2b03a 	or	r17,r17,r2
    8cc0:	8822c03a 	cmpne	r17,r17,zero
    8cc4:	1c62b03a 	or	r17,r3,r17
    8cc8:	0011883a 	mov	r8,zero
    8ccc:	0021883a 	mov	r16,zero
    8cd0:	003f7106 	br	8a98 <_gp+0xffff39f4>
    8cd4:	193ff804 	addi	r4,r3,-32
    8cd8:	00800804 	movi	r2,32
    8cdc:	4908d83a 	srl	r4,r9,r4
    8ce0:	18804526 	beq	r3,r2,8df8 <__adddf3+0x564>
    8ce4:	00801004 	movi	r2,64
    8ce8:	10c5c83a 	sub	r2,r2,r3
    8cec:	4886983a 	sll	r3,r9,r2
    8cf0:	198cb03a 	or	r6,r3,r6
    8cf4:	300cc03a 	cmpne	r6,r6,zero
    8cf8:	218cb03a 	or	r6,r4,r6
    8cfc:	0007883a 	mov	r3,zero
    8d00:	003f3b06 	br	89f0 <_gp+0xffff394c>
    8d04:	80002a26 	beq	r16,zero,8db0 <__adddf3+0x51c>
    8d08:	0101ffc4 	movi	r4,2047
    8d0c:	11006826 	beq	r2,r4,8eb0 <__adddf3+0x61c>
    8d10:	00c7c83a 	sub	r3,zero,r3
    8d14:	42002034 	orhi	r8,r8,128
    8d18:	01000e04 	movi	r4,56
    8d1c:	20c07c16 	blt	r4,r3,8f10 <__adddf3+0x67c>
    8d20:	010007c4 	movi	r4,31
    8d24:	20c0da16 	blt	r4,r3,9090 <__adddf3+0x7fc>
    8d28:	01000804 	movi	r4,32
    8d2c:	20c9c83a 	sub	r4,r4,r3
    8d30:	4114983a 	sll	r10,r8,r4
    8d34:	88cad83a 	srl	r5,r17,r3
    8d38:	8908983a 	sll	r4,r17,r4
    8d3c:	40c6d83a 	srl	r3,r8,r3
    8d40:	5162b03a 	or	r17,r10,r5
    8d44:	2008c03a 	cmpne	r4,r4,zero
    8d48:	8922b03a 	or	r17,r17,r4
    8d4c:	3463c83a 	sub	r17,r6,r17
    8d50:	48c7c83a 	sub	r3,r9,r3
    8d54:	344d803a 	cmpltu	r6,r6,r17
    8d58:	1991c83a 	sub	r8,r3,r6
    8d5c:	1021883a 	mov	r16,r2
    8d60:	3825883a 	mov	r18,r7
    8d64:	003f2706 	br	8a04 <_gp+0xffff3960>
    8d68:	24d0b03a 	or	r8,r4,r19
    8d6c:	40001b1e 	bne	r8,zero,8ddc <__adddf3+0x548>
    8d70:	0005883a 	mov	r2,zero
    8d74:	0007883a 	mov	r3,zero
    8d78:	0021883a 	mov	r16,zero
    8d7c:	003f4d06 	br	8ab4 <_gp+0xffff3a10>
    8d80:	008007c4 	movi	r2,31
    8d84:	11003c16 	blt	r2,r4,8e78 <__adddf3+0x5e4>
    8d88:	00800804 	movi	r2,32
    8d8c:	1105c83a 	sub	r2,r2,r4
    8d90:	488e983a 	sll	r7,r9,r2
    8d94:	310ad83a 	srl	r5,r6,r4
    8d98:	3084983a 	sll	r2,r6,r2
    8d9c:	4912d83a 	srl	r9,r9,r4
    8da0:	394ab03a 	or	r5,r7,r5
    8da4:	1004c03a 	cmpne	r2,r2,zero
    8da8:	288ab03a 	or	r5,r5,r2
    8dac:	003f5306 	br	8afc <_gp+0xffff3a58>
    8db0:	4448b03a 	or	r4,r8,r17
    8db4:	20003e26 	beq	r4,zero,8eb0 <__adddf3+0x61c>
    8db8:	00c6303a 	nor	r3,zero,r3
    8dbc:	18003a1e 	bne	r3,zero,8ea8 <__adddf3+0x614>
    8dc0:	3463c83a 	sub	r17,r6,r17
    8dc4:	4a07c83a 	sub	r3,r9,r8
    8dc8:	344d803a 	cmpltu	r6,r6,r17
    8dcc:	1991c83a 	sub	r8,r3,r6
    8dd0:	1021883a 	mov	r16,r2
    8dd4:	3825883a 	mov	r18,r7
    8dd8:	003f0a06 	br	8a04 <_gp+0xffff3960>
    8ddc:	2023883a 	mov	r17,r4
    8de0:	003f0d06 	br	8a18 <_gp+0xffff3974>
    8de4:	0081ffc4 	movi	r2,2047
    8de8:	80bf3f1e 	bne	r16,r2,8ae8 <_gp+0xffff3a44>
    8dec:	003ec806 	br	8910 <_gp+0xffff386c>
    8df0:	0005883a 	mov	r2,zero
    8df4:	003fb106 	br	8cbc <_gp+0xffff3c18>
    8df8:	0007883a 	mov	r3,zero
    8dfc:	003fbc06 	br	8cf0 <_gp+0xffff3c4c>
    8e00:	4444b03a 	or	r2,r8,r17
    8e04:	8000871e 	bne	r16,zero,9024 <__adddf3+0x790>
    8e08:	1000ba26 	beq	r2,zero,90f4 <__adddf3+0x860>
    8e0c:	4984b03a 	or	r2,r9,r6
    8e10:	103ebf26 	beq	r2,zero,8910 <_gp+0xffff386c>
    8e14:	8985883a 	add	r2,r17,r6
    8e18:	4247883a 	add	r3,r8,r9
    8e1c:	1451803a 	cmpltu	r8,r2,r17
    8e20:	40d1883a 	add	r8,r8,r3
    8e24:	40c0202c 	andhi	r3,r8,128
    8e28:	1023883a 	mov	r17,r2
    8e2c:	183f1a26 	beq	r3,zero,8a98 <_gp+0xffff39f4>
    8e30:	00bfe034 	movhi	r2,65408
    8e34:	10bfffc4 	addi	r2,r2,-1
    8e38:	2021883a 	mov	r16,r4
    8e3c:	4090703a 	and	r8,r8,r2
    8e40:	003eb306 	br	8910 <_gp+0xffff386c>
    8e44:	4444b03a 	or	r2,r8,r17
    8e48:	8000291e 	bne	r16,zero,8ef0 <__adddf3+0x65c>
    8e4c:	10004b1e 	bne	r2,zero,8f7c <__adddf3+0x6e8>
    8e50:	4990b03a 	or	r8,r9,r6
    8e54:	40008b26 	beq	r8,zero,9084 <__adddf3+0x7f0>
    8e58:	4811883a 	mov	r8,r9
    8e5c:	3023883a 	mov	r17,r6
    8e60:	3825883a 	mov	r18,r7
    8e64:	003eaa06 	br	8910 <_gp+0xffff386c>
    8e68:	1021883a 	mov	r16,r2
    8e6c:	0011883a 	mov	r8,zero
    8e70:	0005883a 	mov	r2,zero
    8e74:	003f0f06 	br	8ab4 <_gp+0xffff3a10>
    8e78:	217ff804 	addi	r5,r4,-32
    8e7c:	00800804 	movi	r2,32
    8e80:	494ad83a 	srl	r5,r9,r5
    8e84:	20807d26 	beq	r4,r2,907c <__adddf3+0x7e8>
    8e88:	00801004 	movi	r2,64
    8e8c:	1109c83a 	sub	r4,r2,r4
    8e90:	4912983a 	sll	r9,r9,r4
    8e94:	498cb03a 	or	r6,r9,r6
    8e98:	300cc03a 	cmpne	r6,r6,zero
    8e9c:	298ab03a 	or	r5,r5,r6
    8ea0:	0013883a 	mov	r9,zero
    8ea4:	003f1506 	br	8afc <_gp+0xffff3a58>
    8ea8:	0101ffc4 	movi	r4,2047
    8eac:	113f9a1e 	bne	r2,r4,8d18 <_gp+0xffff3c74>
    8eb0:	4811883a 	mov	r8,r9
    8eb4:	3023883a 	mov	r17,r6
    8eb8:	1021883a 	mov	r16,r2
    8ebc:	3825883a 	mov	r18,r7
    8ec0:	003e9306 	br	8910 <_gp+0xffff386c>
    8ec4:	8000161e 	bne	r16,zero,8f20 <__adddf3+0x68c>
    8ec8:	444ab03a 	or	r5,r8,r17
    8ecc:	28005126 	beq	r5,zero,9014 <__adddf3+0x780>
    8ed0:	0108303a 	nor	r4,zero,r4
    8ed4:	20004d1e 	bne	r4,zero,900c <__adddf3+0x778>
    8ed8:	89a3883a 	add	r17,r17,r6
    8edc:	4253883a 	add	r9,r8,r9
    8ee0:	898d803a 	cmpltu	r6,r17,r6
    8ee4:	3251883a 	add	r8,r6,r9
    8ee8:	1021883a 	mov	r16,r2
    8eec:	003f0806 	br	8b10 <_gp+0xffff3a6c>
    8ef0:	1000301e 	bne	r2,zero,8fb4 <__adddf3+0x720>
    8ef4:	4984b03a 	or	r2,r9,r6
    8ef8:	10007126 	beq	r2,zero,90c0 <__adddf3+0x82c>
    8efc:	4811883a 	mov	r8,r9
    8f00:	3023883a 	mov	r17,r6
    8f04:	3825883a 	mov	r18,r7
    8f08:	0401ffc4 	movi	r16,2047
    8f0c:	003e8006 	br	8910 <_gp+0xffff386c>
    8f10:	4462b03a 	or	r17,r8,r17
    8f14:	8822c03a 	cmpne	r17,r17,zero
    8f18:	0007883a 	mov	r3,zero
    8f1c:	003f8b06 	br	8d4c <_gp+0xffff3ca8>
    8f20:	0141ffc4 	movi	r5,2047
    8f24:	11403b26 	beq	r2,r5,9014 <__adddf3+0x780>
    8f28:	0109c83a 	sub	r4,zero,r4
    8f2c:	42002034 	orhi	r8,r8,128
    8f30:	01400e04 	movi	r5,56
    8f34:	29006716 	blt	r5,r4,90d4 <__adddf3+0x840>
    8f38:	014007c4 	movi	r5,31
    8f3c:	29007016 	blt	r5,r4,9100 <__adddf3+0x86c>
    8f40:	01400804 	movi	r5,32
    8f44:	290bc83a 	sub	r5,r5,r4
    8f48:	4154983a 	sll	r10,r8,r5
    8f4c:	890ed83a 	srl	r7,r17,r4
    8f50:	894a983a 	sll	r5,r17,r5
    8f54:	4108d83a 	srl	r4,r8,r4
    8f58:	51e2b03a 	or	r17,r10,r7
    8f5c:	280ac03a 	cmpne	r5,r5,zero
    8f60:	8962b03a 	or	r17,r17,r5
    8f64:	89a3883a 	add	r17,r17,r6
    8f68:	2253883a 	add	r9,r4,r9
    8f6c:	898d803a 	cmpltu	r6,r17,r6
    8f70:	3251883a 	add	r8,r6,r9
    8f74:	1021883a 	mov	r16,r2
    8f78:	003ee506 	br	8b10 <_gp+0xffff3a6c>
    8f7c:	4984b03a 	or	r2,r9,r6
    8f80:	103e6326 	beq	r2,zero,8910 <_gp+0xffff386c>
    8f84:	8987c83a 	sub	r3,r17,r6
    8f88:	88c9803a 	cmpltu	r4,r17,r3
    8f8c:	4245c83a 	sub	r2,r8,r9
    8f90:	1105c83a 	sub	r2,r2,r4
    8f94:	1100202c 	andhi	r4,r2,128
    8f98:	203ebb26 	beq	r4,zero,8a88 <_gp+0xffff39e4>
    8f9c:	3463c83a 	sub	r17,r6,r17
    8fa0:	4a07c83a 	sub	r3,r9,r8
    8fa4:	344d803a 	cmpltu	r6,r6,r17
    8fa8:	1991c83a 	sub	r8,r3,r6
    8fac:	3825883a 	mov	r18,r7
    8fb0:	003e5706 	br	8910 <_gp+0xffff386c>
    8fb4:	4984b03a 	or	r2,r9,r6
    8fb8:	10002e26 	beq	r2,zero,9074 <__adddf3+0x7e0>
    8fbc:	4004d0fa 	srli	r2,r8,3
    8fc0:	8822d0fa 	srli	r17,r17,3
    8fc4:	4010977a 	slli	r8,r8,29
    8fc8:	10c0022c 	andhi	r3,r2,8
    8fcc:	4462b03a 	or	r17,r8,r17
    8fd0:	18000826 	beq	r3,zero,8ff4 <__adddf3+0x760>
    8fd4:	4808d0fa 	srli	r4,r9,3
    8fd8:	20c0022c 	andhi	r3,r4,8
    8fdc:	1800051e 	bne	r3,zero,8ff4 <__adddf3+0x760>
    8fe0:	300cd0fa 	srli	r6,r6,3
    8fe4:	4806977a 	slli	r3,r9,29
    8fe8:	2005883a 	mov	r2,r4
    8fec:	3825883a 	mov	r18,r7
    8ff0:	19a2b03a 	or	r17,r3,r6
    8ff4:	8810d77a 	srli	r8,r17,29
    8ff8:	100490fa 	slli	r2,r2,3
    8ffc:	882290fa 	slli	r17,r17,3
    9000:	0401ffc4 	movi	r16,2047
    9004:	4090b03a 	or	r8,r8,r2
    9008:	003e4106 	br	8910 <_gp+0xffff386c>
    900c:	0141ffc4 	movi	r5,2047
    9010:	117fc71e 	bne	r2,r5,8f30 <_gp+0xffff3e8c>
    9014:	4811883a 	mov	r8,r9
    9018:	3023883a 	mov	r17,r6
    901c:	1021883a 	mov	r16,r2
    9020:	003e3b06 	br	8910 <_gp+0xffff386c>
    9024:	10002f26 	beq	r2,zero,90e4 <__adddf3+0x850>
    9028:	4984b03a 	or	r2,r9,r6
    902c:	10001126 	beq	r2,zero,9074 <__adddf3+0x7e0>
    9030:	4004d0fa 	srli	r2,r8,3
    9034:	8822d0fa 	srli	r17,r17,3
    9038:	4010977a 	slli	r8,r8,29
    903c:	10c0022c 	andhi	r3,r2,8
    9040:	4462b03a 	or	r17,r8,r17
    9044:	183feb26 	beq	r3,zero,8ff4 <_gp+0xffff3f50>
    9048:	4808d0fa 	srli	r4,r9,3
    904c:	20c0022c 	andhi	r3,r4,8
    9050:	183fe81e 	bne	r3,zero,8ff4 <_gp+0xffff3f50>
    9054:	300cd0fa 	srli	r6,r6,3
    9058:	4806977a 	slli	r3,r9,29
    905c:	2005883a 	mov	r2,r4
    9060:	19a2b03a 	or	r17,r3,r6
    9064:	003fe306 	br	8ff4 <_gp+0xffff3f50>
    9068:	0011883a 	mov	r8,zero
    906c:	0005883a 	mov	r2,zero
    9070:	003e3f06 	br	8970 <_gp+0xffff38cc>
    9074:	0401ffc4 	movi	r16,2047
    9078:	003e2506 	br	8910 <_gp+0xffff386c>
    907c:	0013883a 	mov	r9,zero
    9080:	003f8406 	br	8e94 <_gp+0xffff3df0>
    9084:	0005883a 	mov	r2,zero
    9088:	0007883a 	mov	r3,zero
    908c:	003e8906 	br	8ab4 <_gp+0xffff3a10>
    9090:	197ff804 	addi	r5,r3,-32
    9094:	01000804 	movi	r4,32
    9098:	414ad83a 	srl	r5,r8,r5
    909c:	19002426 	beq	r3,r4,9130 <__adddf3+0x89c>
    90a0:	01001004 	movi	r4,64
    90a4:	20c7c83a 	sub	r3,r4,r3
    90a8:	40c6983a 	sll	r3,r8,r3
    90ac:	1c46b03a 	or	r3,r3,r17
    90b0:	1806c03a 	cmpne	r3,r3,zero
    90b4:	28e2b03a 	or	r17,r5,r3
    90b8:	0007883a 	mov	r3,zero
    90bc:	003f2306 	br	8d4c <_gp+0xffff3ca8>
    90c0:	0007883a 	mov	r3,zero
    90c4:	5811883a 	mov	r8,r11
    90c8:	00bfffc4 	movi	r2,-1
    90cc:	0401ffc4 	movi	r16,2047
    90d0:	003e7806 	br	8ab4 <_gp+0xffff3a10>
    90d4:	4462b03a 	or	r17,r8,r17
    90d8:	8822c03a 	cmpne	r17,r17,zero
    90dc:	0009883a 	mov	r4,zero
    90e0:	003fa006 	br	8f64 <_gp+0xffff3ec0>
    90e4:	4811883a 	mov	r8,r9
    90e8:	3023883a 	mov	r17,r6
    90ec:	0401ffc4 	movi	r16,2047
    90f0:	003e0706 	br	8910 <_gp+0xffff386c>
    90f4:	4811883a 	mov	r8,r9
    90f8:	3023883a 	mov	r17,r6
    90fc:	003e0406 	br	8910 <_gp+0xffff386c>
    9100:	21fff804 	addi	r7,r4,-32
    9104:	01400804 	movi	r5,32
    9108:	41ced83a 	srl	r7,r8,r7
    910c:	21400a26 	beq	r4,r5,9138 <__adddf3+0x8a4>
    9110:	01401004 	movi	r5,64
    9114:	2909c83a 	sub	r4,r5,r4
    9118:	4108983a 	sll	r4,r8,r4
    911c:	2448b03a 	or	r4,r4,r17
    9120:	2008c03a 	cmpne	r4,r4,zero
    9124:	3922b03a 	or	r17,r7,r4
    9128:	0009883a 	mov	r4,zero
    912c:	003f8d06 	br	8f64 <_gp+0xffff3ec0>
    9130:	0007883a 	mov	r3,zero
    9134:	003fdd06 	br	90ac <_gp+0xffff4008>
    9138:	0009883a 	mov	r4,zero
    913c:	003ff706 	br	911c <_gp+0xffff4078>

00009140 <__divdf3>:
    9140:	defff004 	addi	sp,sp,-64
    9144:	dc800815 	stw	r18,32(sp)
    9148:	2824d53a 	srli	r18,r5,20
    914c:	dd800c15 	stw	r22,48(sp)
    9150:	282cd7fa 	srli	r22,r5,31
    9154:	dc000615 	stw	r16,24(sp)
    9158:	04000434 	movhi	r16,16
    915c:	843fffc4 	addi	r16,r16,-1
    9160:	dfc00f15 	stw	ra,60(sp)
    9164:	df000e15 	stw	fp,56(sp)
    9168:	ddc00d15 	stw	r23,52(sp)
    916c:	dd400b15 	stw	r21,44(sp)
    9170:	dd000a15 	stw	r20,40(sp)
    9174:	dcc00915 	stw	r19,36(sp)
    9178:	dc400715 	stw	r17,28(sp)
    917c:	9481ffcc 	andi	r18,r18,2047
    9180:	2c20703a 	and	r16,r5,r16
    9184:	b2003fcc 	andi	r8,r22,255
    9188:	90006126 	beq	r18,zero,9310 <__divdf3+0x1d0>
    918c:	0081ffc4 	movi	r2,2047
    9190:	202b883a 	mov	r21,r4
    9194:	90803726 	beq	r18,r2,9274 <__divdf3+0x134>
    9198:	80800434 	orhi	r2,r16,16
    919c:	100490fa 	slli	r2,r2,3
    91a0:	2020d77a 	srli	r16,r4,29
    91a4:	202a90fa 	slli	r21,r4,3
    91a8:	94bf0044 	addi	r18,r18,-1023
    91ac:	80a0b03a 	or	r16,r16,r2
    91b0:	0013883a 	mov	r9,zero
    91b4:	000b883a 	mov	r5,zero
    91b8:	3806d53a 	srli	r3,r7,20
    91bc:	382ed7fa 	srli	r23,r7,31
    91c0:	04400434 	movhi	r17,16
    91c4:	8c7fffc4 	addi	r17,r17,-1
    91c8:	18c1ffcc 	andi	r3,r3,2047
    91cc:	3029883a 	mov	r20,r6
    91d0:	3c62703a 	and	r17,r7,r17
    91d4:	bf003fcc 	andi	fp,r23,255
    91d8:	18006e26 	beq	r3,zero,9394 <__divdf3+0x254>
    91dc:	0081ffc4 	movi	r2,2047
    91e0:	18806626 	beq	r3,r2,937c <__divdf3+0x23c>
    91e4:	88800434 	orhi	r2,r17,16
    91e8:	100490fa 	slli	r2,r2,3
    91ec:	3022d77a 	srli	r17,r6,29
    91f0:	302890fa 	slli	r20,r6,3
    91f4:	18ff0044 	addi	r3,r3,-1023
    91f8:	88a2b03a 	or	r17,r17,r2
    91fc:	000f883a 	mov	r7,zero
    9200:	b5e6f03a 	xor	r19,r22,r23
    9204:	3a4cb03a 	or	r6,r7,r9
    9208:	008003c4 	movi	r2,15
    920c:	9809883a 	mov	r4,r19
    9210:	90c7c83a 	sub	r3,r18,r3
    9214:	9cc03fcc 	andi	r19,r19,255
    9218:	11809636 	bltu	r2,r6,9474 <__divdf3+0x334>
    921c:	300c90ba 	slli	r6,r6,2
    9220:	00800074 	movhi	r2,1
    9224:	10a48d04 	addi	r2,r2,-28108
    9228:	308d883a 	add	r6,r6,r2
    922c:	30800017 	ldw	r2,0(r6)
    9230:	1000683a 	jmp	r2
    9234:	00009474 	movhi	zero,593
    9238:	000092ac 	andhi	zero,zero,586
    923c:	00009464 	muli	zero,zero,593
    9240:	000092a0 	cmpeqi	zero,zero,586
    9244:	00009464 	muli	zero,zero,593
    9248:	00009438 	rdprs	zero,zero,592
    924c:	00009464 	muli	zero,zero,593
    9250:	000092a0 	cmpeqi	zero,zero,586
    9254:	000092ac 	andhi	zero,zero,586
    9258:	000092ac 	andhi	zero,zero,586
    925c:	00009438 	rdprs	zero,zero,592
    9260:	000092a0 	cmpeqi	zero,zero,586
    9264:	00009290 	cmplti	zero,zero,586
    9268:	00009290 	cmplti	zero,zero,586
    926c:	00009290 	cmplti	zero,zero,586
    9270:	000097fc 	xorhi	zero,zero,607
    9274:	2404b03a 	or	r2,r4,r16
    9278:	10006c1e 	bne	r2,zero,942c <__divdf3+0x2ec>
    927c:	02400204 	movi	r9,8
    9280:	0021883a 	mov	r16,zero
    9284:	002b883a 	mov	r21,zero
    9288:	01400084 	movi	r5,2
    928c:	003fca06 	br	91b8 <_gp+0xffff4114>
    9290:	8023883a 	mov	r17,r16
    9294:	a829883a 	mov	r20,r21
    9298:	4039883a 	mov	fp,r8
    929c:	280f883a 	mov	r7,r5
    92a0:	00800084 	movi	r2,2
    92a4:	3881601e 	bne	r7,r2,9828 <__divdf3+0x6e8>
    92a8:	e027883a 	mov	r19,fp
    92ac:	9900004c 	andi	r4,r19,1
    92b0:	0081ffc4 	movi	r2,2047
    92b4:	0021883a 	mov	r16,zero
    92b8:	002b883a 	mov	r21,zero
    92bc:	1004953a 	slli	r2,r2,20
    92c0:	20c03fcc 	andi	r3,r4,255
    92c4:	01400434 	movhi	r5,16
    92c8:	297fffc4 	addi	r5,r5,-1
    92cc:	180697fa 	slli	r3,r3,31
    92d0:	8160703a 	and	r16,r16,r5
    92d4:	80a0b03a 	or	r16,r16,r2
    92d8:	80c6b03a 	or	r3,r16,r3
    92dc:	a805883a 	mov	r2,r21
    92e0:	dfc00f17 	ldw	ra,60(sp)
    92e4:	df000e17 	ldw	fp,56(sp)
    92e8:	ddc00d17 	ldw	r23,52(sp)
    92ec:	dd800c17 	ldw	r22,48(sp)
    92f0:	dd400b17 	ldw	r21,44(sp)
    92f4:	dd000a17 	ldw	r20,40(sp)
    92f8:	dcc00917 	ldw	r19,36(sp)
    92fc:	dc800817 	ldw	r18,32(sp)
    9300:	dc400717 	ldw	r17,28(sp)
    9304:	dc000617 	ldw	r16,24(sp)
    9308:	dec01004 	addi	sp,sp,64
    930c:	f800283a 	ret
    9310:	2404b03a 	or	r2,r4,r16
    9314:	2023883a 	mov	r17,r4
    9318:	10003f26 	beq	r2,zero,9418 <__divdf3+0x2d8>
    931c:	80015e26 	beq	r16,zero,9898 <__divdf3+0x758>
    9320:	8009883a 	mov	r4,r16
    9324:	d9800215 	stw	r6,8(sp)
    9328:	d9c00515 	stw	r7,20(sp)
    932c:	da000415 	stw	r8,16(sp)
    9330:	000af580 	call	af58 <__clzsi2>
    9334:	d9800217 	ldw	r6,8(sp)
    9338:	d9c00517 	ldw	r7,20(sp)
    933c:	da000417 	ldw	r8,16(sp)
    9340:	113ffd44 	addi	r4,r2,-11
    9344:	00c00704 	movi	r3,28
    9348:	19014f16 	blt	r3,r4,9888 <__divdf3+0x748>
    934c:	00c00744 	movi	r3,29
    9350:	157ffe04 	addi	r21,r2,-8
    9354:	1907c83a 	sub	r3,r3,r4
    9358:	8560983a 	sll	r16,r16,r21
    935c:	88c6d83a 	srl	r3,r17,r3
    9360:	8d6a983a 	sll	r21,r17,r21
    9364:	1c20b03a 	or	r16,r3,r16
    9368:	1080fcc4 	addi	r2,r2,1011
    936c:	00a5c83a 	sub	r18,zero,r2
    9370:	0013883a 	mov	r9,zero
    9374:	000b883a 	mov	r5,zero
    9378:	003f8f06 	br	91b8 <_gp+0xffff4114>
    937c:	3444b03a 	or	r2,r6,r17
    9380:	1000231e 	bne	r2,zero,9410 <__divdf3+0x2d0>
    9384:	0023883a 	mov	r17,zero
    9388:	0029883a 	mov	r20,zero
    938c:	01c00084 	movi	r7,2
    9390:	003f9b06 	br	9200 <_gp+0xffff415c>
    9394:	3444b03a 	or	r2,r6,r17
    9398:	10001926 	beq	r2,zero,9400 <__divdf3+0x2c0>
    939c:	88014b26 	beq	r17,zero,98cc <__divdf3+0x78c>
    93a0:	8809883a 	mov	r4,r17
    93a4:	d9400115 	stw	r5,4(sp)
    93a8:	d9800215 	stw	r6,8(sp)
    93ac:	da000415 	stw	r8,16(sp)
    93b0:	da400315 	stw	r9,12(sp)
    93b4:	000af580 	call	af58 <__clzsi2>
    93b8:	d9400117 	ldw	r5,4(sp)
    93bc:	d9800217 	ldw	r6,8(sp)
    93c0:	da000417 	ldw	r8,16(sp)
    93c4:	da400317 	ldw	r9,12(sp)
    93c8:	113ffd44 	addi	r4,r2,-11
    93cc:	00c00704 	movi	r3,28
    93d0:	19013a16 	blt	r3,r4,98bc <__divdf3+0x77c>
    93d4:	00c00744 	movi	r3,29
    93d8:	153ffe04 	addi	r20,r2,-8
    93dc:	1907c83a 	sub	r3,r3,r4
    93e0:	8d22983a 	sll	r17,r17,r20
    93e4:	30c6d83a 	srl	r3,r6,r3
    93e8:	3528983a 	sll	r20,r6,r20
    93ec:	1c62b03a 	or	r17,r3,r17
    93f0:	1080fcc4 	addi	r2,r2,1011
    93f4:	0087c83a 	sub	r3,zero,r2
    93f8:	000f883a 	mov	r7,zero
    93fc:	003f8006 	br	9200 <_gp+0xffff415c>
    9400:	0023883a 	mov	r17,zero
    9404:	0029883a 	mov	r20,zero
    9408:	01c00044 	movi	r7,1
    940c:	003f7c06 	br	9200 <_gp+0xffff415c>
    9410:	01c000c4 	movi	r7,3
    9414:	003f7a06 	br	9200 <_gp+0xffff415c>
    9418:	02400104 	movi	r9,4
    941c:	0021883a 	mov	r16,zero
    9420:	002b883a 	mov	r21,zero
    9424:	01400044 	movi	r5,1
    9428:	003f6306 	br	91b8 <_gp+0xffff4114>
    942c:	02400304 	movi	r9,12
    9430:	014000c4 	movi	r5,3
    9434:	003f6006 	br	91b8 <_gp+0xffff4114>
    9438:	04000434 	movhi	r16,16
    943c:	0009883a 	mov	r4,zero
    9440:	843fffc4 	addi	r16,r16,-1
    9444:	057fffc4 	movi	r21,-1
    9448:	0081ffc4 	movi	r2,2047
    944c:	003f9b06 	br	92bc <_gp+0xffff4218>
    9450:	00c00044 	movi	r3,1
    9454:	1887c83a 	sub	r3,r3,r2
    9458:	01000e04 	movi	r4,56
    945c:	20c1530e 	bge	r4,r3,99ac <__divdf3+0x86c>
    9460:	9900004c 	andi	r4,r19,1
    9464:	0005883a 	mov	r2,zero
    9468:	0021883a 	mov	r16,zero
    946c:	002b883a 	mov	r21,zero
    9470:	003f9206 	br	92bc <_gp+0xffff4218>
    9474:	8c012e36 	bltu	r17,r16,9930 <__divdf3+0x7f0>
    9478:	84412c26 	beq	r16,r17,992c <__divdf3+0x7ec>
    947c:	a82f883a 	mov	r23,r21
    9480:	18ffffc4 	addi	r3,r3,-1
    9484:	002b883a 	mov	r21,zero
    9488:	a004d63a 	srli	r2,r20,24
    948c:	8822923a 	slli	r17,r17,8
    9490:	a028923a 	slli	r20,r20,8
    9494:	8009883a 	mov	r4,r16
    9498:	88acb03a 	or	r22,r17,r2
    949c:	dd000015 	stw	r20,0(sp)
    94a0:	b028d43a 	srli	r20,r22,16
    94a4:	d8c00215 	stw	r3,8(sp)
    94a8:	b4bfffcc 	andi	r18,r22,65535
    94ac:	a00b883a 	mov	r5,r20
    94b0:	000b0b40 	call	b0b4 <__udivsi3>
    94b4:	100b883a 	mov	r5,r2
    94b8:	9009883a 	mov	r4,r18
    94bc:	1023883a 	mov	r17,r2
    94c0:	000b1700 	call	b170 <__mulsi3>
    94c4:	8009883a 	mov	r4,r16
    94c8:	a00b883a 	mov	r5,r20
    94cc:	1039883a 	mov	fp,r2
    94d0:	000b1180 	call	b118 <__umodsi3>
    94d4:	1004943a 	slli	r2,r2,16
    94d8:	b808d43a 	srli	r4,r23,16
    94dc:	d8c00217 	ldw	r3,8(sp)
    94e0:	2084b03a 	or	r2,r4,r2
    94e4:	1700062e 	bgeu	r2,fp,9500 <__divdf3+0x3c0>
    94e8:	1585883a 	add	r2,r2,r22
    94ec:	893fffc4 	addi	r4,r17,-1
    94f0:	15811d36 	bltu	r2,r22,9968 <__divdf3+0x828>
    94f4:	17011c2e 	bgeu	r2,fp,9968 <__divdf3+0x828>
    94f8:	8c7fff84 	addi	r17,r17,-2
    94fc:	1585883a 	add	r2,r2,r22
    9500:	1739c83a 	sub	fp,r2,fp
    9504:	a00b883a 	mov	r5,r20
    9508:	e009883a 	mov	r4,fp
    950c:	d8c00215 	stw	r3,8(sp)
    9510:	000b0b40 	call	b0b4 <__udivsi3>
    9514:	100b883a 	mov	r5,r2
    9518:	9009883a 	mov	r4,r18
    951c:	1021883a 	mov	r16,r2
    9520:	000b1700 	call	b170 <__mulsi3>
    9524:	a00b883a 	mov	r5,r20
    9528:	e009883a 	mov	r4,fp
    952c:	d8800415 	stw	r2,16(sp)
    9530:	000b1180 	call	b118 <__umodsi3>
    9534:	1004943a 	slli	r2,r2,16
    9538:	da000417 	ldw	r8,16(sp)
    953c:	bdffffcc 	andi	r23,r23,65535
    9540:	b884b03a 	or	r2,r23,r2
    9544:	d8c00217 	ldw	r3,8(sp)
    9548:	1200062e 	bgeu	r2,r8,9564 <__divdf3+0x424>
    954c:	1585883a 	add	r2,r2,r22
    9550:	813fffc4 	addi	r4,r16,-1
    9554:	15810236 	bltu	r2,r22,9960 <__divdf3+0x820>
    9558:	1201012e 	bgeu	r2,r8,9960 <__divdf3+0x820>
    955c:	843fff84 	addi	r16,r16,-2
    9560:	1585883a 	add	r2,r2,r22
    9564:	8822943a 	slli	r17,r17,16
    9568:	d9800017 	ldw	r6,0(sp)
    956c:	1211c83a 	sub	r8,r2,r8
    9570:	8c22b03a 	or	r17,r17,r16
    9574:	373fffcc 	andi	fp,r6,65535
    9578:	8abfffcc 	andi	r10,r17,65535
    957c:	8820d43a 	srli	r16,r17,16
    9580:	5009883a 	mov	r4,r10
    9584:	e00b883a 	mov	r5,fp
    9588:	302ed43a 	srli	r23,r6,16
    958c:	d8c00215 	stw	r3,8(sp)
    9590:	da000415 	stw	r8,16(sp)
    9594:	da800115 	stw	r10,4(sp)
    9598:	000b1700 	call	b170 <__mulsi3>
    959c:	800b883a 	mov	r5,r16
    95a0:	e009883a 	mov	r4,fp
    95a4:	d8800515 	stw	r2,20(sp)
    95a8:	000b1700 	call	b170 <__mulsi3>
    95ac:	8009883a 	mov	r4,r16
    95b0:	b80b883a 	mov	r5,r23
    95b4:	d8800315 	stw	r2,12(sp)
    95b8:	000b1700 	call	b170 <__mulsi3>
    95bc:	da800117 	ldw	r10,4(sp)
    95c0:	b80b883a 	mov	r5,r23
    95c4:	1021883a 	mov	r16,r2
    95c8:	5009883a 	mov	r4,r10
    95cc:	000b1700 	call	b170 <__mulsi3>
    95d0:	d9c00517 	ldw	r7,20(sp)
    95d4:	da400317 	ldw	r9,12(sp)
    95d8:	d8c00217 	ldw	r3,8(sp)
    95dc:	3808d43a 	srli	r4,r7,16
    95e0:	1245883a 	add	r2,r2,r9
    95e4:	da000417 	ldw	r8,16(sp)
    95e8:	2085883a 	add	r2,r4,r2
    95ec:	1240022e 	bgeu	r2,r9,95f8 <__divdf3+0x4b8>
    95f0:	01000074 	movhi	r4,1
    95f4:	8121883a 	add	r16,r16,r4
    95f8:	1008d43a 	srli	r4,r2,16
    95fc:	1004943a 	slli	r2,r2,16
    9600:	39ffffcc 	andi	r7,r7,65535
    9604:	2409883a 	add	r4,r4,r16
    9608:	11c5883a 	add	r2,r2,r7
    960c:	4100bb36 	bltu	r8,r4,98fc <__divdf3+0x7bc>
    9610:	4100d726 	beq	r8,r4,9970 <__divdf3+0x830>
    9614:	4109c83a 	sub	r4,r8,r4
    9618:	a8a1c83a 	sub	r16,r21,r2
    961c:	ac2b803a 	cmpltu	r21,r21,r16
    9620:	256bc83a 	sub	r21,r4,r21
    9624:	b540d926 	beq	r22,r21,998c <__divdf3+0x84c>
    9628:	a00b883a 	mov	r5,r20
    962c:	a809883a 	mov	r4,r21
    9630:	d8c00215 	stw	r3,8(sp)
    9634:	000b0b40 	call	b0b4 <__udivsi3>
    9638:	100b883a 	mov	r5,r2
    963c:	9009883a 	mov	r4,r18
    9640:	d8800515 	stw	r2,20(sp)
    9644:	000b1700 	call	b170 <__mulsi3>
    9648:	a809883a 	mov	r4,r21
    964c:	a00b883a 	mov	r5,r20
    9650:	d8800415 	stw	r2,16(sp)
    9654:	000b1180 	call	b118 <__umodsi3>
    9658:	1004943a 	slli	r2,r2,16
    965c:	8008d43a 	srli	r4,r16,16
    9660:	da000417 	ldw	r8,16(sp)
    9664:	d8c00217 	ldw	r3,8(sp)
    9668:	2084b03a 	or	r2,r4,r2
    966c:	d9c00517 	ldw	r7,20(sp)
    9670:	1200062e 	bgeu	r2,r8,968c <__divdf3+0x54c>
    9674:	1585883a 	add	r2,r2,r22
    9678:	393fffc4 	addi	r4,r7,-1
    967c:	1580c536 	bltu	r2,r22,9994 <__divdf3+0x854>
    9680:	1200c42e 	bgeu	r2,r8,9994 <__divdf3+0x854>
    9684:	39ffff84 	addi	r7,r7,-2
    9688:	1585883a 	add	r2,r2,r22
    968c:	122bc83a 	sub	r21,r2,r8
    9690:	a00b883a 	mov	r5,r20
    9694:	a809883a 	mov	r4,r21
    9698:	d8c00215 	stw	r3,8(sp)
    969c:	d9c00515 	stw	r7,20(sp)
    96a0:	000b0b40 	call	b0b4 <__udivsi3>
    96a4:	9009883a 	mov	r4,r18
    96a8:	100b883a 	mov	r5,r2
    96ac:	d8800415 	stw	r2,16(sp)
    96b0:	000b1700 	call	b170 <__mulsi3>
    96b4:	a809883a 	mov	r4,r21
    96b8:	a00b883a 	mov	r5,r20
    96bc:	1025883a 	mov	r18,r2
    96c0:	000b1180 	call	b118 <__umodsi3>
    96c4:	1004943a 	slli	r2,r2,16
    96c8:	813fffcc 	andi	r4,r16,65535
    96cc:	d8c00217 	ldw	r3,8(sp)
    96d0:	20a0b03a 	or	r16,r4,r2
    96d4:	d9c00517 	ldw	r7,20(sp)
    96d8:	da000417 	ldw	r8,16(sp)
    96dc:	8480062e 	bgeu	r16,r18,96f8 <__divdf3+0x5b8>
    96e0:	85a1883a 	add	r16,r16,r22
    96e4:	40bfffc4 	addi	r2,r8,-1
    96e8:	8580ac36 	bltu	r16,r22,999c <__divdf3+0x85c>
    96ec:	8480ab2e 	bgeu	r16,r18,999c <__divdf3+0x85c>
    96f0:	423fff84 	addi	r8,r8,-2
    96f4:	85a1883a 	add	r16,r16,r22
    96f8:	3804943a 	slli	r2,r7,16
    96fc:	84a1c83a 	sub	r16,r16,r18
    9700:	e009883a 	mov	r4,fp
    9704:	1228b03a 	or	r20,r2,r8
    9708:	a1ffffcc 	andi	r7,r20,65535
    970c:	a024d43a 	srli	r18,r20,16
    9710:	380b883a 	mov	r5,r7
    9714:	d8c00215 	stw	r3,8(sp)
    9718:	d9c00515 	stw	r7,20(sp)
    971c:	000b1700 	call	b170 <__mulsi3>
    9720:	900b883a 	mov	r5,r18
    9724:	e009883a 	mov	r4,fp
    9728:	102b883a 	mov	r21,r2
    972c:	000b1700 	call	b170 <__mulsi3>
    9730:	900b883a 	mov	r5,r18
    9734:	b809883a 	mov	r4,r23
    9738:	1039883a 	mov	fp,r2
    973c:	000b1700 	call	b170 <__mulsi3>
    9740:	d9c00517 	ldw	r7,20(sp)
    9744:	b80b883a 	mov	r5,r23
    9748:	1025883a 	mov	r18,r2
    974c:	3809883a 	mov	r4,r7
    9750:	000b1700 	call	b170 <__mulsi3>
    9754:	a808d43a 	srli	r4,r21,16
    9758:	1705883a 	add	r2,r2,fp
    975c:	d8c00217 	ldw	r3,8(sp)
    9760:	2085883a 	add	r2,r4,r2
    9764:	1700022e 	bgeu	r2,fp,9770 <__divdf3+0x630>
    9768:	01000074 	movhi	r4,1
    976c:	9125883a 	add	r18,r18,r4
    9770:	1008d43a 	srli	r4,r2,16
    9774:	1004943a 	slli	r2,r2,16
    9778:	ad7fffcc 	andi	r21,r21,65535
    977c:	2489883a 	add	r4,r4,r18
    9780:	1545883a 	add	r2,r2,r21
    9784:	81003836 	bltu	r16,r4,9868 <__divdf3+0x728>
    9788:	81003626 	beq	r16,r4,9864 <__divdf3+0x724>
    978c:	a5000054 	ori	r20,r20,1
    9790:	1880ffc4 	addi	r2,r3,1023
    9794:	00bf2e0e 	bge	zero,r2,9450 <_gp+0xffff43ac>
    9798:	a10001cc 	andi	r4,r20,7
    979c:	20000726 	beq	r4,zero,97bc <__divdf3+0x67c>
    97a0:	a10003cc 	andi	r4,r20,15
    97a4:	01400104 	movi	r5,4
    97a8:	21400426 	beq	r4,r5,97bc <__divdf3+0x67c>
    97ac:	a149883a 	add	r4,r20,r5
    97b0:	2529803a 	cmpltu	r20,r4,r20
    97b4:	8d23883a 	add	r17,r17,r20
    97b8:	2029883a 	mov	r20,r4
    97bc:	8900402c 	andhi	r4,r17,256
    97c0:	20000426 	beq	r4,zero,97d4 <__divdf3+0x694>
    97c4:	18810004 	addi	r2,r3,1024
    97c8:	00ffc034 	movhi	r3,65280
    97cc:	18ffffc4 	addi	r3,r3,-1
    97d0:	88e2703a 	and	r17,r17,r3
    97d4:	00c1ff84 	movi	r3,2046
    97d8:	18beb416 	blt	r3,r2,92ac <_gp+0xffff4208>
    97dc:	a028d0fa 	srli	r20,r20,3
    97e0:	882a977a 	slli	r21,r17,29
    97e4:	8820927a 	slli	r16,r17,9
    97e8:	1081ffcc 	andi	r2,r2,2047
    97ec:	ad2ab03a 	or	r21,r21,r20
    97f0:	8020d33a 	srli	r16,r16,12
    97f4:	9900004c 	andi	r4,r19,1
    97f8:	003eb006 	br	92bc <_gp+0xffff4218>
    97fc:	8080022c 	andhi	r2,r16,8
    9800:	10001226 	beq	r2,zero,984c <__divdf3+0x70c>
    9804:	8880022c 	andhi	r2,r17,8
    9808:	1000101e 	bne	r2,zero,984c <__divdf3+0x70c>
    980c:	00800434 	movhi	r2,16
    9810:	8c000234 	orhi	r16,r17,8
    9814:	10bfffc4 	addi	r2,r2,-1
    9818:	b809883a 	mov	r4,r23
    981c:	80a0703a 	and	r16,r16,r2
    9820:	a02b883a 	mov	r21,r20
    9824:	003f0806 	br	9448 <_gp+0xffff43a4>
    9828:	008000c4 	movi	r2,3
    982c:	3880b126 	beq	r7,r2,9af4 <__divdf3+0x9b4>
    9830:	00800044 	movi	r2,1
    9834:	38805b1e 	bne	r7,r2,99a4 <__divdf3+0x864>
    9838:	e009883a 	mov	r4,fp
    983c:	0005883a 	mov	r2,zero
    9840:	0021883a 	mov	r16,zero
    9844:	002b883a 	mov	r21,zero
    9848:	003e9c06 	br	92bc <_gp+0xffff4218>
    984c:	00800434 	movhi	r2,16
    9850:	84000234 	orhi	r16,r16,8
    9854:	10bfffc4 	addi	r2,r2,-1
    9858:	b009883a 	mov	r4,r22
    985c:	80a0703a 	and	r16,r16,r2
    9860:	003ef906 	br	9448 <_gp+0xffff43a4>
    9864:	103fca26 	beq	r2,zero,9790 <_gp+0xffff46ec>
    9868:	b421883a 	add	r16,r22,r16
    986c:	a17fffc4 	addi	r5,r20,-1
    9870:	8580422e 	bgeu	r16,r22,997c <__divdf3+0x83c>
    9874:	2829883a 	mov	r20,r5
    9878:	813fc41e 	bne	r16,r4,978c <_gp+0xffff46e8>
    987c:	d9800017 	ldw	r6,0(sp)
    9880:	30bfc21e 	bne	r6,r2,978c <_gp+0xffff46e8>
    9884:	003fc206 	br	9790 <_gp+0xffff46ec>
    9888:	143ff604 	addi	r16,r2,-40
    988c:	8c20983a 	sll	r16,r17,r16
    9890:	002b883a 	mov	r21,zero
    9894:	003eb406 	br	9368 <_gp+0xffff42c4>
    9898:	d9800215 	stw	r6,8(sp)
    989c:	d9c00515 	stw	r7,20(sp)
    98a0:	da000415 	stw	r8,16(sp)
    98a4:	000af580 	call	af58 <__clzsi2>
    98a8:	10800804 	addi	r2,r2,32
    98ac:	da000417 	ldw	r8,16(sp)
    98b0:	d9c00517 	ldw	r7,20(sp)
    98b4:	d9800217 	ldw	r6,8(sp)
    98b8:	003ea106 	br	9340 <_gp+0xffff429c>
    98bc:	147ff604 	addi	r17,r2,-40
    98c0:	3462983a 	sll	r17,r6,r17
    98c4:	0029883a 	mov	r20,zero
    98c8:	003ec906 	br	93f0 <_gp+0xffff434c>
    98cc:	3009883a 	mov	r4,r6
    98d0:	d9400115 	stw	r5,4(sp)
    98d4:	d9800215 	stw	r6,8(sp)
    98d8:	da000415 	stw	r8,16(sp)
    98dc:	da400315 	stw	r9,12(sp)
    98e0:	000af580 	call	af58 <__clzsi2>
    98e4:	10800804 	addi	r2,r2,32
    98e8:	da400317 	ldw	r9,12(sp)
    98ec:	da000417 	ldw	r8,16(sp)
    98f0:	d9800217 	ldw	r6,8(sp)
    98f4:	d9400117 	ldw	r5,4(sp)
    98f8:	003eb306 	br	93c8 <_gp+0xffff4324>
    98fc:	d9800017 	ldw	r6,0(sp)
    9900:	a9ab883a 	add	r21,r21,r6
    9904:	a98b803a 	cmpltu	r5,r21,r6
    9908:	2d8b883a 	add	r5,r5,r22
    990c:	2a11883a 	add	r8,r5,r8
    9910:	897fffc4 	addi	r5,r17,-1
    9914:	b2000c2e 	bgeu	r22,r8,9948 <__divdf3+0x808>
    9918:	41003f36 	bltu	r8,r4,9a18 <__divdf3+0x8d8>
    991c:	22006c26 	beq	r4,r8,9ad0 <__divdf3+0x990>
    9920:	4109c83a 	sub	r4,r8,r4
    9924:	2823883a 	mov	r17,r5
    9928:	003f3b06 	br	9618 <_gp+0xffff4574>
    992c:	ad3ed336 	bltu	r21,r20,947c <_gp+0xffff43d8>
    9930:	a804d07a 	srli	r2,r21,1
    9934:	802e97fa 	slli	r23,r16,31
    9938:	a82a97fa 	slli	r21,r21,31
    993c:	8020d07a 	srli	r16,r16,1
    9940:	b8aeb03a 	or	r23,r23,r2
    9944:	003ed006 	br	9488 <_gp+0xffff43e4>
    9948:	b23ff51e 	bne	r22,r8,9920 <_gp+0xffff487c>
    994c:	d9800017 	ldw	r6,0(sp)
    9950:	a9bff12e 	bgeu	r21,r6,9918 <_gp+0xffff4874>
    9954:	b109c83a 	sub	r4,r22,r4
    9958:	2823883a 	mov	r17,r5
    995c:	003f2e06 	br	9618 <_gp+0xffff4574>
    9960:	2021883a 	mov	r16,r4
    9964:	003eff06 	br	9564 <_gp+0xffff44c0>
    9968:	2023883a 	mov	r17,r4
    996c:	003ee406 	br	9500 <_gp+0xffff445c>
    9970:	a8bfe236 	bltu	r21,r2,98fc <_gp+0xffff4858>
    9974:	0009883a 	mov	r4,zero
    9978:	003f2706 	br	9618 <_gp+0xffff4574>
    997c:	81002d36 	bltu	r16,r4,9a34 <__divdf3+0x8f4>
    9980:	24005626 	beq	r4,r16,9adc <__divdf3+0x99c>
    9984:	2829883a 	mov	r20,r5
    9988:	003f8006 	br	978c <_gp+0xffff46e8>
    998c:	053fffc4 	movi	r20,-1
    9990:	003f7f06 	br	9790 <_gp+0xffff46ec>
    9994:	200f883a 	mov	r7,r4
    9998:	003f3c06 	br	968c <_gp+0xffff45e8>
    999c:	1011883a 	mov	r8,r2
    99a0:	003f5506 	br	96f8 <_gp+0xffff4654>
    99a4:	e027883a 	mov	r19,fp
    99a8:	003f7906 	br	9790 <_gp+0xffff46ec>
    99ac:	010007c4 	movi	r4,31
    99b0:	20c02816 	blt	r4,r3,9a54 <__divdf3+0x914>
    99b4:	00800804 	movi	r2,32
    99b8:	10c5c83a 	sub	r2,r2,r3
    99bc:	888a983a 	sll	r5,r17,r2
    99c0:	a0c8d83a 	srl	r4,r20,r3
    99c4:	a084983a 	sll	r2,r20,r2
    99c8:	88e2d83a 	srl	r17,r17,r3
    99cc:	2906b03a 	or	r3,r5,r4
    99d0:	1004c03a 	cmpne	r2,r2,zero
    99d4:	1886b03a 	or	r3,r3,r2
    99d8:	188001cc 	andi	r2,r3,7
    99dc:	10000726 	beq	r2,zero,99fc <__divdf3+0x8bc>
    99e0:	188003cc 	andi	r2,r3,15
    99e4:	01000104 	movi	r4,4
    99e8:	11000426 	beq	r2,r4,99fc <__divdf3+0x8bc>
    99ec:	1805883a 	mov	r2,r3
    99f0:	10c00104 	addi	r3,r2,4
    99f4:	1885803a 	cmpltu	r2,r3,r2
    99f8:	88a3883a 	add	r17,r17,r2
    99fc:	8880202c 	andhi	r2,r17,128
    9a00:	10002926 	beq	r2,zero,9aa8 <__divdf3+0x968>
    9a04:	9900004c 	andi	r4,r19,1
    9a08:	00800044 	movi	r2,1
    9a0c:	0021883a 	mov	r16,zero
    9a10:	002b883a 	mov	r21,zero
    9a14:	003e2906 	br	92bc <_gp+0xffff4218>
    9a18:	d9800017 	ldw	r6,0(sp)
    9a1c:	8c7fff84 	addi	r17,r17,-2
    9a20:	a9ab883a 	add	r21,r21,r6
    9a24:	a98b803a 	cmpltu	r5,r21,r6
    9a28:	2d8b883a 	add	r5,r5,r22
    9a2c:	2a11883a 	add	r8,r5,r8
    9a30:	003ef806 	br	9614 <_gp+0xffff4570>
    9a34:	d9800017 	ldw	r6,0(sp)
    9a38:	318f883a 	add	r7,r6,r6
    9a3c:	398b803a 	cmpltu	r5,r7,r6
    9a40:	2d8d883a 	add	r6,r5,r22
    9a44:	81a1883a 	add	r16,r16,r6
    9a48:	a17fff84 	addi	r5,r20,-2
    9a4c:	d9c00015 	stw	r7,0(sp)
    9a50:	003f8806 	br	9874 <_gp+0xffff47d0>
    9a54:	013ff844 	movi	r4,-31
    9a58:	2085c83a 	sub	r2,r4,r2
    9a5c:	8888d83a 	srl	r4,r17,r2
    9a60:	00800804 	movi	r2,32
    9a64:	18802126 	beq	r3,r2,9aec <__divdf3+0x9ac>
    9a68:	04001004 	movi	r16,64
    9a6c:	80c7c83a 	sub	r3,r16,r3
    9a70:	88e0983a 	sll	r16,r17,r3
    9a74:	8504b03a 	or	r2,r16,r20
    9a78:	1004c03a 	cmpne	r2,r2,zero
    9a7c:	2084b03a 	or	r2,r4,r2
    9a80:	144001cc 	andi	r17,r2,7
    9a84:	88000d1e 	bne	r17,zero,9abc <__divdf3+0x97c>
    9a88:	0021883a 	mov	r16,zero
    9a8c:	102ad0fa 	srli	r21,r2,3
    9a90:	9900004c 	andi	r4,r19,1
    9a94:	0005883a 	mov	r2,zero
    9a98:	ac6ab03a 	or	r21,r21,r17
    9a9c:	003e0706 	br	92bc <_gp+0xffff4218>
    9aa0:	1007883a 	mov	r3,r2
    9aa4:	0023883a 	mov	r17,zero
    9aa8:	8820927a 	slli	r16,r17,9
    9aac:	1805883a 	mov	r2,r3
    9ab0:	8822977a 	slli	r17,r17,29
    9ab4:	8020d33a 	srli	r16,r16,12
    9ab8:	003ff406 	br	9a8c <_gp+0xffff49e8>
    9abc:	10c003cc 	andi	r3,r2,15
    9ac0:	01000104 	movi	r4,4
    9ac4:	193ff626 	beq	r3,r4,9aa0 <_gp+0xffff49fc>
    9ac8:	0023883a 	mov	r17,zero
    9acc:	003fc806 	br	99f0 <_gp+0xffff494c>
    9ad0:	a8bfd136 	bltu	r21,r2,9a18 <_gp+0xffff4974>
    9ad4:	2823883a 	mov	r17,r5
    9ad8:	003fa606 	br	9974 <_gp+0xffff48d0>
    9adc:	d9800017 	ldw	r6,0(sp)
    9ae0:	30bfd436 	bltu	r6,r2,9a34 <_gp+0xffff4990>
    9ae4:	2829883a 	mov	r20,r5
    9ae8:	003f6406 	br	987c <_gp+0xffff47d8>
    9aec:	0021883a 	mov	r16,zero
    9af0:	003fe006 	br	9a74 <_gp+0xffff49d0>
    9af4:	00800434 	movhi	r2,16
    9af8:	8c000234 	orhi	r16,r17,8
    9afc:	10bfffc4 	addi	r2,r2,-1
    9b00:	e009883a 	mov	r4,fp
    9b04:	80a0703a 	and	r16,r16,r2
    9b08:	a02b883a 	mov	r21,r20
    9b0c:	003e4e06 	br	9448 <_gp+0xffff43a4>

00009b10 <__gedf2>:
    9b10:	2804d53a 	srli	r2,r5,20
    9b14:	3806d53a 	srli	r3,r7,20
    9b18:	02000434 	movhi	r8,16
    9b1c:	423fffc4 	addi	r8,r8,-1
    9b20:	1081ffcc 	andi	r2,r2,2047
    9b24:	0241ffc4 	movi	r9,2047
    9b28:	2a14703a 	and	r10,r5,r8
    9b2c:	18c1ffcc 	andi	r3,r3,2047
    9b30:	3a10703a 	and	r8,r7,r8
    9b34:	280ad7fa 	srli	r5,r5,31
    9b38:	380ed7fa 	srli	r7,r7,31
    9b3c:	12401d26 	beq	r2,r9,9bb4 <__gedf2+0xa4>
    9b40:	0241ffc4 	movi	r9,2047
    9b44:	1a401226 	beq	r3,r9,9b90 <__gedf2+0x80>
    9b48:	1000081e 	bne	r2,zero,9b6c <__gedf2+0x5c>
    9b4c:	2296b03a 	or	r11,r4,r10
    9b50:	5813003a 	cmpeq	r9,r11,zero
    9b54:	1800091e 	bne	r3,zero,9b7c <__gedf2+0x6c>
    9b58:	3218b03a 	or	r12,r6,r8
    9b5c:	6000071e 	bne	r12,zero,9b7c <__gedf2+0x6c>
    9b60:	0005883a 	mov	r2,zero
    9b64:	5800101e 	bne	r11,zero,9ba8 <__gedf2+0x98>
    9b68:	f800283a 	ret
    9b6c:	18000c1e 	bne	r3,zero,9ba0 <__gedf2+0x90>
    9b70:	3212b03a 	or	r9,r6,r8
    9b74:	48000c26 	beq	r9,zero,9ba8 <__gedf2+0x98>
    9b78:	0013883a 	mov	r9,zero
    9b7c:	39c03fcc 	andi	r7,r7,255
    9b80:	48000826 	beq	r9,zero,9ba4 <__gedf2+0x94>
    9b84:	38000926 	beq	r7,zero,9bac <__gedf2+0x9c>
    9b88:	00800044 	movi	r2,1
    9b8c:	f800283a 	ret
    9b90:	3212b03a 	or	r9,r6,r8
    9b94:	483fec26 	beq	r9,zero,9b48 <_gp+0xffff4aa4>
    9b98:	00bfff84 	movi	r2,-2
    9b9c:	f800283a 	ret
    9ba0:	39c03fcc 	andi	r7,r7,255
    9ba4:	29c00626 	beq	r5,r7,9bc0 <__gedf2+0xb0>
    9ba8:	283ff726 	beq	r5,zero,9b88 <_gp+0xffff4ae4>
    9bac:	00bfffc4 	movi	r2,-1
    9bb0:	f800283a 	ret
    9bb4:	2292b03a 	or	r9,r4,r10
    9bb8:	483fe126 	beq	r9,zero,9b40 <_gp+0xffff4a9c>
    9bbc:	003ff606 	br	9b98 <_gp+0xffff4af4>
    9bc0:	18bff916 	blt	r3,r2,9ba8 <_gp+0xffff4b04>
    9bc4:	10c00316 	blt	r2,r3,9bd4 <__gedf2+0xc4>
    9bc8:	42bff736 	bltu	r8,r10,9ba8 <_gp+0xffff4b04>
    9bcc:	52000326 	beq	r10,r8,9bdc <__gedf2+0xcc>
    9bd0:	5200042e 	bgeu	r10,r8,9be4 <__gedf2+0xd4>
    9bd4:	283fec1e 	bne	r5,zero,9b88 <_gp+0xffff4ae4>
    9bd8:	003ff406 	br	9bac <_gp+0xffff4b08>
    9bdc:	313ff236 	bltu	r6,r4,9ba8 <_gp+0xffff4b04>
    9be0:	21bffc36 	bltu	r4,r6,9bd4 <_gp+0xffff4b30>
    9be4:	0005883a 	mov	r2,zero
    9be8:	f800283a 	ret

00009bec <__muldf3>:
    9bec:	deffee04 	addi	sp,sp,-72
    9bf0:	dd000c15 	stw	r20,48(sp)
    9bf4:	2828d53a 	srli	r20,r5,20
    9bf8:	ddc00f15 	stw	r23,60(sp)
    9bfc:	282ed7fa 	srli	r23,r5,31
    9c00:	dc000815 	stw	r16,32(sp)
    9c04:	04000434 	movhi	r16,16
    9c08:	dcc00b15 	stw	r19,44(sp)
    9c0c:	843fffc4 	addi	r16,r16,-1
    9c10:	dfc01115 	stw	ra,68(sp)
    9c14:	df001015 	stw	fp,64(sp)
    9c18:	dd800e15 	stw	r22,56(sp)
    9c1c:	dd400d15 	stw	r21,52(sp)
    9c20:	dc800a15 	stw	r18,40(sp)
    9c24:	dc400915 	stw	r17,36(sp)
    9c28:	a501ffcc 	andi	r20,r20,2047
    9c2c:	2c20703a 	and	r16,r5,r16
    9c30:	b827883a 	mov	r19,r23
    9c34:	ba403fcc 	andi	r9,r23,255
    9c38:	a0006026 	beq	r20,zero,9dbc <__muldf3+0x1d0>
    9c3c:	0081ffc4 	movi	r2,2047
    9c40:	202d883a 	mov	r22,r4
    9c44:	a0803626 	beq	r20,r2,9d20 <__muldf3+0x134>
    9c48:	84000434 	orhi	r16,r16,16
    9c4c:	200ad77a 	srli	r5,r4,29
    9c50:	800490fa 	slli	r2,r16,3
    9c54:	202c90fa 	slli	r22,r4,3
    9c58:	a53f0044 	addi	r20,r20,-1023
    9c5c:	28a0b03a 	or	r16,r5,r2
    9c60:	002b883a 	mov	r21,zero
    9c64:	000b883a 	mov	r5,zero
    9c68:	3804d53a 	srli	r2,r7,20
    9c6c:	3838d7fa 	srli	fp,r7,31
    9c70:	04400434 	movhi	r17,16
    9c74:	8c7fffc4 	addi	r17,r17,-1
    9c78:	1081ffcc 	andi	r2,r2,2047
    9c7c:	3025883a 	mov	r18,r6
    9c80:	3c62703a 	and	r17,r7,r17
    9c84:	e2803fcc 	andi	r10,fp,255
    9c88:	10006d26 	beq	r2,zero,9e40 <__muldf3+0x254>
    9c8c:	00c1ffc4 	movi	r3,2047
    9c90:	10c06526 	beq	r2,r3,9e28 <__muldf3+0x23c>
    9c94:	8c400434 	orhi	r17,r17,16
    9c98:	300ed77a 	srli	r7,r6,29
    9c9c:	880690fa 	slli	r3,r17,3
    9ca0:	302490fa 	slli	r18,r6,3
    9ca4:	10bf0044 	addi	r2,r2,-1023
    9ca8:	38e2b03a 	or	r17,r7,r3
    9cac:	000f883a 	mov	r7,zero
    9cb0:	a087883a 	add	r3,r20,r2
    9cb4:	010003c4 	movi	r4,15
    9cb8:	3d44b03a 	or	r2,r7,r21
    9cbc:	e5ccf03a 	xor	r6,fp,r23
    9cc0:	1a000044 	addi	r8,r3,1
    9cc4:	20809b36 	bltu	r4,r2,9f34 <__muldf3+0x348>
    9cc8:	100490ba 	slli	r2,r2,2
    9ccc:	01000074 	movhi	r4,1
    9cd0:	21273804 	addi	r4,r4,-25376
    9cd4:	1105883a 	add	r2,r2,r4
    9cd8:	10800017 	ldw	r2,0(r2)
    9cdc:	1000683a 	jmp	r2
    9ce0:	00009f34 	movhi	zero,636
    9ce4:	00009d40 	call	9d4 <__alt_mem_onchip_memory2_0-0x762c>
    9ce8:	00009d40 	call	9d4 <__alt_mem_onchip_memory2_0-0x762c>
    9cec:	00009d3c 	xorhi	zero,zero,628
    9cf0:	00009f10 	cmplti	zero,zero,636
    9cf4:	00009f10 	cmplti	zero,zero,636
    9cf8:	00009ef8 	rdprs	zero,zero,635
    9cfc:	00009d3c 	xorhi	zero,zero,628
    9d00:	00009f10 	cmplti	zero,zero,636
    9d04:	00009ef8 	rdprs	zero,zero,635
    9d08:	00009f10 	cmplti	zero,zero,636
    9d0c:	00009d3c 	xorhi	zero,zero,628
    9d10:	00009f20 	cmpeqi	zero,zero,636
    9d14:	00009f20 	cmpeqi	zero,zero,636
    9d18:	00009f20 	cmpeqi	zero,zero,636
    9d1c:	0000a280 	call	a28 <__alt_mem_onchip_memory2_0-0x75d8>
    9d20:	2404b03a 	or	r2,r4,r16
    9d24:	1000711e 	bne	r2,zero,9eec <__muldf3+0x300>
    9d28:	05400204 	movi	r21,8
    9d2c:	0021883a 	mov	r16,zero
    9d30:	002d883a 	mov	r22,zero
    9d34:	01400084 	movi	r5,2
    9d38:	003fcb06 	br	9c68 <_gp+0xffff4bc4>
    9d3c:	500d883a 	mov	r6,r10
    9d40:	00800084 	movi	r2,2
    9d44:	38805926 	beq	r7,r2,9eac <__muldf3+0x2c0>
    9d48:	008000c4 	movi	r2,3
    9d4c:	3881bb26 	beq	r7,r2,a43c <__muldf3+0x850>
    9d50:	00800044 	movi	r2,1
    9d54:	3881961e 	bne	r7,r2,a3b0 <__muldf3+0x7c4>
    9d58:	3027883a 	mov	r19,r6
    9d5c:	0005883a 	mov	r2,zero
    9d60:	0021883a 	mov	r16,zero
    9d64:	002d883a 	mov	r22,zero
    9d68:	1004953a 	slli	r2,r2,20
    9d6c:	98c03fcc 	andi	r3,r19,255
    9d70:	04400434 	movhi	r17,16
    9d74:	8c7fffc4 	addi	r17,r17,-1
    9d78:	180697fa 	slli	r3,r3,31
    9d7c:	8460703a 	and	r16,r16,r17
    9d80:	80a0b03a 	or	r16,r16,r2
    9d84:	80c6b03a 	or	r3,r16,r3
    9d88:	b005883a 	mov	r2,r22
    9d8c:	dfc01117 	ldw	ra,68(sp)
    9d90:	df001017 	ldw	fp,64(sp)
    9d94:	ddc00f17 	ldw	r23,60(sp)
    9d98:	dd800e17 	ldw	r22,56(sp)
    9d9c:	dd400d17 	ldw	r21,52(sp)
    9da0:	dd000c17 	ldw	r20,48(sp)
    9da4:	dcc00b17 	ldw	r19,44(sp)
    9da8:	dc800a17 	ldw	r18,40(sp)
    9dac:	dc400917 	ldw	r17,36(sp)
    9db0:	dc000817 	ldw	r16,32(sp)
    9db4:	dec01204 	addi	sp,sp,72
    9db8:	f800283a 	ret
    9dbc:	2404b03a 	or	r2,r4,r16
    9dc0:	202b883a 	mov	r21,r4
    9dc4:	10004426 	beq	r2,zero,9ed8 <__muldf3+0x2ec>
    9dc8:	80015126 	beq	r16,zero,a310 <__muldf3+0x724>
    9dcc:	8009883a 	mov	r4,r16
    9dd0:	d9800715 	stw	r6,28(sp)
    9dd4:	d9c00215 	stw	r7,8(sp)
    9dd8:	da400415 	stw	r9,16(sp)
    9ddc:	000af580 	call	af58 <__clzsi2>
    9de0:	d9800717 	ldw	r6,28(sp)
    9de4:	d9c00217 	ldw	r7,8(sp)
    9de8:	da400417 	ldw	r9,16(sp)
    9dec:	113ffd44 	addi	r4,r2,-11
    9df0:	00c00704 	movi	r3,28
    9df4:	19014216 	blt	r3,r4,a300 <__muldf3+0x714>
    9df8:	00c00744 	movi	r3,29
    9dfc:	15bffe04 	addi	r22,r2,-8
    9e00:	1907c83a 	sub	r3,r3,r4
    9e04:	85a0983a 	sll	r16,r16,r22
    9e08:	a8c6d83a 	srl	r3,r21,r3
    9e0c:	adac983a 	sll	r22,r21,r22
    9e10:	1c20b03a 	or	r16,r3,r16
    9e14:	1080fcc4 	addi	r2,r2,1011
    9e18:	00a9c83a 	sub	r20,zero,r2
    9e1c:	002b883a 	mov	r21,zero
    9e20:	000b883a 	mov	r5,zero
    9e24:	003f9006 	br	9c68 <_gp+0xffff4bc4>
    9e28:	3446b03a 	or	r3,r6,r17
    9e2c:	1800281e 	bne	r3,zero,9ed0 <__muldf3+0x2e4>
    9e30:	0023883a 	mov	r17,zero
    9e34:	0025883a 	mov	r18,zero
    9e38:	01c00084 	movi	r7,2
    9e3c:	003f9c06 	br	9cb0 <_gp+0xffff4c0c>
    9e40:	3446b03a 	or	r3,r6,r17
    9e44:	18001e26 	beq	r3,zero,9ec0 <__muldf3+0x2d4>
    9e48:	88012126 	beq	r17,zero,a2d0 <__muldf3+0x6e4>
    9e4c:	8809883a 	mov	r4,r17
    9e50:	d9400215 	stw	r5,8(sp)
    9e54:	d9800715 	stw	r6,28(sp)
    9e58:	da400415 	stw	r9,16(sp)
    9e5c:	da800315 	stw	r10,12(sp)
    9e60:	000af580 	call	af58 <__clzsi2>
    9e64:	d9400217 	ldw	r5,8(sp)
    9e68:	d9800717 	ldw	r6,28(sp)
    9e6c:	da400417 	ldw	r9,16(sp)
    9e70:	da800317 	ldw	r10,12(sp)
    9e74:	113ffd44 	addi	r4,r2,-11
    9e78:	00c00704 	movi	r3,28
    9e7c:	19011016 	blt	r3,r4,a2c0 <__muldf3+0x6d4>
    9e80:	00c00744 	movi	r3,29
    9e84:	14bffe04 	addi	r18,r2,-8
    9e88:	1907c83a 	sub	r3,r3,r4
    9e8c:	8ca2983a 	sll	r17,r17,r18
    9e90:	30c6d83a 	srl	r3,r6,r3
    9e94:	34a4983a 	sll	r18,r6,r18
    9e98:	1c62b03a 	or	r17,r3,r17
    9e9c:	1080fcc4 	addi	r2,r2,1011
    9ea0:	0085c83a 	sub	r2,zero,r2
    9ea4:	000f883a 	mov	r7,zero
    9ea8:	003f8106 	br	9cb0 <_gp+0xffff4c0c>
    9eac:	3027883a 	mov	r19,r6
    9eb0:	0081ffc4 	movi	r2,2047
    9eb4:	0021883a 	mov	r16,zero
    9eb8:	002d883a 	mov	r22,zero
    9ebc:	003faa06 	br	9d68 <_gp+0xffff4cc4>
    9ec0:	0023883a 	mov	r17,zero
    9ec4:	0025883a 	mov	r18,zero
    9ec8:	01c00044 	movi	r7,1
    9ecc:	003f7806 	br	9cb0 <_gp+0xffff4c0c>
    9ed0:	01c000c4 	movi	r7,3
    9ed4:	003f7606 	br	9cb0 <_gp+0xffff4c0c>
    9ed8:	05400104 	movi	r21,4
    9edc:	0021883a 	mov	r16,zero
    9ee0:	002d883a 	mov	r22,zero
    9ee4:	01400044 	movi	r5,1
    9ee8:	003f5f06 	br	9c68 <_gp+0xffff4bc4>
    9eec:	05400304 	movi	r21,12
    9ef0:	014000c4 	movi	r5,3
    9ef4:	003f5c06 	br	9c68 <_gp+0xffff4bc4>
    9ef8:	04000434 	movhi	r16,16
    9efc:	0027883a 	mov	r19,zero
    9f00:	843fffc4 	addi	r16,r16,-1
    9f04:	05bfffc4 	movi	r22,-1
    9f08:	0081ffc4 	movi	r2,2047
    9f0c:	003f9606 	br	9d68 <_gp+0xffff4cc4>
    9f10:	8023883a 	mov	r17,r16
    9f14:	b025883a 	mov	r18,r22
    9f18:	280f883a 	mov	r7,r5
    9f1c:	003f8806 	br	9d40 <_gp+0xffff4c9c>
    9f20:	8023883a 	mov	r17,r16
    9f24:	b025883a 	mov	r18,r22
    9f28:	480d883a 	mov	r6,r9
    9f2c:	280f883a 	mov	r7,r5
    9f30:	003f8306 	br	9d40 <_gp+0xffff4c9c>
    9f34:	b026d43a 	srli	r19,r22,16
    9f38:	902ed43a 	srli	r23,r18,16
    9f3c:	b5bfffcc 	andi	r22,r22,65535
    9f40:	94bfffcc 	andi	r18,r18,65535
    9f44:	b00b883a 	mov	r5,r22
    9f48:	9009883a 	mov	r4,r18
    9f4c:	d8c00515 	stw	r3,20(sp)
    9f50:	d9800715 	stw	r6,28(sp)
    9f54:	da000615 	stw	r8,24(sp)
    9f58:	000b1700 	call	b170 <__mulsi3>
    9f5c:	980b883a 	mov	r5,r19
    9f60:	9009883a 	mov	r4,r18
    9f64:	1029883a 	mov	r20,r2
    9f68:	000b1700 	call	b170 <__mulsi3>
    9f6c:	b80b883a 	mov	r5,r23
    9f70:	9809883a 	mov	r4,r19
    9f74:	102b883a 	mov	r21,r2
    9f78:	000b1700 	call	b170 <__mulsi3>
    9f7c:	b809883a 	mov	r4,r23
    9f80:	b00b883a 	mov	r5,r22
    9f84:	1039883a 	mov	fp,r2
    9f88:	000b1700 	call	b170 <__mulsi3>
    9f8c:	a008d43a 	srli	r4,r20,16
    9f90:	1545883a 	add	r2,r2,r21
    9f94:	d8c00517 	ldw	r3,20(sp)
    9f98:	2085883a 	add	r2,r4,r2
    9f9c:	d9800717 	ldw	r6,28(sp)
    9fa0:	da000617 	ldw	r8,24(sp)
    9fa4:	1540022e 	bgeu	r2,r21,9fb0 <__muldf3+0x3c4>
    9fa8:	01000074 	movhi	r4,1
    9fac:	e139883a 	add	fp,fp,r4
    9fb0:	100e943a 	slli	r7,r2,16
    9fb4:	1004d43a 	srli	r2,r2,16
    9fb8:	882ad43a 	srli	r21,r17,16
    9fbc:	a53fffcc 	andi	r20,r20,65535
    9fc0:	8c7fffcc 	andi	r17,r17,65535
    9fc4:	3d29883a 	add	r20,r7,r20
    9fc8:	b00b883a 	mov	r5,r22
    9fcc:	8809883a 	mov	r4,r17
    9fd0:	d8c00515 	stw	r3,20(sp)
    9fd4:	d9800715 	stw	r6,28(sp)
    9fd8:	da000615 	stw	r8,24(sp)
    9fdc:	dd000115 	stw	r20,4(sp)
    9fe0:	d8800015 	stw	r2,0(sp)
    9fe4:	000b1700 	call	b170 <__mulsi3>
    9fe8:	980b883a 	mov	r5,r19
    9fec:	8809883a 	mov	r4,r17
    9ff0:	d8800215 	stw	r2,8(sp)
    9ff4:	000b1700 	call	b170 <__mulsi3>
    9ff8:	9809883a 	mov	r4,r19
    9ffc:	a80b883a 	mov	r5,r21
    a000:	1029883a 	mov	r20,r2
    a004:	000b1700 	call	b170 <__mulsi3>
    a008:	b00b883a 	mov	r5,r22
    a00c:	a809883a 	mov	r4,r21
    a010:	d8800415 	stw	r2,16(sp)
    a014:	000b1700 	call	b170 <__mulsi3>
    a018:	d9c00217 	ldw	r7,8(sp)
    a01c:	1505883a 	add	r2,r2,r20
    a020:	d8c00517 	ldw	r3,20(sp)
    a024:	3826d43a 	srli	r19,r7,16
    a028:	d9800717 	ldw	r6,28(sp)
    a02c:	da000617 	ldw	r8,24(sp)
    a030:	9885883a 	add	r2,r19,r2
    a034:	da400417 	ldw	r9,16(sp)
    a038:	1500022e 	bgeu	r2,r20,a044 <__muldf3+0x458>
    a03c:	01000074 	movhi	r4,1
    a040:	4913883a 	add	r9,r9,r4
    a044:	1028d43a 	srli	r20,r2,16
    a048:	1004943a 	slli	r2,r2,16
    a04c:	802cd43a 	srli	r22,r16,16
    a050:	843fffcc 	andi	r16,r16,65535
    a054:	3cffffcc 	andi	r19,r7,65535
    a058:	9009883a 	mov	r4,r18
    a05c:	800b883a 	mov	r5,r16
    a060:	a269883a 	add	r20,r20,r9
    a064:	d8c00515 	stw	r3,20(sp)
    a068:	d9800715 	stw	r6,28(sp)
    a06c:	da000615 	stw	r8,24(sp)
    a070:	14e7883a 	add	r19,r2,r19
    a074:	000b1700 	call	b170 <__mulsi3>
    a078:	9009883a 	mov	r4,r18
    a07c:	b00b883a 	mov	r5,r22
    a080:	d8800315 	stw	r2,12(sp)
    a084:	000b1700 	call	b170 <__mulsi3>
    a088:	b809883a 	mov	r4,r23
    a08c:	b00b883a 	mov	r5,r22
    a090:	d8800215 	stw	r2,8(sp)
    a094:	000b1700 	call	b170 <__mulsi3>
    a098:	b80b883a 	mov	r5,r23
    a09c:	8009883a 	mov	r4,r16
    a0a0:	d8800415 	stw	r2,16(sp)
    a0a4:	000b1700 	call	b170 <__mulsi3>
    a0a8:	da800317 	ldw	r10,12(sp)
    a0ac:	d9c00217 	ldw	r7,8(sp)
    a0b0:	d9000017 	ldw	r4,0(sp)
    a0b4:	502ed43a 	srli	r23,r10,16
    a0b8:	11c5883a 	add	r2,r2,r7
    a0bc:	24e5883a 	add	r18,r4,r19
    a0c0:	b885883a 	add	r2,r23,r2
    a0c4:	d8c00517 	ldw	r3,20(sp)
    a0c8:	d9800717 	ldw	r6,28(sp)
    a0cc:	da000617 	ldw	r8,24(sp)
    a0d0:	da400417 	ldw	r9,16(sp)
    a0d4:	11c0022e 	bgeu	r2,r7,a0e0 <__muldf3+0x4f4>
    a0d8:	01000074 	movhi	r4,1
    a0dc:	4913883a 	add	r9,r9,r4
    a0e0:	100ed43a 	srli	r7,r2,16
    a0e4:	1004943a 	slli	r2,r2,16
    a0e8:	55ffffcc 	andi	r23,r10,65535
    a0ec:	3a53883a 	add	r9,r7,r9
    a0f0:	8809883a 	mov	r4,r17
    a0f4:	800b883a 	mov	r5,r16
    a0f8:	d8c00515 	stw	r3,20(sp)
    a0fc:	d9800715 	stw	r6,28(sp)
    a100:	da000615 	stw	r8,24(sp)
    a104:	da400415 	stw	r9,16(sp)
    a108:	15ef883a 	add	r23,r2,r23
    a10c:	000b1700 	call	b170 <__mulsi3>
    a110:	8809883a 	mov	r4,r17
    a114:	b00b883a 	mov	r5,r22
    a118:	d8800215 	stw	r2,8(sp)
    a11c:	000b1700 	call	b170 <__mulsi3>
    a120:	b00b883a 	mov	r5,r22
    a124:	a809883a 	mov	r4,r21
    a128:	d8800315 	stw	r2,12(sp)
    a12c:	000b1700 	call	b170 <__mulsi3>
    a130:	8009883a 	mov	r4,r16
    a134:	a80b883a 	mov	r5,r21
    a138:	1023883a 	mov	r17,r2
    a13c:	000b1700 	call	b170 <__mulsi3>
    a140:	d9c00217 	ldw	r7,8(sp)
    a144:	da800317 	ldw	r10,12(sp)
    a148:	d8c00517 	ldw	r3,20(sp)
    a14c:	3808d43a 	srli	r4,r7,16
    a150:	1285883a 	add	r2,r2,r10
    a154:	d9800717 	ldw	r6,28(sp)
    a158:	2085883a 	add	r2,r4,r2
    a15c:	da000617 	ldw	r8,24(sp)
    a160:	da400417 	ldw	r9,16(sp)
    a164:	1280022e 	bgeu	r2,r10,a170 <__muldf3+0x584>
    a168:	01000074 	movhi	r4,1
    a16c:	8923883a 	add	r17,r17,r4
    a170:	1008943a 	slli	r4,r2,16
    a174:	39ffffcc 	andi	r7,r7,65535
    a178:	e4b9883a 	add	fp,fp,r18
    a17c:	21cf883a 	add	r7,r4,r7
    a180:	e4e7803a 	cmpltu	r19,fp,r19
    a184:	3d0f883a 	add	r7,r7,r20
    a188:	bf39883a 	add	fp,r23,fp
    a18c:	99c9883a 	add	r4,r19,r7
    a190:	e5ef803a 	cmpltu	r23,fp,r23
    a194:	490b883a 	add	r5,r9,r4
    a198:	1004d43a 	srli	r2,r2,16
    a19c:	b965883a 	add	r18,r23,r5
    a1a0:	24c9803a 	cmpltu	r4,r4,r19
    a1a4:	3d29803a 	cmpltu	r20,r7,r20
    a1a8:	a128b03a 	or	r20,r20,r4
    a1ac:	95ef803a 	cmpltu	r23,r18,r23
    a1b0:	2a53803a 	cmpltu	r9,r5,r9
    a1b4:	a0a9883a 	add	r20,r20,r2
    a1b8:	4deeb03a 	or	r23,r9,r23
    a1bc:	a5ef883a 	add	r23,r20,r23
    a1c0:	bc63883a 	add	r17,r23,r17
    a1c4:	e004927a 	slli	r2,fp,9
    a1c8:	d9000117 	ldw	r4,4(sp)
    a1cc:	882e927a 	slli	r23,r17,9
    a1d0:	9022d5fa 	srli	r17,r18,23
    a1d4:	e038d5fa 	srli	fp,fp,23
    a1d8:	1104b03a 	or	r2,r2,r4
    a1dc:	9024927a 	slli	r18,r18,9
    a1e0:	1004c03a 	cmpne	r2,r2,zero
    a1e4:	bc62b03a 	or	r17,r23,r17
    a1e8:	1738b03a 	or	fp,r2,fp
    a1ec:	8880402c 	andhi	r2,r17,256
    a1f0:	e4a4b03a 	or	r18,fp,r18
    a1f4:	10000726 	beq	r2,zero,a214 <__muldf3+0x628>
    a1f8:	9006d07a 	srli	r3,r18,1
    a1fc:	880497fa 	slli	r2,r17,31
    a200:	9480004c 	andi	r18,r18,1
    a204:	8822d07a 	srli	r17,r17,1
    a208:	1ca4b03a 	or	r18,r3,r18
    a20c:	14a4b03a 	or	r18,r2,r18
    a210:	4007883a 	mov	r3,r8
    a214:	1880ffc4 	addi	r2,r3,1023
    a218:	0080460e 	bge	zero,r2,a334 <__muldf3+0x748>
    a21c:	910001cc 	andi	r4,r18,7
    a220:	20000726 	beq	r4,zero,a240 <__muldf3+0x654>
    a224:	910003cc 	andi	r4,r18,15
    a228:	01400104 	movi	r5,4
    a22c:	21400426 	beq	r4,r5,a240 <__muldf3+0x654>
    a230:	9149883a 	add	r4,r18,r5
    a234:	24a5803a 	cmpltu	r18,r4,r18
    a238:	8ca3883a 	add	r17,r17,r18
    a23c:	2025883a 	mov	r18,r4
    a240:	8900402c 	andhi	r4,r17,256
    a244:	20000426 	beq	r4,zero,a258 <__muldf3+0x66c>
    a248:	18810004 	addi	r2,r3,1024
    a24c:	00ffc034 	movhi	r3,65280
    a250:	18ffffc4 	addi	r3,r3,-1
    a254:	88e2703a 	and	r17,r17,r3
    a258:	00c1ff84 	movi	r3,2046
    a25c:	18bf1316 	blt	r3,r2,9eac <_gp+0xffff4e08>
    a260:	882c977a 	slli	r22,r17,29
    a264:	9024d0fa 	srli	r18,r18,3
    a268:	8822927a 	slli	r17,r17,9
    a26c:	1081ffcc 	andi	r2,r2,2047
    a270:	b4acb03a 	or	r22,r22,r18
    a274:	8820d33a 	srli	r16,r17,12
    a278:	3027883a 	mov	r19,r6
    a27c:	003eba06 	br	9d68 <_gp+0xffff4cc4>
    a280:	8080022c 	andhi	r2,r16,8
    a284:	10000926 	beq	r2,zero,a2ac <__muldf3+0x6c0>
    a288:	8880022c 	andhi	r2,r17,8
    a28c:	1000071e 	bne	r2,zero,a2ac <__muldf3+0x6c0>
    a290:	00800434 	movhi	r2,16
    a294:	8c000234 	orhi	r16,r17,8
    a298:	10bfffc4 	addi	r2,r2,-1
    a29c:	e027883a 	mov	r19,fp
    a2a0:	80a0703a 	and	r16,r16,r2
    a2a4:	902d883a 	mov	r22,r18
    a2a8:	003f1706 	br	9f08 <_gp+0xffff4e64>
    a2ac:	00800434 	movhi	r2,16
    a2b0:	84000234 	orhi	r16,r16,8
    a2b4:	10bfffc4 	addi	r2,r2,-1
    a2b8:	80a0703a 	and	r16,r16,r2
    a2bc:	003f1206 	br	9f08 <_gp+0xffff4e64>
    a2c0:	147ff604 	addi	r17,r2,-40
    a2c4:	3462983a 	sll	r17,r6,r17
    a2c8:	0025883a 	mov	r18,zero
    a2cc:	003ef306 	br	9e9c <_gp+0xffff4df8>
    a2d0:	3009883a 	mov	r4,r6
    a2d4:	d9400215 	stw	r5,8(sp)
    a2d8:	d9800715 	stw	r6,28(sp)
    a2dc:	da400415 	stw	r9,16(sp)
    a2e0:	da800315 	stw	r10,12(sp)
    a2e4:	000af580 	call	af58 <__clzsi2>
    a2e8:	10800804 	addi	r2,r2,32
    a2ec:	da800317 	ldw	r10,12(sp)
    a2f0:	da400417 	ldw	r9,16(sp)
    a2f4:	d9800717 	ldw	r6,28(sp)
    a2f8:	d9400217 	ldw	r5,8(sp)
    a2fc:	003edd06 	br	9e74 <_gp+0xffff4dd0>
    a300:	143ff604 	addi	r16,r2,-40
    a304:	ac20983a 	sll	r16,r21,r16
    a308:	002d883a 	mov	r22,zero
    a30c:	003ec106 	br	9e14 <_gp+0xffff4d70>
    a310:	d9800715 	stw	r6,28(sp)
    a314:	d9c00215 	stw	r7,8(sp)
    a318:	da400415 	stw	r9,16(sp)
    a31c:	000af580 	call	af58 <__clzsi2>
    a320:	10800804 	addi	r2,r2,32
    a324:	da400417 	ldw	r9,16(sp)
    a328:	d9c00217 	ldw	r7,8(sp)
    a32c:	d9800717 	ldw	r6,28(sp)
    a330:	003eae06 	br	9dec <_gp+0xffff4d48>
    a334:	00c00044 	movi	r3,1
    a338:	1887c83a 	sub	r3,r3,r2
    a33c:	01000e04 	movi	r4,56
    a340:	20fe8516 	blt	r4,r3,9d58 <_gp+0xffff4cb4>
    a344:	010007c4 	movi	r4,31
    a348:	20c01b16 	blt	r4,r3,a3b8 <__muldf3+0x7cc>
    a34c:	00800804 	movi	r2,32
    a350:	10c5c83a 	sub	r2,r2,r3
    a354:	888a983a 	sll	r5,r17,r2
    a358:	90c8d83a 	srl	r4,r18,r3
    a35c:	9084983a 	sll	r2,r18,r2
    a360:	88e2d83a 	srl	r17,r17,r3
    a364:	2906b03a 	or	r3,r5,r4
    a368:	1004c03a 	cmpne	r2,r2,zero
    a36c:	1886b03a 	or	r3,r3,r2
    a370:	188001cc 	andi	r2,r3,7
    a374:	10000726 	beq	r2,zero,a394 <__muldf3+0x7a8>
    a378:	188003cc 	andi	r2,r3,15
    a37c:	01000104 	movi	r4,4
    a380:	11000426 	beq	r2,r4,a394 <__muldf3+0x7a8>
    a384:	1805883a 	mov	r2,r3
    a388:	10c00104 	addi	r3,r2,4
    a38c:	1885803a 	cmpltu	r2,r3,r2
    a390:	88a3883a 	add	r17,r17,r2
    a394:	8880202c 	andhi	r2,r17,128
    a398:	10001c26 	beq	r2,zero,a40c <__muldf3+0x820>
    a39c:	3027883a 	mov	r19,r6
    a3a0:	00800044 	movi	r2,1
    a3a4:	0021883a 	mov	r16,zero
    a3a8:	002d883a 	mov	r22,zero
    a3ac:	003e6e06 	br	9d68 <_gp+0xffff4cc4>
    a3b0:	4007883a 	mov	r3,r8
    a3b4:	003f9706 	br	a214 <_gp+0xffff5170>
    a3b8:	017ff844 	movi	r5,-31
    a3bc:	2885c83a 	sub	r2,r5,r2
    a3c0:	888ad83a 	srl	r5,r17,r2
    a3c4:	00800804 	movi	r2,32
    a3c8:	18801a26 	beq	r3,r2,a434 <__muldf3+0x848>
    a3cc:	01001004 	movi	r4,64
    a3d0:	20c7c83a 	sub	r3,r4,r3
    a3d4:	88e2983a 	sll	r17,r17,r3
    a3d8:	8ca4b03a 	or	r18,r17,r18
    a3dc:	9004c03a 	cmpne	r2,r18,zero
    a3e0:	2884b03a 	or	r2,r5,r2
    a3e4:	144001cc 	andi	r17,r2,7
    a3e8:	88000d1e 	bne	r17,zero,a420 <__muldf3+0x834>
    a3ec:	0021883a 	mov	r16,zero
    a3f0:	102cd0fa 	srli	r22,r2,3
    a3f4:	3027883a 	mov	r19,r6
    a3f8:	0005883a 	mov	r2,zero
    a3fc:	b46cb03a 	or	r22,r22,r17
    a400:	003e5906 	br	9d68 <_gp+0xffff4cc4>
    a404:	1007883a 	mov	r3,r2
    a408:	0023883a 	mov	r17,zero
    a40c:	8820927a 	slli	r16,r17,9
    a410:	1805883a 	mov	r2,r3
    a414:	8822977a 	slli	r17,r17,29
    a418:	8020d33a 	srli	r16,r16,12
    a41c:	003ff406 	br	a3f0 <_gp+0xffff534c>
    a420:	10c003cc 	andi	r3,r2,15
    a424:	01000104 	movi	r4,4
    a428:	193ff626 	beq	r3,r4,a404 <_gp+0xffff5360>
    a42c:	0023883a 	mov	r17,zero
    a430:	003fd506 	br	a388 <_gp+0xffff52e4>
    a434:	0023883a 	mov	r17,zero
    a438:	003fe706 	br	a3d8 <_gp+0xffff5334>
    a43c:	00800434 	movhi	r2,16
    a440:	8c000234 	orhi	r16,r17,8
    a444:	10bfffc4 	addi	r2,r2,-1
    a448:	3027883a 	mov	r19,r6
    a44c:	80a0703a 	and	r16,r16,r2
    a450:	902d883a 	mov	r22,r18
    a454:	003eac06 	br	9f08 <_gp+0xffff4e64>

0000a458 <__subdf3>:
    a458:	02000434 	movhi	r8,16
    a45c:	423fffc4 	addi	r8,r8,-1
    a460:	defffb04 	addi	sp,sp,-20
    a464:	2a14703a 	and	r10,r5,r8
    a468:	3812d53a 	srli	r9,r7,20
    a46c:	3a10703a 	and	r8,r7,r8
    a470:	2006d77a 	srli	r3,r4,29
    a474:	3004d77a 	srli	r2,r6,29
    a478:	dc000015 	stw	r16,0(sp)
    a47c:	501490fa 	slli	r10,r10,3
    a480:	2820d53a 	srli	r16,r5,20
    a484:	401090fa 	slli	r8,r8,3
    a488:	dc800215 	stw	r18,8(sp)
    a48c:	dc400115 	stw	r17,4(sp)
    a490:	dfc00415 	stw	ra,16(sp)
    a494:	202290fa 	slli	r17,r4,3
    a498:	dcc00315 	stw	r19,12(sp)
    a49c:	4a41ffcc 	andi	r9,r9,2047
    a4a0:	0101ffc4 	movi	r4,2047
    a4a4:	2824d7fa 	srli	r18,r5,31
    a4a8:	8401ffcc 	andi	r16,r16,2047
    a4ac:	50c6b03a 	or	r3,r10,r3
    a4b0:	380ed7fa 	srli	r7,r7,31
    a4b4:	408ab03a 	or	r5,r8,r2
    a4b8:	300c90fa 	slli	r6,r6,3
    a4bc:	49009626 	beq	r9,r4,a718 <__subdf3+0x2c0>
    a4c0:	39c0005c 	xori	r7,r7,1
    a4c4:	8245c83a 	sub	r2,r16,r9
    a4c8:	3c807426 	beq	r7,r18,a69c <__subdf3+0x244>
    a4cc:	0080af0e 	bge	zero,r2,a78c <__subdf3+0x334>
    a4d0:	48002a1e 	bne	r9,zero,a57c <__subdf3+0x124>
    a4d4:	2988b03a 	or	r4,r5,r6
    a4d8:	20009a1e 	bne	r4,zero,a744 <__subdf3+0x2ec>
    a4dc:	888001cc 	andi	r2,r17,7
    a4e0:	10000726 	beq	r2,zero,a500 <__subdf3+0xa8>
    a4e4:	888003cc 	andi	r2,r17,15
    a4e8:	01000104 	movi	r4,4
    a4ec:	11000426 	beq	r2,r4,a500 <__subdf3+0xa8>
    a4f0:	890b883a 	add	r5,r17,r4
    a4f4:	2c63803a 	cmpltu	r17,r5,r17
    a4f8:	1c47883a 	add	r3,r3,r17
    a4fc:	2823883a 	mov	r17,r5
    a500:	1880202c 	andhi	r2,r3,128
    a504:	10005926 	beq	r2,zero,a66c <__subdf3+0x214>
    a508:	84000044 	addi	r16,r16,1
    a50c:	0081ffc4 	movi	r2,2047
    a510:	8080be26 	beq	r16,r2,a80c <__subdf3+0x3b4>
    a514:	017fe034 	movhi	r5,65408
    a518:	297fffc4 	addi	r5,r5,-1
    a51c:	1946703a 	and	r3,r3,r5
    a520:	1804977a 	slli	r2,r3,29
    a524:	1806927a 	slli	r3,r3,9
    a528:	8822d0fa 	srli	r17,r17,3
    a52c:	8401ffcc 	andi	r16,r16,2047
    a530:	180ad33a 	srli	r5,r3,12
    a534:	9100004c 	andi	r4,r18,1
    a538:	1444b03a 	or	r2,r2,r17
    a53c:	80c1ffcc 	andi	r3,r16,2047
    a540:	1820953a 	slli	r16,r3,20
    a544:	20c03fcc 	andi	r3,r4,255
    a548:	180897fa 	slli	r4,r3,31
    a54c:	00c00434 	movhi	r3,16
    a550:	18ffffc4 	addi	r3,r3,-1
    a554:	28c6703a 	and	r3,r5,r3
    a558:	1c06b03a 	or	r3,r3,r16
    a55c:	1906b03a 	or	r3,r3,r4
    a560:	dfc00417 	ldw	ra,16(sp)
    a564:	dcc00317 	ldw	r19,12(sp)
    a568:	dc800217 	ldw	r18,8(sp)
    a56c:	dc400117 	ldw	r17,4(sp)
    a570:	dc000017 	ldw	r16,0(sp)
    a574:	dec00504 	addi	sp,sp,20
    a578:	f800283a 	ret
    a57c:	0101ffc4 	movi	r4,2047
    a580:	813fd626 	beq	r16,r4,a4dc <_gp+0xffff5438>
    a584:	29402034 	orhi	r5,r5,128
    a588:	01000e04 	movi	r4,56
    a58c:	2080a316 	blt	r4,r2,a81c <__subdf3+0x3c4>
    a590:	010007c4 	movi	r4,31
    a594:	2080c616 	blt	r4,r2,a8b0 <__subdf3+0x458>
    a598:	01000804 	movi	r4,32
    a59c:	2089c83a 	sub	r4,r4,r2
    a5a0:	2910983a 	sll	r8,r5,r4
    a5a4:	308ed83a 	srl	r7,r6,r2
    a5a8:	3108983a 	sll	r4,r6,r4
    a5ac:	2884d83a 	srl	r2,r5,r2
    a5b0:	41ccb03a 	or	r6,r8,r7
    a5b4:	2008c03a 	cmpne	r4,r4,zero
    a5b8:	310cb03a 	or	r6,r6,r4
    a5bc:	898dc83a 	sub	r6,r17,r6
    a5c0:	89a3803a 	cmpltu	r17,r17,r6
    a5c4:	1887c83a 	sub	r3,r3,r2
    a5c8:	1c47c83a 	sub	r3,r3,r17
    a5cc:	3023883a 	mov	r17,r6
    a5d0:	1880202c 	andhi	r2,r3,128
    a5d4:	10002326 	beq	r2,zero,a664 <__subdf3+0x20c>
    a5d8:	04c02034 	movhi	r19,128
    a5dc:	9cffffc4 	addi	r19,r19,-1
    a5e0:	1ce6703a 	and	r19,r3,r19
    a5e4:	98007a26 	beq	r19,zero,a7d0 <__subdf3+0x378>
    a5e8:	9809883a 	mov	r4,r19
    a5ec:	000af580 	call	af58 <__clzsi2>
    a5f0:	113ffe04 	addi	r4,r2,-8
    a5f4:	00c007c4 	movi	r3,31
    a5f8:	19007b16 	blt	r3,r4,a7e8 <__subdf3+0x390>
    a5fc:	00800804 	movi	r2,32
    a600:	1105c83a 	sub	r2,r2,r4
    a604:	8884d83a 	srl	r2,r17,r2
    a608:	9906983a 	sll	r3,r19,r4
    a60c:	8922983a 	sll	r17,r17,r4
    a610:	10c4b03a 	or	r2,r2,r3
    a614:	24007816 	blt	r4,r16,a7f8 <__subdf3+0x3a0>
    a618:	2421c83a 	sub	r16,r4,r16
    a61c:	80c00044 	addi	r3,r16,1
    a620:	010007c4 	movi	r4,31
    a624:	20c09516 	blt	r4,r3,a87c <__subdf3+0x424>
    a628:	01400804 	movi	r5,32
    a62c:	28cbc83a 	sub	r5,r5,r3
    a630:	88c8d83a 	srl	r4,r17,r3
    a634:	8962983a 	sll	r17,r17,r5
    a638:	114a983a 	sll	r5,r2,r5
    a63c:	10c6d83a 	srl	r3,r2,r3
    a640:	8804c03a 	cmpne	r2,r17,zero
    a644:	290ab03a 	or	r5,r5,r4
    a648:	28a2b03a 	or	r17,r5,r2
    a64c:	0021883a 	mov	r16,zero
    a650:	003fa206 	br	a4dc <_gp+0xffff5438>
    a654:	2090b03a 	or	r8,r4,r2
    a658:	40018e26 	beq	r8,zero,ac94 <__subdf3+0x83c>
    a65c:	1007883a 	mov	r3,r2
    a660:	2023883a 	mov	r17,r4
    a664:	888001cc 	andi	r2,r17,7
    a668:	103f9e1e 	bne	r2,zero,a4e4 <_gp+0xffff5440>
    a66c:	1804977a 	slli	r2,r3,29
    a670:	8822d0fa 	srli	r17,r17,3
    a674:	1810d0fa 	srli	r8,r3,3
    a678:	9100004c 	andi	r4,r18,1
    a67c:	1444b03a 	or	r2,r2,r17
    a680:	00c1ffc4 	movi	r3,2047
    a684:	80c02826 	beq	r16,r3,a728 <__subdf3+0x2d0>
    a688:	01400434 	movhi	r5,16
    a68c:	297fffc4 	addi	r5,r5,-1
    a690:	80e0703a 	and	r16,r16,r3
    a694:	414a703a 	and	r5,r8,r5
    a698:	003fa806 	br	a53c <_gp+0xffff5498>
    a69c:	0080630e 	bge	zero,r2,a82c <__subdf3+0x3d4>
    a6a0:	48003026 	beq	r9,zero,a764 <__subdf3+0x30c>
    a6a4:	0101ffc4 	movi	r4,2047
    a6a8:	813f8c26 	beq	r16,r4,a4dc <_gp+0xffff5438>
    a6ac:	29402034 	orhi	r5,r5,128
    a6b0:	01000e04 	movi	r4,56
    a6b4:	2080a90e 	bge	r4,r2,a95c <__subdf3+0x504>
    a6b8:	298cb03a 	or	r6,r5,r6
    a6bc:	3012c03a 	cmpne	r9,r6,zero
    a6c0:	0005883a 	mov	r2,zero
    a6c4:	4c53883a 	add	r9,r9,r17
    a6c8:	4c63803a 	cmpltu	r17,r9,r17
    a6cc:	10c7883a 	add	r3,r2,r3
    a6d0:	88c7883a 	add	r3,r17,r3
    a6d4:	4823883a 	mov	r17,r9
    a6d8:	1880202c 	andhi	r2,r3,128
    a6dc:	1000d026 	beq	r2,zero,aa20 <__subdf3+0x5c8>
    a6e0:	84000044 	addi	r16,r16,1
    a6e4:	0081ffc4 	movi	r2,2047
    a6e8:	8080fe26 	beq	r16,r2,aae4 <__subdf3+0x68c>
    a6ec:	00bfe034 	movhi	r2,65408
    a6f0:	10bfffc4 	addi	r2,r2,-1
    a6f4:	1886703a 	and	r3,r3,r2
    a6f8:	880ad07a 	srli	r5,r17,1
    a6fc:	180497fa 	slli	r2,r3,31
    a700:	8900004c 	andi	r4,r17,1
    a704:	2922b03a 	or	r17,r5,r4
    a708:	1806d07a 	srli	r3,r3,1
    a70c:	1462b03a 	or	r17,r2,r17
    a710:	3825883a 	mov	r18,r7
    a714:	003f7106 	br	a4dc <_gp+0xffff5438>
    a718:	2984b03a 	or	r2,r5,r6
    a71c:	103f6826 	beq	r2,zero,a4c0 <_gp+0xffff541c>
    a720:	39c03fcc 	andi	r7,r7,255
    a724:	003f6706 	br	a4c4 <_gp+0xffff5420>
    a728:	4086b03a 	or	r3,r8,r2
    a72c:	18015226 	beq	r3,zero,ac78 <__subdf3+0x820>
    a730:	00c00434 	movhi	r3,16
    a734:	41400234 	orhi	r5,r8,8
    a738:	18ffffc4 	addi	r3,r3,-1
    a73c:	28ca703a 	and	r5,r5,r3
    a740:	003f7e06 	br	a53c <_gp+0xffff5498>
    a744:	10bfffc4 	addi	r2,r2,-1
    a748:	1000491e 	bne	r2,zero,a870 <__subdf3+0x418>
    a74c:	898fc83a 	sub	r7,r17,r6
    a750:	89e3803a 	cmpltu	r17,r17,r7
    a754:	1947c83a 	sub	r3,r3,r5
    a758:	1c47c83a 	sub	r3,r3,r17
    a75c:	3823883a 	mov	r17,r7
    a760:	003f9b06 	br	a5d0 <_gp+0xffff552c>
    a764:	2988b03a 	or	r4,r5,r6
    a768:	203f5c26 	beq	r4,zero,a4dc <_gp+0xffff5438>
    a76c:	10bfffc4 	addi	r2,r2,-1
    a770:	1000931e 	bne	r2,zero,a9c0 <__subdf3+0x568>
    a774:	898d883a 	add	r6,r17,r6
    a778:	3463803a 	cmpltu	r17,r6,r17
    a77c:	1947883a 	add	r3,r3,r5
    a780:	88c7883a 	add	r3,r17,r3
    a784:	3023883a 	mov	r17,r6
    a788:	003fd306 	br	a6d8 <_gp+0xffff5634>
    a78c:	1000541e 	bne	r2,zero,a8e0 <__subdf3+0x488>
    a790:	80800044 	addi	r2,r16,1
    a794:	1081ffcc 	andi	r2,r2,2047
    a798:	01000044 	movi	r4,1
    a79c:	2080a20e 	bge	r4,r2,aa28 <__subdf3+0x5d0>
    a7a0:	8989c83a 	sub	r4,r17,r6
    a7a4:	8905803a 	cmpltu	r2,r17,r4
    a7a8:	1967c83a 	sub	r19,r3,r5
    a7ac:	98a7c83a 	sub	r19,r19,r2
    a7b0:	9880202c 	andhi	r2,r19,128
    a7b4:	10006326 	beq	r2,zero,a944 <__subdf3+0x4ec>
    a7b8:	3463c83a 	sub	r17,r6,r17
    a7bc:	28c7c83a 	sub	r3,r5,r3
    a7c0:	344d803a 	cmpltu	r6,r6,r17
    a7c4:	19a7c83a 	sub	r19,r3,r6
    a7c8:	3825883a 	mov	r18,r7
    a7cc:	983f861e 	bne	r19,zero,a5e8 <_gp+0xffff5544>
    a7d0:	8809883a 	mov	r4,r17
    a7d4:	000af580 	call	af58 <__clzsi2>
    a7d8:	10800804 	addi	r2,r2,32
    a7dc:	113ffe04 	addi	r4,r2,-8
    a7e0:	00c007c4 	movi	r3,31
    a7e4:	193f850e 	bge	r3,r4,a5fc <_gp+0xffff5558>
    a7e8:	10bff604 	addi	r2,r2,-40
    a7ec:	8884983a 	sll	r2,r17,r2
    a7f0:	0023883a 	mov	r17,zero
    a7f4:	243f880e 	bge	r4,r16,a618 <_gp+0xffff5574>
    a7f8:	00ffe034 	movhi	r3,65408
    a7fc:	18ffffc4 	addi	r3,r3,-1
    a800:	8121c83a 	sub	r16,r16,r4
    a804:	10c6703a 	and	r3,r2,r3
    a808:	003f3406 	br	a4dc <_gp+0xffff5438>
    a80c:	9100004c 	andi	r4,r18,1
    a810:	000b883a 	mov	r5,zero
    a814:	0005883a 	mov	r2,zero
    a818:	003f4806 	br	a53c <_gp+0xffff5498>
    a81c:	298cb03a 	or	r6,r5,r6
    a820:	300cc03a 	cmpne	r6,r6,zero
    a824:	0005883a 	mov	r2,zero
    a828:	003f6406 	br	a5bc <_gp+0xffff5518>
    a82c:	10009a1e 	bne	r2,zero,aa98 <__subdf3+0x640>
    a830:	82400044 	addi	r9,r16,1
    a834:	4881ffcc 	andi	r2,r9,2047
    a838:	02800044 	movi	r10,1
    a83c:	5080670e 	bge	r10,r2,a9dc <__subdf3+0x584>
    a840:	0081ffc4 	movi	r2,2047
    a844:	4880af26 	beq	r9,r2,ab04 <__subdf3+0x6ac>
    a848:	898d883a 	add	r6,r17,r6
    a84c:	1945883a 	add	r2,r3,r5
    a850:	3447803a 	cmpltu	r3,r6,r17
    a854:	1887883a 	add	r3,r3,r2
    a858:	182297fa 	slli	r17,r3,31
    a85c:	300cd07a 	srli	r6,r6,1
    a860:	1806d07a 	srli	r3,r3,1
    a864:	4821883a 	mov	r16,r9
    a868:	89a2b03a 	or	r17,r17,r6
    a86c:	003f1b06 	br	a4dc <_gp+0xffff5438>
    a870:	0101ffc4 	movi	r4,2047
    a874:	813f441e 	bne	r16,r4,a588 <_gp+0xffff54e4>
    a878:	003f1806 	br	a4dc <_gp+0xffff5438>
    a87c:	843ff844 	addi	r16,r16,-31
    a880:	01400804 	movi	r5,32
    a884:	1408d83a 	srl	r4,r2,r16
    a888:	19405026 	beq	r3,r5,a9cc <__subdf3+0x574>
    a88c:	01401004 	movi	r5,64
    a890:	28c7c83a 	sub	r3,r5,r3
    a894:	10c4983a 	sll	r2,r2,r3
    a898:	88a2b03a 	or	r17,r17,r2
    a89c:	8822c03a 	cmpne	r17,r17,zero
    a8a0:	2462b03a 	or	r17,r4,r17
    a8a4:	0007883a 	mov	r3,zero
    a8a8:	0021883a 	mov	r16,zero
    a8ac:	003f6d06 	br	a664 <_gp+0xffff55c0>
    a8b0:	11fff804 	addi	r7,r2,-32
    a8b4:	01000804 	movi	r4,32
    a8b8:	29ced83a 	srl	r7,r5,r7
    a8bc:	11004526 	beq	r2,r4,a9d4 <__subdf3+0x57c>
    a8c0:	01001004 	movi	r4,64
    a8c4:	2089c83a 	sub	r4,r4,r2
    a8c8:	2904983a 	sll	r2,r5,r4
    a8cc:	118cb03a 	or	r6,r2,r6
    a8d0:	300cc03a 	cmpne	r6,r6,zero
    a8d4:	398cb03a 	or	r6,r7,r6
    a8d8:	0005883a 	mov	r2,zero
    a8dc:	003f3706 	br	a5bc <_gp+0xffff5518>
    a8e0:	80002a26 	beq	r16,zero,a98c <__subdf3+0x534>
    a8e4:	0101ffc4 	movi	r4,2047
    a8e8:	49006626 	beq	r9,r4,aa84 <__subdf3+0x62c>
    a8ec:	0085c83a 	sub	r2,zero,r2
    a8f0:	18c02034 	orhi	r3,r3,128
    a8f4:	01000e04 	movi	r4,56
    a8f8:	20807e16 	blt	r4,r2,aaf4 <__subdf3+0x69c>
    a8fc:	010007c4 	movi	r4,31
    a900:	2080e716 	blt	r4,r2,aca0 <__subdf3+0x848>
    a904:	01000804 	movi	r4,32
    a908:	2089c83a 	sub	r4,r4,r2
    a90c:	1914983a 	sll	r10,r3,r4
    a910:	8890d83a 	srl	r8,r17,r2
    a914:	8908983a 	sll	r4,r17,r4
    a918:	1884d83a 	srl	r2,r3,r2
    a91c:	5222b03a 	or	r17,r10,r8
    a920:	2006c03a 	cmpne	r3,r4,zero
    a924:	88e2b03a 	or	r17,r17,r3
    a928:	3463c83a 	sub	r17,r6,r17
    a92c:	2885c83a 	sub	r2,r5,r2
    a930:	344d803a 	cmpltu	r6,r6,r17
    a934:	1187c83a 	sub	r3,r2,r6
    a938:	4821883a 	mov	r16,r9
    a93c:	3825883a 	mov	r18,r7
    a940:	003f2306 	br	a5d0 <_gp+0xffff552c>
    a944:	24d0b03a 	or	r8,r4,r19
    a948:	40001b1e 	bne	r8,zero,a9b8 <__subdf3+0x560>
    a94c:	0005883a 	mov	r2,zero
    a950:	0009883a 	mov	r4,zero
    a954:	0021883a 	mov	r16,zero
    a958:	003f4906 	br	a680 <_gp+0xffff55dc>
    a95c:	010007c4 	movi	r4,31
    a960:	20803a16 	blt	r4,r2,aa4c <__subdf3+0x5f4>
    a964:	01000804 	movi	r4,32
    a968:	2089c83a 	sub	r4,r4,r2
    a96c:	2912983a 	sll	r9,r5,r4
    a970:	3090d83a 	srl	r8,r6,r2
    a974:	3108983a 	sll	r4,r6,r4
    a978:	2884d83a 	srl	r2,r5,r2
    a97c:	4a12b03a 	or	r9,r9,r8
    a980:	2008c03a 	cmpne	r4,r4,zero
    a984:	4912b03a 	or	r9,r9,r4
    a988:	003f4e06 	br	a6c4 <_gp+0xffff5620>
    a98c:	1c48b03a 	or	r4,r3,r17
    a990:	20003c26 	beq	r4,zero,aa84 <__subdf3+0x62c>
    a994:	0084303a 	nor	r2,zero,r2
    a998:	1000381e 	bne	r2,zero,aa7c <__subdf3+0x624>
    a99c:	3463c83a 	sub	r17,r6,r17
    a9a0:	28c5c83a 	sub	r2,r5,r3
    a9a4:	344d803a 	cmpltu	r6,r6,r17
    a9a8:	1187c83a 	sub	r3,r2,r6
    a9ac:	4821883a 	mov	r16,r9
    a9b0:	3825883a 	mov	r18,r7
    a9b4:	003f0606 	br	a5d0 <_gp+0xffff552c>
    a9b8:	2023883a 	mov	r17,r4
    a9bc:	003f0906 	br	a5e4 <_gp+0xffff5540>
    a9c0:	0101ffc4 	movi	r4,2047
    a9c4:	813f3a1e 	bne	r16,r4,a6b0 <_gp+0xffff560c>
    a9c8:	003ec406 	br	a4dc <_gp+0xffff5438>
    a9cc:	0005883a 	mov	r2,zero
    a9d0:	003fb106 	br	a898 <_gp+0xffff57f4>
    a9d4:	0005883a 	mov	r2,zero
    a9d8:	003fbc06 	br	a8cc <_gp+0xffff5828>
    a9dc:	1c44b03a 	or	r2,r3,r17
    a9e0:	80008e1e 	bne	r16,zero,ac1c <__subdf3+0x7c4>
    a9e4:	1000c826 	beq	r2,zero,ad08 <__subdf3+0x8b0>
    a9e8:	2984b03a 	or	r2,r5,r6
    a9ec:	103ebb26 	beq	r2,zero,a4dc <_gp+0xffff5438>
    a9f0:	8989883a 	add	r4,r17,r6
    a9f4:	1945883a 	add	r2,r3,r5
    a9f8:	2447803a 	cmpltu	r3,r4,r17
    a9fc:	1887883a 	add	r3,r3,r2
    aa00:	1880202c 	andhi	r2,r3,128
    aa04:	2023883a 	mov	r17,r4
    aa08:	103f1626 	beq	r2,zero,a664 <_gp+0xffff55c0>
    aa0c:	00bfe034 	movhi	r2,65408
    aa10:	10bfffc4 	addi	r2,r2,-1
    aa14:	5021883a 	mov	r16,r10
    aa18:	1886703a 	and	r3,r3,r2
    aa1c:	003eaf06 	br	a4dc <_gp+0xffff5438>
    aa20:	3825883a 	mov	r18,r7
    aa24:	003f0f06 	br	a664 <_gp+0xffff55c0>
    aa28:	1c44b03a 	or	r2,r3,r17
    aa2c:	8000251e 	bne	r16,zero,aac4 <__subdf3+0x66c>
    aa30:	1000661e 	bne	r2,zero,abcc <__subdf3+0x774>
    aa34:	2990b03a 	or	r8,r5,r6
    aa38:	40009626 	beq	r8,zero,ac94 <__subdf3+0x83c>
    aa3c:	2807883a 	mov	r3,r5
    aa40:	3023883a 	mov	r17,r6
    aa44:	3825883a 	mov	r18,r7
    aa48:	003ea406 	br	a4dc <_gp+0xffff5438>
    aa4c:	127ff804 	addi	r9,r2,-32
    aa50:	01000804 	movi	r4,32
    aa54:	2a52d83a 	srl	r9,r5,r9
    aa58:	11008c26 	beq	r2,r4,ac8c <__subdf3+0x834>
    aa5c:	01001004 	movi	r4,64
    aa60:	2085c83a 	sub	r2,r4,r2
    aa64:	2884983a 	sll	r2,r5,r2
    aa68:	118cb03a 	or	r6,r2,r6
    aa6c:	300cc03a 	cmpne	r6,r6,zero
    aa70:	4992b03a 	or	r9,r9,r6
    aa74:	0005883a 	mov	r2,zero
    aa78:	003f1206 	br	a6c4 <_gp+0xffff5620>
    aa7c:	0101ffc4 	movi	r4,2047
    aa80:	493f9c1e 	bne	r9,r4,a8f4 <_gp+0xffff5850>
    aa84:	2807883a 	mov	r3,r5
    aa88:	3023883a 	mov	r17,r6
    aa8c:	4821883a 	mov	r16,r9
    aa90:	3825883a 	mov	r18,r7
    aa94:	003e9106 	br	a4dc <_gp+0xffff5438>
    aa98:	80001f1e 	bne	r16,zero,ab18 <__subdf3+0x6c0>
    aa9c:	1c48b03a 	or	r4,r3,r17
    aaa0:	20005a26 	beq	r4,zero,ac0c <__subdf3+0x7b4>
    aaa4:	0084303a 	nor	r2,zero,r2
    aaa8:	1000561e 	bne	r2,zero,ac04 <__subdf3+0x7ac>
    aaac:	89a3883a 	add	r17,r17,r6
    aab0:	1945883a 	add	r2,r3,r5
    aab4:	898d803a 	cmpltu	r6,r17,r6
    aab8:	3087883a 	add	r3,r6,r2
    aabc:	4821883a 	mov	r16,r9
    aac0:	003f0506 	br	a6d8 <_gp+0xffff5634>
    aac4:	10002b1e 	bne	r2,zero,ab74 <__subdf3+0x71c>
    aac8:	2984b03a 	or	r2,r5,r6
    aacc:	10008026 	beq	r2,zero,acd0 <__subdf3+0x878>
    aad0:	2807883a 	mov	r3,r5
    aad4:	3023883a 	mov	r17,r6
    aad8:	3825883a 	mov	r18,r7
    aadc:	0401ffc4 	movi	r16,2047
    aae0:	003e7e06 	br	a4dc <_gp+0xffff5438>
    aae4:	3809883a 	mov	r4,r7
    aae8:	0011883a 	mov	r8,zero
    aaec:	0005883a 	mov	r2,zero
    aaf0:	003ee306 	br	a680 <_gp+0xffff55dc>
    aaf4:	1c62b03a 	or	r17,r3,r17
    aaf8:	8822c03a 	cmpne	r17,r17,zero
    aafc:	0005883a 	mov	r2,zero
    ab00:	003f8906 	br	a928 <_gp+0xffff5884>
    ab04:	3809883a 	mov	r4,r7
    ab08:	4821883a 	mov	r16,r9
    ab0c:	0011883a 	mov	r8,zero
    ab10:	0005883a 	mov	r2,zero
    ab14:	003eda06 	br	a680 <_gp+0xffff55dc>
    ab18:	0101ffc4 	movi	r4,2047
    ab1c:	49003b26 	beq	r9,r4,ac0c <__subdf3+0x7b4>
    ab20:	0085c83a 	sub	r2,zero,r2
    ab24:	18c02034 	orhi	r3,r3,128
    ab28:	01000e04 	movi	r4,56
    ab2c:	20806e16 	blt	r4,r2,ace8 <__subdf3+0x890>
    ab30:	010007c4 	movi	r4,31
    ab34:	20807716 	blt	r4,r2,ad14 <__subdf3+0x8bc>
    ab38:	01000804 	movi	r4,32
    ab3c:	2089c83a 	sub	r4,r4,r2
    ab40:	1914983a 	sll	r10,r3,r4
    ab44:	8890d83a 	srl	r8,r17,r2
    ab48:	8908983a 	sll	r4,r17,r4
    ab4c:	1884d83a 	srl	r2,r3,r2
    ab50:	5222b03a 	or	r17,r10,r8
    ab54:	2006c03a 	cmpne	r3,r4,zero
    ab58:	88e2b03a 	or	r17,r17,r3
    ab5c:	89a3883a 	add	r17,r17,r6
    ab60:	1145883a 	add	r2,r2,r5
    ab64:	898d803a 	cmpltu	r6,r17,r6
    ab68:	3087883a 	add	r3,r6,r2
    ab6c:	4821883a 	mov	r16,r9
    ab70:	003ed906 	br	a6d8 <_gp+0xffff5634>
    ab74:	2984b03a 	or	r2,r5,r6
    ab78:	10004226 	beq	r2,zero,ac84 <__subdf3+0x82c>
    ab7c:	1808d0fa 	srli	r4,r3,3
    ab80:	8822d0fa 	srli	r17,r17,3
    ab84:	1806977a 	slli	r3,r3,29
    ab88:	2080022c 	andhi	r2,r4,8
    ab8c:	1c62b03a 	or	r17,r3,r17
    ab90:	10000826 	beq	r2,zero,abb4 <__subdf3+0x75c>
    ab94:	2812d0fa 	srli	r9,r5,3
    ab98:	4880022c 	andhi	r2,r9,8
    ab9c:	1000051e 	bne	r2,zero,abb4 <__subdf3+0x75c>
    aba0:	300cd0fa 	srli	r6,r6,3
    aba4:	2804977a 	slli	r2,r5,29
    aba8:	4809883a 	mov	r4,r9
    abac:	3825883a 	mov	r18,r7
    abb0:	11a2b03a 	or	r17,r2,r6
    abb4:	8806d77a 	srli	r3,r17,29
    abb8:	200890fa 	slli	r4,r4,3
    abbc:	882290fa 	slli	r17,r17,3
    abc0:	0401ffc4 	movi	r16,2047
    abc4:	1906b03a 	or	r3,r3,r4
    abc8:	003e4406 	br	a4dc <_gp+0xffff5438>
    abcc:	2984b03a 	or	r2,r5,r6
    abd0:	103e4226 	beq	r2,zero,a4dc <_gp+0xffff5438>
    abd4:	8989c83a 	sub	r4,r17,r6
    abd8:	8911803a 	cmpltu	r8,r17,r4
    abdc:	1945c83a 	sub	r2,r3,r5
    abe0:	1205c83a 	sub	r2,r2,r8
    abe4:	1200202c 	andhi	r8,r2,128
    abe8:	403e9a26 	beq	r8,zero,a654 <_gp+0xffff55b0>
    abec:	3463c83a 	sub	r17,r6,r17
    abf0:	28c5c83a 	sub	r2,r5,r3
    abf4:	344d803a 	cmpltu	r6,r6,r17
    abf8:	1187c83a 	sub	r3,r2,r6
    abfc:	3825883a 	mov	r18,r7
    ac00:	003e3606 	br	a4dc <_gp+0xffff5438>
    ac04:	0101ffc4 	movi	r4,2047
    ac08:	493fc71e 	bne	r9,r4,ab28 <_gp+0xffff5a84>
    ac0c:	2807883a 	mov	r3,r5
    ac10:	3023883a 	mov	r17,r6
    ac14:	4821883a 	mov	r16,r9
    ac18:	003e3006 	br	a4dc <_gp+0xffff5438>
    ac1c:	10003626 	beq	r2,zero,acf8 <__subdf3+0x8a0>
    ac20:	2984b03a 	or	r2,r5,r6
    ac24:	10001726 	beq	r2,zero,ac84 <__subdf3+0x82c>
    ac28:	1808d0fa 	srli	r4,r3,3
    ac2c:	8822d0fa 	srli	r17,r17,3
    ac30:	1806977a 	slli	r3,r3,29
    ac34:	2080022c 	andhi	r2,r4,8
    ac38:	1c62b03a 	or	r17,r3,r17
    ac3c:	10000726 	beq	r2,zero,ac5c <__subdf3+0x804>
    ac40:	2812d0fa 	srli	r9,r5,3
    ac44:	4880022c 	andhi	r2,r9,8
    ac48:	1000041e 	bne	r2,zero,ac5c <__subdf3+0x804>
    ac4c:	300cd0fa 	srli	r6,r6,3
    ac50:	2804977a 	slli	r2,r5,29
    ac54:	4809883a 	mov	r4,r9
    ac58:	11a2b03a 	or	r17,r2,r6
    ac5c:	8806d77a 	srli	r3,r17,29
    ac60:	200890fa 	slli	r4,r4,3
    ac64:	882290fa 	slli	r17,r17,3
    ac68:	3825883a 	mov	r18,r7
    ac6c:	1906b03a 	or	r3,r3,r4
    ac70:	0401ffc4 	movi	r16,2047
    ac74:	003e1906 	br	a4dc <_gp+0xffff5438>
    ac78:	000b883a 	mov	r5,zero
    ac7c:	0005883a 	mov	r2,zero
    ac80:	003e2e06 	br	a53c <_gp+0xffff5498>
    ac84:	0401ffc4 	movi	r16,2047
    ac88:	003e1406 	br	a4dc <_gp+0xffff5438>
    ac8c:	0005883a 	mov	r2,zero
    ac90:	003f7506 	br	aa68 <_gp+0xffff59c4>
    ac94:	0005883a 	mov	r2,zero
    ac98:	0009883a 	mov	r4,zero
    ac9c:	003e7806 	br	a680 <_gp+0xffff55dc>
    aca0:	123ff804 	addi	r8,r2,-32
    aca4:	01000804 	movi	r4,32
    aca8:	1a10d83a 	srl	r8,r3,r8
    acac:	11002526 	beq	r2,r4,ad44 <__subdf3+0x8ec>
    acb0:	01001004 	movi	r4,64
    acb4:	2085c83a 	sub	r2,r4,r2
    acb8:	1884983a 	sll	r2,r3,r2
    acbc:	1444b03a 	or	r2,r2,r17
    acc0:	1004c03a 	cmpne	r2,r2,zero
    acc4:	40a2b03a 	or	r17,r8,r2
    acc8:	0005883a 	mov	r2,zero
    accc:	003f1606 	br	a928 <_gp+0xffff5884>
    acd0:	02000434 	movhi	r8,16
    acd4:	0009883a 	mov	r4,zero
    acd8:	423fffc4 	addi	r8,r8,-1
    acdc:	00bfffc4 	movi	r2,-1
    ace0:	0401ffc4 	movi	r16,2047
    ace4:	003e6606 	br	a680 <_gp+0xffff55dc>
    ace8:	1c62b03a 	or	r17,r3,r17
    acec:	8822c03a 	cmpne	r17,r17,zero
    acf0:	0005883a 	mov	r2,zero
    acf4:	003f9906 	br	ab5c <_gp+0xffff5ab8>
    acf8:	2807883a 	mov	r3,r5
    acfc:	3023883a 	mov	r17,r6
    ad00:	0401ffc4 	movi	r16,2047
    ad04:	003df506 	br	a4dc <_gp+0xffff5438>
    ad08:	2807883a 	mov	r3,r5
    ad0c:	3023883a 	mov	r17,r6
    ad10:	003df206 	br	a4dc <_gp+0xffff5438>
    ad14:	123ff804 	addi	r8,r2,-32
    ad18:	01000804 	movi	r4,32
    ad1c:	1a10d83a 	srl	r8,r3,r8
    ad20:	11000a26 	beq	r2,r4,ad4c <__subdf3+0x8f4>
    ad24:	01001004 	movi	r4,64
    ad28:	2085c83a 	sub	r2,r4,r2
    ad2c:	1884983a 	sll	r2,r3,r2
    ad30:	1444b03a 	or	r2,r2,r17
    ad34:	1004c03a 	cmpne	r2,r2,zero
    ad38:	40a2b03a 	or	r17,r8,r2
    ad3c:	0005883a 	mov	r2,zero
    ad40:	003f8606 	br	ab5c <_gp+0xffff5ab8>
    ad44:	0005883a 	mov	r2,zero
    ad48:	003fdc06 	br	acbc <_gp+0xffff5c18>
    ad4c:	0005883a 	mov	r2,zero
    ad50:	003ff706 	br	ad30 <_gp+0xffff5c8c>

0000ad54 <__fixdfsi>:
    ad54:	280cd53a 	srli	r6,r5,20
    ad58:	00c00434 	movhi	r3,16
    ad5c:	18ffffc4 	addi	r3,r3,-1
    ad60:	3181ffcc 	andi	r6,r6,2047
    ad64:	01c0ff84 	movi	r7,1022
    ad68:	28c6703a 	and	r3,r5,r3
    ad6c:	280ad7fa 	srli	r5,r5,31
    ad70:	3980120e 	bge	r7,r6,adbc <__fixdfsi+0x68>
    ad74:	00810744 	movi	r2,1053
    ad78:	11800c16 	blt	r2,r6,adac <__fixdfsi+0x58>
    ad7c:	00810cc4 	movi	r2,1075
    ad80:	1185c83a 	sub	r2,r2,r6
    ad84:	01c007c4 	movi	r7,31
    ad88:	18c00434 	orhi	r3,r3,16
    ad8c:	38800d16 	blt	r7,r2,adc4 <__fixdfsi+0x70>
    ad90:	31befb44 	addi	r6,r6,-1043
    ad94:	2084d83a 	srl	r2,r4,r2
    ad98:	1986983a 	sll	r3,r3,r6
    ad9c:	1884b03a 	or	r2,r3,r2
    ada0:	28000726 	beq	r5,zero,adc0 <__fixdfsi+0x6c>
    ada4:	0085c83a 	sub	r2,zero,r2
    ada8:	f800283a 	ret
    adac:	00a00034 	movhi	r2,32768
    adb0:	10bfffc4 	addi	r2,r2,-1
    adb4:	2885883a 	add	r2,r5,r2
    adb8:	f800283a 	ret
    adbc:	0005883a 	mov	r2,zero
    adc0:	f800283a 	ret
    adc4:	008104c4 	movi	r2,1043
    adc8:	1185c83a 	sub	r2,r2,r6
    adcc:	1884d83a 	srl	r2,r3,r2
    add0:	003ff306 	br	ada0 <_gp+0xffff5cfc>

0000add4 <__floatsidf>:
    add4:	defffd04 	addi	sp,sp,-12
    add8:	dfc00215 	stw	ra,8(sp)
    addc:	dc400115 	stw	r17,4(sp)
    ade0:	dc000015 	stw	r16,0(sp)
    ade4:	20002b26 	beq	r4,zero,ae94 <__floatsidf+0xc0>
    ade8:	2023883a 	mov	r17,r4
    adec:	2020d7fa 	srli	r16,r4,31
    adf0:	20002d16 	blt	r4,zero,aea8 <__floatsidf+0xd4>
    adf4:	8809883a 	mov	r4,r17
    adf8:	000af580 	call	af58 <__clzsi2>
    adfc:	01410784 	movi	r5,1054
    ae00:	288bc83a 	sub	r5,r5,r2
    ae04:	01010cc4 	movi	r4,1075
    ae08:	2149c83a 	sub	r4,r4,r5
    ae0c:	00c007c4 	movi	r3,31
    ae10:	1900160e 	bge	r3,r4,ae6c <__floatsidf+0x98>
    ae14:	00c104c4 	movi	r3,1043
    ae18:	1947c83a 	sub	r3,r3,r5
    ae1c:	88c6983a 	sll	r3,r17,r3
    ae20:	00800434 	movhi	r2,16
    ae24:	10bfffc4 	addi	r2,r2,-1
    ae28:	1886703a 	and	r3,r3,r2
    ae2c:	2941ffcc 	andi	r5,r5,2047
    ae30:	800d883a 	mov	r6,r16
    ae34:	0005883a 	mov	r2,zero
    ae38:	280a953a 	slli	r5,r5,20
    ae3c:	31803fcc 	andi	r6,r6,255
    ae40:	01000434 	movhi	r4,16
    ae44:	300c97fa 	slli	r6,r6,31
    ae48:	213fffc4 	addi	r4,r4,-1
    ae4c:	1906703a 	and	r3,r3,r4
    ae50:	1946b03a 	or	r3,r3,r5
    ae54:	1986b03a 	or	r3,r3,r6
    ae58:	dfc00217 	ldw	ra,8(sp)
    ae5c:	dc400117 	ldw	r17,4(sp)
    ae60:	dc000017 	ldw	r16,0(sp)
    ae64:	dec00304 	addi	sp,sp,12
    ae68:	f800283a 	ret
    ae6c:	00c002c4 	movi	r3,11
    ae70:	1887c83a 	sub	r3,r3,r2
    ae74:	88c6d83a 	srl	r3,r17,r3
    ae78:	8904983a 	sll	r2,r17,r4
    ae7c:	01000434 	movhi	r4,16
    ae80:	213fffc4 	addi	r4,r4,-1
    ae84:	2941ffcc 	andi	r5,r5,2047
    ae88:	1906703a 	and	r3,r3,r4
    ae8c:	800d883a 	mov	r6,r16
    ae90:	003fe906 	br	ae38 <_gp+0xffff5d94>
    ae94:	000d883a 	mov	r6,zero
    ae98:	000b883a 	mov	r5,zero
    ae9c:	0007883a 	mov	r3,zero
    aea0:	0005883a 	mov	r2,zero
    aea4:	003fe406 	br	ae38 <_gp+0xffff5d94>
    aea8:	0123c83a 	sub	r17,zero,r4
    aeac:	003fd106 	br	adf4 <_gp+0xffff5d50>

0000aeb0 <__floatunsidf>:
    aeb0:	defffe04 	addi	sp,sp,-8
    aeb4:	dc000015 	stw	r16,0(sp)
    aeb8:	dfc00115 	stw	ra,4(sp)
    aebc:	2021883a 	mov	r16,r4
    aec0:	20002226 	beq	r4,zero,af4c <__floatunsidf+0x9c>
    aec4:	000af580 	call	af58 <__clzsi2>
    aec8:	01010784 	movi	r4,1054
    aecc:	2089c83a 	sub	r4,r4,r2
    aed0:	01810cc4 	movi	r6,1075
    aed4:	310dc83a 	sub	r6,r6,r4
    aed8:	00c007c4 	movi	r3,31
    aedc:	1980120e 	bge	r3,r6,af28 <__floatunsidf+0x78>
    aee0:	00c104c4 	movi	r3,1043
    aee4:	1907c83a 	sub	r3,r3,r4
    aee8:	80ca983a 	sll	r5,r16,r3
    aeec:	00800434 	movhi	r2,16
    aef0:	10bfffc4 	addi	r2,r2,-1
    aef4:	2101ffcc 	andi	r4,r4,2047
    aef8:	0021883a 	mov	r16,zero
    aefc:	288a703a 	and	r5,r5,r2
    af00:	2008953a 	slli	r4,r4,20
    af04:	00c00434 	movhi	r3,16
    af08:	18ffffc4 	addi	r3,r3,-1
    af0c:	28c6703a 	and	r3,r5,r3
    af10:	8005883a 	mov	r2,r16
    af14:	1906b03a 	or	r3,r3,r4
    af18:	dfc00117 	ldw	ra,4(sp)
    af1c:	dc000017 	ldw	r16,0(sp)
    af20:	dec00204 	addi	sp,sp,8
    af24:	f800283a 	ret
    af28:	00c002c4 	movi	r3,11
    af2c:	188bc83a 	sub	r5,r3,r2
    af30:	814ad83a 	srl	r5,r16,r5
    af34:	00c00434 	movhi	r3,16
    af38:	18ffffc4 	addi	r3,r3,-1
    af3c:	81a0983a 	sll	r16,r16,r6
    af40:	2101ffcc 	andi	r4,r4,2047
    af44:	28ca703a 	and	r5,r5,r3
    af48:	003fed06 	br	af00 <_gp+0xffff5e5c>
    af4c:	0009883a 	mov	r4,zero
    af50:	000b883a 	mov	r5,zero
    af54:	003fea06 	br	af00 <_gp+0xffff5e5c>

0000af58 <__clzsi2>:
    af58:	00bfffd4 	movui	r2,65535
    af5c:	11000536 	bltu	r2,r4,af74 <__clzsi2+0x1c>
    af60:	00803fc4 	movi	r2,255
    af64:	11000f36 	bltu	r2,r4,afa4 <__clzsi2+0x4c>
    af68:	00800804 	movi	r2,32
    af6c:	0007883a 	mov	r3,zero
    af70:	00000506 	br	af88 <__clzsi2+0x30>
    af74:	00804034 	movhi	r2,256
    af78:	10bfffc4 	addi	r2,r2,-1
    af7c:	11000c2e 	bgeu	r2,r4,afb0 <__clzsi2+0x58>
    af80:	00800204 	movi	r2,8
    af84:	00c00604 	movi	r3,24
    af88:	20c8d83a 	srl	r4,r4,r3
    af8c:	00c00074 	movhi	r3,1
    af90:	18f32bc4 	addi	r3,r3,-13137
    af94:	1909883a 	add	r4,r3,r4
    af98:	20c00003 	ldbu	r3,0(r4)
    af9c:	10c5c83a 	sub	r2,r2,r3
    afa0:	f800283a 	ret
    afa4:	00800604 	movi	r2,24
    afa8:	00c00204 	movi	r3,8
    afac:	003ff606 	br	af88 <_gp+0xffff5ee4>
    afb0:	00800404 	movi	r2,16
    afb4:	1007883a 	mov	r3,r2
    afb8:	003ff306 	br	af88 <_gp+0xffff5ee4>

0000afbc <__divsi3>:
    afbc:	20001b16 	blt	r4,zero,b02c <__divsi3+0x70>
    afc0:	000f883a 	mov	r7,zero
    afc4:	28001616 	blt	r5,zero,b020 <__divsi3+0x64>
    afc8:	200d883a 	mov	r6,r4
    afcc:	29001a2e 	bgeu	r5,r4,b038 <__divsi3+0x7c>
    afd0:	00800804 	movi	r2,32
    afd4:	00c00044 	movi	r3,1
    afd8:	00000106 	br	afe0 <__divsi3+0x24>
    afdc:	10000d26 	beq	r2,zero,b014 <__divsi3+0x58>
    afe0:	294b883a 	add	r5,r5,r5
    afe4:	10bfffc4 	addi	r2,r2,-1
    afe8:	18c7883a 	add	r3,r3,r3
    afec:	293ffb36 	bltu	r5,r4,afdc <_gp+0xffff5f38>
    aff0:	0005883a 	mov	r2,zero
    aff4:	18000726 	beq	r3,zero,b014 <__divsi3+0x58>
    aff8:	0005883a 	mov	r2,zero
    affc:	31400236 	bltu	r6,r5,b008 <__divsi3+0x4c>
    b000:	314dc83a 	sub	r6,r6,r5
    b004:	10c4b03a 	or	r2,r2,r3
    b008:	1806d07a 	srli	r3,r3,1
    b00c:	280ad07a 	srli	r5,r5,1
    b010:	183ffa1e 	bne	r3,zero,affc <_gp+0xffff5f58>
    b014:	38000126 	beq	r7,zero,b01c <__divsi3+0x60>
    b018:	0085c83a 	sub	r2,zero,r2
    b01c:	f800283a 	ret
    b020:	014bc83a 	sub	r5,zero,r5
    b024:	39c0005c 	xori	r7,r7,1
    b028:	003fe706 	br	afc8 <_gp+0xffff5f24>
    b02c:	0109c83a 	sub	r4,zero,r4
    b030:	01c00044 	movi	r7,1
    b034:	003fe306 	br	afc4 <_gp+0xffff5f20>
    b038:	00c00044 	movi	r3,1
    b03c:	003fee06 	br	aff8 <_gp+0xffff5f54>

0000b040 <__modsi3>:
    b040:	20001716 	blt	r4,zero,b0a0 <__modsi3+0x60>
    b044:	000f883a 	mov	r7,zero
    b048:	2005883a 	mov	r2,r4
    b04c:	28001216 	blt	r5,zero,b098 <__modsi3+0x58>
    b050:	2900162e 	bgeu	r5,r4,b0ac <__modsi3+0x6c>
    b054:	01800804 	movi	r6,32
    b058:	00c00044 	movi	r3,1
    b05c:	00000106 	br	b064 <__modsi3+0x24>
    b060:	30000a26 	beq	r6,zero,b08c <__modsi3+0x4c>
    b064:	294b883a 	add	r5,r5,r5
    b068:	31bfffc4 	addi	r6,r6,-1
    b06c:	18c7883a 	add	r3,r3,r3
    b070:	293ffb36 	bltu	r5,r4,b060 <_gp+0xffff5fbc>
    b074:	18000526 	beq	r3,zero,b08c <__modsi3+0x4c>
    b078:	1806d07a 	srli	r3,r3,1
    b07c:	11400136 	bltu	r2,r5,b084 <__modsi3+0x44>
    b080:	1145c83a 	sub	r2,r2,r5
    b084:	280ad07a 	srli	r5,r5,1
    b088:	183ffb1e 	bne	r3,zero,b078 <_gp+0xffff5fd4>
    b08c:	38000126 	beq	r7,zero,b094 <__modsi3+0x54>
    b090:	0085c83a 	sub	r2,zero,r2
    b094:	f800283a 	ret
    b098:	014bc83a 	sub	r5,zero,r5
    b09c:	003fec06 	br	b050 <_gp+0xffff5fac>
    b0a0:	0109c83a 	sub	r4,zero,r4
    b0a4:	01c00044 	movi	r7,1
    b0a8:	003fe706 	br	b048 <_gp+0xffff5fa4>
    b0ac:	00c00044 	movi	r3,1
    b0b0:	003ff106 	br	b078 <_gp+0xffff5fd4>

0000b0b4 <__udivsi3>:
    b0b4:	200d883a 	mov	r6,r4
    b0b8:	2900152e 	bgeu	r5,r4,b110 <__udivsi3+0x5c>
    b0bc:	28001416 	blt	r5,zero,b110 <__udivsi3+0x5c>
    b0c0:	00800804 	movi	r2,32
    b0c4:	00c00044 	movi	r3,1
    b0c8:	00000206 	br	b0d4 <__udivsi3+0x20>
    b0cc:	10000e26 	beq	r2,zero,b108 <__udivsi3+0x54>
    b0d0:	28000516 	blt	r5,zero,b0e8 <__udivsi3+0x34>
    b0d4:	294b883a 	add	r5,r5,r5
    b0d8:	10bfffc4 	addi	r2,r2,-1
    b0dc:	18c7883a 	add	r3,r3,r3
    b0e0:	293ffa36 	bltu	r5,r4,b0cc <_gp+0xffff6028>
    b0e4:	18000826 	beq	r3,zero,b108 <__udivsi3+0x54>
    b0e8:	0005883a 	mov	r2,zero
    b0ec:	31400236 	bltu	r6,r5,b0f8 <__udivsi3+0x44>
    b0f0:	314dc83a 	sub	r6,r6,r5
    b0f4:	10c4b03a 	or	r2,r2,r3
    b0f8:	1806d07a 	srli	r3,r3,1
    b0fc:	280ad07a 	srli	r5,r5,1
    b100:	183ffa1e 	bne	r3,zero,b0ec <_gp+0xffff6048>
    b104:	f800283a 	ret
    b108:	0005883a 	mov	r2,zero
    b10c:	f800283a 	ret
    b110:	00c00044 	movi	r3,1
    b114:	003ff406 	br	b0e8 <_gp+0xffff6044>

0000b118 <__umodsi3>:
    b118:	2005883a 	mov	r2,r4
    b11c:	2900122e 	bgeu	r5,r4,b168 <__umodsi3+0x50>
    b120:	28001116 	blt	r5,zero,b168 <__umodsi3+0x50>
    b124:	01800804 	movi	r6,32
    b128:	00c00044 	movi	r3,1
    b12c:	00000206 	br	b138 <__umodsi3+0x20>
    b130:	30000c26 	beq	r6,zero,b164 <__umodsi3+0x4c>
    b134:	28000516 	blt	r5,zero,b14c <__umodsi3+0x34>
    b138:	294b883a 	add	r5,r5,r5
    b13c:	31bfffc4 	addi	r6,r6,-1
    b140:	18c7883a 	add	r3,r3,r3
    b144:	293ffa36 	bltu	r5,r4,b130 <_gp+0xffff608c>
    b148:	18000626 	beq	r3,zero,b164 <__umodsi3+0x4c>
    b14c:	1806d07a 	srli	r3,r3,1
    b150:	11400136 	bltu	r2,r5,b158 <__umodsi3+0x40>
    b154:	1145c83a 	sub	r2,r2,r5
    b158:	280ad07a 	srli	r5,r5,1
    b15c:	183ffb1e 	bne	r3,zero,b14c <_gp+0xffff60a8>
    b160:	f800283a 	ret
    b164:	f800283a 	ret
    b168:	00c00044 	movi	r3,1
    b16c:	003ff706 	br	b14c <_gp+0xffff60a8>

0000b170 <__mulsi3>:
    b170:	0005883a 	mov	r2,zero
    b174:	20000726 	beq	r4,zero,b194 <__mulsi3+0x24>
    b178:	20c0004c 	andi	r3,r4,1
    b17c:	2008d07a 	srli	r4,r4,1
    b180:	18000126 	beq	r3,zero,b188 <__mulsi3+0x18>
    b184:	1145883a 	add	r2,r2,r5
    b188:	294b883a 	add	r5,r5,r5
    b18c:	203ffa1e 	bne	r4,zero,b178 <_gp+0xffff60d4>
    b190:	f800283a 	ret
    b194:	f800283a 	ret

0000b198 <_snprintf_r>:
    b198:	3000040e 	bge	r6,zero,b1ac <_snprintf_r+0x14>
    b19c:	008022c4 	movi	r2,139
    b1a0:	20800015 	stw	r2,0(r4)
    b1a4:	00bfffc4 	movi	r2,-1
    b1a8:	f800283a 	ret
    b1ac:	defff604 	addi	sp,sp,-40
    b1b0:	00c08204 	movi	r3,520
    b1b4:	dfc00915 	stw	ra,36(sp)
    b1b8:	dc400815 	stw	r17,32(sp)
    b1bc:	dc000715 	stw	r16,28(sp)
    b1c0:	d8c0000d 	sth	r3,0(sp)
    b1c4:	d9400415 	stw	r5,16(sp)
    b1c8:	d9400215 	stw	r5,8(sp)
    b1cc:	3005883a 	mov	r2,r6
    b1d0:	30000226 	beq	r6,zero,b1dc <_snprintf_r+0x44>
    b1d4:	30ffffc4 	addi	r3,r6,-1
    b1d8:	00000106 	br	b1e0 <_snprintf_r+0x48>
    b1dc:	0007883a 	mov	r3,zero
    b1e0:	1021883a 	mov	r16,r2
    b1e4:	00bfffc4 	movi	r2,-1
    b1e8:	d880008d 	sth	r2,2(sp)
    b1ec:	00800074 	movhi	r2,1
    b1f0:	380d883a 	mov	r6,r7
    b1f4:	10ae2d04 	addi	r2,r2,-18252
    b1f8:	d9c00a04 	addi	r7,sp,40
    b1fc:	d80b883a 	mov	r5,sp
    b200:	d8c00515 	stw	r3,20(sp)
    b204:	d8c00315 	stw	r3,12(sp)
    b208:	2023883a 	mov	r17,r4
    b20c:	d8800115 	stw	r2,4(sp)
    b210:	d8000615 	stw	zero,24(sp)
    b214:	000b36c0 	call	b36c <___svfprintf_internal_r>
    b218:	00ffffc4 	movi	r3,-1
    b21c:	10c0020e 	bge	r2,r3,b228 <_snprintf_r+0x90>
    b220:	00c022c4 	movi	r3,139
    b224:	88c00015 	stw	r3,0(r17)
    b228:	80000226 	beq	r16,zero,b234 <_snprintf_r+0x9c>
    b22c:	d8c00417 	ldw	r3,16(sp)
    b230:	18000005 	stb	zero,0(r3)
    b234:	dfc00917 	ldw	ra,36(sp)
    b238:	dc400817 	ldw	r17,32(sp)
    b23c:	dc000717 	ldw	r16,28(sp)
    b240:	dec00a04 	addi	sp,sp,40
    b244:	f800283a 	ret

0000b248 <snprintf>:
    b248:	defff504 	addi	sp,sp,-44
    b24c:	dfc00915 	stw	ra,36(sp)
    b250:	dc400815 	stw	r17,32(sp)
    b254:	dc000715 	stw	r16,28(sp)
    b258:	d9c00a15 	stw	r7,40(sp)
    b25c:	00800074 	movhi	r2,1
    b260:	10b43604 	addi	r2,r2,-12072
    b264:	14400017 	ldw	r17,0(r2)
    b268:	2800040e 	bge	r5,zero,b27c <snprintf+0x34>
    b26c:	008022c4 	movi	r2,139
    b270:	88800015 	stw	r2,0(r17)
    b274:	00bfffc4 	movi	r2,-1
    b278:	00001c06 	br	b2ec <snprintf+0xa4>
    b27c:	00c08204 	movi	r3,520
    b280:	d8c0000d 	sth	r3,0(sp)
    b284:	d9000415 	stw	r4,16(sp)
    b288:	d9000215 	stw	r4,8(sp)
    b28c:	28000226 	beq	r5,zero,b298 <snprintf+0x50>
    b290:	28ffffc4 	addi	r3,r5,-1
    b294:	00000106 	br	b29c <snprintf+0x54>
    b298:	0007883a 	mov	r3,zero
    b29c:	d8c00515 	stw	r3,20(sp)
    b2a0:	d8c00315 	stw	r3,12(sp)
    b2a4:	11000017 	ldw	r4,0(r2)
    b2a8:	00ffffc4 	movi	r3,-1
    b2ac:	d8c0008d 	sth	r3,2(sp)
    b2b0:	00c00074 	movhi	r3,1
    b2b4:	18ee2d04 	addi	r3,r3,-18252
    b2b8:	2821883a 	mov	r16,r5
    b2bc:	d9c00a04 	addi	r7,sp,40
    b2c0:	d80b883a 	mov	r5,sp
    b2c4:	d8c00115 	stw	r3,4(sp)
    b2c8:	d8000615 	stw	zero,24(sp)
    b2cc:	000b36c0 	call	b36c <___svfprintf_internal_r>
    b2d0:	00ffffc4 	movi	r3,-1
    b2d4:	10c0020e 	bge	r2,r3,b2e0 <snprintf+0x98>
    b2d8:	00c022c4 	movi	r3,139
    b2dc:	88c00015 	stw	r3,0(r17)
    b2e0:	80000226 	beq	r16,zero,b2ec <snprintf+0xa4>
    b2e4:	d8c00417 	ldw	r3,16(sp)
    b2e8:	18000005 	stb	zero,0(r3)
    b2ec:	dfc00917 	ldw	ra,36(sp)
    b2f0:	dc400817 	ldw	r17,32(sp)
    b2f4:	dc000717 	ldw	r16,28(sp)
    b2f8:	dec00b04 	addi	sp,sp,44
    b2fc:	f800283a 	ret

0000b300 <print_repeat>:
    b300:	defffb04 	addi	sp,sp,-20
    b304:	dc800315 	stw	r18,12(sp)
    b308:	dc400215 	stw	r17,8(sp)
    b30c:	dc000115 	stw	r16,4(sp)
    b310:	dfc00415 	stw	ra,16(sp)
    b314:	2025883a 	mov	r18,r4
    b318:	2823883a 	mov	r17,r5
    b31c:	d9800005 	stb	r6,0(sp)
    b320:	3821883a 	mov	r16,r7
    b324:	04000a0e 	bge	zero,r16,b350 <print_repeat+0x50>
    b328:	88800117 	ldw	r2,4(r17)
    b32c:	01c00044 	movi	r7,1
    b330:	d80d883a 	mov	r6,sp
    b334:	880b883a 	mov	r5,r17
    b338:	9009883a 	mov	r4,r18
    b33c:	103ee83a 	callr	r2
    b340:	843fffc4 	addi	r16,r16,-1
    b344:	103ff726 	beq	r2,zero,b324 <_gp+0xffff6280>
    b348:	00bfffc4 	movi	r2,-1
    b34c:	00000106 	br	b354 <print_repeat+0x54>
    b350:	0005883a 	mov	r2,zero
    b354:	dfc00417 	ldw	ra,16(sp)
    b358:	dc800317 	ldw	r18,12(sp)
    b35c:	dc400217 	ldw	r17,8(sp)
    b360:	dc000117 	ldw	r16,4(sp)
    b364:	dec00504 	addi	sp,sp,20
    b368:	f800283a 	ret

0000b36c <___svfprintf_internal_r>:
    b36c:	deffe504 	addi	sp,sp,-108
    b370:	d8c00804 	addi	r3,sp,32
    b374:	ddc01815 	stw	r23,96(sp)
    b378:	dd801715 	stw	r22,92(sp)
    b37c:	dd401615 	stw	r21,88(sp)
    b380:	dd001515 	stw	r20,84(sp)
    b384:	dcc01415 	stw	r19,80(sp)
    b388:	dc801315 	stw	r18,76(sp)
    b38c:	dc401215 	stw	r17,72(sp)
    b390:	dc001115 	stw	r16,68(sp)
    b394:	dfc01a15 	stw	ra,104(sp)
    b398:	df001915 	stw	fp,100(sp)
    b39c:	2029883a 	mov	r20,r4
    b3a0:	2823883a 	mov	r17,r5
    b3a4:	382d883a 	mov	r22,r7
    b3a8:	d9800f15 	stw	r6,60(sp)
    b3ac:	0021883a 	mov	r16,zero
    b3b0:	d8000e15 	stw	zero,56(sp)
    b3b4:	d8000a15 	stw	zero,40(sp)
    b3b8:	002b883a 	mov	r21,zero
    b3bc:	0027883a 	mov	r19,zero
    b3c0:	0025883a 	mov	r18,zero
    b3c4:	d8000c15 	stw	zero,48(sp)
    b3c8:	d8000b15 	stw	zero,44(sp)
    b3cc:	002f883a 	mov	r23,zero
    b3d0:	d8c00915 	stw	r3,36(sp)
    b3d4:	d8c00f17 	ldw	r3,60(sp)
    b3d8:	19000003 	ldbu	r4,0(r3)
    b3dc:	20803fcc 	andi	r2,r4,255
    b3e0:	1080201c 	xori	r2,r2,128
    b3e4:	10bfe004 	addi	r2,r2,-128
    b3e8:	10011e26 	beq	r2,zero,b864 <___svfprintf_internal_r+0x4f8>
    b3ec:	00c00044 	movi	r3,1
    b3f0:	b8c01426 	beq	r23,r3,b444 <___svfprintf_internal_r+0xd8>
    b3f4:	1dc00216 	blt	r3,r23,b400 <___svfprintf_internal_r+0x94>
    b3f8:	b8000626 	beq	r23,zero,b414 <___svfprintf_internal_r+0xa8>
    b3fc:	00011506 	br	b854 <___svfprintf_internal_r+0x4e8>
    b400:	01400084 	movi	r5,2
    b404:	b9401d26 	beq	r23,r5,b47c <___svfprintf_internal_r+0x110>
    b408:	014000c4 	movi	r5,3
    b40c:	b9402b26 	beq	r23,r5,b4bc <___svfprintf_internal_r+0x150>
    b410:	00011006 	br	b854 <___svfprintf_internal_r+0x4e8>
    b414:	01400944 	movi	r5,37
    b418:	1140fc26 	beq	r2,r5,b80c <___svfprintf_internal_r+0x4a0>
    b41c:	88800117 	ldw	r2,4(r17)
    b420:	d9000005 	stb	r4,0(sp)
    b424:	01c00044 	movi	r7,1
    b428:	d80d883a 	mov	r6,sp
    b42c:	880b883a 	mov	r5,r17
    b430:	a009883a 	mov	r4,r20
    b434:	103ee83a 	callr	r2
    b438:	1000d81e 	bne	r2,zero,b79c <___svfprintf_internal_r+0x430>
    b43c:	84000044 	addi	r16,r16,1
    b440:	00010406 	br	b854 <___svfprintf_internal_r+0x4e8>
    b444:	01400c04 	movi	r5,48
    b448:	1140fa26 	beq	r2,r5,b834 <___svfprintf_internal_r+0x4c8>
    b44c:	01400944 	movi	r5,37
    b450:	11400a1e 	bne	r2,r5,b47c <___svfprintf_internal_r+0x110>
    b454:	d8800005 	stb	r2,0(sp)
    b458:	88800117 	ldw	r2,4(r17)
    b45c:	b80f883a 	mov	r7,r23
    b460:	d80d883a 	mov	r6,sp
    b464:	880b883a 	mov	r5,r17
    b468:	a009883a 	mov	r4,r20
    b46c:	103ee83a 	callr	r2
    b470:	1000ca1e 	bne	r2,zero,b79c <___svfprintf_internal_r+0x430>
    b474:	84000044 	addi	r16,r16,1
    b478:	0000f506 	br	b850 <___svfprintf_internal_r+0x4e4>
    b47c:	25fff404 	addi	r23,r4,-48
    b480:	bdc03fcc 	andi	r23,r23,255
    b484:	00c00244 	movi	r3,9
    b488:	1dc00936 	bltu	r3,r23,b4b0 <___svfprintf_internal_r+0x144>
    b48c:	00bfffc4 	movi	r2,-1
    b490:	90800426 	beq	r18,r2,b4a4 <___svfprintf_internal_r+0x138>
    b494:	01400284 	movi	r5,10
    b498:	9009883a 	mov	r4,r18
    b49c:	000b1700 	call	b170 <__mulsi3>
    b4a0:	00000106 	br	b4a8 <___svfprintf_internal_r+0x13c>
    b4a4:	0005883a 	mov	r2,zero
    b4a8:	b8a5883a 	add	r18,r23,r2
    b4ac:	0000e206 	br	b838 <___svfprintf_internal_r+0x4cc>
    b4b0:	01400b84 	movi	r5,46
    b4b4:	1140e426 	beq	r2,r5,b848 <___svfprintf_internal_r+0x4dc>
    b4b8:	05c00084 	movi	r23,2
    b4bc:	213ff404 	addi	r4,r4,-48
    b4c0:	27003fcc 	andi	fp,r4,255
    b4c4:	00c00244 	movi	r3,9
    b4c8:	1f000936 	bltu	r3,fp,b4f0 <___svfprintf_internal_r+0x184>
    b4cc:	00bfffc4 	movi	r2,-1
    b4d0:	98800426 	beq	r19,r2,b4e4 <___svfprintf_internal_r+0x178>
    b4d4:	01400284 	movi	r5,10
    b4d8:	9809883a 	mov	r4,r19
    b4dc:	000b1700 	call	b170 <__mulsi3>
    b4e0:	00000106 	br	b4e8 <___svfprintf_internal_r+0x17c>
    b4e4:	0005883a 	mov	r2,zero
    b4e8:	e0a7883a 	add	r19,fp,r2
    b4ec:	0000d906 	br	b854 <___svfprintf_internal_r+0x4e8>
    b4f0:	00c01b04 	movi	r3,108
    b4f4:	10c0d226 	beq	r2,r3,b840 <___svfprintf_internal_r+0x4d4>
    b4f8:	013fffc4 	movi	r4,-1
    b4fc:	99000226 	beq	r19,r4,b508 <___svfprintf_internal_r+0x19c>
    b500:	d8000b15 	stw	zero,44(sp)
    b504:	00000106 	br	b50c <___svfprintf_internal_r+0x1a0>
    b508:	04c00044 	movi	r19,1
    b50c:	01001a44 	movi	r4,105
    b510:	11001626 	beq	r2,r4,b56c <___svfprintf_internal_r+0x200>
    b514:	20800916 	blt	r4,r2,b53c <___svfprintf_internal_r+0x1d0>
    b518:	010018c4 	movi	r4,99
    b51c:	11008826 	beq	r2,r4,b740 <___svfprintf_internal_r+0x3d4>
    b520:	01001904 	movi	r4,100
    b524:	11001126 	beq	r2,r4,b56c <___svfprintf_internal_r+0x200>
    b528:	01001604 	movi	r4,88
    b52c:	1100c81e 	bne	r2,r4,b850 <___svfprintf_internal_r+0x4e4>
    b530:	00c00044 	movi	r3,1
    b534:	d8c00e15 	stw	r3,56(sp)
    b538:	00001506 	br	b590 <___svfprintf_internal_r+0x224>
    b53c:	01001cc4 	movi	r4,115
    b540:	11009826 	beq	r2,r4,b7a4 <___svfprintf_internal_r+0x438>
    b544:	20800416 	blt	r4,r2,b558 <___svfprintf_internal_r+0x1ec>
    b548:	01001bc4 	movi	r4,111
    b54c:	1100c01e 	bne	r2,r4,b850 <___svfprintf_internal_r+0x4e4>
    b550:	05400204 	movi	r21,8
    b554:	00000f06 	br	b594 <___svfprintf_internal_r+0x228>
    b558:	01001d44 	movi	r4,117
    b55c:	11000d26 	beq	r2,r4,b594 <___svfprintf_internal_r+0x228>
    b560:	01001e04 	movi	r4,120
    b564:	11000a26 	beq	r2,r4,b590 <___svfprintf_internal_r+0x224>
    b568:	0000b906 	br	b850 <___svfprintf_internal_r+0x4e4>
    b56c:	d8c00a17 	ldw	r3,40(sp)
    b570:	b7000104 	addi	fp,r22,4
    b574:	18000726 	beq	r3,zero,b594 <___svfprintf_internal_r+0x228>
    b578:	df000d15 	stw	fp,52(sp)
    b57c:	b5c00017 	ldw	r23,0(r22)
    b580:	b800080e 	bge	r23,zero,b5a4 <___svfprintf_internal_r+0x238>
    b584:	05efc83a 	sub	r23,zero,r23
    b588:	02400044 	movi	r9,1
    b58c:	00000606 	br	b5a8 <___svfprintf_internal_r+0x23c>
    b590:	05400404 	movi	r21,16
    b594:	b0c00104 	addi	r3,r22,4
    b598:	d8c00d15 	stw	r3,52(sp)
    b59c:	b5c00017 	ldw	r23,0(r22)
    b5a0:	d8000a15 	stw	zero,40(sp)
    b5a4:	0013883a 	mov	r9,zero
    b5a8:	d839883a 	mov	fp,sp
    b5ac:	b8001726 	beq	r23,zero,b60c <___svfprintf_internal_r+0x2a0>
    b5b0:	a80b883a 	mov	r5,r21
    b5b4:	b809883a 	mov	r4,r23
    b5b8:	da401015 	stw	r9,64(sp)
    b5bc:	000b0b40 	call	b0b4 <__udivsi3>
    b5c0:	a80b883a 	mov	r5,r21
    b5c4:	1009883a 	mov	r4,r2
    b5c8:	102d883a 	mov	r22,r2
    b5cc:	000b1700 	call	b170 <__mulsi3>
    b5d0:	b885c83a 	sub	r2,r23,r2
    b5d4:	00c00244 	movi	r3,9
    b5d8:	da401017 	ldw	r9,64(sp)
    b5dc:	18800216 	blt	r3,r2,b5e8 <___svfprintf_internal_r+0x27c>
    b5e0:	10800c04 	addi	r2,r2,48
    b5e4:	00000506 	br	b5fc <___svfprintf_internal_r+0x290>
    b5e8:	d8c00e17 	ldw	r3,56(sp)
    b5ec:	18000226 	beq	r3,zero,b5f8 <___svfprintf_internal_r+0x28c>
    b5f0:	10800dc4 	addi	r2,r2,55
    b5f4:	00000106 	br	b5fc <___svfprintf_internal_r+0x290>
    b5f8:	108015c4 	addi	r2,r2,87
    b5fc:	e0800005 	stb	r2,0(fp)
    b600:	b02f883a 	mov	r23,r22
    b604:	e7000044 	addi	fp,fp,1
    b608:	003fe806 	br	b5ac <_gp+0xffff6508>
    b60c:	e6efc83a 	sub	r23,fp,sp
    b610:	9dc5c83a 	sub	r2,r19,r23
    b614:	0080090e 	bge	zero,r2,b63c <___svfprintf_internal_r+0x2d0>
    b618:	e085883a 	add	r2,fp,r2
    b61c:	01400c04 	movi	r5,48
    b620:	d8c00917 	ldw	r3,36(sp)
    b624:	e009883a 	mov	r4,fp
    b628:	e0c0032e 	bgeu	fp,r3,b638 <___svfprintf_internal_r+0x2cc>
    b62c:	e7000044 	addi	fp,fp,1
    b630:	21400005 	stb	r5,0(r4)
    b634:	e0bffa1e 	bne	fp,r2,b620 <_gp+0xffff657c>
    b638:	e6efc83a 	sub	r23,fp,sp
    b63c:	d8c00b17 	ldw	r3,44(sp)
    b640:	4dd1883a 	add	r8,r9,r23
    b644:	922dc83a 	sub	r22,r18,r8
    b648:	18001626 	beq	r3,zero,b6a4 <___svfprintf_internal_r+0x338>
    b64c:	48000a26 	beq	r9,zero,b678 <___svfprintf_internal_r+0x30c>
    b650:	00800b44 	movi	r2,45
    b654:	d8800805 	stb	r2,32(sp)
    b658:	88800117 	ldw	r2,4(r17)
    b65c:	01c00044 	movi	r7,1
    b660:	d9800804 	addi	r6,sp,32
    b664:	880b883a 	mov	r5,r17
    b668:	a009883a 	mov	r4,r20
    b66c:	103ee83a 	callr	r2
    b670:	10004a1e 	bne	r2,zero,b79c <___svfprintf_internal_r+0x430>
    b674:	84000044 	addi	r16,r16,1
    b678:	0580070e 	bge	zero,r22,b698 <___svfprintf_internal_r+0x32c>
    b67c:	b00f883a 	mov	r7,r22
    b680:	01800c04 	movi	r6,48
    b684:	880b883a 	mov	r5,r17
    b688:	a009883a 	mov	r4,r20
    b68c:	000b3000 	call	b300 <print_repeat>
    b690:	1000421e 	bne	r2,zero,b79c <___svfprintf_internal_r+0x430>
    b694:	85a1883a 	add	r16,r16,r22
    b698:	e02d883a 	mov	r22,fp
    b69c:	bf2fc83a 	sub	r23,r23,fp
    b6a0:	00002006 	br	b724 <___svfprintf_internal_r+0x3b8>
    b6a4:	0580090e 	bge	zero,r22,b6cc <___svfprintf_internal_r+0x360>
    b6a8:	b00f883a 	mov	r7,r22
    b6ac:	01800804 	movi	r6,32
    b6b0:	880b883a 	mov	r5,r17
    b6b4:	a009883a 	mov	r4,r20
    b6b8:	da401015 	stw	r9,64(sp)
    b6bc:	000b3000 	call	b300 <print_repeat>
    b6c0:	da401017 	ldw	r9,64(sp)
    b6c4:	1000351e 	bne	r2,zero,b79c <___svfprintf_internal_r+0x430>
    b6c8:	85a1883a 	add	r16,r16,r22
    b6cc:	483ff226 	beq	r9,zero,b698 <_gp+0xffff65f4>
    b6d0:	00800b44 	movi	r2,45
    b6d4:	d8800805 	stb	r2,32(sp)
    b6d8:	88800117 	ldw	r2,4(r17)
    b6dc:	01c00044 	movi	r7,1
    b6e0:	d9800804 	addi	r6,sp,32
    b6e4:	880b883a 	mov	r5,r17
    b6e8:	a009883a 	mov	r4,r20
    b6ec:	103ee83a 	callr	r2
    b6f0:	10002a1e 	bne	r2,zero,b79c <___svfprintf_internal_r+0x430>
    b6f4:	84000044 	addi	r16,r16,1
    b6f8:	003fe706 	br	b698 <_gp+0xffff65f4>
    b6fc:	b5bfffc4 	addi	r22,r22,-1
    b700:	b0800003 	ldbu	r2,0(r22)
    b704:	01c00044 	movi	r7,1
    b708:	d9800804 	addi	r6,sp,32
    b70c:	d8800805 	stb	r2,32(sp)
    b710:	88800117 	ldw	r2,4(r17)
    b714:	880b883a 	mov	r5,r17
    b718:	a009883a 	mov	r4,r20
    b71c:	103ee83a 	callr	r2
    b720:	10001e1e 	bne	r2,zero,b79c <___svfprintf_internal_r+0x430>
    b724:	8585c83a 	sub	r2,r16,r22
    b728:	b5c9883a 	add	r4,r22,r23
    b72c:	e085883a 	add	r2,fp,r2
    b730:	013ff216 	blt	zero,r4,b6fc <_gp+0xffff6658>
    b734:	1021883a 	mov	r16,r2
    b738:	dd800d17 	ldw	r22,52(sp)
    b73c:	00004406 	br	b850 <___svfprintf_internal_r+0x4e4>
    b740:	00800044 	movi	r2,1
    b744:	1480080e 	bge	r2,r18,b768 <___svfprintf_internal_r+0x3fc>
    b748:	95ffffc4 	addi	r23,r18,-1
    b74c:	b80f883a 	mov	r7,r23
    b750:	01800804 	movi	r6,32
    b754:	880b883a 	mov	r5,r17
    b758:	a009883a 	mov	r4,r20
    b75c:	000b3000 	call	b300 <print_repeat>
    b760:	10000e1e 	bne	r2,zero,b79c <___svfprintf_internal_r+0x430>
    b764:	85e1883a 	add	r16,r16,r23
    b768:	b0800017 	ldw	r2,0(r22)
    b76c:	01c00044 	movi	r7,1
    b770:	d80d883a 	mov	r6,sp
    b774:	d8800005 	stb	r2,0(sp)
    b778:	88800117 	ldw	r2,4(r17)
    b77c:	880b883a 	mov	r5,r17
    b780:	a009883a 	mov	r4,r20
    b784:	b5c00104 	addi	r23,r22,4
    b788:	103ee83a 	callr	r2
    b78c:	1000031e 	bne	r2,zero,b79c <___svfprintf_internal_r+0x430>
    b790:	84000044 	addi	r16,r16,1
    b794:	b82d883a 	mov	r22,r23
    b798:	00002d06 	br	b850 <___svfprintf_internal_r+0x4e4>
    b79c:	00bfffc4 	movi	r2,-1
    b7a0:	00003106 	br	b868 <___svfprintf_internal_r+0x4fc>
    b7a4:	b5c00017 	ldw	r23,0(r22)
    b7a8:	b7000104 	addi	fp,r22,4
    b7ac:	b809883a 	mov	r4,r23
    b7b0:	000b9bc0 	call	b9bc <strlen>
    b7b4:	9091c83a 	sub	r8,r18,r2
    b7b8:	102d883a 	mov	r22,r2
    b7bc:	0200090e 	bge	zero,r8,b7e4 <___svfprintf_internal_r+0x478>
    b7c0:	400f883a 	mov	r7,r8
    b7c4:	01800804 	movi	r6,32
    b7c8:	880b883a 	mov	r5,r17
    b7cc:	a009883a 	mov	r4,r20
    b7d0:	da001015 	stw	r8,64(sp)
    b7d4:	000b3000 	call	b300 <print_repeat>
    b7d8:	da001017 	ldw	r8,64(sp)
    b7dc:	103fef1e 	bne	r2,zero,b79c <_gp+0xffff66f8>
    b7e0:	8221883a 	add	r16,r16,r8
    b7e4:	88800117 	ldw	r2,4(r17)
    b7e8:	b00f883a 	mov	r7,r22
    b7ec:	b80d883a 	mov	r6,r23
    b7f0:	880b883a 	mov	r5,r17
    b7f4:	a009883a 	mov	r4,r20
    b7f8:	103ee83a 	callr	r2
    b7fc:	103fe71e 	bne	r2,zero,b79c <_gp+0xffff66f8>
    b800:	85a1883a 	add	r16,r16,r22
    b804:	e02d883a 	mov	r22,fp
    b808:	00001106 	br	b850 <___svfprintf_internal_r+0x4e4>
    b80c:	00c00044 	movi	r3,1
    b810:	04ffffc4 	movi	r19,-1
    b814:	d8000e15 	stw	zero,56(sp)
    b818:	d8c00a15 	stw	r3,40(sp)
    b81c:	05400284 	movi	r21,10
    b820:	9825883a 	mov	r18,r19
    b824:	d8000c15 	stw	zero,48(sp)
    b828:	d8000b15 	stw	zero,44(sp)
    b82c:	182f883a 	mov	r23,r3
    b830:	00000806 	br	b854 <___svfprintf_internal_r+0x4e8>
    b834:	ddc00b15 	stw	r23,44(sp)
    b838:	05c00084 	movi	r23,2
    b83c:	00000506 	br	b854 <___svfprintf_internal_r+0x4e8>
    b840:	00c00044 	movi	r3,1
    b844:	d8c00c15 	stw	r3,48(sp)
    b848:	05c000c4 	movi	r23,3
    b84c:	00000106 	br	b854 <___svfprintf_internal_r+0x4e8>
    b850:	002f883a 	mov	r23,zero
    b854:	d8c00f17 	ldw	r3,60(sp)
    b858:	18c00044 	addi	r3,r3,1
    b85c:	d8c00f15 	stw	r3,60(sp)
    b860:	003edc06 	br	b3d4 <_gp+0xffff6330>
    b864:	8005883a 	mov	r2,r16
    b868:	dfc01a17 	ldw	ra,104(sp)
    b86c:	df001917 	ldw	fp,100(sp)
    b870:	ddc01817 	ldw	r23,96(sp)
    b874:	dd801717 	ldw	r22,92(sp)
    b878:	dd401617 	ldw	r21,88(sp)
    b87c:	dd001517 	ldw	r20,84(sp)
    b880:	dcc01417 	ldw	r19,80(sp)
    b884:	dc801317 	ldw	r18,76(sp)
    b888:	dc401217 	ldw	r17,72(sp)
    b88c:	dc001117 	ldw	r16,68(sp)
    b890:	dec01b04 	addi	sp,sp,108
    b894:	f800283a 	ret

0000b898 <__vfprintf_internal_unused>:
    b898:	00800074 	movhi	r2,1
    b89c:	10b43604 	addi	r2,r2,-12072
    b8a0:	300f883a 	mov	r7,r6
    b8a4:	280d883a 	mov	r6,r5
    b8a8:	200b883a 	mov	r5,r4
    b8ac:	11000017 	ldw	r4,0(r2)
    b8b0:	000b36c1 	jmpi	b36c <___svfprintf_internal_r>

0000b8b4 <__sfvwrite_small_str>:
    b8b4:	2880000b 	ldhu	r2,0(r5)
    b8b8:	10c0020c 	andi	r3,r2,8
    b8bc:	18002026 	beq	r3,zero,b940 <__sfvwrite_small_str+0x8c>
    b8c0:	28c0008f 	ldh	r3,2(r5)
    b8c4:	defffd04 	addi	sp,sp,-12
    b8c8:	dc000015 	stw	r16,0(sp)
    b8cc:	dfc00215 	stw	ra,8(sp)
    b8d0:	dc400115 	stw	r17,4(sp)
    b8d4:	2821883a 	mov	r16,r5
    b8d8:	1800150e 	bge	r3,zero,b930 <__sfvwrite_small_str+0x7c>
    b8dc:	10c0800c 	andi	r3,r2,512
    b8e0:	18001326 	beq	r3,zero,b930 <__sfvwrite_small_str+0x7c>
    b8e4:	2c400517 	ldw	r17,20(r5)
    b8e8:	89c0030e 	bge	r17,r7,b8f8 <__sfvwrite_small_str+0x44>
    b8ec:	10c0200c 	andi	r3,r2,128
    b8f0:	18000326 	beq	r3,zero,b900 <__sfvwrite_small_str+0x4c>
    b8f4:	00000e06 	br	b930 <__sfvwrite_small_str+0x7c>
    b8f8:	3c40010e 	bge	r7,r17,b900 <__sfvwrite_small_str+0x4c>
    b8fc:	3823883a 	mov	r17,r7
    b900:	81000417 	ldw	r4,16(r16)
    b904:	300b883a 	mov	r5,r6
    b908:	880d883a 	mov	r6,r17
    b90c:	000b95c0 	call	b95c <memmove>
    b910:	80800517 	ldw	r2,20(r16)
    b914:	1445c83a 	sub	r2,r2,r17
    b918:	80800515 	stw	r2,20(r16)
    b91c:	80800417 	ldw	r2,16(r16)
    b920:	1463883a 	add	r17,r2,r17
    b924:	84400415 	stw	r17,16(r16)
    b928:	0005883a 	mov	r2,zero
    b92c:	00000606 	br	b948 <__sfvwrite_small_str+0x94>
    b930:	10801014 	ori	r2,r2,64
    b934:	8080000d 	sth	r2,0(r16)
    b938:	00bfffc4 	movi	r2,-1
    b93c:	00000206 	br	b948 <__sfvwrite_small_str+0x94>
    b940:	00bfffc4 	movi	r2,-1
    b944:	f800283a 	ret
    b948:	dfc00217 	ldw	ra,8(sp)
    b94c:	dc400117 	ldw	r17,4(sp)
    b950:	dc000017 	ldw	r16,0(sp)
    b954:	dec00304 	addi	sp,sp,12
    b958:	f800283a 	ret

0000b95c <memmove>:
    b95c:	2005883a 	mov	r2,r4
    b960:	218f883a 	add	r7,r4,r6
    b964:	29000236 	bltu	r5,r4,b970 <memmove+0x14>
    b968:	1007883a 	mov	r3,r2
    b96c:	00000c06 	br	b9a0 <memmove+0x44>
    b970:	2987883a 	add	r3,r5,r6
    b974:	20fffc2e 	bgeu	r4,r3,b968 <_gp+0xffff68c4>
    b978:	380b883a 	mov	r5,r7
    b97c:	30cdc83a 	sub	r6,r6,r3
    b980:	1989883a 	add	r4,r3,r6
    b984:	20000526 	beq	r4,zero,b99c <memmove+0x40>
    b988:	18ffffc4 	addi	r3,r3,-1
    b98c:	19000003 	ldbu	r4,0(r3)
    b990:	297fffc4 	addi	r5,r5,-1
    b994:	29000005 	stb	r4,0(r5)
    b998:	003ff906 	br	b980 <_gp+0xffff68dc>
    b99c:	f800283a 	ret
    b9a0:	19c00526 	beq	r3,r7,b9b8 <memmove+0x5c>
    b9a4:	29000003 	ldbu	r4,0(r5)
    b9a8:	18c00044 	addi	r3,r3,1
    b9ac:	29400044 	addi	r5,r5,1
    b9b0:	193fffc5 	stb	r4,-1(r3)
    b9b4:	003ffa06 	br	b9a0 <_gp+0xffff68fc>
    b9b8:	f800283a 	ret

0000b9bc <strlen>:
    b9bc:	2005883a 	mov	r2,r4
    b9c0:	10c00007 	ldb	r3,0(r2)
    b9c4:	18000226 	beq	r3,zero,b9d0 <strlen+0x14>
    b9c8:	10800044 	addi	r2,r2,1
    b9cc:	003ffc06 	br	b9c0 <_gp+0xffff691c>
    b9d0:	1105c83a 	sub	r2,r2,r4
    b9d4:	f800283a 	ret

0000b9d8 <alt_ic_isr_register>:
  * @param irq              IRQ number
  * @return                 0 if successful, else error (-1)
  */
int alt_ic_isr_register(alt_u32 ic_id, alt_u32 irq, alt_isr_func isr, 
  void *isr_context, void *flags)
{
    b9d8:	defff904 	addi	sp,sp,-28
    b9dc:	dfc00615 	stw	ra,24(sp)
    b9e0:	df000515 	stw	fp,20(sp)
    b9e4:	df000504 	addi	fp,sp,20
    b9e8:	e13ffc15 	stw	r4,-16(fp)
    b9ec:	e17ffd15 	stw	r5,-12(fp)
    b9f0:	e1bffe15 	stw	r6,-8(fp)
    b9f4:	e1ffff15 	stw	r7,-4(fp)
    return alt_iic_isr_register(ic_id, irq, isr, isr_context, flags);
    b9f8:	e0800217 	ldw	r2,8(fp)
    b9fc:	d8800015 	stw	r2,0(sp)
    ba00:	e1ffff17 	ldw	r7,-4(fp)
    ba04:	e1bffe17 	ldw	r6,-8(fp)
    ba08:	e17ffd17 	ldw	r5,-12(fp)
    ba0c:	e13ffc17 	ldw	r4,-16(fp)
    ba10:	000bb880 	call	bb88 <alt_iic_isr_register>
}  
    ba14:	e037883a 	mov	sp,fp
    ba18:	dfc00117 	ldw	ra,4(sp)
    ba1c:	df000017 	ldw	fp,0(sp)
    ba20:	dec00204 	addi	sp,sp,8
    ba24:	f800283a 	ret

0000ba28 <alt_ic_irq_enable>:
  * @param ic_id            Ignored.
  * @param irq              IRQ number
  * @return                 0 if successful, else error (-1)
  */
int alt_ic_irq_enable (alt_u32 ic_id, alt_u32 irq)
{
    ba28:	defff904 	addi	sp,sp,-28
    ba2c:	df000615 	stw	fp,24(sp)
    ba30:	df000604 	addi	fp,sp,24
    ba34:	e13ffe15 	stw	r4,-8(fp)
    ba38:	e17fff15 	stw	r5,-4(fp)
    ba3c:	e0bfff17 	ldw	r2,-4(fp)
    ba40:	e0bffa15 	stw	r2,-24(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
    ba44:	0005303a 	rdctl	r2,status
    ba48:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
    ba4c:	e0fffb17 	ldw	r3,-20(fp)
    ba50:	00bfff84 	movi	r2,-2
    ba54:	1884703a 	and	r2,r3,r2
    ba58:	1001703a 	wrctl	status,r2
  
  return context;
    ba5c:	e0bffb17 	ldw	r2,-20(fp)
static ALT_INLINE int ALT_ALWAYS_INLINE alt_irq_enable (alt_u32 id)
{
  alt_irq_context  status;
  extern volatile alt_u32 alt_irq_active;

  status = alt_irq_disable_all ();
    ba60:	e0bffc15 	stw	r2,-16(fp)

  alt_irq_active |= (1 << id);
    ba64:	00c00044 	movi	r3,1
    ba68:	e0bffa17 	ldw	r2,-24(fp)
    ba6c:	1884983a 	sll	r2,r3,r2
    ba70:	1007883a 	mov	r3,r2
    ba74:	d0a0db17 	ldw	r2,-31892(gp)
    ba78:	1884b03a 	or	r2,r3,r2
    ba7c:	d0a0db15 	stw	r2,-31892(gp)
  NIOS2_WRITE_IENABLE (alt_irq_active);
    ba80:	d0a0db17 	ldw	r2,-31892(gp)
    ba84:	100170fa 	wrctl	ienable,r2
    ba88:	e0bffc17 	ldw	r2,-16(fp)
    ba8c:	e0bffd15 	stw	r2,-12(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
    ba90:	e0bffd17 	ldw	r2,-12(fp)
    ba94:	1001703a 	wrctl	status,r2

  alt_irq_enable_all(status);

  return 0;
    ba98:	0005883a 	mov	r2,zero
    return alt_irq_enable(irq);
    ba9c:	0001883a 	nop
}
    baa0:	e037883a 	mov	sp,fp
    baa4:	df000017 	ldw	fp,0(sp)
    baa8:	dec00104 	addi	sp,sp,4
    baac:	f800283a 	ret

0000bab0 <alt_ic_irq_disable>:
  * @param ic_id            Ignored.
  * @param irq              IRQ number
  * @return                 0 if successful, else error (-1)
  */
int alt_ic_irq_disable(alt_u32 ic_id, alt_u32 irq)
{
    bab0:	defff904 	addi	sp,sp,-28
    bab4:	df000615 	stw	fp,24(sp)
    bab8:	df000604 	addi	fp,sp,24
    babc:	e13ffe15 	stw	r4,-8(fp)
    bac0:	e17fff15 	stw	r5,-4(fp)
    bac4:	e0bfff17 	ldw	r2,-4(fp)
    bac8:	e0bffa15 	stw	r2,-24(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
    bacc:	0005303a 	rdctl	r2,status
    bad0:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
    bad4:	e0fffb17 	ldw	r3,-20(fp)
    bad8:	00bfff84 	movi	r2,-2
    badc:	1884703a 	and	r2,r3,r2
    bae0:	1001703a 	wrctl	status,r2
  
  return context;
    bae4:	e0bffb17 	ldw	r2,-20(fp)
static ALT_INLINE int ALT_ALWAYS_INLINE alt_irq_disable (alt_u32 id)
{
  alt_irq_context  status;
  extern volatile alt_u32 alt_irq_active;

  status = alt_irq_disable_all ();
    bae8:	e0bffc15 	stw	r2,-16(fp)

  alt_irq_active &= ~(1 << id);
    baec:	00c00044 	movi	r3,1
    baf0:	e0bffa17 	ldw	r2,-24(fp)
    baf4:	1884983a 	sll	r2,r3,r2
    baf8:	0084303a 	nor	r2,zero,r2
    bafc:	1007883a 	mov	r3,r2
    bb00:	d0a0db17 	ldw	r2,-31892(gp)
    bb04:	1884703a 	and	r2,r3,r2
    bb08:	d0a0db15 	stw	r2,-31892(gp)
  NIOS2_WRITE_IENABLE (alt_irq_active);
    bb0c:	d0a0db17 	ldw	r2,-31892(gp)
    bb10:	100170fa 	wrctl	ienable,r2
    bb14:	e0bffc17 	ldw	r2,-16(fp)
    bb18:	e0bffd15 	stw	r2,-12(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
    bb1c:	e0bffd17 	ldw	r2,-12(fp)
    bb20:	1001703a 	wrctl	status,r2

  alt_irq_enable_all(status);

  return 0;
    bb24:	0005883a 	mov	r2,zero
    return alt_irq_disable(irq);
    bb28:	0001883a 	nop
}
    bb2c:	e037883a 	mov	sp,fp
    bb30:	df000017 	ldw	fp,0(sp)
    bb34:	dec00104 	addi	sp,sp,4
    bb38:	f800283a 	ret

0000bb3c <alt_ic_irq_enabled>:
  * @param irq              IRQ number
  * @return                 Zero if corresponding interrupt is disabled and
  *                         non-zero otherwise.
  */
alt_u32 alt_ic_irq_enabled(alt_u32 ic_id, alt_u32 irq)
{
    bb3c:	defffc04 	addi	sp,sp,-16
    bb40:	df000315 	stw	fp,12(sp)
    bb44:	df000304 	addi	fp,sp,12
    bb48:	e13ffe15 	stw	r4,-8(fp)
    bb4c:	e17fff15 	stw	r5,-4(fp)
    alt_u32 irq_enabled;

    NIOS2_READ_IENABLE(irq_enabled);
    bb50:	000530fa 	rdctl	r2,ienable
    bb54:	e0bffd15 	stw	r2,-12(fp)

    return (irq_enabled & (1 << irq)) ? 1: 0;
    bb58:	00c00044 	movi	r3,1
    bb5c:	e0bfff17 	ldw	r2,-4(fp)
    bb60:	1884983a 	sll	r2,r3,r2
    bb64:	1007883a 	mov	r3,r2
    bb68:	e0bffd17 	ldw	r2,-12(fp)
    bb6c:	1884703a 	and	r2,r3,r2
    bb70:	1004c03a 	cmpne	r2,r2,zero
    bb74:	10803fcc 	andi	r2,r2,255
}
    bb78:	e037883a 	mov	sp,fp
    bb7c:	df000017 	ldw	fp,0(sp)
    bb80:	dec00104 	addi	sp,sp,4
    bb84:	f800283a 	ret

0000bb88 <alt_iic_isr_register>:
  * @param flags            
  * @return                 0 if successful, else error (-1)
  */
int alt_iic_isr_register(alt_u32 ic_id, alt_u32 irq, alt_isr_func isr, 
  void *isr_context, void *flags)
{
    bb88:	defff504 	addi	sp,sp,-44
    bb8c:	dfc00a15 	stw	ra,40(sp)
    bb90:	df000915 	stw	fp,36(sp)
    bb94:	df000904 	addi	fp,sp,36
    bb98:	e13ffc15 	stw	r4,-16(fp)
    bb9c:	e17ffd15 	stw	r5,-12(fp)
    bba0:	e1bffe15 	stw	r6,-8(fp)
    bba4:	e1ffff15 	stw	r7,-4(fp)
  int rc = -EINVAL;  
    bba8:	00bffa84 	movi	r2,-22
    bbac:	e0bff715 	stw	r2,-36(fp)
  int id = irq;             /* IRQ interpreted as the interrupt ID. */
    bbb0:	e0bffd17 	ldw	r2,-12(fp)
    bbb4:	e0bff815 	stw	r2,-32(fp)
  alt_irq_context status;

  if (id < ALT_NIRQ)
    bbb8:	e0bff817 	ldw	r2,-32(fp)
    bbbc:	10800808 	cmpgei	r2,r2,32
    bbc0:	1000271e 	bne	r2,zero,bc60 <alt_iic_isr_register+0xd8>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
    bbc4:	0005303a 	rdctl	r2,status
    bbc8:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
    bbcc:	e0fffb17 	ldw	r3,-20(fp)
    bbd0:	00bfff84 	movi	r2,-2
    bbd4:	1884703a 	and	r2,r3,r2
    bbd8:	1001703a 	wrctl	status,r2
  
  return context;
    bbdc:	e0bffb17 	ldw	r2,-20(fp)
     * interrupts are disabled while the handler tables are updated to ensure
     * that an interrupt doesn't occur while the tables are in an inconsistant
     * state.
     */

    status = alt_irq_disable_all();
    bbe0:	e0bffa15 	stw	r2,-24(fp)

    alt_irq[id].handler = isr;
    bbe4:	00800074 	movhi	r2,1
    bbe8:	10b50a04 	addi	r2,r2,-11224
    bbec:	e0fff817 	ldw	r3,-32(fp)
    bbf0:	180690fa 	slli	r3,r3,3
    bbf4:	10c5883a 	add	r2,r2,r3
    bbf8:	e0fffe17 	ldw	r3,-8(fp)
    bbfc:	10c00015 	stw	r3,0(r2)
    alt_irq[id].context = isr_context;
    bc00:	00800074 	movhi	r2,1
    bc04:	10b50a04 	addi	r2,r2,-11224
    bc08:	e0fff817 	ldw	r3,-32(fp)
    bc0c:	180690fa 	slli	r3,r3,3
    bc10:	10c5883a 	add	r2,r2,r3
    bc14:	10800104 	addi	r2,r2,4
    bc18:	e0ffff17 	ldw	r3,-4(fp)
    bc1c:	10c00015 	stw	r3,0(r2)

    rc = (isr) ? alt_ic_irq_enable(ic_id, id) : alt_ic_irq_disable(ic_id, id);
    bc20:	e0bffe17 	ldw	r2,-8(fp)
    bc24:	10000526 	beq	r2,zero,bc3c <alt_iic_isr_register+0xb4>
    bc28:	e0bff817 	ldw	r2,-32(fp)
    bc2c:	100b883a 	mov	r5,r2
    bc30:	e13ffc17 	ldw	r4,-16(fp)
    bc34:	000ba280 	call	ba28 <alt_ic_irq_enable>
    bc38:	00000406 	br	bc4c <alt_iic_isr_register+0xc4>
    bc3c:	e0bff817 	ldw	r2,-32(fp)
    bc40:	100b883a 	mov	r5,r2
    bc44:	e13ffc17 	ldw	r4,-16(fp)
    bc48:	000bab00 	call	bab0 <alt_ic_irq_disable>
    bc4c:	e0bff715 	stw	r2,-36(fp)
    bc50:	e0bffa17 	ldw	r2,-24(fp)
    bc54:	e0bff915 	stw	r2,-28(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
    bc58:	e0bff917 	ldw	r2,-28(fp)
    bc5c:	1001703a 	wrctl	status,r2

    alt_irq_enable_all(status);
  }

  return rc; 
    bc60:	e0bff717 	ldw	r2,-36(fp)
}
    bc64:	e037883a 	mov	sp,fp
    bc68:	dfc00117 	ldw	ra,4(sp)
    bc6c:	df000017 	ldw	fp,0(sp)
    bc70:	dec00204 	addi	sp,sp,8
    bc74:	f800283a 	ret

0000bc78 <alt_load_section>:
 */

static void ALT_INLINE alt_load_section (alt_u32* from, 
                                         alt_u32* to, 
                                         alt_u32* end)
{
    bc78:	defffc04 	addi	sp,sp,-16
    bc7c:	df000315 	stw	fp,12(sp)
    bc80:	df000304 	addi	fp,sp,12
    bc84:	e13ffd15 	stw	r4,-12(fp)
    bc88:	e17ffe15 	stw	r5,-8(fp)
    bc8c:	e1bfff15 	stw	r6,-4(fp)
  if (to != from)
    bc90:	e0fffe17 	ldw	r3,-8(fp)
    bc94:	e0bffd17 	ldw	r2,-12(fp)
    bc98:	18800c26 	beq	r3,r2,bccc <alt_load_section+0x54>
  {
    while( to != end )
    bc9c:	00000806 	br	bcc0 <alt_load_section+0x48>
    {
      *to++ = *from++;
    bca0:	e0bffe17 	ldw	r2,-8(fp)
    bca4:	10c00104 	addi	r3,r2,4
    bca8:	e0fffe15 	stw	r3,-8(fp)
    bcac:	e0fffd17 	ldw	r3,-12(fp)
    bcb0:	19000104 	addi	r4,r3,4
    bcb4:	e13ffd15 	stw	r4,-12(fp)
    bcb8:	18c00017 	ldw	r3,0(r3)
    bcbc:	10c00015 	stw	r3,0(r2)
                                         alt_u32* to, 
                                         alt_u32* end)
{
  if (to != from)
  {
    while( to != end )
    bcc0:	e0fffe17 	ldw	r3,-8(fp)
    bcc4:	e0bfff17 	ldw	r2,-4(fp)
    bcc8:	18bff51e 	bne	r3,r2,bca0 <_gp+0xffff6bfc>
    {
      *to++ = *from++;
    }
  }
}
    bccc:	0001883a 	nop
    bcd0:	e037883a 	mov	sp,fp
    bcd4:	df000017 	ldw	fp,0(sp)
    bcd8:	dec00104 	addi	sp,sp,4
    bcdc:	f800283a 	ret

0000bce0 <alt_load>:
 * there is no bootloader, so this application is responsible for loading to
 * RAM any sections that are required.
 */  

void alt_load (void)
{
    bce0:	defffe04 	addi	sp,sp,-8
    bce4:	dfc00115 	stw	ra,4(sp)
    bce8:	df000015 	stw	fp,0(sp)
    bcec:	d839883a 	mov	fp,sp
  /* 
   * Copy the .rwdata section. 
   */

  alt_load_section (&__flash_rwdata_start, 
    bcf0:	01800074 	movhi	r6,1
    bcf4:	31b43e04 	addi	r6,r6,-12040
    bcf8:	01400074 	movhi	r5,1
    bcfc:	29737904 	addi	r5,r5,-12828
    bd00:	01000074 	movhi	r4,1
    bd04:	21343e04 	addi	r4,r4,-12040
    bd08:	000bc780 	call	bc78 <alt_load_section>

  /*
   * Copy the exception handler.
   */

  alt_load_section (&__flash_exceptions_start, 
    bd0c:	01800074 	movhi	r6,1
    bd10:	31a08c04 	addi	r6,r6,-32208
    bd14:	01400074 	movhi	r5,1
    bd18:	29600804 	addi	r5,r5,-32736
    bd1c:	01000074 	movhi	r4,1
    bd20:	21200804 	addi	r4,r4,-32736
    bd24:	000bc780 	call	bc78 <alt_load_section>

  /*
   * Copy the .rodata section.
   */

  alt_load_section (&__flash_rodata_start, 
    bd28:	01800074 	movhi	r6,1
    bd2c:	31b37904 	addi	r6,r6,-12828
    bd30:	01400074 	movhi	r5,1
    bd34:	29732b04 	addi	r5,r5,-13140
    bd38:	01000074 	movhi	r4,1
    bd3c:	21332b04 	addi	r4,r4,-13140
    bd40:	000bc780 	call	bc78 <alt_load_section>
  
  /*
   * Now ensure that the caches are in synch.
   */
  
  alt_dcache_flush_all();
    bd44:	000c1c80 	call	c1c8 <alt_dcache_flush_all>
  alt_icache_flush_all();
    bd48:	000c2f40 	call	c2f4 <alt_icache_flush_all>
}
    bd4c:	0001883a 	nop
    bd50:	e037883a 	mov	sp,fp
    bd54:	dfc00117 	ldw	ra,4(sp)
    bd58:	df000017 	ldw	fp,0(sp)
    bd5c:	dec00204 	addi	sp,sp,8
    bd60:	f800283a 	ret

0000bd64 <alt_main>:
 * devices/filesystems/components in the system; and call the entry point for
 * the users application, i.e. main().
 */

void alt_main (void)
{
    bd64:	defffd04 	addi	sp,sp,-12
    bd68:	dfc00215 	stw	ra,8(sp)
    bd6c:	df000115 	stw	fp,4(sp)
    bd70:	df000104 	addi	fp,sp,4
#endif

  /* ALT LOG - please see HAL/sys/alt_log_printf.h for details */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Entering alt_main, calling alt_irq_init.\r\n");
  /* Initialize the interrupt controller. */
  alt_irq_init (NULL);
    bd74:	0009883a 	mov	r4,zero
    bd78:	000be040 	call	be04 <alt_irq_init>

  /* Initialize the operating system */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Done alt_irq_init, calling alt_os_init.\r\n");
  ALT_OS_INIT();
    bd7c:	0001883a 	nop
  ALT_LOG_PRINT_BOOT("[alt_main.c] Done OS Init, calling alt_sem_create.\r\n");
  ALT_SEM_CREATE (&alt_fd_list_lock, 1);

  /* Initialize the device drivers/software components. */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling alt_sys_init.\r\n");
  alt_sys_init();
    bd80:	000be3c0 	call	be3c <alt_sys_init>
   * devices be present (not equal to /dev/null) and if direct drivers
   * aren't being used.
   */

    ALT_LOG_PRINT_BOOT("[alt_main.c] Redirecting IO.\r\n");
    alt_io_redirect(ALT_STDOUT, ALT_STDIN, ALT_STDERR);
    bd84:	01800074 	movhi	r6,1
    bd88:	31b36c04 	addi	r6,r6,-12880
    bd8c:	01400074 	movhi	r5,1
    bd90:	29736c04 	addi	r5,r5,-12880
    bd94:	01000074 	movhi	r4,1
    bd98:	21336c04 	addi	r4,r4,-12880
    bd9c:	000c4940 	call	c494 <alt_io_redirect>
  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling main.\r\n");

#ifdef ALT_NO_EXIT
  main (alt_argc, alt_argv, alt_envp);
#else
  result = main (alt_argc, alt_argv, alt_envp);
    bda0:	d0a0dc17 	ldw	r2,-31888(gp)
    bda4:	d0e0dd17 	ldw	r3,-31884(gp)
    bda8:	d120de17 	ldw	r4,-31880(gp)
    bdac:	200d883a 	mov	r6,r4
    bdb0:	180b883a 	mov	r5,r3
    bdb4:	1009883a 	mov	r4,r2
    bdb8:	00084ec0 	call	84ec <main>
    bdbc:	e0bfff15 	stw	r2,-4(fp)
  close(STDOUT_FILENO);
    bdc0:	01000044 	movi	r4,1
    bdc4:	000c0f00 	call	c0f0 <close>
  exit (result);
    bdc8:	e13fff17 	ldw	r4,-4(fp)
    bdcc:	000ca980 	call	ca98 <exit>

0000bdd0 <alt_dev_reg>:
 */

extern int alt_fs_reg  (alt_dev* dev); 

static ALT_INLINE int alt_dev_reg (alt_dev* dev)
{
    bdd0:	defffd04 	addi	sp,sp,-12
    bdd4:	dfc00215 	stw	ra,8(sp)
    bdd8:	df000115 	stw	fp,4(sp)
    bddc:	df000104 	addi	fp,sp,4
    bde0:	e13fff15 	stw	r4,-4(fp)
  extern alt_llist alt_dev_list;

  return alt_dev_llist_insert ((alt_dev_llist*) dev, &alt_dev_list);
    bde4:	d1601104 	addi	r5,gp,-32700
    bde8:	e13fff17 	ldw	r4,-4(fp)
    bdec:	000c2500 	call	c250 <alt_dev_llist_insert>
}
    bdf0:	e037883a 	mov	sp,fp
    bdf4:	dfc00117 	ldw	ra,4(sp)
    bdf8:	df000017 	ldw	fp,0(sp)
    bdfc:	dec00204 	addi	sp,sp,8
    be00:	f800283a 	ret

0000be04 <alt_irq_init>:
 * The "base" parameter is ignored and only
 * present for backwards-compatibility.
 */

void alt_irq_init ( const void* base )
{
    be04:	defffd04 	addi	sp,sp,-12
    be08:	dfc00215 	stw	ra,8(sp)
    be0c:	df000115 	stw	fp,4(sp)
    be10:	df000104 	addi	fp,sp,4
    be14:	e13fff15 	stw	r4,-4(fp)
    ALTERA_NIOS2_GEN2_IRQ_INIT ( NIOS2_GEN2_0, nios2_gen2_0);
    be18:	000c8180 	call	c818 <altera_nios2_gen2_irq_init>
 * alt_irq_cpu_enable_interrupts() enables the CPU to start taking interrupts.
 */
static ALT_INLINE void ALT_ALWAYS_INLINE 
       alt_irq_cpu_enable_interrupts (void)
{
    NIOS2_WRITE_STATUS(NIOS2_STATUS_PIE_MSK
    be1c:	00800044 	movi	r2,1
    be20:	1001703a 	wrctl	status,r2
    alt_irq_cpu_enable_interrupts();
}
    be24:	0001883a 	nop
    be28:	e037883a 	mov	sp,fp
    be2c:	dfc00117 	ldw	ra,4(sp)
    be30:	df000017 	ldw	fp,0(sp)
    be34:	dec00204 	addi	sp,sp,8
    be38:	f800283a 	ret

0000be3c <alt_sys_init>:
 * Initialize the non-interrupt controller devices.
 * Called after alt_irq_init().
 */

void alt_sys_init( void )
{
    be3c:	defffe04 	addi	sp,sp,-8
    be40:	dfc00115 	stw	ra,4(sp)
    be44:	df000015 	stw	fp,0(sp)
    be48:	d839883a 	mov	fp,sp
    ALTERA_AVALON_JTAG_UART_INIT ( JTAG_UART_0, jtag_uart_0);
    be4c:	01000074 	movhi	r4,1
    be50:	2133b404 	addi	r4,r4,-12592
    be54:	000bdd00 	call	bdd0 <alt_dev_reg>
    ALTERA_AVALON_SYSID_QSYS_INIT ( SYSID_QSYS_0, sysid_qsys_0);
    be58:	0001883a 	nop
}
    be5c:	0001883a 	nop
    be60:	e037883a 	mov	sp,fp
    be64:	dfc00117 	ldw	ra,4(sp)
    be68:	df000017 	ldw	fp,0(sp)
    be6c:	dec00204 	addi	sp,sp,8
    be70:	f800283a 	ret

0000be74 <altera_avalon_jtag_uart_read_fd>:
 *
 */

int 
altera_avalon_jtag_uart_read_fd(alt_fd* fd, char* buffer, int space)
{
    be74:	defffa04 	addi	sp,sp,-24
    be78:	dfc00515 	stw	ra,20(sp)
    be7c:	df000415 	stw	fp,16(sp)
    be80:	df000404 	addi	fp,sp,16
    be84:	e13ffd15 	stw	r4,-12(fp)
    be88:	e17ffe15 	stw	r5,-8(fp)
    be8c:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
    be90:	e0bffd17 	ldw	r2,-12(fp)
    be94:	10800017 	ldw	r2,0(r2)
    be98:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_jtag_uart_read(&dev->state, buffer, space,
    be9c:	e0bffc17 	ldw	r2,-16(fp)
    bea0:	10c00a04 	addi	r3,r2,40
    bea4:	e0bffd17 	ldw	r2,-12(fp)
    bea8:	10800217 	ldw	r2,8(r2)
    beac:	100f883a 	mov	r7,r2
    beb0:	e1bfff17 	ldw	r6,-4(fp)
    beb4:	e17ffe17 	ldw	r5,-8(fp)
    beb8:	1809883a 	mov	r4,r3
    bebc:	000bf340 	call	bf34 <altera_avalon_jtag_uart_read>
      fd->fd_flags);
}
    bec0:	e037883a 	mov	sp,fp
    bec4:	dfc00117 	ldw	ra,4(sp)
    bec8:	df000017 	ldw	fp,0(sp)
    becc:	dec00204 	addi	sp,sp,8
    bed0:	f800283a 	ret

0000bed4 <altera_avalon_jtag_uart_write_fd>:

int 
altera_avalon_jtag_uart_write_fd(alt_fd* fd, const char* buffer, int space)
{
    bed4:	defffa04 	addi	sp,sp,-24
    bed8:	dfc00515 	stw	ra,20(sp)
    bedc:	df000415 	stw	fp,16(sp)
    bee0:	df000404 	addi	fp,sp,16
    bee4:	e13ffd15 	stw	r4,-12(fp)
    bee8:	e17ffe15 	stw	r5,-8(fp)
    beec:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
    bef0:	e0bffd17 	ldw	r2,-12(fp)
    bef4:	10800017 	ldw	r2,0(r2)
    bef8:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_jtag_uart_write(&dev->state, buffer, space,
    befc:	e0bffc17 	ldw	r2,-16(fp)
    bf00:	10c00a04 	addi	r3,r2,40
    bf04:	e0bffd17 	ldw	r2,-12(fp)
    bf08:	10800217 	ldw	r2,8(r2)
    bf0c:	100f883a 	mov	r7,r2
    bf10:	e1bfff17 	ldw	r6,-4(fp)
    bf14:	e17ffe17 	ldw	r5,-8(fp)
    bf18:	1809883a 	mov	r4,r3
    bf1c:	000c0200 	call	c020 <altera_avalon_jtag_uart_write>
      fd->fd_flags);
}
    bf20:	e037883a 	mov	sp,fp
    bf24:	dfc00117 	ldw	ra,4(sp)
    bf28:	df000017 	ldw	fp,0(sp)
    bf2c:	dec00204 	addi	sp,sp,8
    bf30:	f800283a 	ret

0000bf34 <altera_avalon_jtag_uart_read>:
 */

int 
altera_avalon_jtag_uart_read(altera_avalon_jtag_uart_state* sp, 
  char* buffer, int space, int flags)
{
    bf34:	defff704 	addi	sp,sp,-36
    bf38:	df000815 	stw	fp,32(sp)
    bf3c:	df000804 	addi	fp,sp,32
    bf40:	e13ffc15 	stw	r4,-16(fp)
    bf44:	e17ffd15 	stw	r5,-12(fp)
    bf48:	e1bffe15 	stw	r6,-8(fp)
    bf4c:	e1ffff15 	stw	r7,-4(fp)
  unsigned int base = sp->base;
    bf50:	e0bffc17 	ldw	r2,-16(fp)
    bf54:	10800017 	ldw	r2,0(r2)
    bf58:	e0bff915 	stw	r2,-28(fp)

  char * ptr = buffer;
    bf5c:	e0bffd17 	ldw	r2,-12(fp)
    bf60:	e0bff815 	stw	r2,-32(fp)
  char * end = buffer + space;
    bf64:	e0bffe17 	ldw	r2,-8(fp)
    bf68:	e0fffd17 	ldw	r3,-12(fp)
    bf6c:	1885883a 	add	r2,r3,r2
    bf70:	e0bffa15 	stw	r2,-24(fp)

  while (ptr < end)
    bf74:	00001206 	br	bfc0 <altera_avalon_jtag_uart_read+0x8c>
  {
    unsigned int data = IORD_ALTERA_AVALON_JTAG_UART_DATA(base);
    bf78:	e0bff917 	ldw	r2,-28(fp)
    bf7c:	10800037 	ldwio	r2,0(r2)
    bf80:	e0bffb15 	stw	r2,-20(fp)

    if (data & ALTERA_AVALON_JTAG_UART_DATA_RVALID_MSK)
    bf84:	e0bffb17 	ldw	r2,-20(fp)
    bf88:	10a0000c 	andi	r2,r2,32768
    bf8c:	10000626 	beq	r2,zero,bfa8 <altera_avalon_jtag_uart_read+0x74>
      *ptr++ = (data & ALTERA_AVALON_JTAG_UART_DATA_DATA_MSK) >> ALTERA_AVALON_JTAG_UART_DATA_DATA_OFST;
    bf90:	e0bff817 	ldw	r2,-32(fp)
    bf94:	10c00044 	addi	r3,r2,1
    bf98:	e0fff815 	stw	r3,-32(fp)
    bf9c:	e0fffb17 	ldw	r3,-20(fp)
    bfa0:	10c00005 	stb	r3,0(r2)
    bfa4:	00000606 	br	bfc0 <altera_avalon_jtag_uart_read+0x8c>
    else if (ptr != buffer)
    bfa8:	e0fff817 	ldw	r3,-32(fp)
    bfac:	e0bffd17 	ldw	r2,-12(fp)
    bfb0:	1880071e 	bne	r3,r2,bfd0 <altera_avalon_jtag_uart_read+0x9c>
      break;
    else if(flags & O_NONBLOCK)
    bfb4:	e0bfff17 	ldw	r2,-4(fp)
    bfb8:	1090000c 	andi	r2,r2,16384
    bfbc:	1000061e 	bne	r2,zero,bfd8 <altera_avalon_jtag_uart_read+0xa4>
  unsigned int base = sp->base;

  char * ptr = buffer;
  char * end = buffer + space;

  while (ptr < end)
    bfc0:	e0fff817 	ldw	r3,-32(fp)
    bfc4:	e0bffa17 	ldw	r2,-24(fp)
    bfc8:	18bfeb36 	bltu	r3,r2,bf78 <_gp+0xffff6ed4>
    bfcc:	00000306 	br	bfdc <altera_avalon_jtag_uart_read+0xa8>
    unsigned int data = IORD_ALTERA_AVALON_JTAG_UART_DATA(base);

    if (data & ALTERA_AVALON_JTAG_UART_DATA_RVALID_MSK)
      *ptr++ = (data & ALTERA_AVALON_JTAG_UART_DATA_DATA_MSK) >> ALTERA_AVALON_JTAG_UART_DATA_DATA_OFST;
    else if (ptr != buffer)
      break;
    bfd0:	0001883a 	nop
    bfd4:	00000106 	br	bfdc <altera_avalon_jtag_uart_read+0xa8>
    else if(flags & O_NONBLOCK)
      break;   
    bfd8:	0001883a 	nop
    
  }

  if (ptr != buffer)
    bfdc:	e0fff817 	ldw	r3,-32(fp)
    bfe0:	e0bffd17 	ldw	r2,-12(fp)
    bfe4:	18800426 	beq	r3,r2,bff8 <altera_avalon_jtag_uart_read+0xc4>
    return ptr - buffer;
    bfe8:	e0fff817 	ldw	r3,-32(fp)
    bfec:	e0bffd17 	ldw	r2,-12(fp)
    bff0:	1885c83a 	sub	r2,r3,r2
    bff4:	00000606 	br	c010 <altera_avalon_jtag_uart_read+0xdc>
  else if (flags & O_NONBLOCK)
    bff8:	e0bfff17 	ldw	r2,-4(fp)
    bffc:	1090000c 	andi	r2,r2,16384
    c000:	10000226 	beq	r2,zero,c00c <altera_avalon_jtag_uart_read+0xd8>
    return -EWOULDBLOCK;
    c004:	00bffd44 	movi	r2,-11
    c008:	00000106 	br	c010 <altera_avalon_jtag_uart_read+0xdc>
  else
    return -EIO;
    c00c:	00bffec4 	movi	r2,-5
}
    c010:	e037883a 	mov	sp,fp
    c014:	df000017 	ldw	fp,0(sp)
    c018:	dec00104 	addi	sp,sp,4
    c01c:	f800283a 	ret

0000c020 <altera_avalon_jtag_uart_write>:
 * one FIFOs worth of data.  But you said you didn't want to use interrupts :-)
 */

int altera_avalon_jtag_uart_write(altera_avalon_jtag_uart_state* sp, 
  const char * ptr, int count, int flags)
{
    c020:	defff904 	addi	sp,sp,-28
    c024:	df000615 	stw	fp,24(sp)
    c028:	df000604 	addi	fp,sp,24
    c02c:	e13ffc15 	stw	r4,-16(fp)
    c030:	e17ffd15 	stw	r5,-12(fp)
    c034:	e1bffe15 	stw	r6,-8(fp)
    c038:	e1ffff15 	stw	r7,-4(fp)
  unsigned int base = sp->base;
    c03c:	e0bffc17 	ldw	r2,-16(fp)
    c040:	10800017 	ldw	r2,0(r2)
    c044:	e0bffa15 	stw	r2,-24(fp)

  const char * end = ptr + count;
    c048:	e0bffe17 	ldw	r2,-8(fp)
    c04c:	e0fffd17 	ldw	r3,-12(fp)
    c050:	1885883a 	add	r2,r3,r2
    c054:	e0bffb15 	stw	r2,-20(fp)

  while (ptr < end)
    c058:	00000e06 	br	c094 <altera_avalon_jtag_uart_write+0x74>
    if ((IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base) & ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_MSK) != 0)
    c05c:	e0bffa17 	ldw	r2,-24(fp)
    c060:	10800104 	addi	r2,r2,4
    c064:	10800037 	ldwio	r2,0(r2)
    c068:	10bfffec 	andhi	r2,r2,65535
    c06c:	10000926 	beq	r2,zero,c094 <altera_avalon_jtag_uart_write+0x74>
      IOWR_ALTERA_AVALON_JTAG_UART_DATA(base, *ptr++);
    c070:	e0fffa17 	ldw	r3,-24(fp)
    c074:	e0bffd17 	ldw	r2,-12(fp)
    c078:	11000044 	addi	r4,r2,1
    c07c:	e13ffd15 	stw	r4,-12(fp)
    c080:	10800003 	ldbu	r2,0(r2)
    c084:	10803fcc 	andi	r2,r2,255
    c088:	1080201c 	xori	r2,r2,128
    c08c:	10bfe004 	addi	r2,r2,-128
    c090:	18800035 	stwio	r2,0(r3)
{
  unsigned int base = sp->base;

  const char * end = ptr + count;

  while (ptr < end)
    c094:	e0fffd17 	ldw	r3,-12(fp)
    c098:	e0bffb17 	ldw	r2,-20(fp)
    c09c:	18bfef36 	bltu	r3,r2,c05c <_gp+0xffff6fb8>
    if ((IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base) & ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_MSK) != 0)
      IOWR_ALTERA_AVALON_JTAG_UART_DATA(base, *ptr++);

  return count;
    c0a0:	e0bffe17 	ldw	r2,-8(fp)
}
    c0a4:	e037883a 	mov	sp,fp
    c0a8:	df000017 	ldw	fp,0(sp)
    c0ac:	dec00104 	addi	sp,sp,4
    c0b0:	f800283a 	ret

0000c0b4 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
    c0b4:	defffe04 	addi	sp,sp,-8
    c0b8:	dfc00115 	stw	ra,4(sp)
    c0bc:	df000015 	stw	fp,0(sp)
    c0c0:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
    c0c4:	d0a01417 	ldw	r2,-32688(gp)
    c0c8:	10000326 	beq	r2,zero,c0d8 <alt_get_errno+0x24>
    c0cc:	d0a01417 	ldw	r2,-32688(gp)
    c0d0:	103ee83a 	callr	r2
    c0d4:	00000106 	br	c0dc <alt_get_errno+0x28>
    c0d8:	d0a0e004 	addi	r2,gp,-31872
}
    c0dc:	e037883a 	mov	sp,fp
    c0e0:	dfc00117 	ldw	ra,4(sp)
    c0e4:	df000017 	ldw	fp,0(sp)
    c0e8:	dec00204 	addi	sp,sp,8
    c0ec:	f800283a 	ret

0000c0f0 <close>:
 *
 * ALT_CLOSE is mapped onto the close() system call in alt_syscall.h
 */
 
int ALT_CLOSE (int fildes)
{
    c0f0:	defffb04 	addi	sp,sp,-20
    c0f4:	dfc00415 	stw	ra,16(sp)
    c0f8:	df000315 	stw	fp,12(sp)
    c0fc:	df000304 	addi	fp,sp,12
    c100:	e13fff15 	stw	r4,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (fildes < 0) ? NULL : &alt_fd_list[fildes];
    c104:	e0bfff17 	ldw	r2,-4(fp)
    c108:	10000816 	blt	r2,zero,c12c <close+0x3c>
    c10c:	01400304 	movi	r5,12
    c110:	e13fff17 	ldw	r4,-4(fp)
    c114:	000b1700 	call	b170 <__mulsi3>
    c118:	1007883a 	mov	r3,r2
    c11c:	00800074 	movhi	r2,1
    c120:	10b3c904 	addi	r2,r2,-12508
    c124:	1885883a 	add	r2,r3,r2
    c128:	00000106 	br	c130 <close+0x40>
    c12c:	0005883a 	mov	r2,zero
    c130:	e0bffd15 	stw	r2,-12(fp)

  if (fd)
    c134:	e0bffd17 	ldw	r2,-12(fp)
    c138:	10001926 	beq	r2,zero,c1a0 <close+0xb0>
    /*
     * If the associated file system/device has a close function, call it so 
     * that any necessary cleanup code can run.
     */

    rval = (fd->dev->close) ? fd->dev->close(fd) : 0;
    c13c:	e0bffd17 	ldw	r2,-12(fp)
    c140:	10800017 	ldw	r2,0(r2)
    c144:	10800417 	ldw	r2,16(r2)
    c148:	10000626 	beq	r2,zero,c164 <close+0x74>
    c14c:	e0bffd17 	ldw	r2,-12(fp)
    c150:	10800017 	ldw	r2,0(r2)
    c154:	10800417 	ldw	r2,16(r2)
    c158:	e13ffd17 	ldw	r4,-12(fp)
    c15c:	103ee83a 	callr	r2
    c160:	00000106 	br	c168 <close+0x78>
    c164:	0005883a 	mov	r2,zero
    c168:	e0bffe15 	stw	r2,-8(fp)

    /* Free the file descriptor structure and return. */

    alt_release_fd (fildes);
    c16c:	e13fff17 	ldw	r4,-4(fp)
    c170:	000c7940 	call	c794 <alt_release_fd>
    if (rval < 0)
    c174:	e0bffe17 	ldw	r2,-8(fp)
    c178:	1000070e 	bge	r2,zero,c198 <close+0xa8>
    {
      ALT_ERRNO = -rval;
    c17c:	000c0b40 	call	c0b4 <alt_get_errno>
    c180:	1007883a 	mov	r3,r2
    c184:	e0bffe17 	ldw	r2,-8(fp)
    c188:	0085c83a 	sub	r2,zero,r2
    c18c:	18800015 	stw	r2,0(r3)
      return -1;
    c190:	00bfffc4 	movi	r2,-1
    c194:	00000706 	br	c1b4 <close+0xc4>
    }
    return 0;
    c198:	0005883a 	mov	r2,zero
    c19c:	00000506 	br	c1b4 <close+0xc4>
  }
  else
  {
    ALT_ERRNO = EBADFD;
    c1a0:	000c0b40 	call	c0b4 <alt_get_errno>
    c1a4:	1007883a 	mov	r3,r2
    c1a8:	00801444 	movi	r2,81
    c1ac:	18800015 	stw	r2,0(r3)
    return -1;
    c1b0:	00bfffc4 	movi	r2,-1
  }
}
    c1b4:	e037883a 	mov	sp,fp
    c1b8:	dfc00117 	ldw	ra,4(sp)
    c1bc:	df000017 	ldw	fp,0(sp)
    c1c0:	dec00204 	addi	sp,sp,8
    c1c4:	f800283a 	ret

0000c1c8 <alt_dcache_flush_all>:
/*
 * alt_dcache_flush_all() is called to flush the entire data cache.
 */

void alt_dcache_flush_all (void)
{
    c1c8:	deffff04 	addi	sp,sp,-4
    c1cc:	df000015 	stw	fp,0(sp)
    c1d0:	d839883a 	mov	fp,sp
  for (i = (char*) 0; i < (char*) NIOS2_DCACHE_SIZE; i+= NIOS2_DCACHE_LINE_SIZE)
  { 
    __asm__ volatile ("flushd (%0)" :: "r" (i));
  }
#endif /* NIOS2_DCACHE_SIZE > 0 */
}
    c1d4:	0001883a 	nop
    c1d8:	e037883a 	mov	sp,fp
    c1dc:	df000017 	ldw	fp,0(sp)
    c1e0:	dec00104 	addi	sp,sp,4
    c1e4:	f800283a 	ret

0000c1e8 <alt_dev_null_write>:
 * by the alt_dev_null device. It simple discards all data passed to it, and
 * indicates that the data has been successfully transmitted.
 */

static int alt_dev_null_write (alt_fd* fd, const char* ptr, int len)
{
    c1e8:	defffc04 	addi	sp,sp,-16
    c1ec:	df000315 	stw	fp,12(sp)
    c1f0:	df000304 	addi	fp,sp,12
    c1f4:	e13ffd15 	stw	r4,-12(fp)
    c1f8:	e17ffe15 	stw	r5,-8(fp)
    c1fc:	e1bfff15 	stw	r6,-4(fp)
  return len;
    c200:	e0bfff17 	ldw	r2,-4(fp)
}
    c204:	e037883a 	mov	sp,fp
    c208:	df000017 	ldw	fp,0(sp)
    c20c:	dec00104 	addi	sp,sp,4
    c210:	f800283a 	ret

0000c214 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
    c214:	defffe04 	addi	sp,sp,-8
    c218:	dfc00115 	stw	ra,4(sp)
    c21c:	df000015 	stw	fp,0(sp)
    c220:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
    c224:	d0a01417 	ldw	r2,-32688(gp)
    c228:	10000326 	beq	r2,zero,c238 <alt_get_errno+0x24>
    c22c:	d0a01417 	ldw	r2,-32688(gp)
    c230:	103ee83a 	callr	r2
    c234:	00000106 	br	c23c <alt_get_errno+0x28>
    c238:	d0a0e004 	addi	r2,gp,-31872
}
    c23c:	e037883a 	mov	sp,fp
    c240:	dfc00117 	ldw	ra,4(sp)
    c244:	df000017 	ldw	fp,0(sp)
    c248:	dec00204 	addi	sp,sp,8
    c24c:	f800283a 	ret

0000c250 <alt_dev_llist_insert>:
/*
 *
 */

int alt_dev_llist_insert (alt_dev_llist* dev, alt_llist* list)
{
    c250:	defffa04 	addi	sp,sp,-24
    c254:	dfc00515 	stw	ra,20(sp)
    c258:	df000415 	stw	fp,16(sp)
    c25c:	df000404 	addi	fp,sp,16
    c260:	e13ffe15 	stw	r4,-8(fp)
    c264:	e17fff15 	stw	r5,-4(fp)
  /*
   * check that the device exists, and that it has a valid name.
   */

  if (!dev || !dev->name)
    c268:	e0bffe17 	ldw	r2,-8(fp)
    c26c:	10000326 	beq	r2,zero,c27c <alt_dev_llist_insert+0x2c>
    c270:	e0bffe17 	ldw	r2,-8(fp)
    c274:	10800217 	ldw	r2,8(r2)
    c278:	1000061e 	bne	r2,zero,c294 <alt_dev_llist_insert+0x44>
  {
    ALT_ERRNO = EINVAL;
    c27c:	000c2140 	call	c214 <alt_get_errno>
    c280:	1007883a 	mov	r3,r2
    c284:	00800584 	movi	r2,22
    c288:	18800015 	stw	r2,0(r3)
    return -EINVAL;
    c28c:	00bffa84 	movi	r2,-22
    c290:	00001306 	br	c2e0 <alt_dev_llist_insert+0x90>
  
  /*
   * register the device.
   */
  
  alt_llist_insert(list, &dev->llist);
    c294:	e0bffe17 	ldw	r2,-8(fp)
    c298:	e0ffff17 	ldw	r3,-4(fp)
    c29c:	e0fffc15 	stw	r3,-16(fp)
    c2a0:	e0bffd15 	stw	r2,-12(fp)
 */

static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_insert(alt_llist* list, 
                alt_llist* entry)
{
  entry->previous = list;
    c2a4:	e0bffd17 	ldw	r2,-12(fp)
    c2a8:	e0fffc17 	ldw	r3,-16(fp)
    c2ac:	10c00115 	stw	r3,4(r2)
  entry->next     = list->next;
    c2b0:	e0bffc17 	ldw	r2,-16(fp)
    c2b4:	10c00017 	ldw	r3,0(r2)
    c2b8:	e0bffd17 	ldw	r2,-12(fp)
    c2bc:	10c00015 	stw	r3,0(r2)

  list->next->previous = entry;
    c2c0:	e0bffc17 	ldw	r2,-16(fp)
    c2c4:	10800017 	ldw	r2,0(r2)
    c2c8:	e0fffd17 	ldw	r3,-12(fp)
    c2cc:	10c00115 	stw	r3,4(r2)
  list->next           = entry;
    c2d0:	e0bffc17 	ldw	r2,-16(fp)
    c2d4:	e0fffd17 	ldw	r3,-12(fp)
    c2d8:	10c00015 	stw	r3,0(r2)

  return 0;  
    c2dc:	0005883a 	mov	r2,zero
}
    c2e0:	e037883a 	mov	sp,fp
    c2e4:	dfc00117 	ldw	ra,4(sp)
    c2e8:	df000017 	ldw	fp,0(sp)
    c2ec:	dec00204 	addi	sp,sp,8
    c2f0:	f800283a 	ret

0000c2f4 <alt_icache_flush_all>:
/*
 * alt_icache_flush_all() is called to flush the entire instruction cache.
 */

void alt_icache_flush_all (void)
{
    c2f4:	deffff04 	addi	sp,sp,-4
    c2f8:	df000015 	stw	fp,0(sp)
    c2fc:	d839883a 	mov	fp,sp
#if NIOS2_ICACHE_SIZE > 0
  alt_icache_flush (0, NIOS2_ICACHE_SIZE);
#endif
}
    c300:	0001883a 	nop
    c304:	e037883a 	mov	sp,fp
    c308:	df000017 	ldw	fp,0(sp)
    c30c:	dec00104 	addi	sp,sp,4
    c310:	f800283a 	ret

0000c314 <alt_exception_cause_generated_bad_addr>:
 * Return: 1: BADADDR (bad_addr argument to handler) is valid
 *         0: BADADDR is not valid
 */
int 
alt_exception_cause_generated_bad_addr(alt_exception_cause cause)
{
    c314:	defffe04 	addi	sp,sp,-8
    c318:	df000115 	stw	fp,4(sp)
    c31c:	df000104 	addi	fp,sp,4
    c320:	e13fff15 	stw	r4,-4(fp)
  switch (cause) {
    c324:	e0bfff17 	ldw	r2,-4(fp)
    c328:	10bffe84 	addi	r2,r2,-6
    c32c:	10c00428 	cmpgeui	r3,r2,16
    c330:	18001a1e 	bne	r3,zero,c39c <alt_exception_cause_generated_bad_addr+0x88>
    c334:	100690ba 	slli	r3,r2,2
    c338:	00800074 	movhi	r2,1
    c33c:	10b0d304 	addi	r2,r2,-15540
    c340:	1885883a 	add	r2,r3,r2
    c344:	10800017 	ldw	r2,0(r2)
    c348:	1000683a 	jmp	r2
    c34c:	0000c38c 	andi	zero,zero,782
    c350:	0000c38c 	andi	zero,zero,782
    c354:	0000c39c 	xori	zero,zero,782
    c358:	0000c39c 	xori	zero,zero,782
    c35c:	0000c39c 	xori	zero,zero,782
    c360:	0000c38c 	andi	zero,zero,782
    c364:	0000c394 	movui	zero,782
    c368:	0000c39c 	xori	zero,zero,782
    c36c:	0000c38c 	andi	zero,zero,782
    c370:	0000c38c 	andi	zero,zero,782
    c374:	0000c39c 	xori	zero,zero,782
    c378:	0000c38c 	andi	zero,zero,782
    c37c:	0000c394 	movui	zero,782
    c380:	0000c39c 	xori	zero,zero,782
    c384:	0000c39c 	xori	zero,zero,782
    c388:	0000c38c 	andi	zero,zero,782
  case NIOS2_EXCEPTION_MISALIGNED_TARGET_PC:
  case NIOS2_EXCEPTION_TLB_READ_PERM_VIOLATION:
  case NIOS2_EXCEPTION_TLB_WRITE_PERM_VIOLATION:
  case NIOS2_EXCEPTION_MPU_DATA_REGION_VIOLATION:
  case NIOS2_EXCEPTION_ECC_DATA_ERR:
    return 1;
    c38c:	00800044 	movi	r2,1
    c390:	00000306 	br	c3a0 <alt_exception_cause_generated_bad_addr+0x8c>

  case NIOS2_EXCEPTION_TLB_MISS:
  case NIOS2_EXCEPTION_ECC_TLB_ERR:
    return 0;
    c394:	0005883a 	mov	r2,zero
    c398:	00000106 	br	c3a0 <alt_exception_cause_generated_bad_addr+0x8c>

  default:
    return 0;
    c39c:	0005883a 	mov	r2,zero
  }
}
    c3a0:	e037883a 	mov	sp,fp
    c3a4:	df000017 	ldw	fp,0(sp)
    c3a8:	dec00104 	addi	sp,sp,4
    c3ac:	f800283a 	ret

0000c3b0 <alt_open_fd>:
 * If the device can not be succesfully opened, then the input file descriptor
 * remains unchanged.
 */

static void alt_open_fd(alt_fd* fd, const char* name, int flags, int mode)
{
    c3b0:	defff804 	addi	sp,sp,-32
    c3b4:	dfc00715 	stw	ra,28(sp)
    c3b8:	df000615 	stw	fp,24(sp)
    c3bc:	dc000515 	stw	r16,20(sp)
    c3c0:	df000604 	addi	fp,sp,24
    c3c4:	e13ffb15 	stw	r4,-20(fp)
    c3c8:	e17ffc15 	stw	r5,-16(fp)
    c3cc:	e1bffd15 	stw	r6,-12(fp)
    c3d0:	e1fffe15 	stw	r7,-8(fp)
  int old;

  old = open (name, flags, mode);
    c3d4:	e1bffe17 	ldw	r6,-8(fp)
    c3d8:	e17ffd17 	ldw	r5,-12(fp)
    c3dc:	e13ffc17 	ldw	r4,-16(fp)
    c3e0:	000c6380 	call	c638 <open>
    c3e4:	e0bffa15 	stw	r2,-24(fp)

  if (old >= 0)
    c3e8:	e0bffa17 	ldw	r2,-24(fp)
    c3ec:	10002216 	blt	r2,zero,c478 <alt_open_fd+0xc8>
  {
    fd->dev      = alt_fd_list[old].dev;
    c3f0:	04000074 	movhi	r16,1
    c3f4:	8433c904 	addi	r16,r16,-12508
    c3f8:	e0bffa17 	ldw	r2,-24(fp)
    c3fc:	01400304 	movi	r5,12
    c400:	1009883a 	mov	r4,r2
    c404:	000b1700 	call	b170 <__mulsi3>
    c408:	8085883a 	add	r2,r16,r2
    c40c:	10c00017 	ldw	r3,0(r2)
    c410:	e0bffb17 	ldw	r2,-20(fp)
    c414:	10c00015 	stw	r3,0(r2)
    fd->priv     = alt_fd_list[old].priv;
    c418:	04000074 	movhi	r16,1
    c41c:	8433c904 	addi	r16,r16,-12508
    c420:	e0bffa17 	ldw	r2,-24(fp)
    c424:	01400304 	movi	r5,12
    c428:	1009883a 	mov	r4,r2
    c42c:	000b1700 	call	b170 <__mulsi3>
    c430:	8085883a 	add	r2,r16,r2
    c434:	10800104 	addi	r2,r2,4
    c438:	10c00017 	ldw	r3,0(r2)
    c43c:	e0bffb17 	ldw	r2,-20(fp)
    c440:	10c00115 	stw	r3,4(r2)
    fd->fd_flags = alt_fd_list[old].fd_flags;
    c444:	04000074 	movhi	r16,1
    c448:	8433c904 	addi	r16,r16,-12508
    c44c:	e0bffa17 	ldw	r2,-24(fp)
    c450:	01400304 	movi	r5,12
    c454:	1009883a 	mov	r4,r2
    c458:	000b1700 	call	b170 <__mulsi3>
    c45c:	8085883a 	add	r2,r16,r2
    c460:	10800204 	addi	r2,r2,8
    c464:	10c00017 	ldw	r3,0(r2)
    c468:	e0bffb17 	ldw	r2,-20(fp)
    c46c:	10c00215 	stw	r3,8(r2)

    alt_release_fd (old);
    c470:	e13ffa17 	ldw	r4,-24(fp)
    c474:	000c7940 	call	c794 <alt_release_fd>
  }
} 
    c478:	0001883a 	nop
    c47c:	e6ffff04 	addi	sp,fp,-4
    c480:	dfc00217 	ldw	ra,8(sp)
    c484:	df000117 	ldw	fp,4(sp)
    c488:	dc000017 	ldw	r16,0(sp)
    c48c:	dec00304 	addi	sp,sp,12
    c490:	f800283a 	ret

0000c494 <alt_io_redirect>:
 */
 
void alt_io_redirect(const char* stdout_dev, 
                     const char* stdin_dev, 
                     const char* stderr_dev)
{
    c494:	defffb04 	addi	sp,sp,-20
    c498:	dfc00415 	stw	ra,16(sp)
    c49c:	df000315 	stw	fp,12(sp)
    c4a0:	df000304 	addi	fp,sp,12
    c4a4:	e13ffd15 	stw	r4,-12(fp)
    c4a8:	e17ffe15 	stw	r5,-8(fp)
    c4ac:	e1bfff15 	stw	r6,-4(fp)
  /* Redirect the channels */

  alt_open_fd (&alt_fd_list[STDOUT_FILENO], stdout_dev, O_WRONLY, 0777);
    c4b0:	01c07fc4 	movi	r7,511
    c4b4:	01800044 	movi	r6,1
    c4b8:	e17ffd17 	ldw	r5,-12(fp)
    c4bc:	01000074 	movhi	r4,1
    c4c0:	2133cc04 	addi	r4,r4,-12496
    c4c4:	000c3b00 	call	c3b0 <alt_open_fd>
  alt_open_fd (&alt_fd_list[STDIN_FILENO], stdin_dev, O_RDONLY, 0777);
    c4c8:	01c07fc4 	movi	r7,511
    c4cc:	000d883a 	mov	r6,zero
    c4d0:	e17ffe17 	ldw	r5,-8(fp)
    c4d4:	01000074 	movhi	r4,1
    c4d8:	2133c904 	addi	r4,r4,-12508
    c4dc:	000c3b00 	call	c3b0 <alt_open_fd>
  alt_open_fd (&alt_fd_list[STDERR_FILENO], stderr_dev, O_WRONLY, 0777);
    c4e0:	01c07fc4 	movi	r7,511
    c4e4:	01800044 	movi	r6,1
    c4e8:	e17fff17 	ldw	r5,-4(fp)
    c4ec:	01000074 	movhi	r4,1
    c4f0:	2133cf04 	addi	r4,r4,-12484
    c4f4:	000c3b00 	call	c3b0 <alt_open_fd>
}  
    c4f8:	0001883a 	nop
    c4fc:	e037883a 	mov	sp,fp
    c500:	dfc00117 	ldw	ra,4(sp)
    c504:	df000017 	ldw	fp,0(sp)
    c508:	dec00204 	addi	sp,sp,8
    c50c:	f800283a 	ret

0000c510 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
    c510:	defffe04 	addi	sp,sp,-8
    c514:	dfc00115 	stw	ra,4(sp)
    c518:	df000015 	stw	fp,0(sp)
    c51c:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
    c520:	d0a01417 	ldw	r2,-32688(gp)
    c524:	10000326 	beq	r2,zero,c534 <alt_get_errno+0x24>
    c528:	d0a01417 	ldw	r2,-32688(gp)
    c52c:	103ee83a 	callr	r2
    c530:	00000106 	br	c538 <alt_get_errno+0x28>
    c534:	d0a0e004 	addi	r2,gp,-31872
}
    c538:	e037883a 	mov	sp,fp
    c53c:	dfc00117 	ldw	ra,4(sp)
    c540:	df000017 	ldw	fp,0(sp)
    c544:	dec00204 	addi	sp,sp,8
    c548:	f800283a 	ret

0000c54c <alt_file_locked>:
 * performed for devices. Filesystems are required to handle the ioctl() call
 * themselves, and report the error from the filesystems open() function. 
 */ 

static int alt_file_locked (alt_fd* fd)
{
    c54c:	defffb04 	addi	sp,sp,-20
    c550:	dfc00415 	stw	ra,16(sp)
    c554:	df000315 	stw	fp,12(sp)
    c558:	dc000215 	stw	r16,8(sp)
    c55c:	df000304 	addi	fp,sp,12
    c560:	e13ffe15 	stw	r4,-8(fp)

  /*
   * Mark the file descriptor as belonging to a device.
   */

  fd->fd_flags |= ALT_FD_DEV;
    c564:	e0bffe17 	ldw	r2,-8(fp)
    c568:	10800217 	ldw	r2,8(r2)
    c56c:	10d00034 	orhi	r3,r2,16384
    c570:	e0bffe17 	ldw	r2,-8(fp)
    c574:	10c00215 	stw	r3,8(r2)
  /*
   * Loop through all current file descriptors searching for one that's locked
   * for exclusive access. If a match is found, generate an error.
   */

  for (i = 0; i <= alt_max_fd; i++)
    c578:	e03ffd15 	stw	zero,-12(fp)
    c57c:	00002306 	br	c60c <alt_file_locked+0xc0>
  {
    if ((alt_fd_list[i].dev == fd->dev) &&
    c580:	04000074 	movhi	r16,1
    c584:	8433c904 	addi	r16,r16,-12508
    c588:	e0bffd17 	ldw	r2,-12(fp)
    c58c:	01400304 	movi	r5,12
    c590:	1009883a 	mov	r4,r2
    c594:	000b1700 	call	b170 <__mulsi3>
    c598:	8085883a 	add	r2,r16,r2
    c59c:	10c00017 	ldw	r3,0(r2)
    c5a0:	e0bffe17 	ldw	r2,-8(fp)
    c5a4:	10800017 	ldw	r2,0(r2)
    c5a8:	1880151e 	bne	r3,r2,c600 <alt_file_locked+0xb4>
        (alt_fd_list[i].fd_flags & ALT_FD_EXCL) &&
    c5ac:	04000074 	movhi	r16,1
    c5b0:	8433c904 	addi	r16,r16,-12508
    c5b4:	e0bffd17 	ldw	r2,-12(fp)
    c5b8:	01400304 	movi	r5,12
    c5bc:	1009883a 	mov	r4,r2
    c5c0:	000b1700 	call	b170 <__mulsi3>
    c5c4:	8085883a 	add	r2,r16,r2
    c5c8:	10800204 	addi	r2,r2,8
    c5cc:	10800017 	ldw	r2,0(r2)
   * for exclusive access. If a match is found, generate an error.
   */

  for (i = 0; i <= alt_max_fd; i++)
  {
    if ((alt_fd_list[i].dev == fd->dev) &&
    c5d0:	10000b0e 	bge	r2,zero,c600 <alt_file_locked+0xb4>
        (alt_fd_list[i].fd_flags & ALT_FD_EXCL) &&
        (&alt_fd_list[i] != fd))
    c5d4:	01400304 	movi	r5,12
    c5d8:	e13ffd17 	ldw	r4,-12(fp)
    c5dc:	000b1700 	call	b170 <__mulsi3>
    c5e0:	1007883a 	mov	r3,r2
    c5e4:	00800074 	movhi	r2,1
    c5e8:	10b3c904 	addi	r2,r2,-12508
    c5ec:	1887883a 	add	r3,r3,r2
   */

  for (i = 0; i <= alt_max_fd; i++)
  {
    if ((alt_fd_list[i].dev == fd->dev) &&
        (alt_fd_list[i].fd_flags & ALT_FD_EXCL) &&
    c5f0:	e0bffe17 	ldw	r2,-8(fp)
    c5f4:	18800226 	beq	r3,r2,c600 <alt_file_locked+0xb4>
        (&alt_fd_list[i] != fd))
    {
      return -EACCES;
    c5f8:	00bffcc4 	movi	r2,-13
    c5fc:	00000806 	br	c620 <alt_file_locked+0xd4>
  /*
   * Loop through all current file descriptors searching for one that's locked
   * for exclusive access. If a match is found, generate an error.
   */

  for (i = 0; i <= alt_max_fd; i++)
    c600:	e0bffd17 	ldw	r2,-12(fp)
    c604:	10800044 	addi	r2,r2,1
    c608:	e0bffd15 	stw	r2,-12(fp)
    c60c:	d0a01317 	ldw	r2,-32692(gp)
    c610:	1007883a 	mov	r3,r2
    c614:	e0bffd17 	ldw	r2,-12(fp)
    c618:	18bfd92e 	bgeu	r3,r2,c580 <_gp+0xffff74dc>
    }
  }
  
  /* The device is not locked */
 
  return 0;
    c61c:	0005883a 	mov	r2,zero
}
    c620:	e6ffff04 	addi	sp,fp,-4
    c624:	dfc00217 	ldw	ra,8(sp)
    c628:	df000117 	ldw	fp,4(sp)
    c62c:	dc000017 	ldw	r16,0(sp)
    c630:	dec00304 	addi	sp,sp,12
    c634:	f800283a 	ret

0000c638 <open>:
 *
 * ALT_OPEN is mapped onto the open() system call in alt_syscall.h
 */
 
int ALT_OPEN (const char* file, int flags, int mode)
{ 
    c638:	defff604 	addi	sp,sp,-40
    c63c:	dfc00915 	stw	ra,36(sp)
    c640:	df000815 	stw	fp,32(sp)
    c644:	df000804 	addi	fp,sp,32
    c648:	e13ffd15 	stw	r4,-12(fp)
    c64c:	e17ffe15 	stw	r5,-8(fp)
    c650:	e1bfff15 	stw	r6,-4(fp)
  alt_dev* dev;
  alt_fd*  fd;
  int index  = -1;
    c654:	00bfffc4 	movi	r2,-1
    c658:	e0bff915 	stw	r2,-28(fp)
  int status = -ENODEV;
    c65c:	00bffb44 	movi	r2,-19
    c660:	e0bffa15 	stw	r2,-24(fp)
  int isafs = 0;
    c664:	e03ffb15 	stw	zero,-20(fp)
  /* 
   * Check the device list, to see if a device with a matching name is 
   * registered.
   */
  
  if (!(dev = alt_find_dev (file, &alt_dev_list)))
    c668:	d1601104 	addi	r5,gp,-32700
    c66c:	e13ffd17 	ldw	r4,-12(fp)
    c670:	000c83c0 	call	c83c <alt_find_dev>
    c674:	e0bff815 	stw	r2,-32(fp)
    c678:	e0bff817 	ldw	r2,-32(fp)
    c67c:	1000051e 	bne	r2,zero,c694 <open+0x5c>
  {
    /* No matching device, so try the filesystem list */

    dev   = alt_find_file (file);
    c680:	e13ffd17 	ldw	r4,-12(fp)
    c684:	000c8cc0 	call	c8cc <alt_find_file>
    c688:	e0bff815 	stw	r2,-32(fp)
    isafs = 1;
    c68c:	00800044 	movi	r2,1
    c690:	e0bffb15 	stw	r2,-20(fp)

  /* 
   * If a matching device or filesystem is found, allocate a file descriptor. 
   */

  if (dev)
    c694:	e0bff817 	ldw	r2,-32(fp)
    c698:	10002b26 	beq	r2,zero,c748 <open+0x110>
  {
    if ((index = alt_get_fd (dev)) < 0)
    c69c:	e13ff817 	ldw	r4,-32(fp)
    c6a0:	000c9d40 	call	c9d4 <alt_get_fd>
    c6a4:	e0bff915 	stw	r2,-28(fp)
    c6a8:	e0bff917 	ldw	r2,-28(fp)
    c6ac:	1000030e 	bge	r2,zero,c6bc <open+0x84>
    {
      status = index;
    c6b0:	e0bff917 	ldw	r2,-28(fp)
    c6b4:	e0bffa15 	stw	r2,-24(fp)
    c6b8:	00002506 	br	c750 <open+0x118>
    }
    else
    {
      fd = &alt_fd_list[index];
    c6bc:	01400304 	movi	r5,12
    c6c0:	e13ff917 	ldw	r4,-28(fp)
    c6c4:	000b1700 	call	b170 <__mulsi3>
    c6c8:	1007883a 	mov	r3,r2
    c6cc:	00800074 	movhi	r2,1
    c6d0:	10b3c904 	addi	r2,r2,-12508
    c6d4:	1885883a 	add	r2,r3,r2
    c6d8:	e0bffc15 	stw	r2,-16(fp)
      fd->fd_flags = (flags & ~ALT_FD_FLAGS_MASK);
    c6dc:	e0fffe17 	ldw	r3,-8(fp)
    c6e0:	00900034 	movhi	r2,16384
    c6e4:	10bfffc4 	addi	r2,r2,-1
    c6e8:	1886703a 	and	r3,r3,r2
    c6ec:	e0bffc17 	ldw	r2,-16(fp)
    c6f0:	10c00215 	stw	r3,8(r2)
      
      /* If this is a device, ensure it isn't already locked */

      if (isafs || ((status = alt_file_locked (fd)) >= 0))
    c6f4:	e0bffb17 	ldw	r2,-20(fp)
    c6f8:	1000051e 	bne	r2,zero,c710 <open+0xd8>
    c6fc:	e13ffc17 	ldw	r4,-16(fp)
    c700:	000c54c0 	call	c54c <alt_file_locked>
    c704:	e0bffa15 	stw	r2,-24(fp)
    c708:	e0bffa17 	ldw	r2,-24(fp)
    c70c:	10001016 	blt	r2,zero,c750 <open+0x118>
        /* 
         * If the device or filesystem provides an open() callback function,
         * call it now to perform any device/filesystem specific operations.
         */
    
        status = (dev->open) ? dev->open(fd, file, flags, mode): 0;
    c710:	e0bff817 	ldw	r2,-32(fp)
    c714:	10800317 	ldw	r2,12(r2)
    c718:	10000826 	beq	r2,zero,c73c <open+0x104>
    c71c:	e0bff817 	ldw	r2,-32(fp)
    c720:	10800317 	ldw	r2,12(r2)
    c724:	e1ffff17 	ldw	r7,-4(fp)
    c728:	e1bffe17 	ldw	r6,-8(fp)
    c72c:	e17ffd17 	ldw	r5,-12(fp)
    c730:	e13ffc17 	ldw	r4,-16(fp)
    c734:	103ee83a 	callr	r2
    c738:	00000106 	br	c740 <open+0x108>
    c73c:	0005883a 	mov	r2,zero
    c740:	e0bffa15 	stw	r2,-24(fp)
    c744:	00000206 	br	c750 <open+0x118>
      }
    }
  }
  else
  {
    status = -ENODEV;
    c748:	00bffb44 	movi	r2,-19
    c74c:	e0bffa15 	stw	r2,-24(fp)
  }

  /* Allocation failed, so clean up and return an error */ 

  if (status < 0)
    c750:	e0bffa17 	ldw	r2,-24(fp)
    c754:	1000090e 	bge	r2,zero,c77c <open+0x144>
  {
    alt_release_fd (index);  
    c758:	e13ff917 	ldw	r4,-28(fp)
    c75c:	000c7940 	call	c794 <alt_release_fd>
    ALT_ERRNO = -status;
    c760:	000c5100 	call	c510 <alt_get_errno>
    c764:	1007883a 	mov	r3,r2
    c768:	e0bffa17 	ldw	r2,-24(fp)
    c76c:	0085c83a 	sub	r2,zero,r2
    c770:	18800015 	stw	r2,0(r3)
    return -1;
    c774:	00bfffc4 	movi	r2,-1
    c778:	00000106 	br	c780 <open+0x148>
  }
  
  /* return the reference upon success */

  return index;
    c77c:	e0bff917 	ldw	r2,-28(fp)
}
    c780:	e037883a 	mov	sp,fp
    c784:	dfc00117 	ldw	ra,4(sp)
    c788:	df000017 	ldw	fp,0(sp)
    c78c:	dec00204 	addi	sp,sp,8
    c790:	f800283a 	ret

0000c794 <alt_release_fd>:
 * File descriptors correcponding to standard in, standard out and standard 
 * error cannont be released backed to the pool. They are always reserved.
 */

void alt_release_fd (int fd)
{
    c794:	defffc04 	addi	sp,sp,-16
    c798:	dfc00315 	stw	ra,12(sp)
    c79c:	df000215 	stw	fp,8(sp)
    c7a0:	dc000115 	stw	r16,4(sp)
    c7a4:	df000204 	addi	fp,sp,8
    c7a8:	e13ffe15 	stw	r4,-8(fp)
  if (fd > 2)
    c7ac:	e0bffe17 	ldw	r2,-8(fp)
    c7b0:	108000d0 	cmplti	r2,r2,3
    c7b4:	1000111e 	bne	r2,zero,c7fc <alt_release_fd+0x68>
  {
    alt_fd_list[fd].fd_flags = 0;
    c7b8:	04000074 	movhi	r16,1
    c7bc:	8433c904 	addi	r16,r16,-12508
    c7c0:	e0bffe17 	ldw	r2,-8(fp)
    c7c4:	01400304 	movi	r5,12
    c7c8:	1009883a 	mov	r4,r2
    c7cc:	000b1700 	call	b170 <__mulsi3>
    c7d0:	8085883a 	add	r2,r16,r2
    c7d4:	10800204 	addi	r2,r2,8
    c7d8:	10000015 	stw	zero,0(r2)
    alt_fd_list[fd].dev      = 0;
    c7dc:	04000074 	movhi	r16,1
    c7e0:	8433c904 	addi	r16,r16,-12508
    c7e4:	e0bffe17 	ldw	r2,-8(fp)
    c7e8:	01400304 	movi	r5,12
    c7ec:	1009883a 	mov	r4,r2
    c7f0:	000b1700 	call	b170 <__mulsi3>
    c7f4:	8085883a 	add	r2,r16,r2
    c7f8:	10000015 	stw	zero,0(r2)
  }
}
    c7fc:	0001883a 	nop
    c800:	e6ffff04 	addi	sp,fp,-4
    c804:	dfc00217 	ldw	ra,8(sp)
    c808:	df000117 	ldw	fp,4(sp)
    c80c:	dc000017 	ldw	r16,0(sp)
    c810:	dec00304 	addi	sp,sp,12
    c814:	f800283a 	ret

0000c818 <altera_nios2_gen2_irq_init>:
/*
 * To initialize the internal interrupt controller, just clear the IENABLE
 * register so that all possible IRQs are disabled.
 */
void altera_nios2_gen2_irq_init(void) 
{
    c818:	deffff04 	addi	sp,sp,-4
    c81c:	df000015 	stw	fp,0(sp)
    c820:	d839883a 	mov	fp,sp
    NIOS2_WRITE_IENABLE(0);
    c824:	000170fa 	wrctl	ienable,zero
}
    c828:	0001883a 	nop
    c82c:	e037883a 	mov	sp,fp
    c830:	df000017 	ldw	fp,0(sp)
    c834:	dec00104 	addi	sp,sp,4
    c838:	f800283a 	ret

0000c83c <alt_find_dev>:
 * "name" must be an exact match for the devices registered name for a match to
 * be found.
 */
 
alt_dev* alt_find_dev(const char* name, alt_llist* llist)
{
    c83c:	defffa04 	addi	sp,sp,-24
    c840:	dfc00515 	stw	ra,20(sp)
    c844:	df000415 	stw	fp,16(sp)
    c848:	df000404 	addi	fp,sp,16
    c84c:	e13ffe15 	stw	r4,-8(fp)
    c850:	e17fff15 	stw	r5,-4(fp)
  alt_dev* next = (alt_dev*) llist->next;
    c854:	e0bfff17 	ldw	r2,-4(fp)
    c858:	10800017 	ldw	r2,0(r2)
    c85c:	e0bffc15 	stw	r2,-16(fp)
  alt_32 len;

  len  = strlen(name) + 1;
    c860:	e13ffe17 	ldw	r4,-8(fp)
    c864:	000b9bc0 	call	b9bc <strlen>
    c868:	10800044 	addi	r2,r2,1
    c86c:	e0bffd15 	stw	r2,-12(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 

  while (next != (alt_dev*) llist)
    c870:	00000d06 	br	c8a8 <alt_find_dev+0x6c>
    /* 
     * memcmp() is used here rather than strcmp() in order to reduce the size
     * of the executable.
     */

    if (!memcmp (next->name, name, len))
    c874:	e0bffc17 	ldw	r2,-16(fp)
    c878:	10800217 	ldw	r2,8(r2)
    c87c:	e0fffd17 	ldw	r3,-12(fp)
    c880:	180d883a 	mov	r6,r3
    c884:	e17ffe17 	ldw	r5,-8(fp)
    c888:	1009883a 	mov	r4,r2
    c88c:	000cab80 	call	cab8 <memcmp>
    c890:	1000021e 	bne	r2,zero,c89c <alt_find_dev+0x60>
    {
      /* match found */

      return next;
    c894:	e0bffc17 	ldw	r2,-16(fp)
    c898:	00000706 	br	c8b8 <alt_find_dev+0x7c>
    }
    next = (alt_dev*) next->llist.next;
    c89c:	e0bffc17 	ldw	r2,-16(fp)
    c8a0:	10800017 	ldw	r2,0(r2)
    c8a4:	e0bffc15 	stw	r2,-16(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 

  while (next != (alt_dev*) llist)
    c8a8:	e0fffc17 	ldw	r3,-16(fp)
    c8ac:	e0bfff17 	ldw	r2,-4(fp)
    c8b0:	18bff01e 	bne	r3,r2,c874 <_gp+0xffff77d0>
    next = (alt_dev*) next->llist.next;
  }
  
  /* No match found */
  
  return NULL;
    c8b4:	0005883a 	mov	r2,zero
}
    c8b8:	e037883a 	mov	sp,fp
    c8bc:	dfc00117 	ldw	ra,4(sp)
    c8c0:	df000017 	ldw	fp,0(sp)
    c8c4:	dec00204 	addi	sp,sp,8
    c8c8:	f800283a 	ret

0000c8cc <alt_find_file>:
 * either '/' or '\0' is the prefix of the filename. For example the filename:
 * "/myfilesystem/junk.txt" would match: "/myfilesystem", but not: "/myfile". 
 */
 
alt_dev* alt_find_file (const char* name)
{
    c8cc:	defffb04 	addi	sp,sp,-20
    c8d0:	dfc00415 	stw	ra,16(sp)
    c8d4:	df000315 	stw	fp,12(sp)
    c8d8:	df000304 	addi	fp,sp,12
    c8dc:	e13fff15 	stw	r4,-4(fp)
  alt_dev* next = (alt_dev*) alt_fs_list.next;   
    c8e0:	d0a00f17 	ldw	r2,-32708(gp)
    c8e4:	e0bffd15 	stw	r2,-12(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 
 
  while (next != (alt_dev*) &alt_fs_list)
    c8e8:	00003106 	br	c9b0 <alt_find_file+0xe4>
  {
    len = strlen(next->name);
    c8ec:	e0bffd17 	ldw	r2,-12(fp)
    c8f0:	10800217 	ldw	r2,8(r2)
    c8f4:	1009883a 	mov	r4,r2
    c8f8:	000b9bc0 	call	b9bc <strlen>
    c8fc:	e0bffe15 	stw	r2,-8(fp)
    
    if (next->name[len-1] == '/')
    c900:	e0bffd17 	ldw	r2,-12(fp)
    c904:	10c00217 	ldw	r3,8(r2)
    c908:	e0bffe17 	ldw	r2,-8(fp)
    c90c:	10bfffc4 	addi	r2,r2,-1
    c910:	1885883a 	add	r2,r3,r2
    c914:	10800003 	ldbu	r2,0(r2)
    c918:	10803fcc 	andi	r2,r2,255
    c91c:	1080201c 	xori	r2,r2,128
    c920:	10bfe004 	addi	r2,r2,-128
    c924:	10800bd8 	cmpnei	r2,r2,47
    c928:	1000031e 	bne	r2,zero,c938 <alt_find_file+0x6c>
    {
      len -= 1;
    c92c:	e0bffe17 	ldw	r2,-8(fp)
    c930:	10bfffc4 	addi	r2,r2,-1
    c934:	e0bffe15 	stw	r2,-8(fp)
    }

    if (((name[len] == '/') || (name[len] == '\0')) && 
    c938:	e0bffe17 	ldw	r2,-8(fp)
    c93c:	e0ffff17 	ldw	r3,-4(fp)
    c940:	1885883a 	add	r2,r3,r2
    c944:	10800003 	ldbu	r2,0(r2)
    c948:	10803fcc 	andi	r2,r2,255
    c94c:	1080201c 	xori	r2,r2,128
    c950:	10bfe004 	addi	r2,r2,-128
    c954:	10800be0 	cmpeqi	r2,r2,47
    c958:	1000081e 	bne	r2,zero,c97c <alt_find_file+0xb0>
    c95c:	e0bffe17 	ldw	r2,-8(fp)
    c960:	e0ffff17 	ldw	r3,-4(fp)
    c964:	1885883a 	add	r2,r3,r2
    c968:	10800003 	ldbu	r2,0(r2)
    c96c:	10803fcc 	andi	r2,r2,255
    c970:	1080201c 	xori	r2,r2,128
    c974:	10bfe004 	addi	r2,r2,-128
    c978:	10000a1e 	bne	r2,zero,c9a4 <alt_find_file+0xd8>
        !memcmp (next->name, name, len))
    c97c:	e0bffd17 	ldw	r2,-12(fp)
    c980:	10800217 	ldw	r2,8(r2)
    c984:	e0fffe17 	ldw	r3,-8(fp)
    c988:	180d883a 	mov	r6,r3
    c98c:	e17fff17 	ldw	r5,-4(fp)
    c990:	1009883a 	mov	r4,r2
    c994:	000cab80 	call	cab8 <memcmp>
    if (next->name[len-1] == '/')
    {
      len -= 1;
    }

    if (((name[len] == '/') || (name[len] == '\0')) && 
    c998:	1000021e 	bne	r2,zero,c9a4 <alt_find_file+0xd8>
        !memcmp (next->name, name, len))
    {
      /* match found */

      return next;
    c99c:	e0bffd17 	ldw	r2,-12(fp)
    c9a0:	00000706 	br	c9c0 <alt_find_file+0xf4>
    }
    next = (alt_dev*) next->llist.next;
    c9a4:	e0bffd17 	ldw	r2,-12(fp)
    c9a8:	10800017 	ldw	r2,0(r2)
    c9ac:	e0bffd15 	stw	r2,-12(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 
 
  while (next != (alt_dev*) &alt_fs_list)
    c9b0:	e0fffd17 	ldw	r3,-12(fp)
    c9b4:	d0a00f04 	addi	r2,gp,-32708
    c9b8:	18bfcc1e 	bne	r3,r2,c8ec <_gp+0xffff7848>
    next = (alt_dev*) next->llist.next;
  }
  
  /* No match found */
  
  return NULL;     
    c9bc:	0005883a 	mov	r2,zero
}
    c9c0:	e037883a 	mov	sp,fp
    c9c4:	dfc00117 	ldw	ra,4(sp)
    c9c8:	df000017 	ldw	fp,0(sp)
    c9cc:	dec00204 	addi	sp,sp,8
    c9d0:	f800283a 	ret

0000c9d4 <alt_get_fd>:
 * the offset of the file descriptor within the file descriptor array). A
 * negative value indicates failure.
 */

int alt_get_fd (alt_dev* dev)
{
    c9d4:	defffa04 	addi	sp,sp,-24
    c9d8:	dfc00515 	stw	ra,20(sp)
    c9dc:	df000415 	stw	fp,16(sp)
    c9e0:	dc000315 	stw	r16,12(sp)
    c9e4:	df000404 	addi	fp,sp,16
    c9e8:	e13ffe15 	stw	r4,-8(fp)
  alt_32 i;
  int rc = -EMFILE;
    c9ec:	00bffa04 	movi	r2,-24
    c9f0:	e0bffd15 	stw	r2,-12(fp)
   * indicates the highest file descriptor ever allocated. This is used to
   * improve efficency when searching the file descriptor list, and 
   * therefore reduce contention on the alt_fd_list_lock semaphore. 
   */

  for (i = 0; i < ALT_MAX_FD; i++)
    c9f4:	e03ffc15 	stw	zero,-16(fp)
    c9f8:	00001d06 	br	ca70 <alt_get_fd+0x9c>
  {
    if (!alt_fd_list[i].dev)
    c9fc:	04000074 	movhi	r16,1
    ca00:	8433c904 	addi	r16,r16,-12508
    ca04:	e0bffc17 	ldw	r2,-16(fp)
    ca08:	01400304 	movi	r5,12
    ca0c:	1009883a 	mov	r4,r2
    ca10:	000b1700 	call	b170 <__mulsi3>
    ca14:	8085883a 	add	r2,r16,r2
    ca18:	10800017 	ldw	r2,0(r2)
    ca1c:	1000111e 	bne	r2,zero,ca64 <alt_get_fd+0x90>
    {
      alt_fd_list[i].dev = dev;
    ca20:	04000074 	movhi	r16,1
    ca24:	8433c904 	addi	r16,r16,-12508
    ca28:	e0bffc17 	ldw	r2,-16(fp)
    ca2c:	01400304 	movi	r5,12
    ca30:	1009883a 	mov	r4,r2
    ca34:	000b1700 	call	b170 <__mulsi3>
    ca38:	8085883a 	add	r2,r16,r2
    ca3c:	e0fffe17 	ldw	r3,-8(fp)
    ca40:	10c00015 	stw	r3,0(r2)
      if (i > alt_max_fd)
    ca44:	d0e01317 	ldw	r3,-32692(gp)
    ca48:	e0bffc17 	ldw	r2,-16(fp)
    ca4c:	1880020e 	bge	r3,r2,ca58 <alt_get_fd+0x84>
      {
        alt_max_fd = i;
    ca50:	e0bffc17 	ldw	r2,-16(fp)
    ca54:	d0a01315 	stw	r2,-32692(gp)
      }
      rc = i;
    ca58:	e0bffc17 	ldw	r2,-16(fp)
    ca5c:	e0bffd15 	stw	r2,-12(fp)
      goto alt_get_fd_exit;
    ca60:	00000606 	br	ca7c <alt_get_fd+0xa8>
   * indicates the highest file descriptor ever allocated. This is used to
   * improve efficency when searching the file descriptor list, and 
   * therefore reduce contention on the alt_fd_list_lock semaphore. 
   */

  for (i = 0; i < ALT_MAX_FD; i++)
    ca64:	e0bffc17 	ldw	r2,-16(fp)
    ca68:	10800044 	addi	r2,r2,1
    ca6c:	e0bffc15 	stw	r2,-16(fp)
    ca70:	e0bffc17 	ldw	r2,-16(fp)
    ca74:	10800810 	cmplti	r2,r2,32
    ca78:	103fe01e 	bne	r2,zero,c9fc <_gp+0xffff7958>
   * file descriptor pool.
   */

  ALT_SEM_POST(alt_fd_list_lock);

  return rc;
    ca7c:	e0bffd17 	ldw	r2,-12(fp)
}
    ca80:	e6ffff04 	addi	sp,fp,-4
    ca84:	dfc00217 	ldw	ra,8(sp)
    ca88:	df000117 	ldw	fp,4(sp)
    ca8c:	dc000017 	ldw	r16,0(sp)
    ca90:	dec00304 	addi	sp,sp,12
    ca94:	f800283a 	ret

0000ca98 <exit>:
    ca98:	defffe04 	addi	sp,sp,-8
    ca9c:	000b883a 	mov	r5,zero
    caa0:	dc000015 	stw	r16,0(sp)
    caa4:	dfc00115 	stw	ra,4(sp)
    caa8:	2021883a 	mov	r16,r4
    caac:	000cae80 	call	cae8 <__call_exitprocs>
    cab0:	8009883a 	mov	r4,r16
    cab4:	000cc780 	call	cc78 <_exit>

0000cab8 <memcmp>:
    cab8:	218d883a 	add	r6,r4,r6
    cabc:	21800826 	beq	r4,r6,cae0 <memcmp+0x28>
    cac0:	20800003 	ldbu	r2,0(r4)
    cac4:	28c00003 	ldbu	r3,0(r5)
    cac8:	10c00226 	beq	r2,r3,cad4 <memcmp+0x1c>
    cacc:	10c5c83a 	sub	r2,r2,r3
    cad0:	f800283a 	ret
    cad4:	21000044 	addi	r4,r4,1
    cad8:	29400044 	addi	r5,r5,1
    cadc:	003ff706 	br	cabc <_gp+0xffff7a18>
    cae0:	0005883a 	mov	r2,zero
    cae4:	f800283a 	ret

0000cae8 <__call_exitprocs>:
    cae8:	defff504 	addi	sp,sp,-44
    caec:	dd000515 	stw	r20,20(sp)
    caf0:	05000074 	movhi	r20,1
    caf4:	dc800315 	stw	r18,12(sp)
    caf8:	dfc00a15 	stw	ra,40(sp)
    cafc:	df000915 	stw	fp,36(sp)
    cb00:	ddc00815 	stw	r23,32(sp)
    cb04:	dd800715 	stw	r22,28(sp)
    cb08:	dd400615 	stw	r21,24(sp)
    cb0c:	dcc00415 	stw	r19,16(sp)
    cb10:	dc400215 	stw	r17,8(sp)
    cb14:	dc000115 	stw	r16,4(sp)
    cb18:	d9000015 	stw	r4,0(sp)
    cb1c:	2825883a 	mov	r18,r5
    cb20:	a5343504 	addi	r20,r20,-12076
    cb24:	a4400017 	ldw	r17,0(r20)
    cb28:	8cc00c17 	ldw	r19,48(r17)
    cb2c:	8c400c04 	addi	r17,r17,48
    cb30:	98004526 	beq	r19,zero,cc48 <__call_exitprocs+0x160>
    cb34:	9c000117 	ldw	r16,4(r19)
    cb38:	00900034 	movhi	r2,16384
    cb3c:	10bfffc4 	addi	r2,r2,-1
    cb40:	9d402217 	ldw	r21,136(r19)
    cb44:	85bfffc4 	addi	r22,r16,-1
    cb48:	80a1883a 	add	r16,r16,r2
    cb4c:	8421883a 	add	r16,r16,r16
    cb50:	8421883a 	add	r16,r16,r16
    cb54:	ac2f883a 	add	r23,r21,r16
    cb58:	84000204 	addi	r16,r16,8
    cb5c:	9c21883a 	add	r16,r19,r16
    cb60:	b0002716 	blt	r22,zero,cc00 <__call_exitprocs+0x118>
    cb64:	90000726 	beq	r18,zero,cb84 <__call_exitprocs+0x9c>
    cb68:	a800041e 	bne	r21,zero,cb7c <__call_exitprocs+0x94>
    cb6c:	b5bfffc4 	addi	r22,r22,-1
    cb70:	bdffff04 	addi	r23,r23,-4
    cb74:	843fff04 	addi	r16,r16,-4
    cb78:	003ff906 	br	cb60 <_gp+0xffff7abc>
    cb7c:	b9002017 	ldw	r4,128(r23)
    cb80:	913ffa1e 	bne	r18,r4,cb6c <_gp+0xffff7ac8>
    cb84:	99000117 	ldw	r4,4(r19)
    cb88:	82000017 	ldw	r8,0(r16)
    cb8c:	213fffc4 	addi	r4,r4,-1
    cb90:	b100021e 	bne	r22,r4,cb9c <__call_exitprocs+0xb4>
    cb94:	9d800115 	stw	r22,4(r19)
    cb98:	00000106 	br	cba0 <__call_exitprocs+0xb8>
    cb9c:	80000015 	stw	zero,0(r16)
    cba0:	403ff226 	beq	r8,zero,cb6c <_gp+0xffff7ac8>
    cba4:	9f000117 	ldw	fp,4(r19)
    cba8:	a8000526 	beq	r21,zero,cbc0 <__call_exitprocs+0xd8>
    cbac:	00800044 	movi	r2,1
    cbb0:	1592983a 	sll	r9,r2,r22
    cbb4:	a9404017 	ldw	r5,256(r21)
    cbb8:	494a703a 	and	r5,r9,r5
    cbbc:	2800021e 	bne	r5,zero,cbc8 <__call_exitprocs+0xe0>
    cbc0:	403ee83a 	callr	r8
    cbc4:	00000906 	br	cbec <__call_exitprocs+0x104>
    cbc8:	a9004117 	ldw	r4,260(r21)
    cbcc:	4908703a 	and	r4,r9,r4
    cbd0:	2000041e 	bne	r4,zero,cbe4 <__call_exitprocs+0xfc>
    cbd4:	b9400017 	ldw	r5,0(r23)
    cbd8:	d9000017 	ldw	r4,0(sp)
    cbdc:	403ee83a 	callr	r8
    cbe0:	00000206 	br	cbec <__call_exitprocs+0x104>
    cbe4:	b9000017 	ldw	r4,0(r23)
    cbe8:	403ee83a 	callr	r8
    cbec:	99000117 	ldw	r4,4(r19)
    cbf0:	e13fcc1e 	bne	fp,r4,cb24 <_gp+0xffff7a80>
    cbf4:	89000017 	ldw	r4,0(r17)
    cbf8:	993fdc26 	beq	r19,r4,cb6c <_gp+0xffff7ac8>
    cbfc:	003fc906 	br	cb24 <_gp+0xffff7a80>
    cc00:	00800034 	movhi	r2,0
    cc04:	10800004 	addi	r2,r2,0
    cc08:	10000f26 	beq	r2,zero,cc48 <__call_exitprocs+0x160>
    cc0c:	99400117 	ldw	r5,4(r19)
    cc10:	99000017 	ldw	r4,0(r19)
    cc14:	2800091e 	bne	r5,zero,cc3c <__call_exitprocs+0x154>
    cc18:	20000826 	beq	r4,zero,cc3c <__call_exitprocs+0x154>
    cc1c:	89000015 	stw	r4,0(r17)
    cc20:	a8000226 	beq	r21,zero,cc2c <__call_exitprocs+0x144>
    cc24:	a809883a 	mov	r4,r21
    cc28:	00000000 	call	0 <__alt_mem_onchip_memory2_0-0x8000>
    cc2c:	9809883a 	mov	r4,r19
    cc30:	00000000 	call	0 <__alt_mem_onchip_memory2_0-0x8000>
    cc34:	8cc00017 	ldw	r19,0(r17)
    cc38:	003fbd06 	br	cb30 <_gp+0xffff7a8c>
    cc3c:	9823883a 	mov	r17,r19
    cc40:	2027883a 	mov	r19,r4
    cc44:	003fba06 	br	cb30 <_gp+0xffff7a8c>
    cc48:	dfc00a17 	ldw	ra,40(sp)
    cc4c:	df000917 	ldw	fp,36(sp)
    cc50:	ddc00817 	ldw	r23,32(sp)
    cc54:	dd800717 	ldw	r22,28(sp)
    cc58:	dd400617 	ldw	r21,24(sp)
    cc5c:	dd000517 	ldw	r20,20(sp)
    cc60:	dcc00417 	ldw	r19,16(sp)
    cc64:	dc800317 	ldw	r18,12(sp)
    cc68:	dc400217 	ldw	r17,8(sp)
    cc6c:	dc000117 	ldw	r16,4(sp)
    cc70:	dec00b04 	addi	sp,sp,44
    cc74:	f800283a 	ret

0000cc78 <_exit>:
 *
 * ALT_EXIT is mapped onto the _exit() system call in alt_syscall.h
 */

void ALT_EXIT (int exit_code)
{
    cc78:	defffd04 	addi	sp,sp,-12
    cc7c:	df000215 	stw	fp,8(sp)
    cc80:	df000204 	addi	fp,sp,8
    cc84:	e13fff15 	stw	r4,-4(fp)
  ALT_LOG_PRINT_BOOT("[alt_exit.c] Entering _exit() function.\r\n");
  ALT_LOG_PRINT_BOOT("[alt_exit.c] Exit code from main was %d.\r\n",exit_code);
  /* Stop all other threads */

  ALT_LOG_PRINT_BOOT("[alt_exit.c] Calling ALT_OS_STOP().\r\n");
  ALT_OS_STOP();
    cc88:	0001883a 	nop
    cc8c:	e0bfff17 	ldw	r2,-4(fp)
    cc90:	e0bffe15 	stw	r2,-8(fp)
/*
 * Routine called on exit.
 */
static ALT_INLINE ALT_ALWAYS_INLINE void alt_sim_halt(int exit_code)
{
  register int r2 asm ("r2") = exit_code;
    cc94:	e0bffe17 	ldw	r2,-8(fp)
  __asm__ volatile ("\n0:\n\taddi %0,%0, -1\n\tbgt %0,zero,0b" : : "r" (ALT_CPU_FREQ/100) ); /* Delay for >30ms */

  __asm__ volatile ("break 2" : : "r"(r2), "r"(r3) ALT_GMON_DATA );

#else /* !DEBUG_STUB */
  if (r2) {
    cc98:	10000226 	beq	r2,zero,cca4 <_exit+0x2c>
    ALT_SIM_FAIL();
    cc9c:	002af070 	cmpltui	zero,zero,43969
    cca0:	00000106 	br	cca8 <_exit+0x30>
  } else {
    ALT_SIM_PASS();
    cca4:	002af0b0 	cmpltui	zero,zero,43970
  ALT_SIM_HALT(exit_code);

  /* spin forever, since there's no where to go back to */

  ALT_LOG_PRINT_BOOT("[alt_exit.c] Spinning forever.\r\n");
  while (1);
    cca8:	003fff06 	br	cca8 <_gp+0xffff7c04>
