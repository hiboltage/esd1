
lab6_part5_APP.elf:     file format elf32-littlenios2
lab6_part5_APP.elf
architecture: nios2:r1, flags 0x00000112:
EXEC_P, HAS_SYMS, D_PAGED
start address 0x00004020

Program Header:
    LOAD off    0x00001000 vaddr 0x00004000 paddr 0x00004000 align 2**12
         filesz 0x00000020 memsz 0x00000020 flags r-x
    LOAD off    0x00001020 vaddr 0x00004020 paddr 0x00004020 align 2**12
         filesz 0x00001f7c memsz 0x00001f7c flags r-x
    LOAD off    0x00002f9c vaddr 0x00005f9c paddr 0x00006278 align 2**12
         filesz 0x000002dc memsz 0x000002dc flags rw-
    LOAD off    0x00003554 vaddr 0x00006554 paddr 0x00006554 align 2**12
         filesz 0x00000000 memsz 0x00000010 flags rw-

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .entry        00000020  00004000  00004000  00001000  2**5
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .exceptions   00000000  00004020  00004020  00003278  2**0
                  CONTENTS
  2 .text         00001e80  00004020  00004020  00001020  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  3 .rodata       000000fc  00005ea0  00005ea0  00002ea0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .rwdata       000002dc  00005f9c  00006278  00002f9c  2**2
                  CONTENTS, ALLOC, LOAD, DATA, SMALL_DATA
  5 .bss          00000010  00006554  00006554  00003554  2**2
                  ALLOC, SMALL_DATA
  6 .onchip_memory2_0 00000000  00006564  00006564  00003278  2**0
                  CONTENTS
  7 .comment      00000023  00000000  00000000  00003278  2**0
                  CONTENTS, READONLY
  8 .debug_aranges 00000490  00000000  00000000  000032a0  2**3
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_info   00006cf7  00000000  00000000  00003730  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_abbrev 000022a1  00000000  00000000  0000a427  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_line   00002772  00000000  00000000  0000c6c8  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_frame  00000948  00000000  00000000  0000ee3c  2**2
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_str    000015ce  00000000  00000000  0000f784  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_loc    000013ee  00000000  00000000  00010d52  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_alt_sim_info 00000010  00000000  00000000  00012140  2**2
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_ranges 00000220  00000000  00000000  00012150  2**3
                  CONTENTS, READONLY, DEBUGGING
 17 .thread_model 00000003  00000000  00000000  000139f6  2**0
                  CONTENTS, READONLY
 18 .cpu          0000000c  00000000  00000000  000139f9  2**0
                  CONTENTS, READONLY
 19 .qsys         00000001  00000000  00000000  00013a05  2**0
                  CONTENTS, READONLY
 20 .simulation_enabled 00000001  00000000  00000000  00013a06  2**0
                  CONTENTS, READONLY
 21 .sysid_hash   00000004  00000000  00000000  00013a07  2**0
                  CONTENTS, READONLY
 22 .sysid_base   00000004  00000000  00000000  00013a0b  2**0
                  CONTENTS, READONLY
 23 .sysid_time   00000004  00000000  00000000  00013a0f  2**0
                  CONTENTS, READONLY
 24 .stderr_dev   0000000b  00000000  00000000  00013a13  2**0
                  CONTENTS, READONLY
 25 .stdin_dev    0000000b  00000000  00000000  00013a1e  2**0
                  CONTENTS, READONLY
 26 .stdout_dev   0000000b  00000000  00000000  00013a29  2**0
                  CONTENTS, READONLY
 27 .sopc_system_name 0000000b  00000000  00000000  00013a34  2**0
                  CONTENTS, READONLY
 28 .quartus_project_dir 0000002e  00000000  00000000  00013a3f  2**0
                  CONTENTS, READONLY
 29 .jdi          00005213  00000000  00000000  00013a6d  2**0
                  CONTENTS, READONLY
 30 .sopcinfo     00045114  00000000  00000000  00018c80  2**0
                  CONTENTS, READONLY
SYMBOL TABLE:
00004000 l    d  .entry	00000000 .entry
00004020 l    d  .exceptions	00000000 .exceptions
00004020 l    d  .text	00000000 .text
00005ea0 l    d  .rodata	00000000 .rodata
00005f9c l    d  .rwdata	00000000 .rwdata
00006554 l    d  .bss	00000000 .bss
00006564 l    d  .onchip_memory2_0	00000000 .onchip_memory2_0
00000000 l    d  .comment	00000000 .comment
00000000 l    d  .debug_aranges	00000000 .debug_aranges
00000000 l    d  .debug_info	00000000 .debug_info
00000000 l    d  .debug_abbrev	00000000 .debug_abbrev
00000000 l    d  .debug_line	00000000 .debug_line
00000000 l    d  .debug_frame	00000000 .debug_frame
00000000 l    d  .debug_str	00000000 .debug_str
00000000 l    d  .debug_loc	00000000 .debug_loc
00000000 l    d  .debug_alt_sim_info	00000000 .debug_alt_sim_info
00000000 l    d  .debug_ranges	00000000 .debug_ranges
00000000 l    df *ABS*	00000000 ../lab6_part5_APP_bsp//obj/HAL/src/crt0.o
00004058 l       .text	00000000 alt_after_alt_main
00000000 l    df *ABS*	00000000 lab6_part5.c
00000000 l    df *ABS*	00000000 exit.c
00000000 l    df *ABS*	00000000 printf.c
00000000 l    df *ABS*	00000000 puts.c
00000000 l    df *ABS*	00000000 strlen.c
00000000 l    df *ABS*	00000000 vfprintf.c
0000454c l     F .text	0000006c print_repeat
00000000 l    df *ABS*	00000000 __call_atexit.c
00000000 l    df *ABS*	00000000 fvwrite_small_dev.c
00000000 l    df *ABS*	00000000 impure.c
00005f9c l     O .rwdata	000000e0 impure_data
00000000 l    df *ABS*	00000000 writer.c
00000000 l    df *ABS*	00000000 int_errno.c
00000000 l    df *ABS*	00000000 lib2-divmod.c
00000000 l    df *ABS*	00000000 lib2-mul.c
00000000 l    df *ABS*	00000000 alt_exit.c
00000000 l    df *ABS*	00000000 alt_load.c
00004fb0 l     F .text	00000068 alt_load_section
00000000 l    df *ABS*	00000000 alt_main.c
00000000 l    df *ABS*	00000000 alt_write.c
00005108 l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_sys_init.c
00005244 l     F .text	00000034 alt_dev_reg
0000607c l     O .rwdata	0000002c jtag_uart_0
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_fd.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_read.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_write.c
00000000 l    df *ABS*	00000000 alt_close.c
00005528 l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_dcache_flush_all.c
00000000 l    df *ABS*	00000000 alt_dev.c
0000565c l     F .text	0000002c alt_dev_null_write
00000000 l    df *ABS*	00000000 alt_dev_llist_insert.c
00005688 l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_errno.c
00000000 l    df *ABS*	00000000 alt_icache_flush_all.c
00000000 l    df *ABS*	00000000 alt_io_redirect.c
00005788 l     F .text	000000e4 alt_open_fd
00000000 l    df *ABS*	00000000 alt_open.c
000058e8 l     F .text	0000003c alt_get_errno
00005924 l     F .text	000000ec alt_file_locked
00000000 l    df *ABS*	00000000 alt_release_fd.c
00000000 l    df *ABS*	00000000 altera_nios2_gen2_irq.c
00000000 l    df *ABS*	00000000 alt_find_dev.c
00000000 l    df *ABS*	00000000 alt_find_file.c
00000000 l    df *ABS*	00000000 alt_get_fd.c
00000000 l    df *ABS*	00000000 memcmp.c
0000509c g     F .text	0000006c alt_main
0000449c g     F .text	00000080 _puts_r
00006278 g       *ABS*	00000000 __flash_rwdata_start
00004450 g     F .text	0000004c printf
00005bf0 g     F .text	00000024 altera_nios2_gen2_irq_init
00004000 g     F .entry	0000000c __reset
00004020 g       *ABS*	00000000 __flash_exceptions_start
00006554 g     O .bss	00000004 errno
0000655c g     O .bss	00000004 alt_argv
0000e250 g       *ABS*	00000000 _gp
000060d0 g     O .rwdata	00000180 alt_fd_list
00005c14 g     F .text	00000090 alt_find_dev
0000405c g     F .text	000000f8 test_a
0000586c g     F .text	0000007c alt_io_redirect
0000451c g     F .text	00000014 puts
000053a8 g     F .text	000000ec altera_avalon_jtag_uart_read
00004414 g     F .text	0000003c _printf_r
00004000 g       *ABS*	00000000 __alt_mem_onchip_memory2_0
00004e98 g     F .text	00000064 .hidden __udivsi3
00006250 g     O .rwdata	00000004 ledPtr
00006270 g     O .rwdata	00000004 alt_max_fd
00006258 g     O .rwdata	00000004 _global_impure_ptr
00006564 g       *ABS*	00000000 __bss_end
000060a8 g     O .rwdata	00000028 alt_dev_null
0000563c g     F .text	00000020 alt_dcache_flush_all
00006278 g       *ABS*	00000000 __ram_rwdata_end
00006268 g     O .rwdata	00000008 alt_dev_list
00005144 g     F .text	00000100 write
00005f9c g       *ABS*	00000000 __ram_rodata_end
00004efc g     F .text	00000058 .hidden __umodsi3
00006564 g       *ABS*	00000000 end
00008000 g       *ABS*	00000000 __alt_stack_pointer
00005494 g     F .text	00000094 altera_avalon_jtag_uart_write
000045b8 g     F .text	0000052c ___vfprintf_internal_r
00004b00 g     F .text	00000190 __call_exitprocs
00004020 g     F .text	0000003c _start
000052b0 g     F .text	00000038 alt_sys_init
00004f54 g     F .text	00000028 .hidden __mulsi3
00005f9c g       *ABS*	00000000 __ram_rwdata_start
00005ea0 g       *ABS*	00000000 __ram_rodata_start
000052e8 g     F .text	00000060 altera_avalon_jtag_uart_read_fd
00005dac g     F .text	000000c4 alt_get_fd
00005e70 g     F .text	00000030 memcmp
00006564 g       *ABS*	00000000 __alt_stack_base
00005ca4 g     F .text	00000108 alt_find_file
000056c4 g     F .text	000000a4 alt_dev_llist_insert
00004154 g     F .text	00000110 test_b
00004c90 g     F .text	000000b8 __sfvwrite_small_dev
00006554 g       *ABS*	00000000 __bss_start
0000437c g     F .text	00000078 main
00006560 g     O .bss	00000004 alt_envp
00005348 g     F .text	00000060 altera_avalon_jtag_uart_write_fd
00006274 g     O .rwdata	00000004 alt_errno
00004da0 g     F .text	00000084 .hidden __divsi3
00005ea0 g       *ABS*	00000000 __flash_rodata_start
00005278 g     F .text	00000038 alt_irq_init
00005b6c g     F .text	00000084 alt_release_fd
00004d48 g     F .text	00000058 _write_r
0000625c g     O .rwdata	00000004 _impure_ptr
00006558 g     O .bss	00000004 alt_argc
00006260 g     O .rwdata	00000008 alt_fs_list
00004020 g       *ABS*	00000000 __ram_exceptions_start
00006278 g       *ABS*	00000000 _edata
00006564 g       *ABS*	00000000 _end
00004020 g       *ABS*	00000000 __ram_exceptions_end
000043f4 g     F .text	00000020 exit
00004e24 g     F .text	00000074 .hidden __modsi3
00008000 g       *ABS*	00000000 __alt_data_end
00004f7c g     F .text	00000034 _exit
00004530 g     F .text	0000001c strlen
00005a10 g     F .text	0000015c open
00006254 g     O .rwdata	00000004 key1Ptr
00005768 g     F .text	00000020 alt_icache_flush_all
00004ae4 g     F .text	0000001c __vfprintf_internal
00005564 g     F .text	000000d8 close
00005018 g     F .text	00000084 alt_load
00004264 g     F .text	00000118 test_c



Disassembly of section .entry:

00004000 <__reset>:
 * Jump to the _start entry point in the .text section if reset code
 * is allowed or if optimizing for RTL simulation.
 */
#if defined(ALT_ALLOW_CODE_AT_RESET) || defined(ALT_SIM_OPTIMIZE)
    /* Jump to the _start entry point in the .text section. */
    movhi r1, %hi(_start)
    4000:	00400034 	movhi	at,0
    ori r1, r1, %lo(_start)
    4004:	08500814 	ori	at,at,16416
    jmp r1
    4008:	0800683a 	jmp	at
	...

Disassembly of section .text:

00004020 <_start>:

    /*
     * Now that the caches are initialized, set up the stack pointer and global pointer.
     * The values provided by the linker are assumed to be correctly aligned.
     */
    movhi sp, %hi(__alt_stack_pointer)
    4020:	06c00034 	movhi	sp,0
    ori sp, sp, %lo(__alt_stack_pointer)
    4024:	dee00014 	ori	sp,sp,32768
    movhi gp, %hi(_gp)
    4028:	06800034 	movhi	gp,0
    ori gp, gp, %lo(_gp)
    402c:	d6b89414 	ori	gp,gp,57936
 */
#ifndef ALT_SIM_OPTIMIZE
    /* Log that the BSS is about to be cleared. */
    ALT_LOG_PUTS(alt_log_msg_bss)

    movhi r2, %hi(__bss_start)
    4030:	00800034 	movhi	r2,0
    ori r2, r2, %lo(__bss_start)
    4034:	10995514 	ori	r2,r2,25940

    movhi r3, %hi(__bss_end)
    4038:	00c00034 	movhi	r3,0
    ori r3, r3, %lo(__bss_end)
    403c:	18d95914 	ori	r3,r3,25956

    beq r2, r3, 1f
    4040:	10c00326 	beq	r2,r3,4050 <_start+0x30>

0:
    stw zero, (r2)
    4044:	10000015 	stw	zero,0(r2)
    addi r2, r2, 4
    4048:	10800104 	addi	r2,r2,4
    bltu r2, r3, 0b
    404c:	10fffd36 	bltu	r2,r3,4044 <_gp+0xffff5df4>
     * section aren't defined until alt_load() has been called).
     */
    mov   et, zero
#endif

    call alt_load
    4050:	00050180 	call	5018 <alt_load>

    /* Log that alt_main is about to be called. */
    ALT_LOG_PUTS(alt_log_msg_alt_main)

    /* Call the C entry point. It should never return. */
    call alt_main
    4054:	000509c0 	call	509c <alt_main>

00004058 <alt_after_alt_main>:

    /* Wait in infinite loop in case alt_main does return. */
alt_after_alt_main:
    br alt_after_alt_main
    4058:	003fff06 	br	4058 <_gp+0xffff5e08>

0000405c <test_a>:
// function that starts from a provided address and writes
// to the end of the ram in bytes
// address: starting memory address
// testData: data to write to memory
// ramSize: size of memory
void test_a(uint32 address, uint32 testData, int ramSize){
    405c:	defff704 	addi	sp,sp,-36
    4060:	dfc00815 	stw	ra,32(sp)
    4064:	df000715 	stw	fp,28(sp)
    4068:	df000704 	addi	fp,sp,28
    406c:	e13ffd15 	stw	r4,-12(fp)
    4070:	e17ffe15 	stw	r5,-8(fp)
    4074:	e1bfff15 	stw	r6,-4(fp)
	uint8 *bytePtr = (uint8*)address;	// pointer that increments by bytes
    4078:	e0bffd17 	ldw	r2,-12(fp)
    407c:	e0bffb15 	stw	r2,-20(fp)
	uint8 read = 0x00;					// variable for reading values back from memory
    4080:	e03ffc05 	stb	zero,-16(fp)

	*ledPtr = 0x00;	// clear leds
    4084:	d0a00017 	ldw	r2,-32768(gp)
    4088:	10000015 	stw	zero,0(r2)

	for (int i = (int)address; i <= ramSize; i++){	// write to all requested memory locations
    408c:	e0bffd17 	ldw	r2,-12(fp)
    4090:	e0bff915 	stw	r2,-28(fp)
    4094:	00000806 	br	40b8 <test_a+0x5c>
		*(bytePtr + i) = testData;
    4098:	e0bff917 	ldw	r2,-28(fp)
    409c:	e0fffb17 	ldw	r3,-20(fp)
    40a0:	1885883a 	add	r2,r3,r2
    40a4:	e0fffe17 	ldw	r3,-8(fp)
    40a8:	10c00005 	stb	r3,0(r2)
	uint8 *bytePtr = (uint8*)address;	// pointer that increments by bytes
	uint8 read = 0x00;					// variable for reading values back from memory

	*ledPtr = 0x00;	// clear leds

	for (int i = (int)address; i <= ramSize; i++){	// write to all requested memory locations
    40ac:	e0bff917 	ldw	r2,-28(fp)
    40b0:	10800044 	addi	r2,r2,1
    40b4:	e0bff915 	stw	r2,-28(fp)
    40b8:	e0bff917 	ldw	r2,-28(fp)
    40bc:	e0ffff17 	ldw	r3,-4(fp)
    40c0:	18bff50e 	bge	r3,r2,4098 <_gp+0xffff5e48>
		*(bytePtr + i) = testData;
	}

	for (int i = (int)address; i <= ramSize; i++){	// read from all requested memory locations
    40c4:	e0bffd17 	ldw	r2,-12(fp)
    40c8:	e0bffa15 	stw	r2,-24(fp)
    40cc:	00001806 	br	4130 <test_a+0xd4>
		read = *(bytePtr + i);
    40d0:	e0bffa17 	ldw	r2,-24(fp)
    40d4:	e0fffb17 	ldw	r3,-20(fp)
    40d8:	1885883a 	add	r2,r3,r2
    40dc:	10800003 	ldbu	r2,0(r2)
    40e0:	e0bffc05 	stb	r2,-16(fp)

		if (read != testData){	// if read data does not match write
    40e4:	e0fffc03 	ldbu	r3,-16(fp)
    40e8:	e0bffe17 	ldw	r2,-8(fp)
    40ec:	18800d26 	beq	r3,r2,4124 <test_a+0xc8>
			*ledPtr = 0xFF;		// trigger leds
    40f0:	d0a00017 	ldw	r2,-32768(gp)
    40f4:	00c03fc4 	movi	r3,255
    40f8:	10c00015 	stw	r3,0(r2)
			printf("ERROR:  Address: 0x%08x   Read: 0x%02x   Expected: 0x%02x \n", bytePtr+i, read, testData);
    40fc:	e0bffa17 	ldw	r2,-24(fp)
    4100:	e0fffb17 	ldw	r3,-20(fp)
    4104:	1885883a 	add	r2,r3,r2
    4108:	e0fffc03 	ldbu	r3,-16(fp)
    410c:	e1fffe17 	ldw	r7,-8(fp)
    4110:	180d883a 	mov	r6,r3
    4114:	100b883a 	mov	r5,r2
    4118:	01000034 	movhi	r4,0
    411c:	2117a804 	addi	r4,r4,24224
    4120:	00044500 	call	4450 <printf>

	for (int i = (int)address; i <= ramSize; i++){	// write to all requested memory locations
		*(bytePtr + i) = testData;
	}

	for (int i = (int)address; i <= ramSize; i++){	// read from all requested memory locations
    4124:	e0bffa17 	ldw	r2,-24(fp)
    4128:	10800044 	addi	r2,r2,1
    412c:	e0bffa15 	stw	r2,-24(fp)
    4130:	e0bffa17 	ldw	r2,-24(fp)
    4134:	e0ffff17 	ldw	r3,-4(fp)
    4138:	18bfe50e 	bge	r3,r2,40d0 <_gp+0xffff5e80>
			printf("ERROR:  Address: 0x%08x   Read: 0x%02x   Expected: 0x%02x \n", bytePtr+i, read, testData);
		}

	}

}
    413c:	0001883a 	nop
    4140:	e037883a 	mov	sp,fp
    4144:	dfc00117 	ldw	ra,4(sp)
    4148:	df000017 	ldw	fp,0(sp)
    414c:	dec00204 	addi	sp,sp,8
    4150:	f800283a 	ret

00004154 <test_b>:

// same functionality as test_a, but now tests half word storage
void test_b(uint32 address, uint32 testData, int ramSize){
    4154:	defff704 	addi	sp,sp,-36
    4158:	dfc00815 	stw	ra,32(sp)
    415c:	df000715 	stw	fp,28(sp)
    4160:	df000704 	addi	fp,sp,28
    4164:	e13ffd15 	stw	r4,-12(fp)
    4168:	e17ffe15 	stw	r5,-8(fp)
    416c:	e1bfff15 	stw	r6,-4(fp)
	uint16 *hwordPtr = (uint16*)address;
    4170:	e0bffd17 	ldw	r2,-12(fp)
    4174:	e0bffb15 	stw	r2,-20(fp)
	uint16 read = 0x0000;
    4178:	e03ffc0d 	sth	zero,-16(fp)

	*ledPtr = 0x00;	// clear leds
    417c:	d0a00017 	ldw	r2,-32768(gp)
    4180:	10000015 	stw	zero,0(r2)

	for (int i = (int)address; i <= ramSize; i++){	// write to all requested memory locations
    4184:	e0bffd17 	ldw	r2,-12(fp)
    4188:	e0bff915 	stw	r2,-28(fp)
    418c:	00000a06 	br	41b8 <test_b+0x64>
		*(hwordPtr + i) = testData;
    4190:	e0bff917 	ldw	r2,-28(fp)
    4194:	1085883a 	add	r2,r2,r2
    4198:	1007883a 	mov	r3,r2
    419c:	e0bffb17 	ldw	r2,-20(fp)
    41a0:	10c5883a 	add	r2,r2,r3
    41a4:	e0fffe17 	ldw	r3,-8(fp)
    41a8:	10c0000d 	sth	r3,0(r2)
	uint16 *hwordPtr = (uint16*)address;
	uint16 read = 0x0000;

	*ledPtr = 0x00;	// clear leds

	for (int i = (int)address; i <= ramSize; i++){	// write to all requested memory locations
    41ac:	e0bff917 	ldw	r2,-28(fp)
    41b0:	10800044 	addi	r2,r2,1
    41b4:	e0bff915 	stw	r2,-28(fp)
    41b8:	e0bff917 	ldw	r2,-28(fp)
    41bc:	e0ffff17 	ldw	r3,-4(fp)
    41c0:	18bff30e 	bge	r3,r2,4190 <_gp+0xffff5f40>
		*(hwordPtr + i) = testData;
	}

	for (int i = (int)address; i <= ramSize; i++){	// read from all requested memory locations
    41c4:	e0bffd17 	ldw	r2,-12(fp)
    41c8:	e0bffa15 	stw	r2,-24(fp)
    41cc:	00001c06 	br	4240 <test_b+0xec>
		read = *(hwordPtr + i);
    41d0:	e0bffa17 	ldw	r2,-24(fp)
    41d4:	1085883a 	add	r2,r2,r2
    41d8:	1007883a 	mov	r3,r2
    41dc:	e0bffb17 	ldw	r2,-20(fp)
    41e0:	10c5883a 	add	r2,r2,r3
    41e4:	1080000b 	ldhu	r2,0(r2)
    41e8:	e0bffc0d 	sth	r2,-16(fp)

		if (read != testData){	// if read data does not match write
    41ec:	e0fffc0b 	ldhu	r3,-16(fp)
    41f0:	e0bffe17 	ldw	r2,-8(fp)
    41f4:	18800f26 	beq	r3,r2,4234 <test_b+0xe0>
			*ledPtr = 0xFF;		// trigger leds
    41f8:	d0a00017 	ldw	r2,-32768(gp)
    41fc:	00c03fc4 	movi	r3,255
    4200:	10c00015 	stw	r3,0(r2)
			printf("ERROR:  Address: 0x%08x   Read: 0x%04x   Expected: 0x%04x \n", hwordPtr+i, read, testData);
    4204:	e0bffa17 	ldw	r2,-24(fp)
    4208:	1085883a 	add	r2,r2,r2
    420c:	1007883a 	mov	r3,r2
    4210:	e0bffb17 	ldw	r2,-20(fp)
    4214:	10c5883a 	add	r2,r2,r3
    4218:	e0fffc0b 	ldhu	r3,-16(fp)
    421c:	e1fffe17 	ldw	r7,-8(fp)
    4220:	180d883a 	mov	r6,r3
    4224:	100b883a 	mov	r5,r2
    4228:	01000034 	movhi	r4,0
    422c:	2117b704 	addi	r4,r4,24284
    4230:	00044500 	call	4450 <printf>

	for (int i = (int)address; i <= ramSize; i++){	// write to all requested memory locations
		*(hwordPtr + i) = testData;
	}

	for (int i = (int)address; i <= ramSize; i++){	// read from all requested memory locations
    4234:	e0bffa17 	ldw	r2,-24(fp)
    4238:	10800044 	addi	r2,r2,1
    423c:	e0bffa15 	stw	r2,-24(fp)
    4240:	e0bffa17 	ldw	r2,-24(fp)
    4244:	e0ffff17 	ldw	r3,-4(fp)
    4248:	18bfe10e 	bge	r3,r2,41d0 <_gp+0xffff5f80>
			printf("ERROR:  Address: 0x%08x   Read: 0x%04x   Expected: 0x%04x \n", hwordPtr+i, read, testData);
		}

	}

}
    424c:	0001883a 	nop
    4250:	e037883a 	mov	sp,fp
    4254:	dfc00117 	ldw	ra,4(sp)
    4258:	df000017 	ldw	fp,0(sp)
    425c:	dec00204 	addi	sp,sp,8
    4260:	f800283a 	ret

00004264 <test_c>:

// same functionality as test_a, but now tests word storage
void test_c(uint32 address, uint32 testData, int ramSize){
    4264:	defff704 	addi	sp,sp,-36
    4268:	dfc00815 	stw	ra,32(sp)
    426c:	df000715 	stw	fp,28(sp)
    4270:	df000704 	addi	fp,sp,28
    4274:	e13ffd15 	stw	r4,-12(fp)
    4278:	e17ffe15 	stw	r5,-8(fp)
    427c:	e1bfff15 	stw	r6,-4(fp)
	uint32 *wordPtr = (uint32*)address;
    4280:	e0bffd17 	ldw	r2,-12(fp)
    4284:	e0bffb15 	stw	r2,-20(fp)
	uint32 read = 0x0000;
    4288:	e03ffc15 	stw	zero,-16(fp)

	*ledPtr = 0x00;	// clear leds
    428c:	d0a00017 	ldw	r2,-32768(gp)
    4290:	10000015 	stw	zero,0(r2)

	for (int i = (int)address; i <= ramSize; i++){	// write to all requested memory locations
    4294:	e0bffd17 	ldw	r2,-12(fp)
    4298:	e0bff915 	stw	r2,-28(fp)
    429c:	00000b06 	br	42cc <test_c+0x68>
		*(wordPtr + i) = testData;
    42a0:	e0bff917 	ldw	r2,-28(fp)
    42a4:	1085883a 	add	r2,r2,r2
    42a8:	1085883a 	add	r2,r2,r2
    42ac:	1007883a 	mov	r3,r2
    42b0:	e0bffb17 	ldw	r2,-20(fp)
    42b4:	10c5883a 	add	r2,r2,r3
    42b8:	e0fffe17 	ldw	r3,-8(fp)
    42bc:	10c00015 	stw	r3,0(r2)
	uint32 *wordPtr = (uint32*)address;
	uint32 read = 0x0000;

	*ledPtr = 0x00;	// clear leds

	for (int i = (int)address; i <= ramSize; i++){	// write to all requested memory locations
    42c0:	e0bff917 	ldw	r2,-28(fp)
    42c4:	10800044 	addi	r2,r2,1
    42c8:	e0bff915 	stw	r2,-28(fp)
    42cc:	e0bff917 	ldw	r2,-28(fp)
    42d0:	e0ffff17 	ldw	r3,-4(fp)
    42d4:	18bff20e 	bge	r3,r2,42a0 <_gp+0xffff6050>
		*(wordPtr + i) = testData;
	}

	for (int i = (int)address; i <= ramSize; i++){	// read from all requested memory locations
    42d8:	e0bffd17 	ldw	r2,-12(fp)
    42dc:	e0bffa15 	stw	r2,-24(fp)
    42e0:	00001d06 	br	4358 <test_c+0xf4>
		read = *(wordPtr + i);
    42e4:	e0bffa17 	ldw	r2,-24(fp)
    42e8:	1085883a 	add	r2,r2,r2
    42ec:	1085883a 	add	r2,r2,r2
    42f0:	1007883a 	mov	r3,r2
    42f4:	e0bffb17 	ldw	r2,-20(fp)
    42f8:	10c5883a 	add	r2,r2,r3
    42fc:	10800017 	ldw	r2,0(r2)
    4300:	e0bffc15 	stw	r2,-16(fp)

		if (read != testData){	// if read data does not match write
    4304:	e0fffc17 	ldw	r3,-16(fp)
    4308:	e0bffe17 	ldw	r2,-8(fp)
    430c:	18800f26 	beq	r3,r2,434c <test_c+0xe8>
			*ledPtr = 0xFF;		// trigger leds
    4310:	d0a00017 	ldw	r2,-32768(gp)
    4314:	00c03fc4 	movi	r3,255
    4318:	10c00015 	stw	r3,0(r2)
			printf("ERROR:  Address: 0x%08x   Read: 0x%08x   Expected: 0x%08x \n", wordPtr+i, read, testData);
    431c:	e0bffa17 	ldw	r2,-24(fp)
    4320:	1085883a 	add	r2,r2,r2
    4324:	1085883a 	add	r2,r2,r2
    4328:	1007883a 	mov	r3,r2
    432c:	e0bffb17 	ldw	r2,-20(fp)
    4330:	10c5883a 	add	r2,r2,r3
    4334:	e1fffe17 	ldw	r7,-8(fp)
    4338:	e1bffc17 	ldw	r6,-16(fp)
    433c:	100b883a 	mov	r5,r2
    4340:	01000034 	movhi	r4,0
    4344:	2117c604 	addi	r4,r4,24344
    4348:	00044500 	call	4450 <printf>

	for (int i = (int)address; i <= ramSize; i++){	// write to all requested memory locations
		*(wordPtr + i) = testData;
	}

	for (int i = (int)address; i <= ramSize; i++){	// read from all requested memory locations
    434c:	e0bffa17 	ldw	r2,-24(fp)
    4350:	10800044 	addi	r2,r2,1
    4354:	e0bffa15 	stw	r2,-24(fp)
    4358:	e0bffa17 	ldw	r2,-24(fp)
    435c:	e0ffff17 	ldw	r3,-4(fp)
    4360:	18bfe00e 	bge	r3,r2,42e4 <_gp+0xffff6094>
			printf("ERROR:  Address: 0x%08x   Read: 0x%08x   Expected: 0x%08x \n", wordPtr+i, read, testData);
		}

	}

}
    4364:	0001883a 	nop
    4368:	e037883a 	mov	sp,fp
    436c:	dfc00117 	ldw	ra,4(sp)
    4370:	df000017 	ldw	fp,0(sp)
    4374:	dec00204 	addi	sp,sp,8
    4378:	f800283a 	ret

0000437c <main>:

	exit(0);	// exit program successfully

}
**/
int main(){
    437c:	defffe04 	addi	sp,sp,-8
    4380:	dfc00115 	stw	ra,4(sp)
    4384:	df000015 	stw	fp,0(sp)
    4388:	d839883a 	mov	fp,sp
	//alt_ic_isr_register(KEY1_IRQ_INTERRUPT_CONTROLLER_ID,KEY1_IRQ,key1_isr,0,0);

	//*(key1Ptr + 2) = 1;		// enable interrupts on key1
	//*(key1Ptr + 3) = 0;		// clear key1 interrupt

	*ledPtr = 0x00;	// clear leds
    438c:	d0a00017 	ldw	r2,-32768(gp)
    4390:	10000015 	stw	zero,0(r2)
	//test_a(0x000, 0x00, 4095);	// clear memory

	while(1){	// program loop

		test_a(0x000, 0x00, 4095);		// perform memory tests
    4394:	0183ffc4 	movi	r6,4095
    4398:	000b883a 	mov	r5,zero
    439c:	0009883a 	mov	r4,zero
    43a0:	000405c0 	call	405c <test_a>
		test_b(0x000, 0x1234, 2047);
    43a4:	0181ffc4 	movi	r6,2047
    43a8:	01448d04 	movi	r5,4660
    43ac:	0009883a 	mov	r4,zero
    43b0:	00041540 	call	4154 <test_b>
		test_c(0x000, 0xABCDEF90, 1023);
    43b4:	0180ffc4 	movi	r6,1023
    43b8:	016af3b4 	movhi	r5,43982
    43bc:	297be404 	addi	r5,r5,-4208
    43c0:	0009883a 	mov	r4,zero
    43c4:	00042640 	call	4264 <test_c>

		if (!*key1Ptr)
    43c8:	d0a00117 	ldw	r2,-32764(gp)
    43cc:	10800017 	ldw	r2,0(r2)
    43d0:	103ff01e 	bne	r2,zero,4394 <_gp+0xffff6144>
		{
			*ledPtr = 0xAA;
    43d4:	d0a00017 	ldw	r2,-32768(gp)
    43d8:	00c02a84 	movi	r3,170
    43dc:	10c00015 	stw	r3,0(r2)
			printf("RAM TEST DONE \n");
    43e0:	01000034 	movhi	r4,0
    43e4:	2117d504 	addi	r4,r4,24404
    43e8:	000451c0 	call	451c <puts>

			exit(0);	// exit program successfully
    43ec:	0009883a 	mov	r4,zero
    43f0:	00043f40 	call	43f4 <exit>

000043f4 <exit>:
    43f4:	defffe04 	addi	sp,sp,-8
    43f8:	000b883a 	mov	r5,zero
    43fc:	dc000015 	stw	r16,0(sp)
    4400:	dfc00115 	stw	ra,4(sp)
    4404:	2021883a 	mov	r16,r4
    4408:	0004b000 	call	4b00 <__call_exitprocs>
    440c:	8009883a 	mov	r4,r16
    4410:	0004f7c0 	call	4f7c <_exit>

00004414 <_printf_r>:
    4414:	defffd04 	addi	sp,sp,-12
    4418:	dfc00015 	stw	ra,0(sp)
    441c:	d9800115 	stw	r6,4(sp)
    4420:	d9c00215 	stw	r7,8(sp)
    4424:	20c00217 	ldw	r3,8(r4)
    4428:	01800034 	movhi	r6,0
    442c:	31932404 	addi	r6,r6,19600
    4430:	19800115 	stw	r6,4(r3)
    4434:	280d883a 	mov	r6,r5
    4438:	21400217 	ldw	r5,8(r4)
    443c:	d9c00104 	addi	r7,sp,4
    4440:	00045b80 	call	45b8 <___vfprintf_internal_r>
    4444:	dfc00017 	ldw	ra,0(sp)
    4448:	dec00304 	addi	sp,sp,12
    444c:	f800283a 	ret

00004450 <printf>:
    4450:	defffc04 	addi	sp,sp,-16
    4454:	dfc00015 	stw	ra,0(sp)
    4458:	d9400115 	stw	r5,4(sp)
    445c:	d9800215 	stw	r6,8(sp)
    4460:	d9c00315 	stw	r7,12(sp)
    4464:	00800034 	movhi	r2,0
    4468:	10989704 	addi	r2,r2,25180
    446c:	10800017 	ldw	r2,0(r2)
    4470:	01400034 	movhi	r5,0
    4474:	29532404 	addi	r5,r5,19600
    4478:	10c00217 	ldw	r3,8(r2)
    447c:	d9800104 	addi	r6,sp,4
    4480:	19400115 	stw	r5,4(r3)
    4484:	200b883a 	mov	r5,r4
    4488:	11000217 	ldw	r4,8(r2)
    448c:	0004ae40 	call	4ae4 <__vfprintf_internal>
    4490:	dfc00017 	ldw	ra,0(sp)
    4494:	dec00404 	addi	sp,sp,16
    4498:	f800283a 	ret

0000449c <_puts_r>:
    449c:	defffd04 	addi	sp,sp,-12
    44a0:	dc000015 	stw	r16,0(sp)
    44a4:	2021883a 	mov	r16,r4
    44a8:	2809883a 	mov	r4,r5
    44ac:	dfc00215 	stw	ra,8(sp)
    44b0:	dc400115 	stw	r17,4(sp)
    44b4:	2823883a 	mov	r17,r5
    44b8:	00045300 	call	4530 <strlen>
    44bc:	81400217 	ldw	r5,8(r16)
    44c0:	01000034 	movhi	r4,0
    44c4:	21132404 	addi	r4,r4,19600
    44c8:	29000115 	stw	r4,4(r5)
    44cc:	100f883a 	mov	r7,r2
    44d0:	880d883a 	mov	r6,r17
    44d4:	8009883a 	mov	r4,r16
    44d8:	0004c900 	call	4c90 <__sfvwrite_small_dev>
    44dc:	00ffffc4 	movi	r3,-1
    44e0:	10c00926 	beq	r2,r3,4508 <_puts_r+0x6c>
    44e4:	81400217 	ldw	r5,8(r16)
    44e8:	01800034 	movhi	r6,0
    44ec:	01c00044 	movi	r7,1
    44f0:	28800117 	ldw	r2,4(r5)
    44f4:	3197d904 	addi	r6,r6,24420
    44f8:	8009883a 	mov	r4,r16
    44fc:	103ee83a 	callr	r2
    4500:	10bfffe0 	cmpeqi	r2,r2,-1
    4504:	0085c83a 	sub	r2,zero,r2
    4508:	dfc00217 	ldw	ra,8(sp)
    450c:	dc400117 	ldw	r17,4(sp)
    4510:	dc000017 	ldw	r16,0(sp)
    4514:	dec00304 	addi	sp,sp,12
    4518:	f800283a 	ret

0000451c <puts>:
    451c:	00800034 	movhi	r2,0
    4520:	10989704 	addi	r2,r2,25180
    4524:	200b883a 	mov	r5,r4
    4528:	11000017 	ldw	r4,0(r2)
    452c:	000449c1 	jmpi	449c <_puts_r>

00004530 <strlen>:
    4530:	2005883a 	mov	r2,r4
    4534:	10c00007 	ldb	r3,0(r2)
    4538:	18000226 	beq	r3,zero,4544 <strlen+0x14>
    453c:	10800044 	addi	r2,r2,1
    4540:	003ffc06 	br	4534 <_gp+0xffff62e4>
    4544:	1105c83a 	sub	r2,r2,r4
    4548:	f800283a 	ret

0000454c <print_repeat>:
    454c:	defffb04 	addi	sp,sp,-20
    4550:	dc800315 	stw	r18,12(sp)
    4554:	dc400215 	stw	r17,8(sp)
    4558:	dc000115 	stw	r16,4(sp)
    455c:	dfc00415 	stw	ra,16(sp)
    4560:	2025883a 	mov	r18,r4
    4564:	2823883a 	mov	r17,r5
    4568:	d9800005 	stb	r6,0(sp)
    456c:	3821883a 	mov	r16,r7
    4570:	04000a0e 	bge	zero,r16,459c <print_repeat+0x50>
    4574:	88800117 	ldw	r2,4(r17)
    4578:	01c00044 	movi	r7,1
    457c:	d80d883a 	mov	r6,sp
    4580:	880b883a 	mov	r5,r17
    4584:	9009883a 	mov	r4,r18
    4588:	103ee83a 	callr	r2
    458c:	843fffc4 	addi	r16,r16,-1
    4590:	103ff726 	beq	r2,zero,4570 <_gp+0xffff6320>
    4594:	00bfffc4 	movi	r2,-1
    4598:	00000106 	br	45a0 <print_repeat+0x54>
    459c:	0005883a 	mov	r2,zero
    45a0:	dfc00417 	ldw	ra,16(sp)
    45a4:	dc800317 	ldw	r18,12(sp)
    45a8:	dc400217 	ldw	r17,8(sp)
    45ac:	dc000117 	ldw	r16,4(sp)
    45b0:	dec00504 	addi	sp,sp,20
    45b4:	f800283a 	ret

000045b8 <___vfprintf_internal_r>:
    45b8:	deffe504 	addi	sp,sp,-108
    45bc:	d8c00804 	addi	r3,sp,32
    45c0:	ddc01815 	stw	r23,96(sp)
    45c4:	dd801715 	stw	r22,92(sp)
    45c8:	dd401615 	stw	r21,88(sp)
    45cc:	dd001515 	stw	r20,84(sp)
    45d0:	dcc01415 	stw	r19,80(sp)
    45d4:	dc801315 	stw	r18,76(sp)
    45d8:	dc401215 	stw	r17,72(sp)
    45dc:	dc001115 	stw	r16,68(sp)
    45e0:	dfc01a15 	stw	ra,104(sp)
    45e4:	df001915 	stw	fp,100(sp)
    45e8:	2029883a 	mov	r20,r4
    45ec:	2823883a 	mov	r17,r5
    45f0:	382d883a 	mov	r22,r7
    45f4:	d9800f15 	stw	r6,60(sp)
    45f8:	0021883a 	mov	r16,zero
    45fc:	d8000e15 	stw	zero,56(sp)
    4600:	d8000a15 	stw	zero,40(sp)
    4604:	002b883a 	mov	r21,zero
    4608:	0027883a 	mov	r19,zero
    460c:	0025883a 	mov	r18,zero
    4610:	d8000c15 	stw	zero,48(sp)
    4614:	d8000b15 	stw	zero,44(sp)
    4618:	002f883a 	mov	r23,zero
    461c:	d8c00915 	stw	r3,36(sp)
    4620:	d8c00f17 	ldw	r3,60(sp)
    4624:	19000003 	ldbu	r4,0(r3)
    4628:	20803fcc 	andi	r2,r4,255
    462c:	1080201c 	xori	r2,r2,128
    4630:	10bfe004 	addi	r2,r2,-128
    4634:	10011e26 	beq	r2,zero,4ab0 <___vfprintf_internal_r+0x4f8>
    4638:	00c00044 	movi	r3,1
    463c:	b8c01426 	beq	r23,r3,4690 <___vfprintf_internal_r+0xd8>
    4640:	1dc00216 	blt	r3,r23,464c <___vfprintf_internal_r+0x94>
    4644:	b8000626 	beq	r23,zero,4660 <___vfprintf_internal_r+0xa8>
    4648:	00011506 	br	4aa0 <___vfprintf_internal_r+0x4e8>
    464c:	01400084 	movi	r5,2
    4650:	b9401d26 	beq	r23,r5,46c8 <___vfprintf_internal_r+0x110>
    4654:	014000c4 	movi	r5,3
    4658:	b9402b26 	beq	r23,r5,4708 <___vfprintf_internal_r+0x150>
    465c:	00011006 	br	4aa0 <___vfprintf_internal_r+0x4e8>
    4660:	01400944 	movi	r5,37
    4664:	1140fc26 	beq	r2,r5,4a58 <___vfprintf_internal_r+0x4a0>
    4668:	88800117 	ldw	r2,4(r17)
    466c:	d9000005 	stb	r4,0(sp)
    4670:	01c00044 	movi	r7,1
    4674:	d80d883a 	mov	r6,sp
    4678:	880b883a 	mov	r5,r17
    467c:	a009883a 	mov	r4,r20
    4680:	103ee83a 	callr	r2
    4684:	1000d81e 	bne	r2,zero,49e8 <___vfprintf_internal_r+0x430>
    4688:	84000044 	addi	r16,r16,1
    468c:	00010406 	br	4aa0 <___vfprintf_internal_r+0x4e8>
    4690:	01400c04 	movi	r5,48
    4694:	1140fa26 	beq	r2,r5,4a80 <___vfprintf_internal_r+0x4c8>
    4698:	01400944 	movi	r5,37
    469c:	11400a1e 	bne	r2,r5,46c8 <___vfprintf_internal_r+0x110>
    46a0:	d8800005 	stb	r2,0(sp)
    46a4:	88800117 	ldw	r2,4(r17)
    46a8:	b80f883a 	mov	r7,r23
    46ac:	d80d883a 	mov	r6,sp
    46b0:	880b883a 	mov	r5,r17
    46b4:	a009883a 	mov	r4,r20
    46b8:	103ee83a 	callr	r2
    46bc:	1000ca1e 	bne	r2,zero,49e8 <___vfprintf_internal_r+0x430>
    46c0:	84000044 	addi	r16,r16,1
    46c4:	0000f506 	br	4a9c <___vfprintf_internal_r+0x4e4>
    46c8:	25fff404 	addi	r23,r4,-48
    46cc:	bdc03fcc 	andi	r23,r23,255
    46d0:	00c00244 	movi	r3,9
    46d4:	1dc00936 	bltu	r3,r23,46fc <___vfprintf_internal_r+0x144>
    46d8:	00bfffc4 	movi	r2,-1
    46dc:	90800426 	beq	r18,r2,46f0 <___vfprintf_internal_r+0x138>
    46e0:	01400284 	movi	r5,10
    46e4:	9009883a 	mov	r4,r18
    46e8:	0004f540 	call	4f54 <__mulsi3>
    46ec:	00000106 	br	46f4 <___vfprintf_internal_r+0x13c>
    46f0:	0005883a 	mov	r2,zero
    46f4:	b8a5883a 	add	r18,r23,r2
    46f8:	0000e206 	br	4a84 <___vfprintf_internal_r+0x4cc>
    46fc:	01400b84 	movi	r5,46
    4700:	1140e426 	beq	r2,r5,4a94 <___vfprintf_internal_r+0x4dc>
    4704:	05c00084 	movi	r23,2
    4708:	213ff404 	addi	r4,r4,-48
    470c:	27003fcc 	andi	fp,r4,255
    4710:	00c00244 	movi	r3,9
    4714:	1f000936 	bltu	r3,fp,473c <___vfprintf_internal_r+0x184>
    4718:	00bfffc4 	movi	r2,-1
    471c:	98800426 	beq	r19,r2,4730 <___vfprintf_internal_r+0x178>
    4720:	01400284 	movi	r5,10
    4724:	9809883a 	mov	r4,r19
    4728:	0004f540 	call	4f54 <__mulsi3>
    472c:	00000106 	br	4734 <___vfprintf_internal_r+0x17c>
    4730:	0005883a 	mov	r2,zero
    4734:	e0a7883a 	add	r19,fp,r2
    4738:	0000d906 	br	4aa0 <___vfprintf_internal_r+0x4e8>
    473c:	00c01b04 	movi	r3,108
    4740:	10c0d226 	beq	r2,r3,4a8c <___vfprintf_internal_r+0x4d4>
    4744:	013fffc4 	movi	r4,-1
    4748:	99000226 	beq	r19,r4,4754 <___vfprintf_internal_r+0x19c>
    474c:	d8000b15 	stw	zero,44(sp)
    4750:	00000106 	br	4758 <___vfprintf_internal_r+0x1a0>
    4754:	04c00044 	movi	r19,1
    4758:	01001a44 	movi	r4,105
    475c:	11001626 	beq	r2,r4,47b8 <___vfprintf_internal_r+0x200>
    4760:	20800916 	blt	r4,r2,4788 <___vfprintf_internal_r+0x1d0>
    4764:	010018c4 	movi	r4,99
    4768:	11008826 	beq	r2,r4,498c <___vfprintf_internal_r+0x3d4>
    476c:	01001904 	movi	r4,100
    4770:	11001126 	beq	r2,r4,47b8 <___vfprintf_internal_r+0x200>
    4774:	01001604 	movi	r4,88
    4778:	1100c81e 	bne	r2,r4,4a9c <___vfprintf_internal_r+0x4e4>
    477c:	00c00044 	movi	r3,1
    4780:	d8c00e15 	stw	r3,56(sp)
    4784:	00001506 	br	47dc <___vfprintf_internal_r+0x224>
    4788:	01001cc4 	movi	r4,115
    478c:	11009826 	beq	r2,r4,49f0 <___vfprintf_internal_r+0x438>
    4790:	20800416 	blt	r4,r2,47a4 <___vfprintf_internal_r+0x1ec>
    4794:	01001bc4 	movi	r4,111
    4798:	1100c01e 	bne	r2,r4,4a9c <___vfprintf_internal_r+0x4e4>
    479c:	05400204 	movi	r21,8
    47a0:	00000f06 	br	47e0 <___vfprintf_internal_r+0x228>
    47a4:	01001d44 	movi	r4,117
    47a8:	11000d26 	beq	r2,r4,47e0 <___vfprintf_internal_r+0x228>
    47ac:	01001e04 	movi	r4,120
    47b0:	11000a26 	beq	r2,r4,47dc <___vfprintf_internal_r+0x224>
    47b4:	0000b906 	br	4a9c <___vfprintf_internal_r+0x4e4>
    47b8:	d8c00a17 	ldw	r3,40(sp)
    47bc:	b7000104 	addi	fp,r22,4
    47c0:	18000726 	beq	r3,zero,47e0 <___vfprintf_internal_r+0x228>
    47c4:	df000d15 	stw	fp,52(sp)
    47c8:	b5c00017 	ldw	r23,0(r22)
    47cc:	b800080e 	bge	r23,zero,47f0 <___vfprintf_internal_r+0x238>
    47d0:	05efc83a 	sub	r23,zero,r23
    47d4:	02400044 	movi	r9,1
    47d8:	00000606 	br	47f4 <___vfprintf_internal_r+0x23c>
    47dc:	05400404 	movi	r21,16
    47e0:	b0c00104 	addi	r3,r22,4
    47e4:	d8c00d15 	stw	r3,52(sp)
    47e8:	b5c00017 	ldw	r23,0(r22)
    47ec:	d8000a15 	stw	zero,40(sp)
    47f0:	0013883a 	mov	r9,zero
    47f4:	d839883a 	mov	fp,sp
    47f8:	b8001726 	beq	r23,zero,4858 <___vfprintf_internal_r+0x2a0>
    47fc:	a80b883a 	mov	r5,r21
    4800:	b809883a 	mov	r4,r23
    4804:	da401015 	stw	r9,64(sp)
    4808:	0004e980 	call	4e98 <__udivsi3>
    480c:	a80b883a 	mov	r5,r21
    4810:	1009883a 	mov	r4,r2
    4814:	102d883a 	mov	r22,r2
    4818:	0004f540 	call	4f54 <__mulsi3>
    481c:	b885c83a 	sub	r2,r23,r2
    4820:	00c00244 	movi	r3,9
    4824:	da401017 	ldw	r9,64(sp)
    4828:	18800216 	blt	r3,r2,4834 <___vfprintf_internal_r+0x27c>
    482c:	10800c04 	addi	r2,r2,48
    4830:	00000506 	br	4848 <___vfprintf_internal_r+0x290>
    4834:	d8c00e17 	ldw	r3,56(sp)
    4838:	18000226 	beq	r3,zero,4844 <___vfprintf_internal_r+0x28c>
    483c:	10800dc4 	addi	r2,r2,55
    4840:	00000106 	br	4848 <___vfprintf_internal_r+0x290>
    4844:	108015c4 	addi	r2,r2,87
    4848:	e0800005 	stb	r2,0(fp)
    484c:	b02f883a 	mov	r23,r22
    4850:	e7000044 	addi	fp,fp,1
    4854:	003fe806 	br	47f8 <_gp+0xffff65a8>
    4858:	e6efc83a 	sub	r23,fp,sp
    485c:	9dc5c83a 	sub	r2,r19,r23
    4860:	0080090e 	bge	zero,r2,4888 <___vfprintf_internal_r+0x2d0>
    4864:	e085883a 	add	r2,fp,r2
    4868:	01400c04 	movi	r5,48
    486c:	d8c00917 	ldw	r3,36(sp)
    4870:	e009883a 	mov	r4,fp
    4874:	e0c0032e 	bgeu	fp,r3,4884 <___vfprintf_internal_r+0x2cc>
    4878:	e7000044 	addi	fp,fp,1
    487c:	21400005 	stb	r5,0(r4)
    4880:	e0bffa1e 	bne	fp,r2,486c <_gp+0xffff661c>
    4884:	e6efc83a 	sub	r23,fp,sp
    4888:	d8c00b17 	ldw	r3,44(sp)
    488c:	4dd1883a 	add	r8,r9,r23
    4890:	922dc83a 	sub	r22,r18,r8
    4894:	18001626 	beq	r3,zero,48f0 <___vfprintf_internal_r+0x338>
    4898:	48000a26 	beq	r9,zero,48c4 <___vfprintf_internal_r+0x30c>
    489c:	00800b44 	movi	r2,45
    48a0:	d8800805 	stb	r2,32(sp)
    48a4:	88800117 	ldw	r2,4(r17)
    48a8:	01c00044 	movi	r7,1
    48ac:	d9800804 	addi	r6,sp,32
    48b0:	880b883a 	mov	r5,r17
    48b4:	a009883a 	mov	r4,r20
    48b8:	103ee83a 	callr	r2
    48bc:	10004a1e 	bne	r2,zero,49e8 <___vfprintf_internal_r+0x430>
    48c0:	84000044 	addi	r16,r16,1
    48c4:	0580070e 	bge	zero,r22,48e4 <___vfprintf_internal_r+0x32c>
    48c8:	b00f883a 	mov	r7,r22
    48cc:	01800c04 	movi	r6,48
    48d0:	880b883a 	mov	r5,r17
    48d4:	a009883a 	mov	r4,r20
    48d8:	000454c0 	call	454c <print_repeat>
    48dc:	1000421e 	bne	r2,zero,49e8 <___vfprintf_internal_r+0x430>
    48e0:	85a1883a 	add	r16,r16,r22
    48e4:	e02d883a 	mov	r22,fp
    48e8:	bf2fc83a 	sub	r23,r23,fp
    48ec:	00002006 	br	4970 <___vfprintf_internal_r+0x3b8>
    48f0:	0580090e 	bge	zero,r22,4918 <___vfprintf_internal_r+0x360>
    48f4:	b00f883a 	mov	r7,r22
    48f8:	01800804 	movi	r6,32
    48fc:	880b883a 	mov	r5,r17
    4900:	a009883a 	mov	r4,r20
    4904:	da401015 	stw	r9,64(sp)
    4908:	000454c0 	call	454c <print_repeat>
    490c:	da401017 	ldw	r9,64(sp)
    4910:	1000351e 	bne	r2,zero,49e8 <___vfprintf_internal_r+0x430>
    4914:	85a1883a 	add	r16,r16,r22
    4918:	483ff226 	beq	r9,zero,48e4 <_gp+0xffff6694>
    491c:	00800b44 	movi	r2,45
    4920:	d8800805 	stb	r2,32(sp)
    4924:	88800117 	ldw	r2,4(r17)
    4928:	01c00044 	movi	r7,1
    492c:	d9800804 	addi	r6,sp,32
    4930:	880b883a 	mov	r5,r17
    4934:	a009883a 	mov	r4,r20
    4938:	103ee83a 	callr	r2
    493c:	10002a1e 	bne	r2,zero,49e8 <___vfprintf_internal_r+0x430>
    4940:	84000044 	addi	r16,r16,1
    4944:	003fe706 	br	48e4 <_gp+0xffff6694>
    4948:	b5bfffc4 	addi	r22,r22,-1
    494c:	b0800003 	ldbu	r2,0(r22)
    4950:	01c00044 	movi	r7,1
    4954:	d9800804 	addi	r6,sp,32
    4958:	d8800805 	stb	r2,32(sp)
    495c:	88800117 	ldw	r2,4(r17)
    4960:	880b883a 	mov	r5,r17
    4964:	a009883a 	mov	r4,r20
    4968:	103ee83a 	callr	r2
    496c:	10001e1e 	bne	r2,zero,49e8 <___vfprintf_internal_r+0x430>
    4970:	8585c83a 	sub	r2,r16,r22
    4974:	b5c9883a 	add	r4,r22,r23
    4978:	e085883a 	add	r2,fp,r2
    497c:	013ff216 	blt	zero,r4,4948 <_gp+0xffff66f8>
    4980:	1021883a 	mov	r16,r2
    4984:	dd800d17 	ldw	r22,52(sp)
    4988:	00004406 	br	4a9c <___vfprintf_internal_r+0x4e4>
    498c:	00800044 	movi	r2,1
    4990:	1480080e 	bge	r2,r18,49b4 <___vfprintf_internal_r+0x3fc>
    4994:	95ffffc4 	addi	r23,r18,-1
    4998:	b80f883a 	mov	r7,r23
    499c:	01800804 	movi	r6,32
    49a0:	880b883a 	mov	r5,r17
    49a4:	a009883a 	mov	r4,r20
    49a8:	000454c0 	call	454c <print_repeat>
    49ac:	10000e1e 	bne	r2,zero,49e8 <___vfprintf_internal_r+0x430>
    49b0:	85e1883a 	add	r16,r16,r23
    49b4:	b0800017 	ldw	r2,0(r22)
    49b8:	01c00044 	movi	r7,1
    49bc:	d80d883a 	mov	r6,sp
    49c0:	d8800005 	stb	r2,0(sp)
    49c4:	88800117 	ldw	r2,4(r17)
    49c8:	880b883a 	mov	r5,r17
    49cc:	a009883a 	mov	r4,r20
    49d0:	b5c00104 	addi	r23,r22,4
    49d4:	103ee83a 	callr	r2
    49d8:	1000031e 	bne	r2,zero,49e8 <___vfprintf_internal_r+0x430>
    49dc:	84000044 	addi	r16,r16,1
    49e0:	b82d883a 	mov	r22,r23
    49e4:	00002d06 	br	4a9c <___vfprintf_internal_r+0x4e4>
    49e8:	00bfffc4 	movi	r2,-1
    49ec:	00003106 	br	4ab4 <___vfprintf_internal_r+0x4fc>
    49f0:	b5c00017 	ldw	r23,0(r22)
    49f4:	b7000104 	addi	fp,r22,4
    49f8:	b809883a 	mov	r4,r23
    49fc:	00045300 	call	4530 <strlen>
    4a00:	9091c83a 	sub	r8,r18,r2
    4a04:	102d883a 	mov	r22,r2
    4a08:	0200090e 	bge	zero,r8,4a30 <___vfprintf_internal_r+0x478>
    4a0c:	400f883a 	mov	r7,r8
    4a10:	01800804 	movi	r6,32
    4a14:	880b883a 	mov	r5,r17
    4a18:	a009883a 	mov	r4,r20
    4a1c:	da001015 	stw	r8,64(sp)
    4a20:	000454c0 	call	454c <print_repeat>
    4a24:	da001017 	ldw	r8,64(sp)
    4a28:	103fef1e 	bne	r2,zero,49e8 <_gp+0xffff6798>
    4a2c:	8221883a 	add	r16,r16,r8
    4a30:	88800117 	ldw	r2,4(r17)
    4a34:	b00f883a 	mov	r7,r22
    4a38:	b80d883a 	mov	r6,r23
    4a3c:	880b883a 	mov	r5,r17
    4a40:	a009883a 	mov	r4,r20
    4a44:	103ee83a 	callr	r2
    4a48:	103fe71e 	bne	r2,zero,49e8 <_gp+0xffff6798>
    4a4c:	85a1883a 	add	r16,r16,r22
    4a50:	e02d883a 	mov	r22,fp
    4a54:	00001106 	br	4a9c <___vfprintf_internal_r+0x4e4>
    4a58:	00c00044 	movi	r3,1
    4a5c:	04ffffc4 	movi	r19,-1
    4a60:	d8000e15 	stw	zero,56(sp)
    4a64:	d8c00a15 	stw	r3,40(sp)
    4a68:	05400284 	movi	r21,10
    4a6c:	9825883a 	mov	r18,r19
    4a70:	d8000c15 	stw	zero,48(sp)
    4a74:	d8000b15 	stw	zero,44(sp)
    4a78:	182f883a 	mov	r23,r3
    4a7c:	00000806 	br	4aa0 <___vfprintf_internal_r+0x4e8>
    4a80:	ddc00b15 	stw	r23,44(sp)
    4a84:	05c00084 	movi	r23,2
    4a88:	00000506 	br	4aa0 <___vfprintf_internal_r+0x4e8>
    4a8c:	00c00044 	movi	r3,1
    4a90:	d8c00c15 	stw	r3,48(sp)
    4a94:	05c000c4 	movi	r23,3
    4a98:	00000106 	br	4aa0 <___vfprintf_internal_r+0x4e8>
    4a9c:	002f883a 	mov	r23,zero
    4aa0:	d8c00f17 	ldw	r3,60(sp)
    4aa4:	18c00044 	addi	r3,r3,1
    4aa8:	d8c00f15 	stw	r3,60(sp)
    4aac:	003edc06 	br	4620 <_gp+0xffff63d0>
    4ab0:	8005883a 	mov	r2,r16
    4ab4:	dfc01a17 	ldw	ra,104(sp)
    4ab8:	df001917 	ldw	fp,100(sp)
    4abc:	ddc01817 	ldw	r23,96(sp)
    4ac0:	dd801717 	ldw	r22,92(sp)
    4ac4:	dd401617 	ldw	r21,88(sp)
    4ac8:	dd001517 	ldw	r20,84(sp)
    4acc:	dcc01417 	ldw	r19,80(sp)
    4ad0:	dc801317 	ldw	r18,76(sp)
    4ad4:	dc401217 	ldw	r17,72(sp)
    4ad8:	dc001117 	ldw	r16,68(sp)
    4adc:	dec01b04 	addi	sp,sp,108
    4ae0:	f800283a 	ret

00004ae4 <__vfprintf_internal>:
    4ae4:	00800034 	movhi	r2,0
    4ae8:	10989704 	addi	r2,r2,25180
    4aec:	300f883a 	mov	r7,r6
    4af0:	280d883a 	mov	r6,r5
    4af4:	200b883a 	mov	r5,r4
    4af8:	11000017 	ldw	r4,0(r2)
    4afc:	00045b81 	jmpi	45b8 <___vfprintf_internal_r>

00004b00 <__call_exitprocs>:
    4b00:	defff504 	addi	sp,sp,-44
    4b04:	dd000515 	stw	r20,20(sp)
    4b08:	05000034 	movhi	r20,0
    4b0c:	dc800315 	stw	r18,12(sp)
    4b10:	dfc00a15 	stw	ra,40(sp)
    4b14:	df000915 	stw	fp,36(sp)
    4b18:	ddc00815 	stw	r23,32(sp)
    4b1c:	dd800715 	stw	r22,28(sp)
    4b20:	dd400615 	stw	r21,24(sp)
    4b24:	dcc00415 	stw	r19,16(sp)
    4b28:	dc400215 	stw	r17,8(sp)
    4b2c:	dc000115 	stw	r16,4(sp)
    4b30:	d9000015 	stw	r4,0(sp)
    4b34:	2825883a 	mov	r18,r5
    4b38:	a5189604 	addi	r20,r20,25176
    4b3c:	a4400017 	ldw	r17,0(r20)
    4b40:	8cc00c17 	ldw	r19,48(r17)
    4b44:	8c400c04 	addi	r17,r17,48
    4b48:	98004526 	beq	r19,zero,4c60 <__call_exitprocs+0x160>
    4b4c:	9c000117 	ldw	r16,4(r19)
    4b50:	00900034 	movhi	r2,16384
    4b54:	10bfffc4 	addi	r2,r2,-1
    4b58:	9d402217 	ldw	r21,136(r19)
    4b5c:	85bfffc4 	addi	r22,r16,-1
    4b60:	80a1883a 	add	r16,r16,r2
    4b64:	8421883a 	add	r16,r16,r16
    4b68:	8421883a 	add	r16,r16,r16
    4b6c:	ac2f883a 	add	r23,r21,r16
    4b70:	84000204 	addi	r16,r16,8
    4b74:	9c21883a 	add	r16,r19,r16
    4b78:	b0002716 	blt	r22,zero,4c18 <__call_exitprocs+0x118>
    4b7c:	90000726 	beq	r18,zero,4b9c <__call_exitprocs+0x9c>
    4b80:	a800041e 	bne	r21,zero,4b94 <__call_exitprocs+0x94>
    4b84:	b5bfffc4 	addi	r22,r22,-1
    4b88:	bdffff04 	addi	r23,r23,-4
    4b8c:	843fff04 	addi	r16,r16,-4
    4b90:	003ff906 	br	4b78 <_gp+0xffff6928>
    4b94:	b9002017 	ldw	r4,128(r23)
    4b98:	913ffa1e 	bne	r18,r4,4b84 <_gp+0xffff6934>
    4b9c:	99000117 	ldw	r4,4(r19)
    4ba0:	82000017 	ldw	r8,0(r16)
    4ba4:	213fffc4 	addi	r4,r4,-1
    4ba8:	b100021e 	bne	r22,r4,4bb4 <__call_exitprocs+0xb4>
    4bac:	9d800115 	stw	r22,4(r19)
    4bb0:	00000106 	br	4bb8 <__call_exitprocs+0xb8>
    4bb4:	80000015 	stw	zero,0(r16)
    4bb8:	403ff226 	beq	r8,zero,4b84 <_gp+0xffff6934>
    4bbc:	9f000117 	ldw	fp,4(r19)
    4bc0:	a8000526 	beq	r21,zero,4bd8 <__call_exitprocs+0xd8>
    4bc4:	00800044 	movi	r2,1
    4bc8:	1592983a 	sll	r9,r2,r22
    4bcc:	a9404017 	ldw	r5,256(r21)
    4bd0:	494a703a 	and	r5,r9,r5
    4bd4:	2800021e 	bne	r5,zero,4be0 <__call_exitprocs+0xe0>
    4bd8:	403ee83a 	callr	r8
    4bdc:	00000906 	br	4c04 <__call_exitprocs+0x104>
    4be0:	a9004117 	ldw	r4,260(r21)
    4be4:	4908703a 	and	r4,r9,r4
    4be8:	2000041e 	bne	r4,zero,4bfc <__call_exitprocs+0xfc>
    4bec:	b9400017 	ldw	r5,0(r23)
    4bf0:	d9000017 	ldw	r4,0(sp)
    4bf4:	403ee83a 	callr	r8
    4bf8:	00000206 	br	4c04 <__call_exitprocs+0x104>
    4bfc:	b9000017 	ldw	r4,0(r23)
    4c00:	403ee83a 	callr	r8
    4c04:	99000117 	ldw	r4,4(r19)
    4c08:	e13fcc1e 	bne	fp,r4,4b3c <_gp+0xffff68ec>
    4c0c:	89000017 	ldw	r4,0(r17)
    4c10:	993fdc26 	beq	r19,r4,4b84 <_gp+0xffff6934>
    4c14:	003fc906 	br	4b3c <_gp+0xffff68ec>
    4c18:	00800034 	movhi	r2,0
    4c1c:	10800004 	addi	r2,r2,0
    4c20:	10000f26 	beq	r2,zero,4c60 <__call_exitprocs+0x160>
    4c24:	99400117 	ldw	r5,4(r19)
    4c28:	99000017 	ldw	r4,0(r19)
    4c2c:	2800091e 	bne	r5,zero,4c54 <__call_exitprocs+0x154>
    4c30:	20000826 	beq	r4,zero,4c54 <__call_exitprocs+0x154>
    4c34:	89000015 	stw	r4,0(r17)
    4c38:	a8000226 	beq	r21,zero,4c44 <__call_exitprocs+0x144>
    4c3c:	a809883a 	mov	r4,r21
    4c40:	00000000 	call	0 <__alt_mem_onchip_memory2_0-0x4000>
    4c44:	9809883a 	mov	r4,r19
    4c48:	00000000 	call	0 <__alt_mem_onchip_memory2_0-0x4000>
    4c4c:	8cc00017 	ldw	r19,0(r17)
    4c50:	003fbd06 	br	4b48 <_gp+0xffff68f8>
    4c54:	9823883a 	mov	r17,r19
    4c58:	2027883a 	mov	r19,r4
    4c5c:	003fba06 	br	4b48 <_gp+0xffff68f8>
    4c60:	dfc00a17 	ldw	ra,40(sp)
    4c64:	df000917 	ldw	fp,36(sp)
    4c68:	ddc00817 	ldw	r23,32(sp)
    4c6c:	dd800717 	ldw	r22,28(sp)
    4c70:	dd400617 	ldw	r21,24(sp)
    4c74:	dd000517 	ldw	r20,20(sp)
    4c78:	dcc00417 	ldw	r19,16(sp)
    4c7c:	dc800317 	ldw	r18,12(sp)
    4c80:	dc400217 	ldw	r17,8(sp)
    4c84:	dc000117 	ldw	r16,4(sp)
    4c88:	dec00b04 	addi	sp,sp,44
    4c8c:	f800283a 	ret

00004c90 <__sfvwrite_small_dev>:
    4c90:	2880000b 	ldhu	r2,0(r5)
    4c94:	1080020c 	andi	r2,r2,8
    4c98:	10002126 	beq	r2,zero,4d20 <__sfvwrite_small_dev+0x90>
    4c9c:	2880008f 	ldh	r2,2(r5)
    4ca0:	defffa04 	addi	sp,sp,-24
    4ca4:	dc000015 	stw	r16,0(sp)
    4ca8:	dfc00515 	stw	ra,20(sp)
    4cac:	dd000415 	stw	r20,16(sp)
    4cb0:	dcc00315 	stw	r19,12(sp)
    4cb4:	dc800215 	stw	r18,8(sp)
    4cb8:	dc400115 	stw	r17,4(sp)
    4cbc:	2821883a 	mov	r16,r5
    4cc0:	10001216 	blt	r2,zero,4d0c <__sfvwrite_small_dev+0x7c>
    4cc4:	2027883a 	mov	r19,r4
    4cc8:	3025883a 	mov	r18,r6
    4ccc:	3823883a 	mov	r17,r7
    4cd0:	05010004 	movi	r20,1024
    4cd4:	04400b0e 	bge	zero,r17,4d04 <__sfvwrite_small_dev+0x74>
    4cd8:	880f883a 	mov	r7,r17
    4cdc:	a440010e 	bge	r20,r17,4ce4 <__sfvwrite_small_dev+0x54>
    4ce0:	01c10004 	movi	r7,1024
    4ce4:	8140008f 	ldh	r5,2(r16)
    4ce8:	900d883a 	mov	r6,r18
    4cec:	9809883a 	mov	r4,r19
    4cf0:	0004d480 	call	4d48 <_write_r>
    4cf4:	0080050e 	bge	zero,r2,4d0c <__sfvwrite_small_dev+0x7c>
    4cf8:	88a3c83a 	sub	r17,r17,r2
    4cfc:	90a5883a 	add	r18,r18,r2
    4d00:	003ff406 	br	4cd4 <_gp+0xffff6a84>
    4d04:	0005883a 	mov	r2,zero
    4d08:	00000706 	br	4d28 <__sfvwrite_small_dev+0x98>
    4d0c:	8080000b 	ldhu	r2,0(r16)
    4d10:	10801014 	ori	r2,r2,64
    4d14:	8080000d 	sth	r2,0(r16)
    4d18:	00bfffc4 	movi	r2,-1
    4d1c:	00000206 	br	4d28 <__sfvwrite_small_dev+0x98>
    4d20:	00bfffc4 	movi	r2,-1
    4d24:	f800283a 	ret
    4d28:	dfc00517 	ldw	ra,20(sp)
    4d2c:	dd000417 	ldw	r20,16(sp)
    4d30:	dcc00317 	ldw	r19,12(sp)
    4d34:	dc800217 	ldw	r18,8(sp)
    4d38:	dc400117 	ldw	r17,4(sp)
    4d3c:	dc000017 	ldw	r16,0(sp)
    4d40:	dec00604 	addi	sp,sp,24
    4d44:	f800283a 	ret

00004d48 <_write_r>:
    4d48:	defffd04 	addi	sp,sp,-12
    4d4c:	dc000015 	stw	r16,0(sp)
    4d50:	04000034 	movhi	r16,0
    4d54:	dc400115 	stw	r17,4(sp)
    4d58:	84195504 	addi	r16,r16,25940
    4d5c:	2023883a 	mov	r17,r4
    4d60:	2809883a 	mov	r4,r5
    4d64:	300b883a 	mov	r5,r6
    4d68:	380d883a 	mov	r6,r7
    4d6c:	dfc00215 	stw	ra,8(sp)
    4d70:	80000015 	stw	zero,0(r16)
    4d74:	00051440 	call	5144 <write>
    4d78:	00ffffc4 	movi	r3,-1
    4d7c:	10c0031e 	bne	r2,r3,4d8c <_write_r+0x44>
    4d80:	80c00017 	ldw	r3,0(r16)
    4d84:	18000126 	beq	r3,zero,4d8c <_write_r+0x44>
    4d88:	88c00015 	stw	r3,0(r17)
    4d8c:	dfc00217 	ldw	ra,8(sp)
    4d90:	dc400117 	ldw	r17,4(sp)
    4d94:	dc000017 	ldw	r16,0(sp)
    4d98:	dec00304 	addi	sp,sp,12
    4d9c:	f800283a 	ret

00004da0 <__divsi3>:
    4da0:	20001b16 	blt	r4,zero,4e10 <__divsi3+0x70>
    4da4:	000f883a 	mov	r7,zero
    4da8:	28001616 	blt	r5,zero,4e04 <__divsi3+0x64>
    4dac:	200d883a 	mov	r6,r4
    4db0:	29001a2e 	bgeu	r5,r4,4e1c <__divsi3+0x7c>
    4db4:	00800804 	movi	r2,32
    4db8:	00c00044 	movi	r3,1
    4dbc:	00000106 	br	4dc4 <__divsi3+0x24>
    4dc0:	10000d26 	beq	r2,zero,4df8 <__divsi3+0x58>
    4dc4:	294b883a 	add	r5,r5,r5
    4dc8:	10bfffc4 	addi	r2,r2,-1
    4dcc:	18c7883a 	add	r3,r3,r3
    4dd0:	293ffb36 	bltu	r5,r4,4dc0 <_gp+0xffff6b70>
    4dd4:	0005883a 	mov	r2,zero
    4dd8:	18000726 	beq	r3,zero,4df8 <__divsi3+0x58>
    4ddc:	0005883a 	mov	r2,zero
    4de0:	31400236 	bltu	r6,r5,4dec <__divsi3+0x4c>
    4de4:	314dc83a 	sub	r6,r6,r5
    4de8:	10c4b03a 	or	r2,r2,r3
    4dec:	1806d07a 	srli	r3,r3,1
    4df0:	280ad07a 	srli	r5,r5,1
    4df4:	183ffa1e 	bne	r3,zero,4de0 <_gp+0xffff6b90>
    4df8:	38000126 	beq	r7,zero,4e00 <__divsi3+0x60>
    4dfc:	0085c83a 	sub	r2,zero,r2
    4e00:	f800283a 	ret
    4e04:	014bc83a 	sub	r5,zero,r5
    4e08:	39c0005c 	xori	r7,r7,1
    4e0c:	003fe706 	br	4dac <_gp+0xffff6b5c>
    4e10:	0109c83a 	sub	r4,zero,r4
    4e14:	01c00044 	movi	r7,1
    4e18:	003fe306 	br	4da8 <_gp+0xffff6b58>
    4e1c:	00c00044 	movi	r3,1
    4e20:	003fee06 	br	4ddc <_gp+0xffff6b8c>

00004e24 <__modsi3>:
    4e24:	20001716 	blt	r4,zero,4e84 <__modsi3+0x60>
    4e28:	000f883a 	mov	r7,zero
    4e2c:	2005883a 	mov	r2,r4
    4e30:	28001216 	blt	r5,zero,4e7c <__modsi3+0x58>
    4e34:	2900162e 	bgeu	r5,r4,4e90 <__modsi3+0x6c>
    4e38:	01800804 	movi	r6,32
    4e3c:	00c00044 	movi	r3,1
    4e40:	00000106 	br	4e48 <__modsi3+0x24>
    4e44:	30000a26 	beq	r6,zero,4e70 <__modsi3+0x4c>
    4e48:	294b883a 	add	r5,r5,r5
    4e4c:	31bfffc4 	addi	r6,r6,-1
    4e50:	18c7883a 	add	r3,r3,r3
    4e54:	293ffb36 	bltu	r5,r4,4e44 <_gp+0xffff6bf4>
    4e58:	18000526 	beq	r3,zero,4e70 <__modsi3+0x4c>
    4e5c:	1806d07a 	srli	r3,r3,1
    4e60:	11400136 	bltu	r2,r5,4e68 <__modsi3+0x44>
    4e64:	1145c83a 	sub	r2,r2,r5
    4e68:	280ad07a 	srli	r5,r5,1
    4e6c:	183ffb1e 	bne	r3,zero,4e5c <_gp+0xffff6c0c>
    4e70:	38000126 	beq	r7,zero,4e78 <__modsi3+0x54>
    4e74:	0085c83a 	sub	r2,zero,r2
    4e78:	f800283a 	ret
    4e7c:	014bc83a 	sub	r5,zero,r5
    4e80:	003fec06 	br	4e34 <_gp+0xffff6be4>
    4e84:	0109c83a 	sub	r4,zero,r4
    4e88:	01c00044 	movi	r7,1
    4e8c:	003fe706 	br	4e2c <_gp+0xffff6bdc>
    4e90:	00c00044 	movi	r3,1
    4e94:	003ff106 	br	4e5c <_gp+0xffff6c0c>

00004e98 <__udivsi3>:
    4e98:	200d883a 	mov	r6,r4
    4e9c:	2900152e 	bgeu	r5,r4,4ef4 <__udivsi3+0x5c>
    4ea0:	28001416 	blt	r5,zero,4ef4 <__udivsi3+0x5c>
    4ea4:	00800804 	movi	r2,32
    4ea8:	00c00044 	movi	r3,1
    4eac:	00000206 	br	4eb8 <__udivsi3+0x20>
    4eb0:	10000e26 	beq	r2,zero,4eec <__udivsi3+0x54>
    4eb4:	28000516 	blt	r5,zero,4ecc <__udivsi3+0x34>
    4eb8:	294b883a 	add	r5,r5,r5
    4ebc:	10bfffc4 	addi	r2,r2,-1
    4ec0:	18c7883a 	add	r3,r3,r3
    4ec4:	293ffa36 	bltu	r5,r4,4eb0 <_gp+0xffff6c60>
    4ec8:	18000826 	beq	r3,zero,4eec <__udivsi3+0x54>
    4ecc:	0005883a 	mov	r2,zero
    4ed0:	31400236 	bltu	r6,r5,4edc <__udivsi3+0x44>
    4ed4:	314dc83a 	sub	r6,r6,r5
    4ed8:	10c4b03a 	or	r2,r2,r3
    4edc:	1806d07a 	srli	r3,r3,1
    4ee0:	280ad07a 	srli	r5,r5,1
    4ee4:	183ffa1e 	bne	r3,zero,4ed0 <_gp+0xffff6c80>
    4ee8:	f800283a 	ret
    4eec:	0005883a 	mov	r2,zero
    4ef0:	f800283a 	ret
    4ef4:	00c00044 	movi	r3,1
    4ef8:	003ff406 	br	4ecc <_gp+0xffff6c7c>

00004efc <__umodsi3>:
    4efc:	2005883a 	mov	r2,r4
    4f00:	2900122e 	bgeu	r5,r4,4f4c <__umodsi3+0x50>
    4f04:	28001116 	blt	r5,zero,4f4c <__umodsi3+0x50>
    4f08:	01800804 	movi	r6,32
    4f0c:	00c00044 	movi	r3,1
    4f10:	00000206 	br	4f1c <__umodsi3+0x20>
    4f14:	30000c26 	beq	r6,zero,4f48 <__umodsi3+0x4c>
    4f18:	28000516 	blt	r5,zero,4f30 <__umodsi3+0x34>
    4f1c:	294b883a 	add	r5,r5,r5
    4f20:	31bfffc4 	addi	r6,r6,-1
    4f24:	18c7883a 	add	r3,r3,r3
    4f28:	293ffa36 	bltu	r5,r4,4f14 <_gp+0xffff6cc4>
    4f2c:	18000626 	beq	r3,zero,4f48 <__umodsi3+0x4c>
    4f30:	1806d07a 	srli	r3,r3,1
    4f34:	11400136 	bltu	r2,r5,4f3c <__umodsi3+0x40>
    4f38:	1145c83a 	sub	r2,r2,r5
    4f3c:	280ad07a 	srli	r5,r5,1
    4f40:	183ffb1e 	bne	r3,zero,4f30 <_gp+0xffff6ce0>
    4f44:	f800283a 	ret
    4f48:	f800283a 	ret
    4f4c:	00c00044 	movi	r3,1
    4f50:	003ff706 	br	4f30 <_gp+0xffff6ce0>

00004f54 <__mulsi3>:
    4f54:	0005883a 	mov	r2,zero
    4f58:	20000726 	beq	r4,zero,4f78 <__mulsi3+0x24>
    4f5c:	20c0004c 	andi	r3,r4,1
    4f60:	2008d07a 	srli	r4,r4,1
    4f64:	18000126 	beq	r3,zero,4f6c <__mulsi3+0x18>
    4f68:	1145883a 	add	r2,r2,r5
    4f6c:	294b883a 	add	r5,r5,r5
    4f70:	203ffa1e 	bne	r4,zero,4f5c <_gp+0xffff6d0c>
    4f74:	f800283a 	ret
    4f78:	f800283a 	ret

00004f7c <_exit>:
 *
 * ALT_EXIT is mapped onto the _exit() system call in alt_syscall.h
 */

void ALT_EXIT (int exit_code)
{
    4f7c:	defffd04 	addi	sp,sp,-12
    4f80:	df000215 	stw	fp,8(sp)
    4f84:	df000204 	addi	fp,sp,8
    4f88:	e13fff15 	stw	r4,-4(fp)
  ALT_LOG_PRINT_BOOT("[alt_exit.c] Entering _exit() function.\r\n");
  ALT_LOG_PRINT_BOOT("[alt_exit.c] Exit code from main was %d.\r\n",exit_code);
  /* Stop all other threads */

  ALT_LOG_PRINT_BOOT("[alt_exit.c] Calling ALT_OS_STOP().\r\n");
  ALT_OS_STOP();
    4f8c:	0001883a 	nop
    4f90:	e0bfff17 	ldw	r2,-4(fp)
    4f94:	e0bffe15 	stw	r2,-8(fp)
/*
 * Routine called on exit.
 */
static ALT_INLINE ALT_ALWAYS_INLINE void alt_sim_halt(int exit_code)
{
  register int r2 asm ("r2") = exit_code;
    4f98:	e0bffe17 	ldw	r2,-8(fp)
  __asm__ volatile ("\n0:\n\taddi %0,%0, -1\n\tbgt %0,zero,0b" : : "r" (ALT_CPU_FREQ/100) ); /* Delay for >30ms */

  __asm__ volatile ("break 2" : : "r"(r2), "r"(r3) ALT_GMON_DATA );

#else /* !DEBUG_STUB */
  if (r2) {
    4f9c:	10000226 	beq	r2,zero,4fa8 <_exit+0x2c>
    ALT_SIM_FAIL();
    4fa0:	002af070 	cmpltui	zero,zero,43969
    4fa4:	00000106 	br	4fac <_exit+0x30>
  } else {
    ALT_SIM_PASS();
    4fa8:	002af0b0 	cmpltui	zero,zero,43970
  ALT_SIM_HALT(exit_code);

  /* spin forever, since there's no where to go back to */

  ALT_LOG_PRINT_BOOT("[alt_exit.c] Spinning forever.\r\n");
  while (1);
    4fac:	003fff06 	br	4fac <_gp+0xffff6d5c>

00004fb0 <alt_load_section>:
 */

static void ALT_INLINE alt_load_section (alt_u32* from, 
                                         alt_u32* to, 
                                         alt_u32* end)
{
    4fb0:	defffc04 	addi	sp,sp,-16
    4fb4:	df000315 	stw	fp,12(sp)
    4fb8:	df000304 	addi	fp,sp,12
    4fbc:	e13ffd15 	stw	r4,-12(fp)
    4fc0:	e17ffe15 	stw	r5,-8(fp)
    4fc4:	e1bfff15 	stw	r6,-4(fp)
  if (to != from)
    4fc8:	e0fffe17 	ldw	r3,-8(fp)
    4fcc:	e0bffd17 	ldw	r2,-12(fp)
    4fd0:	18800c26 	beq	r3,r2,5004 <alt_load_section+0x54>
  {
    while( to != end )
    4fd4:	00000806 	br	4ff8 <alt_load_section+0x48>
    {
      *to++ = *from++;
    4fd8:	e0bffe17 	ldw	r2,-8(fp)
    4fdc:	10c00104 	addi	r3,r2,4
    4fe0:	e0fffe15 	stw	r3,-8(fp)
    4fe4:	e0fffd17 	ldw	r3,-12(fp)
    4fe8:	19000104 	addi	r4,r3,4
    4fec:	e13ffd15 	stw	r4,-12(fp)
    4ff0:	18c00017 	ldw	r3,0(r3)
    4ff4:	10c00015 	stw	r3,0(r2)
                                         alt_u32* to, 
                                         alt_u32* end)
{
  if (to != from)
  {
    while( to != end )
    4ff8:	e0fffe17 	ldw	r3,-8(fp)
    4ffc:	e0bfff17 	ldw	r2,-4(fp)
    5000:	18bff51e 	bne	r3,r2,4fd8 <_gp+0xffff6d88>
    {
      *to++ = *from++;
    }
  }
}
    5004:	0001883a 	nop
    5008:	e037883a 	mov	sp,fp
    500c:	df000017 	ldw	fp,0(sp)
    5010:	dec00104 	addi	sp,sp,4
    5014:	f800283a 	ret

00005018 <alt_load>:
 * there is no bootloader, so this application is responsible for loading to
 * RAM any sections that are required.
 */  

void alt_load (void)
{
    5018:	defffe04 	addi	sp,sp,-8
    501c:	dfc00115 	stw	ra,4(sp)
    5020:	df000015 	stw	fp,0(sp)
    5024:	d839883a 	mov	fp,sp
  /* 
   * Copy the .rwdata section. 
   */

  alt_load_section (&__flash_rwdata_start, 
    5028:	01800034 	movhi	r6,0
    502c:	31989e04 	addi	r6,r6,25208
    5030:	01400034 	movhi	r5,0
    5034:	2957e704 	addi	r5,r5,24476
    5038:	01000034 	movhi	r4,0
    503c:	21189e04 	addi	r4,r4,25208
    5040:	0004fb00 	call	4fb0 <alt_load_section>

  /*
   * Copy the exception handler.
   */

  alt_load_section (&__flash_exceptions_start, 
    5044:	01800034 	movhi	r6,0
    5048:	31900804 	addi	r6,r6,16416
    504c:	01400034 	movhi	r5,0
    5050:	29500804 	addi	r5,r5,16416
    5054:	01000034 	movhi	r4,0
    5058:	21100804 	addi	r4,r4,16416
    505c:	0004fb00 	call	4fb0 <alt_load_section>

  /*
   * Copy the .rodata section.
   */

  alt_load_section (&__flash_rodata_start, 
    5060:	01800034 	movhi	r6,0
    5064:	3197e704 	addi	r6,r6,24476
    5068:	01400034 	movhi	r5,0
    506c:	2957a804 	addi	r5,r5,24224
    5070:	01000034 	movhi	r4,0
    5074:	2117a804 	addi	r4,r4,24224
    5078:	0004fb00 	call	4fb0 <alt_load_section>
  
  /*
   * Now ensure that the caches are in synch.
   */
  
  alt_dcache_flush_all();
    507c:	000563c0 	call	563c <alt_dcache_flush_all>
  alt_icache_flush_all();
    5080:	00057680 	call	5768 <alt_icache_flush_all>
}
    5084:	0001883a 	nop
    5088:	e037883a 	mov	sp,fp
    508c:	dfc00117 	ldw	ra,4(sp)
    5090:	df000017 	ldw	fp,0(sp)
    5094:	dec00204 	addi	sp,sp,8
    5098:	f800283a 	ret

0000509c <alt_main>:
 * devices/filesystems/components in the system; and call the entry point for
 * the users application, i.e. main().
 */

void alt_main (void)
{
    509c:	defffd04 	addi	sp,sp,-12
    50a0:	dfc00215 	stw	ra,8(sp)
    50a4:	df000115 	stw	fp,4(sp)
    50a8:	df000104 	addi	fp,sp,4
#endif

  /* ALT LOG - please see HAL/sys/alt_log_printf.h for details */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Entering alt_main, calling alt_irq_init.\r\n");
  /* Initialize the interrupt controller. */
  alt_irq_init (NULL);
    50ac:	0009883a 	mov	r4,zero
    50b0:	00052780 	call	5278 <alt_irq_init>

  /* Initialize the operating system */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Done alt_irq_init, calling alt_os_init.\r\n");
  ALT_OS_INIT();
    50b4:	0001883a 	nop
  ALT_LOG_PRINT_BOOT("[alt_main.c] Done OS Init, calling alt_sem_create.\r\n");
  ALT_SEM_CREATE (&alt_fd_list_lock, 1);

  /* Initialize the device drivers/software components. */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling alt_sys_init.\r\n");
  alt_sys_init();
    50b8:	00052b00 	call	52b0 <alt_sys_init>
   * devices be present (not equal to /dev/null) and if direct drivers
   * aren't being used.
   */

    ALT_LOG_PRINT_BOOT("[alt_main.c] Redirecting IO.\r\n");
    alt_io_redirect(ALT_STDOUT, ALT_STDIN, ALT_STDERR);
    50bc:	01800034 	movhi	r6,0
    50c0:	3197da04 	addi	r6,r6,24424
    50c4:	01400034 	movhi	r5,0
    50c8:	2957da04 	addi	r5,r5,24424
    50cc:	01000034 	movhi	r4,0
    50d0:	2117da04 	addi	r4,r4,24424
    50d4:	000586c0 	call	586c <alt_io_redirect>
  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling main.\r\n");

#ifdef ALT_NO_EXIT
  main (alt_argc, alt_argv, alt_envp);
#else
  result = main (alt_argc, alt_argv, alt_envp);
    50d8:	d0a0c217 	ldw	r2,-31992(gp)
    50dc:	d0e0c317 	ldw	r3,-31988(gp)
    50e0:	d120c417 	ldw	r4,-31984(gp)
    50e4:	200d883a 	mov	r6,r4
    50e8:	180b883a 	mov	r5,r3
    50ec:	1009883a 	mov	r4,r2
    50f0:	000437c0 	call	437c <main>
    50f4:	e0bfff15 	stw	r2,-4(fp)
  close(STDOUT_FILENO);
    50f8:	01000044 	movi	r4,1
    50fc:	00055640 	call	5564 <close>
  exit (result);
    5100:	e13fff17 	ldw	r4,-4(fp)
    5104:	00043f40 	call	43f4 <exit>

00005108 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
    5108:	defffe04 	addi	sp,sp,-8
    510c:	dfc00115 	stw	ra,4(sp)
    5110:	df000015 	stw	fp,0(sp)
    5114:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
    5118:	d0a00917 	ldw	r2,-32732(gp)
    511c:	10000326 	beq	r2,zero,512c <alt_get_errno+0x24>
    5120:	d0a00917 	ldw	r2,-32732(gp)
    5124:	103ee83a 	callr	r2
    5128:	00000106 	br	5130 <alt_get_errno+0x28>
    512c:	d0a0c104 	addi	r2,gp,-31996
}
    5130:	e037883a 	mov	sp,fp
    5134:	dfc00117 	ldw	ra,4(sp)
    5138:	df000017 	ldw	fp,0(sp)
    513c:	dec00204 	addi	sp,sp,8
    5140:	f800283a 	ret

00005144 <write>:
}

#else /* !ALT_USE_DIRECT_DRIVERS */

int ALT_WRITE (int file, const void *ptr, size_t len)
{
    5144:	defff904 	addi	sp,sp,-28
    5148:	dfc00615 	stw	ra,24(sp)
    514c:	df000515 	stw	fp,20(sp)
    5150:	df000504 	addi	fp,sp,20
    5154:	e13ffd15 	stw	r4,-12(fp)
    5158:	e17ffe15 	stw	r5,-8(fp)
    515c:	e1bfff15 	stw	r6,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
    5160:	e0bffd17 	ldw	r2,-12(fp)
    5164:	10000816 	blt	r2,zero,5188 <write+0x44>
    5168:	01400304 	movi	r5,12
    516c:	e13ffd17 	ldw	r4,-12(fp)
    5170:	0004f540 	call	4f54 <__mulsi3>
    5174:	1007883a 	mov	r3,r2
    5178:	00800034 	movhi	r2,0
    517c:	10983404 	addi	r2,r2,24784
    5180:	1885883a 	add	r2,r3,r2
    5184:	00000106 	br	518c <write+0x48>
    5188:	0005883a 	mov	r2,zero
    518c:	e0bffb15 	stw	r2,-20(fp)
  
  if (fd)
    5190:	e0bffb17 	ldw	r2,-20(fp)
    5194:	10002126 	beq	r2,zero,521c <write+0xd8>
     * If the file has not been opened with write access, or if the driver does
     * not provide an implementation of write(), generate an error. Otherwise
     * call the drivers write() function to process the request.
     */

    if (((fd->fd_flags & O_ACCMODE) != O_RDONLY) && fd->dev->write)
    5198:	e0bffb17 	ldw	r2,-20(fp)
    519c:	10800217 	ldw	r2,8(r2)
    51a0:	108000cc 	andi	r2,r2,3
    51a4:	10001826 	beq	r2,zero,5208 <write+0xc4>
    51a8:	e0bffb17 	ldw	r2,-20(fp)
    51ac:	10800017 	ldw	r2,0(r2)
    51b0:	10800617 	ldw	r2,24(r2)
    51b4:	10001426 	beq	r2,zero,5208 <write+0xc4>
    {
      
      /* ALT_LOG - see altera_hal/HAL/inc/sys/alt_log_printf.h */
      ALT_LOG_WRITE_FUNCTION(ptr,len);

      if ((rval = fd->dev->write(fd, ptr, len)) < 0)
    51b8:	e0bffb17 	ldw	r2,-20(fp)
    51bc:	10800017 	ldw	r2,0(r2)
    51c0:	10800617 	ldw	r2,24(r2)
    51c4:	e0ffff17 	ldw	r3,-4(fp)
    51c8:	180d883a 	mov	r6,r3
    51cc:	e17ffe17 	ldw	r5,-8(fp)
    51d0:	e13ffb17 	ldw	r4,-20(fp)
    51d4:	103ee83a 	callr	r2
    51d8:	e0bffc15 	stw	r2,-16(fp)
    51dc:	e0bffc17 	ldw	r2,-16(fp)
    51e0:	1000070e 	bge	r2,zero,5200 <write+0xbc>
      {
        ALT_ERRNO = -rval;
    51e4:	00051080 	call	5108 <alt_get_errno>
    51e8:	1007883a 	mov	r3,r2
    51ec:	e0bffc17 	ldw	r2,-16(fp)
    51f0:	0085c83a 	sub	r2,zero,r2
    51f4:	18800015 	stw	r2,0(r3)
        return -1;
    51f8:	00bfffc4 	movi	r2,-1
    51fc:	00000c06 	br	5230 <write+0xec>
      }
      return rval;
    5200:	e0bffc17 	ldw	r2,-16(fp)
    5204:	00000a06 	br	5230 <write+0xec>
    }
    else
    {
      ALT_ERRNO = EACCES;
    5208:	00051080 	call	5108 <alt_get_errno>
    520c:	1007883a 	mov	r3,r2
    5210:	00800344 	movi	r2,13
    5214:	18800015 	stw	r2,0(r3)
    5218:	00000406 	br	522c <write+0xe8>
    }
  }
  else  
  {
    ALT_ERRNO = EBADFD;
    521c:	00051080 	call	5108 <alt_get_errno>
    5220:	1007883a 	mov	r3,r2
    5224:	00801444 	movi	r2,81
    5228:	18800015 	stw	r2,0(r3)
  }
  return -1;
    522c:	00bfffc4 	movi	r2,-1
}
    5230:	e037883a 	mov	sp,fp
    5234:	dfc00117 	ldw	ra,4(sp)
    5238:	df000017 	ldw	fp,0(sp)
    523c:	dec00204 	addi	sp,sp,8
    5240:	f800283a 	ret

00005244 <alt_dev_reg>:
 */

extern int alt_fs_reg  (alt_dev* dev); 

static ALT_INLINE int alt_dev_reg (alt_dev* dev)
{
    5244:	defffd04 	addi	sp,sp,-12
    5248:	dfc00215 	stw	ra,8(sp)
    524c:	df000115 	stw	fp,4(sp)
    5250:	df000104 	addi	fp,sp,4
    5254:	e13fff15 	stw	r4,-4(fp)
  extern alt_llist alt_dev_list;

  return alt_dev_llist_insert ((alt_dev_llist*) dev, &alt_dev_list);
    5258:	d1600604 	addi	r5,gp,-32744
    525c:	e13fff17 	ldw	r4,-4(fp)
    5260:	00056c40 	call	56c4 <alt_dev_llist_insert>
}
    5264:	e037883a 	mov	sp,fp
    5268:	dfc00117 	ldw	ra,4(sp)
    526c:	df000017 	ldw	fp,0(sp)
    5270:	dec00204 	addi	sp,sp,8
    5274:	f800283a 	ret

00005278 <alt_irq_init>:
 * The "base" parameter is ignored and only
 * present for backwards-compatibility.
 */

void alt_irq_init ( const void* base )
{
    5278:	defffd04 	addi	sp,sp,-12
    527c:	dfc00215 	stw	ra,8(sp)
    5280:	df000115 	stw	fp,4(sp)
    5284:	df000104 	addi	fp,sp,4
    5288:	e13fff15 	stw	r4,-4(fp)
    ALTERA_NIOS2_GEN2_IRQ_INIT ( NIOS2_GEN2_0, nios2_gen2_0);
    528c:	0005bf00 	call	5bf0 <altera_nios2_gen2_irq_init>
 * alt_irq_cpu_enable_interrupts() enables the CPU to start taking interrupts.
 */
static ALT_INLINE void ALT_ALWAYS_INLINE 
       alt_irq_cpu_enable_interrupts (void)
{
    NIOS2_WRITE_STATUS(NIOS2_STATUS_PIE_MSK
    5290:	00800044 	movi	r2,1
    5294:	1001703a 	wrctl	status,r2
    alt_irq_cpu_enable_interrupts();
}
    5298:	0001883a 	nop
    529c:	e037883a 	mov	sp,fp
    52a0:	dfc00117 	ldw	ra,4(sp)
    52a4:	df000017 	ldw	fp,0(sp)
    52a8:	dec00204 	addi	sp,sp,8
    52ac:	f800283a 	ret

000052b0 <alt_sys_init>:
 * Initialize the non-interrupt controller devices.
 * Called after alt_irq_init().
 */

void alt_sys_init( void )
{
    52b0:	defffe04 	addi	sp,sp,-8
    52b4:	dfc00115 	stw	ra,4(sp)
    52b8:	df000015 	stw	fp,0(sp)
    52bc:	d839883a 	mov	fp,sp
    ALTERA_AVALON_JTAG_UART_INIT ( JTAG_UART_0, jtag_uart_0);
    52c0:	01000034 	movhi	r4,0
    52c4:	21181f04 	addi	r4,r4,24700
    52c8:	00052440 	call	5244 <alt_dev_reg>
    ALTERA_AVALON_SYSID_QSYS_INIT ( SYSID_QSYS_0, sysid_qsys_0);
    52cc:	0001883a 	nop
}
    52d0:	0001883a 	nop
    52d4:	e037883a 	mov	sp,fp
    52d8:	dfc00117 	ldw	ra,4(sp)
    52dc:	df000017 	ldw	fp,0(sp)
    52e0:	dec00204 	addi	sp,sp,8
    52e4:	f800283a 	ret

000052e8 <altera_avalon_jtag_uart_read_fd>:
 *
 */

int 
altera_avalon_jtag_uart_read_fd(alt_fd* fd, char* buffer, int space)
{
    52e8:	defffa04 	addi	sp,sp,-24
    52ec:	dfc00515 	stw	ra,20(sp)
    52f0:	df000415 	stw	fp,16(sp)
    52f4:	df000404 	addi	fp,sp,16
    52f8:	e13ffd15 	stw	r4,-12(fp)
    52fc:	e17ffe15 	stw	r5,-8(fp)
    5300:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
    5304:	e0bffd17 	ldw	r2,-12(fp)
    5308:	10800017 	ldw	r2,0(r2)
    530c:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_jtag_uart_read(&dev->state, buffer, space,
    5310:	e0bffc17 	ldw	r2,-16(fp)
    5314:	10c00a04 	addi	r3,r2,40
    5318:	e0bffd17 	ldw	r2,-12(fp)
    531c:	10800217 	ldw	r2,8(r2)
    5320:	100f883a 	mov	r7,r2
    5324:	e1bfff17 	ldw	r6,-4(fp)
    5328:	e17ffe17 	ldw	r5,-8(fp)
    532c:	1809883a 	mov	r4,r3
    5330:	00053a80 	call	53a8 <altera_avalon_jtag_uart_read>
      fd->fd_flags);
}
    5334:	e037883a 	mov	sp,fp
    5338:	dfc00117 	ldw	ra,4(sp)
    533c:	df000017 	ldw	fp,0(sp)
    5340:	dec00204 	addi	sp,sp,8
    5344:	f800283a 	ret

00005348 <altera_avalon_jtag_uart_write_fd>:

int 
altera_avalon_jtag_uart_write_fd(alt_fd* fd, const char* buffer, int space)
{
    5348:	defffa04 	addi	sp,sp,-24
    534c:	dfc00515 	stw	ra,20(sp)
    5350:	df000415 	stw	fp,16(sp)
    5354:	df000404 	addi	fp,sp,16
    5358:	e13ffd15 	stw	r4,-12(fp)
    535c:	e17ffe15 	stw	r5,-8(fp)
    5360:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
    5364:	e0bffd17 	ldw	r2,-12(fp)
    5368:	10800017 	ldw	r2,0(r2)
    536c:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_jtag_uart_write(&dev->state, buffer, space,
    5370:	e0bffc17 	ldw	r2,-16(fp)
    5374:	10c00a04 	addi	r3,r2,40
    5378:	e0bffd17 	ldw	r2,-12(fp)
    537c:	10800217 	ldw	r2,8(r2)
    5380:	100f883a 	mov	r7,r2
    5384:	e1bfff17 	ldw	r6,-4(fp)
    5388:	e17ffe17 	ldw	r5,-8(fp)
    538c:	1809883a 	mov	r4,r3
    5390:	00054940 	call	5494 <altera_avalon_jtag_uart_write>
      fd->fd_flags);
}
    5394:	e037883a 	mov	sp,fp
    5398:	dfc00117 	ldw	ra,4(sp)
    539c:	df000017 	ldw	fp,0(sp)
    53a0:	dec00204 	addi	sp,sp,8
    53a4:	f800283a 	ret

000053a8 <altera_avalon_jtag_uart_read>:
 */

int 
altera_avalon_jtag_uart_read(altera_avalon_jtag_uart_state* sp, 
  char* buffer, int space, int flags)
{
    53a8:	defff704 	addi	sp,sp,-36
    53ac:	df000815 	stw	fp,32(sp)
    53b0:	df000804 	addi	fp,sp,32
    53b4:	e13ffc15 	stw	r4,-16(fp)
    53b8:	e17ffd15 	stw	r5,-12(fp)
    53bc:	e1bffe15 	stw	r6,-8(fp)
    53c0:	e1ffff15 	stw	r7,-4(fp)
  unsigned int base = sp->base;
    53c4:	e0bffc17 	ldw	r2,-16(fp)
    53c8:	10800017 	ldw	r2,0(r2)
    53cc:	e0bff915 	stw	r2,-28(fp)

  char * ptr = buffer;
    53d0:	e0bffd17 	ldw	r2,-12(fp)
    53d4:	e0bff815 	stw	r2,-32(fp)
  char * end = buffer + space;
    53d8:	e0bffe17 	ldw	r2,-8(fp)
    53dc:	e0fffd17 	ldw	r3,-12(fp)
    53e0:	1885883a 	add	r2,r3,r2
    53e4:	e0bffa15 	stw	r2,-24(fp)

  while (ptr < end)
    53e8:	00001206 	br	5434 <altera_avalon_jtag_uart_read+0x8c>
  {
    unsigned int data = IORD_ALTERA_AVALON_JTAG_UART_DATA(base);
    53ec:	e0bff917 	ldw	r2,-28(fp)
    53f0:	10800037 	ldwio	r2,0(r2)
    53f4:	e0bffb15 	stw	r2,-20(fp)

    if (data & ALTERA_AVALON_JTAG_UART_DATA_RVALID_MSK)
    53f8:	e0bffb17 	ldw	r2,-20(fp)
    53fc:	10a0000c 	andi	r2,r2,32768
    5400:	10000626 	beq	r2,zero,541c <altera_avalon_jtag_uart_read+0x74>
      *ptr++ = (data & ALTERA_AVALON_JTAG_UART_DATA_DATA_MSK) >> ALTERA_AVALON_JTAG_UART_DATA_DATA_OFST;
    5404:	e0bff817 	ldw	r2,-32(fp)
    5408:	10c00044 	addi	r3,r2,1
    540c:	e0fff815 	stw	r3,-32(fp)
    5410:	e0fffb17 	ldw	r3,-20(fp)
    5414:	10c00005 	stb	r3,0(r2)
    5418:	00000606 	br	5434 <altera_avalon_jtag_uart_read+0x8c>
    else if (ptr != buffer)
    541c:	e0fff817 	ldw	r3,-32(fp)
    5420:	e0bffd17 	ldw	r2,-12(fp)
    5424:	1880071e 	bne	r3,r2,5444 <altera_avalon_jtag_uart_read+0x9c>
      break;
    else if(flags & O_NONBLOCK)
    5428:	e0bfff17 	ldw	r2,-4(fp)
    542c:	1090000c 	andi	r2,r2,16384
    5430:	1000061e 	bne	r2,zero,544c <altera_avalon_jtag_uart_read+0xa4>
  unsigned int base = sp->base;

  char * ptr = buffer;
  char * end = buffer + space;

  while (ptr < end)
    5434:	e0fff817 	ldw	r3,-32(fp)
    5438:	e0bffa17 	ldw	r2,-24(fp)
    543c:	18bfeb36 	bltu	r3,r2,53ec <_gp+0xffff719c>
    5440:	00000306 	br	5450 <altera_avalon_jtag_uart_read+0xa8>
    unsigned int data = IORD_ALTERA_AVALON_JTAG_UART_DATA(base);

    if (data & ALTERA_AVALON_JTAG_UART_DATA_RVALID_MSK)
      *ptr++ = (data & ALTERA_AVALON_JTAG_UART_DATA_DATA_MSK) >> ALTERA_AVALON_JTAG_UART_DATA_DATA_OFST;
    else if (ptr != buffer)
      break;
    5444:	0001883a 	nop
    5448:	00000106 	br	5450 <altera_avalon_jtag_uart_read+0xa8>
    else if(flags & O_NONBLOCK)
      break;   
    544c:	0001883a 	nop
    
  }

  if (ptr != buffer)
    5450:	e0fff817 	ldw	r3,-32(fp)
    5454:	e0bffd17 	ldw	r2,-12(fp)
    5458:	18800426 	beq	r3,r2,546c <altera_avalon_jtag_uart_read+0xc4>
    return ptr - buffer;
    545c:	e0fff817 	ldw	r3,-32(fp)
    5460:	e0bffd17 	ldw	r2,-12(fp)
    5464:	1885c83a 	sub	r2,r3,r2
    5468:	00000606 	br	5484 <altera_avalon_jtag_uart_read+0xdc>
  else if (flags & O_NONBLOCK)
    546c:	e0bfff17 	ldw	r2,-4(fp)
    5470:	1090000c 	andi	r2,r2,16384
    5474:	10000226 	beq	r2,zero,5480 <altera_avalon_jtag_uart_read+0xd8>
    return -EWOULDBLOCK;
    5478:	00bffd44 	movi	r2,-11
    547c:	00000106 	br	5484 <altera_avalon_jtag_uart_read+0xdc>
  else
    return -EIO;
    5480:	00bffec4 	movi	r2,-5
}
    5484:	e037883a 	mov	sp,fp
    5488:	df000017 	ldw	fp,0(sp)
    548c:	dec00104 	addi	sp,sp,4
    5490:	f800283a 	ret

00005494 <altera_avalon_jtag_uart_write>:
 * one FIFOs worth of data.  But you said you didn't want to use interrupts :-)
 */

int altera_avalon_jtag_uart_write(altera_avalon_jtag_uart_state* sp, 
  const char * ptr, int count, int flags)
{
    5494:	defff904 	addi	sp,sp,-28
    5498:	df000615 	stw	fp,24(sp)
    549c:	df000604 	addi	fp,sp,24
    54a0:	e13ffc15 	stw	r4,-16(fp)
    54a4:	e17ffd15 	stw	r5,-12(fp)
    54a8:	e1bffe15 	stw	r6,-8(fp)
    54ac:	e1ffff15 	stw	r7,-4(fp)
  unsigned int base = sp->base;
    54b0:	e0bffc17 	ldw	r2,-16(fp)
    54b4:	10800017 	ldw	r2,0(r2)
    54b8:	e0bffa15 	stw	r2,-24(fp)

  const char * end = ptr + count;
    54bc:	e0bffe17 	ldw	r2,-8(fp)
    54c0:	e0fffd17 	ldw	r3,-12(fp)
    54c4:	1885883a 	add	r2,r3,r2
    54c8:	e0bffb15 	stw	r2,-20(fp)

  while (ptr < end)
    54cc:	00000e06 	br	5508 <altera_avalon_jtag_uart_write+0x74>
    if ((IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base) & ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_MSK) != 0)
    54d0:	e0bffa17 	ldw	r2,-24(fp)
    54d4:	10800104 	addi	r2,r2,4
    54d8:	10800037 	ldwio	r2,0(r2)
    54dc:	10bfffec 	andhi	r2,r2,65535
    54e0:	10000926 	beq	r2,zero,5508 <altera_avalon_jtag_uart_write+0x74>
      IOWR_ALTERA_AVALON_JTAG_UART_DATA(base, *ptr++);
    54e4:	e0fffa17 	ldw	r3,-24(fp)
    54e8:	e0bffd17 	ldw	r2,-12(fp)
    54ec:	11000044 	addi	r4,r2,1
    54f0:	e13ffd15 	stw	r4,-12(fp)
    54f4:	10800003 	ldbu	r2,0(r2)
    54f8:	10803fcc 	andi	r2,r2,255
    54fc:	1080201c 	xori	r2,r2,128
    5500:	10bfe004 	addi	r2,r2,-128
    5504:	18800035 	stwio	r2,0(r3)
{
  unsigned int base = sp->base;

  const char * end = ptr + count;

  while (ptr < end)
    5508:	e0fffd17 	ldw	r3,-12(fp)
    550c:	e0bffb17 	ldw	r2,-20(fp)
    5510:	18bfef36 	bltu	r3,r2,54d0 <_gp+0xffff7280>
    if ((IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base) & ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_MSK) != 0)
      IOWR_ALTERA_AVALON_JTAG_UART_DATA(base, *ptr++);

  return count;
    5514:	e0bffe17 	ldw	r2,-8(fp)
}
    5518:	e037883a 	mov	sp,fp
    551c:	df000017 	ldw	fp,0(sp)
    5520:	dec00104 	addi	sp,sp,4
    5524:	f800283a 	ret

00005528 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
    5528:	defffe04 	addi	sp,sp,-8
    552c:	dfc00115 	stw	ra,4(sp)
    5530:	df000015 	stw	fp,0(sp)
    5534:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
    5538:	d0a00917 	ldw	r2,-32732(gp)
    553c:	10000326 	beq	r2,zero,554c <alt_get_errno+0x24>
    5540:	d0a00917 	ldw	r2,-32732(gp)
    5544:	103ee83a 	callr	r2
    5548:	00000106 	br	5550 <alt_get_errno+0x28>
    554c:	d0a0c104 	addi	r2,gp,-31996
}
    5550:	e037883a 	mov	sp,fp
    5554:	dfc00117 	ldw	ra,4(sp)
    5558:	df000017 	ldw	fp,0(sp)
    555c:	dec00204 	addi	sp,sp,8
    5560:	f800283a 	ret

00005564 <close>:
 *
 * ALT_CLOSE is mapped onto the close() system call in alt_syscall.h
 */
 
int ALT_CLOSE (int fildes)
{
    5564:	defffb04 	addi	sp,sp,-20
    5568:	dfc00415 	stw	ra,16(sp)
    556c:	df000315 	stw	fp,12(sp)
    5570:	df000304 	addi	fp,sp,12
    5574:	e13fff15 	stw	r4,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (fildes < 0) ? NULL : &alt_fd_list[fildes];
    5578:	e0bfff17 	ldw	r2,-4(fp)
    557c:	10000816 	blt	r2,zero,55a0 <close+0x3c>
    5580:	01400304 	movi	r5,12
    5584:	e13fff17 	ldw	r4,-4(fp)
    5588:	0004f540 	call	4f54 <__mulsi3>
    558c:	1007883a 	mov	r3,r2
    5590:	00800034 	movhi	r2,0
    5594:	10983404 	addi	r2,r2,24784
    5598:	1885883a 	add	r2,r3,r2
    559c:	00000106 	br	55a4 <close+0x40>
    55a0:	0005883a 	mov	r2,zero
    55a4:	e0bffd15 	stw	r2,-12(fp)

  if (fd)
    55a8:	e0bffd17 	ldw	r2,-12(fp)
    55ac:	10001926 	beq	r2,zero,5614 <close+0xb0>
    /*
     * If the associated file system/device has a close function, call it so 
     * that any necessary cleanup code can run.
     */

    rval = (fd->dev->close) ? fd->dev->close(fd) : 0;
    55b0:	e0bffd17 	ldw	r2,-12(fp)
    55b4:	10800017 	ldw	r2,0(r2)
    55b8:	10800417 	ldw	r2,16(r2)
    55bc:	10000626 	beq	r2,zero,55d8 <close+0x74>
    55c0:	e0bffd17 	ldw	r2,-12(fp)
    55c4:	10800017 	ldw	r2,0(r2)
    55c8:	10800417 	ldw	r2,16(r2)
    55cc:	e13ffd17 	ldw	r4,-12(fp)
    55d0:	103ee83a 	callr	r2
    55d4:	00000106 	br	55dc <close+0x78>
    55d8:	0005883a 	mov	r2,zero
    55dc:	e0bffe15 	stw	r2,-8(fp)

    /* Free the file descriptor structure and return. */

    alt_release_fd (fildes);
    55e0:	e13fff17 	ldw	r4,-4(fp)
    55e4:	0005b6c0 	call	5b6c <alt_release_fd>
    if (rval < 0)
    55e8:	e0bffe17 	ldw	r2,-8(fp)
    55ec:	1000070e 	bge	r2,zero,560c <close+0xa8>
    {
      ALT_ERRNO = -rval;
    55f0:	00055280 	call	5528 <alt_get_errno>
    55f4:	1007883a 	mov	r3,r2
    55f8:	e0bffe17 	ldw	r2,-8(fp)
    55fc:	0085c83a 	sub	r2,zero,r2
    5600:	18800015 	stw	r2,0(r3)
      return -1;
    5604:	00bfffc4 	movi	r2,-1
    5608:	00000706 	br	5628 <close+0xc4>
    }
    return 0;
    560c:	0005883a 	mov	r2,zero
    5610:	00000506 	br	5628 <close+0xc4>
  }
  else
  {
    ALT_ERRNO = EBADFD;
    5614:	00055280 	call	5528 <alt_get_errno>
    5618:	1007883a 	mov	r3,r2
    561c:	00801444 	movi	r2,81
    5620:	18800015 	stw	r2,0(r3)
    return -1;
    5624:	00bfffc4 	movi	r2,-1
  }
}
    5628:	e037883a 	mov	sp,fp
    562c:	dfc00117 	ldw	ra,4(sp)
    5630:	df000017 	ldw	fp,0(sp)
    5634:	dec00204 	addi	sp,sp,8
    5638:	f800283a 	ret

0000563c <alt_dcache_flush_all>:
/*
 * alt_dcache_flush_all() is called to flush the entire data cache.
 */

void alt_dcache_flush_all (void)
{
    563c:	deffff04 	addi	sp,sp,-4
    5640:	df000015 	stw	fp,0(sp)
    5644:	d839883a 	mov	fp,sp
  for (i = (char*) 0; i < (char*) NIOS2_DCACHE_SIZE; i+= NIOS2_DCACHE_LINE_SIZE)
  { 
    __asm__ volatile ("flushd (%0)" :: "r" (i));
  }
#endif /* NIOS2_DCACHE_SIZE > 0 */
}
    5648:	0001883a 	nop
    564c:	e037883a 	mov	sp,fp
    5650:	df000017 	ldw	fp,0(sp)
    5654:	dec00104 	addi	sp,sp,4
    5658:	f800283a 	ret

0000565c <alt_dev_null_write>:
 * by the alt_dev_null device. It simple discards all data passed to it, and
 * indicates that the data has been successfully transmitted.
 */

static int alt_dev_null_write (alt_fd* fd, const char* ptr, int len)
{
    565c:	defffc04 	addi	sp,sp,-16
    5660:	df000315 	stw	fp,12(sp)
    5664:	df000304 	addi	fp,sp,12
    5668:	e13ffd15 	stw	r4,-12(fp)
    566c:	e17ffe15 	stw	r5,-8(fp)
    5670:	e1bfff15 	stw	r6,-4(fp)
  return len;
    5674:	e0bfff17 	ldw	r2,-4(fp)
}
    5678:	e037883a 	mov	sp,fp
    567c:	df000017 	ldw	fp,0(sp)
    5680:	dec00104 	addi	sp,sp,4
    5684:	f800283a 	ret

00005688 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
    5688:	defffe04 	addi	sp,sp,-8
    568c:	dfc00115 	stw	ra,4(sp)
    5690:	df000015 	stw	fp,0(sp)
    5694:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
    5698:	d0a00917 	ldw	r2,-32732(gp)
    569c:	10000326 	beq	r2,zero,56ac <alt_get_errno+0x24>
    56a0:	d0a00917 	ldw	r2,-32732(gp)
    56a4:	103ee83a 	callr	r2
    56a8:	00000106 	br	56b0 <alt_get_errno+0x28>
    56ac:	d0a0c104 	addi	r2,gp,-31996
}
    56b0:	e037883a 	mov	sp,fp
    56b4:	dfc00117 	ldw	ra,4(sp)
    56b8:	df000017 	ldw	fp,0(sp)
    56bc:	dec00204 	addi	sp,sp,8
    56c0:	f800283a 	ret

000056c4 <alt_dev_llist_insert>:
/*
 *
 */

int alt_dev_llist_insert (alt_dev_llist* dev, alt_llist* list)
{
    56c4:	defffa04 	addi	sp,sp,-24
    56c8:	dfc00515 	stw	ra,20(sp)
    56cc:	df000415 	stw	fp,16(sp)
    56d0:	df000404 	addi	fp,sp,16
    56d4:	e13ffe15 	stw	r4,-8(fp)
    56d8:	e17fff15 	stw	r5,-4(fp)
  /*
   * check that the device exists, and that it has a valid name.
   */

  if (!dev || !dev->name)
    56dc:	e0bffe17 	ldw	r2,-8(fp)
    56e0:	10000326 	beq	r2,zero,56f0 <alt_dev_llist_insert+0x2c>
    56e4:	e0bffe17 	ldw	r2,-8(fp)
    56e8:	10800217 	ldw	r2,8(r2)
    56ec:	1000061e 	bne	r2,zero,5708 <alt_dev_llist_insert+0x44>
  {
    ALT_ERRNO = EINVAL;
    56f0:	00056880 	call	5688 <alt_get_errno>
    56f4:	1007883a 	mov	r3,r2
    56f8:	00800584 	movi	r2,22
    56fc:	18800015 	stw	r2,0(r3)
    return -EINVAL;
    5700:	00bffa84 	movi	r2,-22
    5704:	00001306 	br	5754 <alt_dev_llist_insert+0x90>
  
  /*
   * register the device.
   */
  
  alt_llist_insert(list, &dev->llist);
    5708:	e0bffe17 	ldw	r2,-8(fp)
    570c:	e0ffff17 	ldw	r3,-4(fp)
    5710:	e0fffc15 	stw	r3,-16(fp)
    5714:	e0bffd15 	stw	r2,-12(fp)
 */

static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_insert(alt_llist* list, 
                alt_llist* entry)
{
  entry->previous = list;
    5718:	e0bffd17 	ldw	r2,-12(fp)
    571c:	e0fffc17 	ldw	r3,-16(fp)
    5720:	10c00115 	stw	r3,4(r2)
  entry->next     = list->next;
    5724:	e0bffc17 	ldw	r2,-16(fp)
    5728:	10c00017 	ldw	r3,0(r2)
    572c:	e0bffd17 	ldw	r2,-12(fp)
    5730:	10c00015 	stw	r3,0(r2)

  list->next->previous = entry;
    5734:	e0bffc17 	ldw	r2,-16(fp)
    5738:	10800017 	ldw	r2,0(r2)
    573c:	e0fffd17 	ldw	r3,-12(fp)
    5740:	10c00115 	stw	r3,4(r2)
  list->next           = entry;
    5744:	e0bffc17 	ldw	r2,-16(fp)
    5748:	e0fffd17 	ldw	r3,-12(fp)
    574c:	10c00015 	stw	r3,0(r2)

  return 0;  
    5750:	0005883a 	mov	r2,zero
}
    5754:	e037883a 	mov	sp,fp
    5758:	dfc00117 	ldw	ra,4(sp)
    575c:	df000017 	ldw	fp,0(sp)
    5760:	dec00204 	addi	sp,sp,8
    5764:	f800283a 	ret

00005768 <alt_icache_flush_all>:
/*
 * alt_icache_flush_all() is called to flush the entire instruction cache.
 */

void alt_icache_flush_all (void)
{
    5768:	deffff04 	addi	sp,sp,-4
    576c:	df000015 	stw	fp,0(sp)
    5770:	d839883a 	mov	fp,sp
#if NIOS2_ICACHE_SIZE > 0
  alt_icache_flush (0, NIOS2_ICACHE_SIZE);
#endif
}
    5774:	0001883a 	nop
    5778:	e037883a 	mov	sp,fp
    577c:	df000017 	ldw	fp,0(sp)
    5780:	dec00104 	addi	sp,sp,4
    5784:	f800283a 	ret

00005788 <alt_open_fd>:
 * If the device can not be succesfully opened, then the input file descriptor
 * remains unchanged.
 */

static void alt_open_fd(alt_fd* fd, const char* name, int flags, int mode)
{
    5788:	defff804 	addi	sp,sp,-32
    578c:	dfc00715 	stw	ra,28(sp)
    5790:	df000615 	stw	fp,24(sp)
    5794:	dc000515 	stw	r16,20(sp)
    5798:	df000604 	addi	fp,sp,24
    579c:	e13ffb15 	stw	r4,-20(fp)
    57a0:	e17ffc15 	stw	r5,-16(fp)
    57a4:	e1bffd15 	stw	r6,-12(fp)
    57a8:	e1fffe15 	stw	r7,-8(fp)
  int old;

  old = open (name, flags, mode);
    57ac:	e1bffe17 	ldw	r6,-8(fp)
    57b0:	e17ffd17 	ldw	r5,-12(fp)
    57b4:	e13ffc17 	ldw	r4,-16(fp)
    57b8:	0005a100 	call	5a10 <open>
    57bc:	e0bffa15 	stw	r2,-24(fp)

  if (old >= 0)
    57c0:	e0bffa17 	ldw	r2,-24(fp)
    57c4:	10002216 	blt	r2,zero,5850 <alt_open_fd+0xc8>
  {
    fd->dev      = alt_fd_list[old].dev;
    57c8:	04000034 	movhi	r16,0
    57cc:	84183404 	addi	r16,r16,24784
    57d0:	e0bffa17 	ldw	r2,-24(fp)
    57d4:	01400304 	movi	r5,12
    57d8:	1009883a 	mov	r4,r2
    57dc:	0004f540 	call	4f54 <__mulsi3>
    57e0:	8085883a 	add	r2,r16,r2
    57e4:	10c00017 	ldw	r3,0(r2)
    57e8:	e0bffb17 	ldw	r2,-20(fp)
    57ec:	10c00015 	stw	r3,0(r2)
    fd->priv     = alt_fd_list[old].priv;
    57f0:	04000034 	movhi	r16,0
    57f4:	84183404 	addi	r16,r16,24784
    57f8:	e0bffa17 	ldw	r2,-24(fp)
    57fc:	01400304 	movi	r5,12
    5800:	1009883a 	mov	r4,r2
    5804:	0004f540 	call	4f54 <__mulsi3>
    5808:	8085883a 	add	r2,r16,r2
    580c:	10800104 	addi	r2,r2,4
    5810:	10c00017 	ldw	r3,0(r2)
    5814:	e0bffb17 	ldw	r2,-20(fp)
    5818:	10c00115 	stw	r3,4(r2)
    fd->fd_flags = alt_fd_list[old].fd_flags;
    581c:	04000034 	movhi	r16,0
    5820:	84183404 	addi	r16,r16,24784
    5824:	e0bffa17 	ldw	r2,-24(fp)
    5828:	01400304 	movi	r5,12
    582c:	1009883a 	mov	r4,r2
    5830:	0004f540 	call	4f54 <__mulsi3>
    5834:	8085883a 	add	r2,r16,r2
    5838:	10800204 	addi	r2,r2,8
    583c:	10c00017 	ldw	r3,0(r2)
    5840:	e0bffb17 	ldw	r2,-20(fp)
    5844:	10c00215 	stw	r3,8(r2)

    alt_release_fd (old);
    5848:	e13ffa17 	ldw	r4,-24(fp)
    584c:	0005b6c0 	call	5b6c <alt_release_fd>
  }
} 
    5850:	0001883a 	nop
    5854:	e6ffff04 	addi	sp,fp,-4
    5858:	dfc00217 	ldw	ra,8(sp)
    585c:	df000117 	ldw	fp,4(sp)
    5860:	dc000017 	ldw	r16,0(sp)
    5864:	dec00304 	addi	sp,sp,12
    5868:	f800283a 	ret

0000586c <alt_io_redirect>:
 */
 
void alt_io_redirect(const char* stdout_dev, 
                     const char* stdin_dev, 
                     const char* stderr_dev)
{
    586c:	defffb04 	addi	sp,sp,-20
    5870:	dfc00415 	stw	ra,16(sp)
    5874:	df000315 	stw	fp,12(sp)
    5878:	df000304 	addi	fp,sp,12
    587c:	e13ffd15 	stw	r4,-12(fp)
    5880:	e17ffe15 	stw	r5,-8(fp)
    5884:	e1bfff15 	stw	r6,-4(fp)
  /* Redirect the channels */

  alt_open_fd (&alt_fd_list[STDOUT_FILENO], stdout_dev, O_WRONLY, 0777);
    5888:	01c07fc4 	movi	r7,511
    588c:	01800044 	movi	r6,1
    5890:	e17ffd17 	ldw	r5,-12(fp)
    5894:	01000034 	movhi	r4,0
    5898:	21183704 	addi	r4,r4,24796
    589c:	00057880 	call	5788 <alt_open_fd>
  alt_open_fd (&alt_fd_list[STDIN_FILENO], stdin_dev, O_RDONLY, 0777);
    58a0:	01c07fc4 	movi	r7,511
    58a4:	000d883a 	mov	r6,zero
    58a8:	e17ffe17 	ldw	r5,-8(fp)
    58ac:	01000034 	movhi	r4,0
    58b0:	21183404 	addi	r4,r4,24784
    58b4:	00057880 	call	5788 <alt_open_fd>
  alt_open_fd (&alt_fd_list[STDERR_FILENO], stderr_dev, O_WRONLY, 0777);
    58b8:	01c07fc4 	movi	r7,511
    58bc:	01800044 	movi	r6,1
    58c0:	e17fff17 	ldw	r5,-4(fp)
    58c4:	01000034 	movhi	r4,0
    58c8:	21183a04 	addi	r4,r4,24808
    58cc:	00057880 	call	5788 <alt_open_fd>
}  
    58d0:	0001883a 	nop
    58d4:	e037883a 	mov	sp,fp
    58d8:	dfc00117 	ldw	ra,4(sp)
    58dc:	df000017 	ldw	fp,0(sp)
    58e0:	dec00204 	addi	sp,sp,8
    58e4:	f800283a 	ret

000058e8 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
    58e8:	defffe04 	addi	sp,sp,-8
    58ec:	dfc00115 	stw	ra,4(sp)
    58f0:	df000015 	stw	fp,0(sp)
    58f4:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
    58f8:	d0a00917 	ldw	r2,-32732(gp)
    58fc:	10000326 	beq	r2,zero,590c <alt_get_errno+0x24>
    5900:	d0a00917 	ldw	r2,-32732(gp)
    5904:	103ee83a 	callr	r2
    5908:	00000106 	br	5910 <alt_get_errno+0x28>
    590c:	d0a0c104 	addi	r2,gp,-31996
}
    5910:	e037883a 	mov	sp,fp
    5914:	dfc00117 	ldw	ra,4(sp)
    5918:	df000017 	ldw	fp,0(sp)
    591c:	dec00204 	addi	sp,sp,8
    5920:	f800283a 	ret

00005924 <alt_file_locked>:
 * performed for devices. Filesystems are required to handle the ioctl() call
 * themselves, and report the error from the filesystems open() function. 
 */ 

static int alt_file_locked (alt_fd* fd)
{
    5924:	defffb04 	addi	sp,sp,-20
    5928:	dfc00415 	stw	ra,16(sp)
    592c:	df000315 	stw	fp,12(sp)
    5930:	dc000215 	stw	r16,8(sp)
    5934:	df000304 	addi	fp,sp,12
    5938:	e13ffe15 	stw	r4,-8(fp)

  /*
   * Mark the file descriptor as belonging to a device.
   */

  fd->fd_flags |= ALT_FD_DEV;
    593c:	e0bffe17 	ldw	r2,-8(fp)
    5940:	10800217 	ldw	r2,8(r2)
    5944:	10d00034 	orhi	r3,r2,16384
    5948:	e0bffe17 	ldw	r2,-8(fp)
    594c:	10c00215 	stw	r3,8(r2)
  /*
   * Loop through all current file descriptors searching for one that's locked
   * for exclusive access. If a match is found, generate an error.
   */

  for (i = 0; i <= alt_max_fd; i++)
    5950:	e03ffd15 	stw	zero,-12(fp)
    5954:	00002306 	br	59e4 <alt_file_locked+0xc0>
  {
    if ((alt_fd_list[i].dev == fd->dev) &&
    5958:	04000034 	movhi	r16,0
    595c:	84183404 	addi	r16,r16,24784
    5960:	e0bffd17 	ldw	r2,-12(fp)
    5964:	01400304 	movi	r5,12
    5968:	1009883a 	mov	r4,r2
    596c:	0004f540 	call	4f54 <__mulsi3>
    5970:	8085883a 	add	r2,r16,r2
    5974:	10c00017 	ldw	r3,0(r2)
    5978:	e0bffe17 	ldw	r2,-8(fp)
    597c:	10800017 	ldw	r2,0(r2)
    5980:	1880151e 	bne	r3,r2,59d8 <alt_file_locked+0xb4>
        (alt_fd_list[i].fd_flags & ALT_FD_EXCL) &&
    5984:	04000034 	movhi	r16,0
    5988:	84183404 	addi	r16,r16,24784
    598c:	e0bffd17 	ldw	r2,-12(fp)
    5990:	01400304 	movi	r5,12
    5994:	1009883a 	mov	r4,r2
    5998:	0004f540 	call	4f54 <__mulsi3>
    599c:	8085883a 	add	r2,r16,r2
    59a0:	10800204 	addi	r2,r2,8
    59a4:	10800017 	ldw	r2,0(r2)
   * for exclusive access. If a match is found, generate an error.
   */

  for (i = 0; i <= alt_max_fd; i++)
  {
    if ((alt_fd_list[i].dev == fd->dev) &&
    59a8:	10000b0e 	bge	r2,zero,59d8 <alt_file_locked+0xb4>
        (alt_fd_list[i].fd_flags & ALT_FD_EXCL) &&
        (&alt_fd_list[i] != fd))
    59ac:	01400304 	movi	r5,12
    59b0:	e13ffd17 	ldw	r4,-12(fp)
    59b4:	0004f540 	call	4f54 <__mulsi3>
    59b8:	1007883a 	mov	r3,r2
    59bc:	00800034 	movhi	r2,0
    59c0:	10983404 	addi	r2,r2,24784
    59c4:	1887883a 	add	r3,r3,r2
   */

  for (i = 0; i <= alt_max_fd; i++)
  {
    if ((alt_fd_list[i].dev == fd->dev) &&
        (alt_fd_list[i].fd_flags & ALT_FD_EXCL) &&
    59c8:	e0bffe17 	ldw	r2,-8(fp)
    59cc:	18800226 	beq	r3,r2,59d8 <alt_file_locked+0xb4>
        (&alt_fd_list[i] != fd))
    {
      return -EACCES;
    59d0:	00bffcc4 	movi	r2,-13
    59d4:	00000806 	br	59f8 <alt_file_locked+0xd4>
  /*
   * Loop through all current file descriptors searching for one that's locked
   * for exclusive access. If a match is found, generate an error.
   */

  for (i = 0; i <= alt_max_fd; i++)
    59d8:	e0bffd17 	ldw	r2,-12(fp)
    59dc:	10800044 	addi	r2,r2,1
    59e0:	e0bffd15 	stw	r2,-12(fp)
    59e4:	d0a00817 	ldw	r2,-32736(gp)
    59e8:	1007883a 	mov	r3,r2
    59ec:	e0bffd17 	ldw	r2,-12(fp)
    59f0:	18bfd92e 	bgeu	r3,r2,5958 <_gp+0xffff7708>
    }
  }
  
  /* The device is not locked */
 
  return 0;
    59f4:	0005883a 	mov	r2,zero
}
    59f8:	e6ffff04 	addi	sp,fp,-4
    59fc:	dfc00217 	ldw	ra,8(sp)
    5a00:	df000117 	ldw	fp,4(sp)
    5a04:	dc000017 	ldw	r16,0(sp)
    5a08:	dec00304 	addi	sp,sp,12
    5a0c:	f800283a 	ret

00005a10 <open>:
 *
 * ALT_OPEN is mapped onto the open() system call in alt_syscall.h
 */
 
int ALT_OPEN (const char* file, int flags, int mode)
{ 
    5a10:	defff604 	addi	sp,sp,-40
    5a14:	dfc00915 	stw	ra,36(sp)
    5a18:	df000815 	stw	fp,32(sp)
    5a1c:	df000804 	addi	fp,sp,32
    5a20:	e13ffd15 	stw	r4,-12(fp)
    5a24:	e17ffe15 	stw	r5,-8(fp)
    5a28:	e1bfff15 	stw	r6,-4(fp)
  alt_dev* dev;
  alt_fd*  fd;
  int index  = -1;
    5a2c:	00bfffc4 	movi	r2,-1
    5a30:	e0bff915 	stw	r2,-28(fp)
  int status = -ENODEV;
    5a34:	00bffb44 	movi	r2,-19
    5a38:	e0bffa15 	stw	r2,-24(fp)
  int isafs = 0;
    5a3c:	e03ffb15 	stw	zero,-20(fp)
  /* 
   * Check the device list, to see if a device with a matching name is 
   * registered.
   */
  
  if (!(dev = alt_find_dev (file, &alt_dev_list)))
    5a40:	d1600604 	addi	r5,gp,-32744
    5a44:	e13ffd17 	ldw	r4,-12(fp)
    5a48:	0005c140 	call	5c14 <alt_find_dev>
    5a4c:	e0bff815 	stw	r2,-32(fp)
    5a50:	e0bff817 	ldw	r2,-32(fp)
    5a54:	1000051e 	bne	r2,zero,5a6c <open+0x5c>
  {
    /* No matching device, so try the filesystem list */

    dev   = alt_find_file (file);
    5a58:	e13ffd17 	ldw	r4,-12(fp)
    5a5c:	0005ca40 	call	5ca4 <alt_find_file>
    5a60:	e0bff815 	stw	r2,-32(fp)
    isafs = 1;
    5a64:	00800044 	movi	r2,1
    5a68:	e0bffb15 	stw	r2,-20(fp)

  /* 
   * If a matching device or filesystem is found, allocate a file descriptor. 
   */

  if (dev)
    5a6c:	e0bff817 	ldw	r2,-32(fp)
    5a70:	10002b26 	beq	r2,zero,5b20 <open+0x110>
  {
    if ((index = alt_get_fd (dev)) < 0)
    5a74:	e13ff817 	ldw	r4,-32(fp)
    5a78:	0005dac0 	call	5dac <alt_get_fd>
    5a7c:	e0bff915 	stw	r2,-28(fp)
    5a80:	e0bff917 	ldw	r2,-28(fp)
    5a84:	1000030e 	bge	r2,zero,5a94 <open+0x84>
    {
      status = index;
    5a88:	e0bff917 	ldw	r2,-28(fp)
    5a8c:	e0bffa15 	stw	r2,-24(fp)
    5a90:	00002506 	br	5b28 <open+0x118>
    }
    else
    {
      fd = &alt_fd_list[index];
    5a94:	01400304 	movi	r5,12
    5a98:	e13ff917 	ldw	r4,-28(fp)
    5a9c:	0004f540 	call	4f54 <__mulsi3>
    5aa0:	1007883a 	mov	r3,r2
    5aa4:	00800034 	movhi	r2,0
    5aa8:	10983404 	addi	r2,r2,24784
    5aac:	1885883a 	add	r2,r3,r2
    5ab0:	e0bffc15 	stw	r2,-16(fp)
      fd->fd_flags = (flags & ~ALT_FD_FLAGS_MASK);
    5ab4:	e0fffe17 	ldw	r3,-8(fp)
    5ab8:	00900034 	movhi	r2,16384
    5abc:	10bfffc4 	addi	r2,r2,-1
    5ac0:	1886703a 	and	r3,r3,r2
    5ac4:	e0bffc17 	ldw	r2,-16(fp)
    5ac8:	10c00215 	stw	r3,8(r2)
      
      /* If this is a device, ensure it isn't already locked */

      if (isafs || ((status = alt_file_locked (fd)) >= 0))
    5acc:	e0bffb17 	ldw	r2,-20(fp)
    5ad0:	1000051e 	bne	r2,zero,5ae8 <open+0xd8>
    5ad4:	e13ffc17 	ldw	r4,-16(fp)
    5ad8:	00059240 	call	5924 <alt_file_locked>
    5adc:	e0bffa15 	stw	r2,-24(fp)
    5ae0:	e0bffa17 	ldw	r2,-24(fp)
    5ae4:	10001016 	blt	r2,zero,5b28 <open+0x118>
        /* 
         * If the device or filesystem provides an open() callback function,
         * call it now to perform any device/filesystem specific operations.
         */
    
        status = (dev->open) ? dev->open(fd, file, flags, mode): 0;
    5ae8:	e0bff817 	ldw	r2,-32(fp)
    5aec:	10800317 	ldw	r2,12(r2)
    5af0:	10000826 	beq	r2,zero,5b14 <open+0x104>
    5af4:	e0bff817 	ldw	r2,-32(fp)
    5af8:	10800317 	ldw	r2,12(r2)
    5afc:	e1ffff17 	ldw	r7,-4(fp)
    5b00:	e1bffe17 	ldw	r6,-8(fp)
    5b04:	e17ffd17 	ldw	r5,-12(fp)
    5b08:	e13ffc17 	ldw	r4,-16(fp)
    5b0c:	103ee83a 	callr	r2
    5b10:	00000106 	br	5b18 <open+0x108>
    5b14:	0005883a 	mov	r2,zero
    5b18:	e0bffa15 	stw	r2,-24(fp)
    5b1c:	00000206 	br	5b28 <open+0x118>
      }
    }
  }
  else
  {
    status = -ENODEV;
    5b20:	00bffb44 	movi	r2,-19
    5b24:	e0bffa15 	stw	r2,-24(fp)
  }

  /* Allocation failed, so clean up and return an error */ 

  if (status < 0)
    5b28:	e0bffa17 	ldw	r2,-24(fp)
    5b2c:	1000090e 	bge	r2,zero,5b54 <open+0x144>
  {
    alt_release_fd (index);  
    5b30:	e13ff917 	ldw	r4,-28(fp)
    5b34:	0005b6c0 	call	5b6c <alt_release_fd>
    ALT_ERRNO = -status;
    5b38:	00058e80 	call	58e8 <alt_get_errno>
    5b3c:	1007883a 	mov	r3,r2
    5b40:	e0bffa17 	ldw	r2,-24(fp)
    5b44:	0085c83a 	sub	r2,zero,r2
    5b48:	18800015 	stw	r2,0(r3)
    return -1;
    5b4c:	00bfffc4 	movi	r2,-1
    5b50:	00000106 	br	5b58 <open+0x148>
  }
  
  /* return the reference upon success */

  return index;
    5b54:	e0bff917 	ldw	r2,-28(fp)
}
    5b58:	e037883a 	mov	sp,fp
    5b5c:	dfc00117 	ldw	ra,4(sp)
    5b60:	df000017 	ldw	fp,0(sp)
    5b64:	dec00204 	addi	sp,sp,8
    5b68:	f800283a 	ret

00005b6c <alt_release_fd>:
 * File descriptors correcponding to standard in, standard out and standard 
 * error cannont be released backed to the pool. They are always reserved.
 */

void alt_release_fd (int fd)
{
    5b6c:	defffc04 	addi	sp,sp,-16
    5b70:	dfc00315 	stw	ra,12(sp)
    5b74:	df000215 	stw	fp,8(sp)
    5b78:	dc000115 	stw	r16,4(sp)
    5b7c:	df000204 	addi	fp,sp,8
    5b80:	e13ffe15 	stw	r4,-8(fp)
  if (fd > 2)
    5b84:	e0bffe17 	ldw	r2,-8(fp)
    5b88:	108000d0 	cmplti	r2,r2,3
    5b8c:	1000111e 	bne	r2,zero,5bd4 <alt_release_fd+0x68>
  {
    alt_fd_list[fd].fd_flags = 0;
    5b90:	04000034 	movhi	r16,0
    5b94:	84183404 	addi	r16,r16,24784
    5b98:	e0bffe17 	ldw	r2,-8(fp)
    5b9c:	01400304 	movi	r5,12
    5ba0:	1009883a 	mov	r4,r2
    5ba4:	0004f540 	call	4f54 <__mulsi3>
    5ba8:	8085883a 	add	r2,r16,r2
    5bac:	10800204 	addi	r2,r2,8
    5bb0:	10000015 	stw	zero,0(r2)
    alt_fd_list[fd].dev      = 0;
    5bb4:	04000034 	movhi	r16,0
    5bb8:	84183404 	addi	r16,r16,24784
    5bbc:	e0bffe17 	ldw	r2,-8(fp)
    5bc0:	01400304 	movi	r5,12
    5bc4:	1009883a 	mov	r4,r2
    5bc8:	0004f540 	call	4f54 <__mulsi3>
    5bcc:	8085883a 	add	r2,r16,r2
    5bd0:	10000015 	stw	zero,0(r2)
  }
}
    5bd4:	0001883a 	nop
    5bd8:	e6ffff04 	addi	sp,fp,-4
    5bdc:	dfc00217 	ldw	ra,8(sp)
    5be0:	df000117 	ldw	fp,4(sp)
    5be4:	dc000017 	ldw	r16,0(sp)
    5be8:	dec00304 	addi	sp,sp,12
    5bec:	f800283a 	ret

00005bf0 <altera_nios2_gen2_irq_init>:
/*
 * To initialize the internal interrupt controller, just clear the IENABLE
 * register so that all possible IRQs are disabled.
 */
void altera_nios2_gen2_irq_init(void) 
{
    5bf0:	deffff04 	addi	sp,sp,-4
    5bf4:	df000015 	stw	fp,0(sp)
    5bf8:	d839883a 	mov	fp,sp
    NIOS2_WRITE_IENABLE(0);
    5bfc:	000170fa 	wrctl	ienable,zero
}
    5c00:	0001883a 	nop
    5c04:	e037883a 	mov	sp,fp
    5c08:	df000017 	ldw	fp,0(sp)
    5c0c:	dec00104 	addi	sp,sp,4
    5c10:	f800283a 	ret

00005c14 <alt_find_dev>:
 * "name" must be an exact match for the devices registered name for a match to
 * be found.
 */
 
alt_dev* alt_find_dev(const char* name, alt_llist* llist)
{
    5c14:	defffa04 	addi	sp,sp,-24
    5c18:	dfc00515 	stw	ra,20(sp)
    5c1c:	df000415 	stw	fp,16(sp)
    5c20:	df000404 	addi	fp,sp,16
    5c24:	e13ffe15 	stw	r4,-8(fp)
    5c28:	e17fff15 	stw	r5,-4(fp)
  alt_dev* next = (alt_dev*) llist->next;
    5c2c:	e0bfff17 	ldw	r2,-4(fp)
    5c30:	10800017 	ldw	r2,0(r2)
    5c34:	e0bffc15 	stw	r2,-16(fp)
  alt_32 len;

  len  = strlen(name) + 1;
    5c38:	e13ffe17 	ldw	r4,-8(fp)
    5c3c:	00045300 	call	4530 <strlen>
    5c40:	10800044 	addi	r2,r2,1
    5c44:	e0bffd15 	stw	r2,-12(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 

  while (next != (alt_dev*) llist)
    5c48:	00000d06 	br	5c80 <alt_find_dev+0x6c>
    /* 
     * memcmp() is used here rather than strcmp() in order to reduce the size
     * of the executable.
     */

    if (!memcmp (next->name, name, len))
    5c4c:	e0bffc17 	ldw	r2,-16(fp)
    5c50:	10800217 	ldw	r2,8(r2)
    5c54:	e0fffd17 	ldw	r3,-12(fp)
    5c58:	180d883a 	mov	r6,r3
    5c5c:	e17ffe17 	ldw	r5,-8(fp)
    5c60:	1009883a 	mov	r4,r2
    5c64:	0005e700 	call	5e70 <memcmp>
    5c68:	1000021e 	bne	r2,zero,5c74 <alt_find_dev+0x60>
    {
      /* match found */

      return next;
    5c6c:	e0bffc17 	ldw	r2,-16(fp)
    5c70:	00000706 	br	5c90 <alt_find_dev+0x7c>
    }
    next = (alt_dev*) next->llist.next;
    5c74:	e0bffc17 	ldw	r2,-16(fp)
    5c78:	10800017 	ldw	r2,0(r2)
    5c7c:	e0bffc15 	stw	r2,-16(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 

  while (next != (alt_dev*) llist)
    5c80:	e0fffc17 	ldw	r3,-16(fp)
    5c84:	e0bfff17 	ldw	r2,-4(fp)
    5c88:	18bff01e 	bne	r3,r2,5c4c <_gp+0xffff79fc>
    next = (alt_dev*) next->llist.next;
  }
  
  /* No match found */
  
  return NULL;
    5c8c:	0005883a 	mov	r2,zero
}
    5c90:	e037883a 	mov	sp,fp
    5c94:	dfc00117 	ldw	ra,4(sp)
    5c98:	df000017 	ldw	fp,0(sp)
    5c9c:	dec00204 	addi	sp,sp,8
    5ca0:	f800283a 	ret

00005ca4 <alt_find_file>:
 * either '/' or '\0' is the prefix of the filename. For example the filename:
 * "/myfilesystem/junk.txt" would match: "/myfilesystem", but not: "/myfile". 
 */
 
alt_dev* alt_find_file (const char* name)
{
    5ca4:	defffb04 	addi	sp,sp,-20
    5ca8:	dfc00415 	stw	ra,16(sp)
    5cac:	df000315 	stw	fp,12(sp)
    5cb0:	df000304 	addi	fp,sp,12
    5cb4:	e13fff15 	stw	r4,-4(fp)
  alt_dev* next = (alt_dev*) alt_fs_list.next;   
    5cb8:	d0a00417 	ldw	r2,-32752(gp)
    5cbc:	e0bffd15 	stw	r2,-12(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 
 
  while (next != (alt_dev*) &alt_fs_list)
    5cc0:	00003106 	br	5d88 <alt_find_file+0xe4>
  {
    len = strlen(next->name);
    5cc4:	e0bffd17 	ldw	r2,-12(fp)
    5cc8:	10800217 	ldw	r2,8(r2)
    5ccc:	1009883a 	mov	r4,r2
    5cd0:	00045300 	call	4530 <strlen>
    5cd4:	e0bffe15 	stw	r2,-8(fp)
    
    if (next->name[len-1] == '/')
    5cd8:	e0bffd17 	ldw	r2,-12(fp)
    5cdc:	10c00217 	ldw	r3,8(r2)
    5ce0:	e0bffe17 	ldw	r2,-8(fp)
    5ce4:	10bfffc4 	addi	r2,r2,-1
    5ce8:	1885883a 	add	r2,r3,r2
    5cec:	10800003 	ldbu	r2,0(r2)
    5cf0:	10803fcc 	andi	r2,r2,255
    5cf4:	1080201c 	xori	r2,r2,128
    5cf8:	10bfe004 	addi	r2,r2,-128
    5cfc:	10800bd8 	cmpnei	r2,r2,47
    5d00:	1000031e 	bne	r2,zero,5d10 <alt_find_file+0x6c>
    {
      len -= 1;
    5d04:	e0bffe17 	ldw	r2,-8(fp)
    5d08:	10bfffc4 	addi	r2,r2,-1
    5d0c:	e0bffe15 	stw	r2,-8(fp)
    }

    if (((name[len] == '/') || (name[len] == '\0')) && 
    5d10:	e0bffe17 	ldw	r2,-8(fp)
    5d14:	e0ffff17 	ldw	r3,-4(fp)
    5d18:	1885883a 	add	r2,r3,r2
    5d1c:	10800003 	ldbu	r2,0(r2)
    5d20:	10803fcc 	andi	r2,r2,255
    5d24:	1080201c 	xori	r2,r2,128
    5d28:	10bfe004 	addi	r2,r2,-128
    5d2c:	10800be0 	cmpeqi	r2,r2,47
    5d30:	1000081e 	bne	r2,zero,5d54 <alt_find_file+0xb0>
    5d34:	e0bffe17 	ldw	r2,-8(fp)
    5d38:	e0ffff17 	ldw	r3,-4(fp)
    5d3c:	1885883a 	add	r2,r3,r2
    5d40:	10800003 	ldbu	r2,0(r2)
    5d44:	10803fcc 	andi	r2,r2,255
    5d48:	1080201c 	xori	r2,r2,128
    5d4c:	10bfe004 	addi	r2,r2,-128
    5d50:	10000a1e 	bne	r2,zero,5d7c <alt_find_file+0xd8>
        !memcmp (next->name, name, len))
    5d54:	e0bffd17 	ldw	r2,-12(fp)
    5d58:	10800217 	ldw	r2,8(r2)
    5d5c:	e0fffe17 	ldw	r3,-8(fp)
    5d60:	180d883a 	mov	r6,r3
    5d64:	e17fff17 	ldw	r5,-4(fp)
    5d68:	1009883a 	mov	r4,r2
    5d6c:	0005e700 	call	5e70 <memcmp>
    if (next->name[len-1] == '/')
    {
      len -= 1;
    }

    if (((name[len] == '/') || (name[len] == '\0')) && 
    5d70:	1000021e 	bne	r2,zero,5d7c <alt_find_file+0xd8>
        !memcmp (next->name, name, len))
    {
      /* match found */

      return next;
    5d74:	e0bffd17 	ldw	r2,-12(fp)
    5d78:	00000706 	br	5d98 <alt_find_file+0xf4>
    }
    next = (alt_dev*) next->llist.next;
    5d7c:	e0bffd17 	ldw	r2,-12(fp)
    5d80:	10800017 	ldw	r2,0(r2)
    5d84:	e0bffd15 	stw	r2,-12(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 
 
  while (next != (alt_dev*) &alt_fs_list)
    5d88:	e0fffd17 	ldw	r3,-12(fp)
    5d8c:	d0a00404 	addi	r2,gp,-32752
    5d90:	18bfcc1e 	bne	r3,r2,5cc4 <_gp+0xffff7a74>
    next = (alt_dev*) next->llist.next;
  }
  
  /* No match found */
  
  return NULL;     
    5d94:	0005883a 	mov	r2,zero
}
    5d98:	e037883a 	mov	sp,fp
    5d9c:	dfc00117 	ldw	ra,4(sp)
    5da0:	df000017 	ldw	fp,0(sp)
    5da4:	dec00204 	addi	sp,sp,8
    5da8:	f800283a 	ret

00005dac <alt_get_fd>:
 * the offset of the file descriptor within the file descriptor array). A
 * negative value indicates failure.
 */

int alt_get_fd (alt_dev* dev)
{
    5dac:	defffa04 	addi	sp,sp,-24
    5db0:	dfc00515 	stw	ra,20(sp)
    5db4:	df000415 	stw	fp,16(sp)
    5db8:	dc000315 	stw	r16,12(sp)
    5dbc:	df000404 	addi	fp,sp,16
    5dc0:	e13ffe15 	stw	r4,-8(fp)
  alt_32 i;
  int rc = -EMFILE;
    5dc4:	00bffa04 	movi	r2,-24
    5dc8:	e0bffd15 	stw	r2,-12(fp)
   * indicates the highest file descriptor ever allocated. This is used to
   * improve efficency when searching the file descriptor list, and 
   * therefore reduce contention on the alt_fd_list_lock semaphore. 
   */

  for (i = 0; i < ALT_MAX_FD; i++)
    5dcc:	e03ffc15 	stw	zero,-16(fp)
    5dd0:	00001d06 	br	5e48 <alt_get_fd+0x9c>
  {
    if (!alt_fd_list[i].dev)
    5dd4:	04000034 	movhi	r16,0
    5dd8:	84183404 	addi	r16,r16,24784
    5ddc:	e0bffc17 	ldw	r2,-16(fp)
    5de0:	01400304 	movi	r5,12
    5de4:	1009883a 	mov	r4,r2
    5de8:	0004f540 	call	4f54 <__mulsi3>
    5dec:	8085883a 	add	r2,r16,r2
    5df0:	10800017 	ldw	r2,0(r2)
    5df4:	1000111e 	bne	r2,zero,5e3c <alt_get_fd+0x90>
    {
      alt_fd_list[i].dev = dev;
    5df8:	04000034 	movhi	r16,0
    5dfc:	84183404 	addi	r16,r16,24784
    5e00:	e0bffc17 	ldw	r2,-16(fp)
    5e04:	01400304 	movi	r5,12
    5e08:	1009883a 	mov	r4,r2
    5e0c:	0004f540 	call	4f54 <__mulsi3>
    5e10:	8085883a 	add	r2,r16,r2
    5e14:	e0fffe17 	ldw	r3,-8(fp)
    5e18:	10c00015 	stw	r3,0(r2)
      if (i > alt_max_fd)
    5e1c:	d0e00817 	ldw	r3,-32736(gp)
    5e20:	e0bffc17 	ldw	r2,-16(fp)
    5e24:	1880020e 	bge	r3,r2,5e30 <alt_get_fd+0x84>
      {
        alt_max_fd = i;
    5e28:	e0bffc17 	ldw	r2,-16(fp)
    5e2c:	d0a00815 	stw	r2,-32736(gp)
      }
      rc = i;
    5e30:	e0bffc17 	ldw	r2,-16(fp)
    5e34:	e0bffd15 	stw	r2,-12(fp)
      goto alt_get_fd_exit;
    5e38:	00000606 	br	5e54 <alt_get_fd+0xa8>
   * indicates the highest file descriptor ever allocated. This is used to
   * improve efficency when searching the file descriptor list, and 
   * therefore reduce contention on the alt_fd_list_lock semaphore. 
   */

  for (i = 0; i < ALT_MAX_FD; i++)
    5e3c:	e0bffc17 	ldw	r2,-16(fp)
    5e40:	10800044 	addi	r2,r2,1
    5e44:	e0bffc15 	stw	r2,-16(fp)
    5e48:	e0bffc17 	ldw	r2,-16(fp)
    5e4c:	10800810 	cmplti	r2,r2,32
    5e50:	103fe01e 	bne	r2,zero,5dd4 <_gp+0xffff7b84>
   * file descriptor pool.
   */

  ALT_SEM_POST(alt_fd_list_lock);

  return rc;
    5e54:	e0bffd17 	ldw	r2,-12(fp)
}
    5e58:	e6ffff04 	addi	sp,fp,-4
    5e5c:	dfc00217 	ldw	ra,8(sp)
    5e60:	df000117 	ldw	fp,4(sp)
    5e64:	dc000017 	ldw	r16,0(sp)
    5e68:	dec00304 	addi	sp,sp,12
    5e6c:	f800283a 	ret

00005e70 <memcmp>:
    5e70:	218d883a 	add	r6,r4,r6
    5e74:	21800826 	beq	r4,r6,5e98 <memcmp+0x28>
    5e78:	20800003 	ldbu	r2,0(r4)
    5e7c:	28c00003 	ldbu	r3,0(r5)
    5e80:	10c00226 	beq	r2,r3,5e8c <memcmp+0x1c>
    5e84:	10c5c83a 	sub	r2,r2,r3
    5e88:	f800283a 	ret
    5e8c:	21000044 	addi	r4,r4,1
    5e90:	29400044 	addi	r5,r5,1
    5e94:	003ff706 	br	5e74 <_gp+0xffff7c24>
    5e98:	0005883a 	mov	r2,zero
    5e9c:	f800283a 	ret
