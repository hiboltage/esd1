# ---------------------------------------------------------------
# Assembly language program that reads data from the switches
# and displays it on the LEDs.
# ---------------------------------------------------------------

.text

# define a macro to move a 32 bit address to a register

.macro MOVIA reg, addr
  movhi \reg, %hi(\addr)
  ori \reg, \reg, %lo(\addr)
.endm

# define constants
.equ SW,    0x11020		#base address of Switches in the system.h file
.equ KEY,   0x11010    	#base address of pushbuttons in the system.h file
.equ HEX0,  0x11000    	#base address of HEX0 in the system.h file

.equ ZERO,  0xC0		#ssd display values
.equ ONE,   0xF9
.equ TWO,   0xA4
.equ THREE, 0xB0
.equ FOUR,  0x99
.equ FIVE,  0x92
.equ SIX,   0x83
.equ SEVEN, 0xF8
.equ EIGHT, 0x80
.equ NINE,  0x98

#Define the main program
.global main
main:
  		movia r2, SW		#load memory addresses
		movia r3, KEY
		movia r4, HEX0

		movia r14, ARRAY		#array pointer
		movia r15, ARRAY		#array start
		movia r16, ARRAYend		#array end

  		call	DISPLAY			#display zero on HEX0

loop:
		ldbio r13, 0(r3)        #read pushbuttons
		andi r13, r13, 0x0002   #check key1 value
		beq r13, r0, PRESS      #if key1 pressed, jump to PRESS

		br loop

PRESS:
		call	WAIT  			#wait for pushbutton to be released

		ldbio r12, 0(r2)		#read switches
		andi r12, r12, 0x0001	#check sw1 value
		beq r12, r0, DECREMENT	#if switch low
		bne r12, r0, INCREMENT	#if switch high

		call	DISPLAY			#display value on HEX0

WAIT:
		ldbio r13, 0(r3)        #check key1 value
		andi r13, r13, 0x0002	#key1 bitmask
		beq r13, r0, WAIT       #wait for key1 to be released

		ret

DECREMENT:
		beq r14, r15, WRAP	#count wraparoud
		subi r14, r14, 1	#decrement to prior register

		br DISPLAY

INCREMENT:
		beq r14, r16, OVERFLOW	#count wraparound
		addi r14, r14, 1		#increment to next register

		br DISPLAY

WRAP:
		movia r14, ARRAYend		#zero to nine

		br DISPLAY

OVERFLOW:
		movia r14, ARRAY		#nine to zero

		br DISPLAY

DISPLAY:
		ldbio r6, 0(r14)	#load value from memory pointer
  		stbio r6, 0(r4)		#write value to HEX0

  		br loop  			#return to main program


		.data		#ssd data array
ARRAY:
		.byte ZERO, ONE, TWO, THREE, FOUR, FIVE, SIX, SEVEN, EIGHT, NINE
ARRAYend:
		.end		#this points to the next location NOT NINE
