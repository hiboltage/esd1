//
// file: lab6_part4.c
// date: 4/11/2025
// auth: Steven Bolt
//

#include <stdio.h>
#include "system.h"

// create standard embedded type definitions
typedef   signed char   sint8;              // signed 8 bit values
typedef unsigned char   uint8;              // unsigned 8 bit values
typedef   signed short  sint16;             // signed 16 bit values
typedef unsigned short  uint16;             // unsigned 16 bit values
typedef   signed long   sint32;             // signed 32 bit values
typedef unsigned long   uint32;             // unsigned 32 bit values
typedef         float   real32;             // 32 bit real values

// pointer to leds
volatile uint32 *ledPtr = (uint32*)LEDS_BASE;

// function that starts from a provided address and writes
// to the end of the ram in bytes
void test_a(uint16 address, uint32 testData, int ramSize){
	uint8 *bytePtr = 0x00;	// pointer that increments by bytes

	for (int i = address; i < ramSize; i++){	// write to all requested memory locations
		*(bytePtr + i) = testData;
	}

}

int main(){

	while(1){

		test_a(0x000, 0x00, 4096);

	}

	return 0;
}
