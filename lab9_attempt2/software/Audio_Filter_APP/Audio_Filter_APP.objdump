
Audio_Filter_APP.elf:     file format elf32-littlenios2
Audio_Filter_APP.elf
architecture: nios2:r1, flags 0x00000112:
EXEC_P, HAS_SYMS, D_PAGED
start address 0x04010230

Program Header:
    LOAD off    0x00001000 vaddr 0x04010000 paddr 0x04010000 align 2**12
         filesz 0x00000020 memsz 0x00000020 flags r-x
    LOAD off    0x00001020 vaddr 0x04010020 paddr 0x04010020 align 2**12
         filesz 0x00006d60 memsz 0x00006d60 flags r-x
    LOAD off    0x00007d80 vaddr 0x04016d80 paddr 0x040188d0 align 2**12
         filesz 0x00001b50 memsz 0x00001b50 flags rw-
    LOAD off    0x0000a420 vaddr 0x0401a420 paddr 0x0401a420 align 2**12
         filesz 0x00000000 memsz 0x0000016c flags rw-

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .entry        00000020  04010000  04010000  00001000  2**5
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .exceptions   00000210  04010020  04010020  00001020  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .text         00006a60  04010230  04010230  00001230  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  3 .rodata       000000f0  04016c90  04016c90  00007c90  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .rwdata       00001b50  04016d80  040188d0  00007d80  2**2
                  CONTENTS, ALLOC, LOAD, DATA, SMALL_DATA
  5 .bss          0000016c  0401a420  0401a420  0000a420  2**2
                  ALLOC, SMALL_DATA
  6 .new_sdram_controller_0 00000000  00000000  00000000  000098d0  2**0
                  CONTENTS
  7 .onchip_memory2_1 00000000  0401a58c  0401a58c  000098d0  2**0
                  CONTENTS
  8 .comment      00000023  00000000  00000000  000098d0  2**0
                  CONTENTS, READONLY
  9 .debug_aranges 00000b78  00000000  00000000  000098f8  2**3
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_info   0001c59b  00000000  00000000  0000a470  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_abbrev 000074c0  00000000  00000000  00026a0b  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_line   00007e85  00000000  00000000  0002decb  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_frame  00001914  00000000  00000000  00035d50  2**2
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_str    00002d5f  00000000  00000000  00037664  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_loc    000057f6  00000000  00000000  0003a3c3  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_alt_sim_info 00000010  00000000  00000000  0003fbbc  2**2
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_ranges 00000790  00000000  00000000  0003fbd0  2**3
                  CONTENTS, READONLY, DEBUGGING
 18 .thread_model 00000003  00000000  00000000  00042e9e  2**0
                  CONTENTS, READONLY
 19 .cpu          0000000c  00000000  00000000  00042ea1  2**0
                  CONTENTS, READONLY
 20 .qsys         00000001  00000000  00000000  00042ead  2**0
                  CONTENTS, READONLY
 21 .simulation_enabled 00000001  00000000  00000000  00042eae  2**0
                  CONTENTS, READONLY
 22 .sysid_hash   00000004  00000000  00000000  00042eaf  2**0
                  CONTENTS, READONLY
 23 .sysid_base   00000004  00000000  00000000  00042eb3  2**0
                  CONTENTS, READONLY
 24 .sysid_time   00000004  00000000  00000000  00042eb7  2**0
                  CONTENTS, READONLY
 25 .stderr_dev   0000000b  00000000  00000000  00042ebb  2**0
                  CONTENTS, READONLY
 26 .stdin_dev    0000000b  00000000  00000000  00042ec6  2**0
                  CONTENTS, READONLY
 27 .stdout_dev   0000000b  00000000  00000000  00042ed1  2**0
                  CONTENTS, READONLY
 28 .sopc_system_name 0000000b  00000000  00000000  00042edc  2**0
                  CONTENTS, READONLY
 29 .quartus_project_dir 00000029  00000000  00000000  00042ee7  2**0
                  CONTENTS, READONLY
 30 .jdi          00005216  00000000  00000000  00042f10  2**0
                  CONTENTS, READONLY
 31 .sopcinfo     000602ed  00000000  00000000  00048126  2**0
                  CONTENTS, READONLY
SYMBOL TABLE:
04010000 l    d  .entry	00000000 .entry
04010020 l    d  .exceptions	00000000 .exceptions
04010230 l    d  .text	00000000 .text
04016c90 l    d  .rodata	00000000 .rodata
04016d80 l    d  .rwdata	00000000 .rwdata
0401a420 l    d  .bss	00000000 .bss
00000000 l    d  .new_sdram_controller_0	00000000 .new_sdram_controller_0
0401a58c l    d  .onchip_memory2_1	00000000 .onchip_memory2_1
00000000 l    d  .comment	00000000 .comment
00000000 l    d  .debug_aranges	00000000 .debug_aranges
00000000 l    d  .debug_info	00000000 .debug_info
00000000 l    d  .debug_abbrev	00000000 .debug_abbrev
00000000 l    d  .debug_line	00000000 .debug_line
00000000 l    d  .debug_frame	00000000 .debug_frame
00000000 l    d  .debug_str	00000000 .debug_str
00000000 l    d  .debug_loc	00000000 .debug_loc
00000000 l    d  .debug_alt_sim_info	00000000 .debug_alt_sim_info
00000000 l    d  .debug_ranges	00000000 .debug_ranges
00000000 l    df *ABS*	00000000 ../Audio_Filter_APP_bsp//obj/HAL/src/crt0.o
04010268 l       .text	00000000 alt_after_alt_main
00000000 l    df *ABS*	00000000 alt_irq_handler.c
00000000 l    df *ABS*	00000000 alt_instruction_exception_entry.c
00000000 l    df *ABS*	00000000 audio_filter.c
00000000 l    df *ABS*	00000000 fopen.c
00000000 l    df *ABS*	00000000 fread.c
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 fseek.c
00000000 l    df *ABS*	00000000 fseeko.c
00000000 l    df *ABS*	00000000 fstatr.c
00000000 l    df *ABS*	00000000 impure.c
04016d80 l     O .rwdata	00000424 impure_data
00000000 l    df *ABS*	00000000 int_errno.c
00000000 l    df *ABS*	00000000 makebuf.c
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 memcpy.c
00000000 l    df *ABS*	00000000 memset.c
00000000 l    df *ABS*	00000000 openr.c
00000000 l    df *ABS*	00000000 puts.c
00000000 l    df *ABS*	00000000 refill.c
040120b8 l     F .text	0000001c lflush
00000000 l    df *ABS*	00000000 sbrkr.c
00000000 l    df *ABS*	00000000 stdio.c
00000000 l    df *ABS*	00000000 strlen.c
00000000 l    df *ABS*	00000000 writer.c
00000000 l    df *ABS*	00000000 closer.c
00000000 l    df *ABS*	00000000 fflush.c
00000000 l    df *ABS*	00000000 findfp.c
0401282c l     F .text	00000008 __fp_unlock
04012840 l     F .text	0000019c __sinit.part.1
040129dc l     F .text	00000008 __fp_lock
00000000 l    df *ABS*	00000000 flags.c
00000000 l    df *ABS*	00000000 fvwrite.c
00000000 l    df *ABS*	00000000 fwalk.c
00000000 l    df *ABS*	00000000 isattyr.c
00000000 l    df *ABS*	00000000 lseekr.c
00000000 l    df *ABS*	00000000 memchr.c
00000000 l    df *ABS*	00000000 memmove.c
00000000 l    df *ABS*	00000000 readr.c
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 wsetup.c
00000000 l    df *ABS*	00000000 fclose.c
00000000 l    df *ABS*	00000000 lib2-divmod.c
00000000 l    df *ABS*	00000000 lib2-mul.c
00000000 l    df *ABS*	00000000 alt_close.c
04013fc4 l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_dev.c
040140d8 l     F .text	0000002c alt_dev_null_write
00000000 l    df *ABS*	00000000 alt_errno.c
00000000 l    df *ABS*	00000000 alt_fstat.c
04014104 l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_iic.c
00000000 l    df *ABS*	00000000 alt_iic_isr_register.c
00000000 l    df *ABS*	00000000 alt_irq_vars.c
00000000 l    df *ABS*	00000000 alt_isatty.c
04014498 l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_load.c
04014580 l     F .text	00000068 alt_load_section
00000000 l    df *ABS*	00000000 alt_lseek.c
0401466c l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_main.c
00000000 l    df *ABS*	00000000 alt_malloc_lock.c
00000000 l    df *ABS*	00000000 alt_open.c
04014848 l     F .text	0000003c alt_get_errno
04014884 l     F .text	000000ec alt_file_locked
00000000 l    df *ABS*	00000000 alt_read.c
04014acc l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_release_fd.c
00000000 l    df *ABS*	00000000 alt_sbrk.c
0401887c l     O .rwdata	00000004 heap_end
00000000 l    df *ABS*	00000000 alt_write.c
04014d40 l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_sys_init.c
04014e7c l     F .text	00000034 alt_dev_reg
04017754 l     O .rwdata	00001060 jtag_uart_0
040187b4 l     O .rwdata	00000028 altera_hostfs
040187dc l     O .rwdata	00000030 audio_and_video_config_0
0401880c l     O .rwdata	00000030 audio_0
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_fd.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_init.c
04015194 l     F .text	0000020c altera_avalon_jtag_uart_irq
040153a0 l     F .text	000000a0 altera_avalon_jtag_uart_timeout
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_ioctl.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_read.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_write.c
00000000 l    df *ABS*	00000000 altera_avalon_timer_sc.c
040159d8 l     F .text	00000078 alt_avalon_timer_sc_irq
00000000 l    df *ABS*	00000000 altera_hostfs.c
04018880 l     O .rwdata	00000009 hcinfo.2538
0401888c l     O .rwdata	0000000a hcinfo.2551
04018898 l     O .rwdata	00000009 hcinfo.2560
040188a4 l     O .rwdata	0000000a hcinfo.2573
040188b0 l     O .rwdata	0000000a hcinfo.2586
040188bc l     O .rwdata	0000000a hcinfo.2612
00000000 l    df *ABS*	00000000 alt_alarm_start.c
00000000 l    df *ABS*	00000000 alt_dcache_flush_all.c
00000000 l    df *ABS*	00000000 alt_dev_llist_insert.c
0401609c l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_do_ctors.c
00000000 l    df *ABS*	00000000 alt_do_dtors.c
00000000 l    df *ABS*	00000000 alt_find_dev.c
00000000 l    df *ABS*	00000000 alt_find_file.c
00000000 l    df *ABS*	00000000 alt_fs_reg.c
00000000 l    df *ABS*	00000000 alt_get_fd.c
00000000 l    df *ABS*	00000000 alt_icache_flush_all.c
00000000 l    df *ABS*	00000000 alt_io_redirect.c
040165d4 l     F .text	000000e4 alt_open_fd
00000000 l    df *ABS*	00000000 alt_tick.c
00000000 l    df *ABS*	00000000 altera_nios2_gen2_irq.c
00000000 l    df *ABS*	00000000 atexit.c
00000000 l    df *ABS*	00000000 exit.c
00000000 l    df *ABS*	00000000 memcmp.c
00000000 l    df *ABS*	00000000 __atexit.c
00000000 l    df *ABS*	00000000 __call_atexit.c
00000000 l    df *ABS*	00000000 alt_exit.c
0401a458 g     O .bss	00000004 alt_instruction_exception_handler
040132d8 g     F .text	00000054 _isatty_r
04014784 g     F .text	0000007c alt_main
04011fe4 g     F .text	000000c0 _puts_r
0401a48c g     O .bss	00000100 alt_irq
04018840 g     O .rwdata	00000004 TimerPtr
0401332c g     F .text	00000060 _lseek_r
0401a420 g     O .bss	00000004 ECHO_CNT
040188d0 g       *ABS*	00000000 __flash_rwdata_start
04012bdc g     F .text	000000ac __sflags
0401a58c g       *ABS*	00000000 __alt_heap_start
040123d4 g     F .text	0000005c __sseek
04012b8c g     F .text	00000010 __sinit
040129e4 g     F .text	00000078 __sfmoreglue
04014824 g     F .text	00000024 __malloc_unlock
04015acc g     F .text	0000011c alt_hostfs_open
0401a42c g     O .bss	00000002 TOGGLE
04013470 g     F .text	0000015c memmove
04012b74 g     F .text	00000018 _cleanup
040168d8 g     F .text	00000024 altera_nios2_gen2_irq_init
04010000 g     F .entry	0000000c __reset
04010020 g       *ABS*	00000000 __flash_exceptions_start
040112f0 g     F .text	0000005c _fstat_r
0401a438 g     O .bss	00000004 errno
04012350 g     F .text	00000008 __seofread
0401a450 g     O .bss	00000004 alt_argv
0402083c g       *ABS*	00000000 _gp
040175d4 g     O .rwdata	00000180 alt_fd_list
04015d04 g     F .text	00000068 alt_hostfs_seek
0401a424 g     O .bss	00000004 SAMPLE_CNT
0401623c g     F .text	00000090 alt_find_dev
04011d14 g     F .text	00000148 memcpy
04012834 g     F .text	0000000c _cleanup_r
040163d4 g     F .text	00000080 alt_fs_reg
040166b8 g     F .text	0000007c alt_io_redirect
04016c90 g       *ABS*	00000000 __DTOR_END__
040120a4 g     F .text	00000014 puts
04016538 g     F .text	0000009c alt_exception_cause_generated_bad_addr
04015598 g     F .text	0000021c altera_avalon_jtag_uart_read
04013ee0 g     F .text	00000064 .hidden __udivsi3
040144d4 g     F .text	000000ac isatty
04018848 g     O .rwdata	00000004 SwPtr
0401a444 g     O .bss	00000004 __malloc_top_pad
04012c88 g     F .text	000004c8 __sfvwrite_r
040122a8 g     F .text	00000054 _sbrk_r
04015c2c g     F .text	0000006c alt_hostfs_read
040135cc g     F .text	00000060 _read_r
04018870 g     O .rwdata	00000004 alt_max_fd
04013ce4 g     F .text	000000f0 _fclose_r
040127fc g     F .text	00000030 fflush
0401a440 g     O .bss	00000004 __malloc_max_sbrked_mem
040146a8 g     F .text	000000dc lseek
04018850 g     O .rwdata	00000004 _global_impure_ptr
0401362c g     F .text	00000564 _realloc_r
0401a58c g       *ABS*	00000000 __bss_end
040143a8 g     F .text	000000f0 alt_iic_isr_register
040167d0 g     F .text	00000108 alt_tick
04012bac g     F .text	00000018 __fp_lock_all
0401435c g     F .text	0000004c alt_ic_irq_enabled
04016734 g     F .text	0000009c alt_alarm_stop
0401a448 g     O .bss	00000004 alt_irq_active
04010e90 g     F .text	00000444 _fseeko_r
04015be8 g     F .text	00000044 alt_hostfs_close
040100fc g     F .exceptions	000000d4 alt_irq_handler
040175ac g     O .rwdata	00000028 alt_dev_null
0401607c g     F .text	00000020 alt_dcache_flush_all
040188d0 g       *ABS*	00000000 __ram_rwdata_end
04018868 g     O .rwdata	00000008 alt_dev_list
04014d7c g     F .text	00000100 write
04016d80 g       *ABS*	00000000 __ram_rodata_end
04014140 g     F .text	000000b8 fstat
04013f44 g     F .text	00000058 .hidden __umodsi3
040103bc g     F .text	00000080 switches_isr
0401a58c g       *ABS*	00000000 end
040112d4 g     F .text	0000001c fseeko
0401a430 g     O .bss	00000004 SdramPtr
04010e74 g     F .text	0000001c fseek
040150d4 g     F .text	000000c0 altera_avalon_jtag_uart_init
040101d0 g     F .exceptions	00000060 alt_instruction_exception_entry
04016c90 g       *ABS*	00000000 __CTOR_LIST__
04020000 g       *ABS*	00000000 __alt_stack_pointer
04015a50 g     F .text	0000007c alt_avalon_timer_sc_init
040157b4 g     F .text	00000224 altera_avalon_jtag_uart_write
04012b9c g     F .text	00000004 __sfp_lock_acquire
0401338c g     F .text	000000e4 memchr
04010b60 g     F .text	00000310 _free_r
04016adc g     F .text	00000180 __call_exitprocs
04018858 g     O .rwdata	00000004 __malloc_sbrk_base
04010230 g     F .text	0000003c _start
0401a45c g     O .bss	00000004 _alt_tick_rate
0401043c g     F .text	00000200 read_file
0401a460 g     O .bss	00000004 _alt_nticks
04014b08 g     F .text	00000104 read
04014ee8 g     F .text	00000088 alt_sys_init
04011f84 g     F .text	00000060 _open_r
040169c4 g     F .text	00000118 __register_exitproc
04015440 g     F .text	00000068 altera_avalon_jtag_uart_close
04013f9c g     F .text	00000028 .hidden __mulsi3
04016d80 g       *ABS*	00000000 __ram_rwdata_start
04016c90 g       *ABS*	00000000 __ram_rodata_start
0401a464 g     O .bss	00000028 __malloc_current_mallinfo
04010000 g       *ABS*	00000000 __alt_mem_onchip_memory2_1
04014f70 g     F .text	00000060 altera_avalon_jtag_uart_read_fd
04016454 g     F .text	000000c4 alt_get_fd
04012530 g     F .text	00000054 _close_r
04016948 g     F .text	0000007c memcmp
04015030 g     F .text	00000050 altera_avalon_jtag_uart_close_fd
0401a58c g       *ABS*	00000000 __alt_stack_base
04015080 g     F .text	00000054 altera_avalon_jtag_uart_ioctl_fd
04013b90 g     F .text	00000154 __swsetup_r
04012a5c g     F .text	00000118 __sfp
040171a4 g     O .rwdata	00000408 __malloc_av_
04012ba8 g     F .text	00000004 __sinit_lock_release
040122fc g     F .text	00000054 __sread
04010a08 g     F .text	00000034 fread
040162cc g     F .text	00000108 alt_find_file
040160d8 g     F .text	000000a4 alt_dev_llist_insert
04014800 g     F .text	00000024 __malloc_lock
04014c90 g     F .text	000000b0 sbrk
040127a0 g     F .text	0000005c _fflush_r
040107b4 g     F .text	00000018 fopen
0401a420 g       *ABS*	00000000 __bss_start
04011e5c g     F .text	00000128 memset
0401063c g     F .text	00000084 main
0401a454 g     O .bss	00000004 alt_envp
0401a43c g     O .bss	00000004 __malloc_max_total_mem
04014fd0 g     F .text	00000060 altera_avalon_jtag_uart_write_fd
040107cc g     F .text	0000023c _fread_r
04012430 g     F .text	00000008 __sclose
04020000 g       *ABS*	00000000 __alt_heap_limit
04013dd4 g     F .text	00000014 fclose
04011508 g     F .text	0000080c _malloc_r
04018874 g     O .rwdata	00000004 alt_errno
04013150 g     F .text	000000c4 _fwalk
0401a428 g     O .bss	00000004 CHANNELS
04013de8 g     F .text	00000084 .hidden __divsi3
04010a3c g     F .text	00000124 _malloc_trim_r
04016c90 g       *ABS*	00000000 __CTOR_END__
04016c90 g       *ABS*	00000000 __flash_rodata_start
04016c90 g       *ABS*	00000000 __DTOR_LIST__
04014eb0 g     F .text	00000038 alt_irq_init
04014c0c g     F .text	00000084 alt_release_fd
040168fc g     F .text	00000014 atexit
040124d0 g     F .text	00000060 _write_r
04018854 g     O .rwdata	00000004 _impure_ptr
0401a44c g     O .bss	00000004 alt_argc
04012584 g     F .text	0000021c __sflush_r
040161dc g     F .text	00000060 _do_dtors
04010e70 g     F .text	00000004 _fseek_r
040120d4 g     F .text	000001d4 __srefill_r
04010020 g       .exceptions	00000000 alt_irq_entry
04012bc4 g     F .text	00000018 __fp_unlock_all
04018860 g     O .rwdata	00000008 alt_fs_list
04015c98 g     F .text	0000006c alt_hostfs_write
04010020 g       *ABS*	00000000 __ram_exceptions_start
00000000 g       *ABS*	00000000 __alt_mem_new_sdram_controller_0
040141f8 g     F .text	00000050 alt_ic_isr_register
040188d0 g       *ABS*	00000000 _edata
0401884c g     O .rwdata	00000004 FiltPtr
0401a58c g       *ABS*	00000000 _end
04010230 g       *ABS*	00000000 __ram_exceptions_end
040154a8 g     F .text	000000f0 altera_avalon_jtag_uart_ioctl
040142d0 g     F .text	0000008c alt_ic_irq_disable
04012358 g     F .text	0000007c __swrite
0401885c g     O .rwdata	00000004 __malloc_trim_threshold
04016910 g     F .text	00000038 exit
04013214 g     F .text	000000c4 _fwalk_reent
04013e6c g     F .text	00000074 .hidden __modsi3
04020000 g       *ABS*	00000000 __alt_data_end
04010020 g     F .exceptions	00000000 alt_exception
04012ba0 g     F .text	00000004 __sfp_lock_release
04018844 g     O .rwdata	00000004 PinPtr
040106c0 g     F .text	000000f4 _fopen_r
04016c5c g     F .text	00000034 _exit
0401026c g     F .text	00000150 timer_isr
04015f50 g     F .text	0000012c alt_alarm_start
0401134c g     F .text	000001bc __smakebuf_r
04012438 g     F .text	00000098 strlen
04014970 g     F .text	0000015c open
04016518 g     F .text	00000020 alt_icache_flush_all
04018878 g     O .rwdata	00000004 alt_priority_mask
04014248 g     F .text	00000088 alt_ic_irq_enable
040188c8 g     O .rwdata	00000008 alt_alarm_list
0401617c g     F .text	00000060 _do_ctors
0401a434 g     O .bss	00000001 sw_val
04014000 g     F .text	000000d8 close
040145e8 g     F .text	00000084 alt_load
04012ba4 g     F .text	00000004 __sinit_lock_acquire
04015d6c g     F .text	000001e4 alt_hostfs_fstat
0401883c g     O .rwdata	00000004 AudioPtr



Disassembly of section .entry:

04010000 <__reset>:
 * Jump to the _start entry point in the .text section if reset code
 * is allowed or if optimizing for RTL simulation.
 */
#if defined(ALT_ALLOW_CODE_AT_RESET) || defined(ALT_SIM_OPTIMIZE)
    /* Jump to the _start entry point in the .text section. */
    movhi r1, %hi(_start)
 4010000:	00410074 	movhi	at,1025
    ori r1, r1, %lo(_start)
 4010004:	08408c14 	ori	at,at,560
    jmp r1
 4010008:	0800683a 	jmp	at
	...

Disassembly of section .exceptions:

04010020 <alt_exception>:

#else /* ALT_EXCEPTION_STACK disabled */
        /* 
         * Reserve space on normal stack for registers about to be pushed.
         */
        addi  sp, sp, -76
 4010020:	deffed04 	addi	sp,sp,-76
         * documentation for details).
         *
         * Leave a gap in the stack frame at 4(sp) for the muldiv handler to
         * store zero into.
         */
        stw   ra,  0(sp)
 4010024:	dfc00015 	stw	ra,0(sp)
        stw   r1,   8(sp)
 4010028:	d8400215 	stw	at,8(sp)
        stw   r2,  12(sp)
 401002c:	d8800315 	stw	r2,12(sp)
        stw   r3,  16(sp)
 4010030:	d8c00415 	stw	r3,16(sp)
        stw   r4,  20(sp)
 4010034:	d9000515 	stw	r4,20(sp)
        stw   r5,  24(sp)
 4010038:	d9400615 	stw	r5,24(sp)
        stw   r6,  28(sp)
 401003c:	d9800715 	stw	r6,28(sp)
        stw   r7,  32(sp)
 4010040:	d9c00815 	stw	r7,32(sp)
        rdctl r5, estatus   /* Read early to avoid usage stall */
 4010044:	000b307a 	rdctl	r5,estatus
        stw   r8,  36(sp)
 4010048:	da000915 	stw	r8,36(sp)
        stw   r9,  40(sp)
 401004c:	da400a15 	stw	r9,40(sp)
        stw   r10, 44(sp)
 4010050:	da800b15 	stw	r10,44(sp)
        stw   r11, 48(sp)
 4010054:	dac00c15 	stw	r11,48(sp)
        stw   r12, 52(sp)
 4010058:	db000d15 	stw	r12,52(sp)
        stw   r13, 56(sp)
 401005c:	db400e15 	stw	r13,56(sp)
        stw   r14, 60(sp)
 4010060:	db800f15 	stw	r14,60(sp)
        stw   r15, 64(sp)
 4010064:	dbc01015 	stw	r15,64(sp)
        /*
         * ea-4 contains the address of the instruction being executed
         * when the exception occured. For interrupt exceptions, we will
         * will be re-issue the isntruction. Store it in 72(sp)
         */
        stw   r5,  68(sp)  /* estatus */
 4010068:	d9401115 	stw	r5,68(sp)
        addi  r15, ea, -4  /* instruction that caused exception */
 401006c:	ebffff04 	addi	r15,ea,-4
        stw   r15,  72(sp)
 4010070:	dbc01215 	stw	r15,72(sp)
#else
        /*
         * Test to see if the exception was a software exception or caused 
         * by an external interrupt, and vector accordingly.
         */
        rdctl r4, ipending
 4010074:	0009313a 	rdctl	r4,ipending
        andi  r2, r5, 1
 4010078:	2880004c 	andi	r2,r5,1
        beq   r2, zero, .Lnot_irq
 401007c:	10000326 	beq	r2,zero,401008c <alt_exception+0x6c>
        beq   r4, zero, .Lnot_irq
 4010080:	20000226 	beq	r4,zero,401008c <alt_exception+0x6c>
        /*
         * Now that all necessary registers have been preserved, call 
         * alt_irq_handler() to process the interrupts.
         */

        call alt_irq_handler
 4010084:	40100fc0 	call	40100fc <alt_irq_handler>

        .section .exceptions.irqreturn, "xa"

        br    .Lexception_exit
 4010088:	00000706 	br	40100a8 <alt_exception+0x88>
         * upon completion, so we write ea (address of instruction *after*
         * the one where the exception occured) into 72(sp). The actual
         * instruction that caused the exception is written in r2, which these
         * handlers will utilize.
         */
        stw ea, 72(sp) /* EA is PC+4 so will skip over instruction causing exception */
 401008c:	df401215 	stw	ea,72(sp)
.Lunknown_16bit:
        addi.n r4, r4, 2 /* Need PC+2 to skip over instruction causing exception */
        stw r4, 72(sp)

#else /* CDX is not Enabled and all instructions are 32bits */
        ldw r2, -4(ea) /* Instruction value that caused exception */
 4010090:	e8bfff17 	ldw	r2,-4(ea)
         * debugger is present) or go into an infinite loop since the
         * handling behavior is undefined; in that case we will not return here.
         */

        /* Load exception-causing address as first argument (r4) */
        addi   r4, ea, -4
 4010094:	e93fff04 	addi	r4,ea,-4

        /* Call the instruction-exception entry */
        call   alt_instruction_exception_entry
 4010098:	40101d00 	call	40101d0 <alt_instruction_exception_entry>
         * instruction
         *
         * Return code was 0: Skip. The instruction after the exception is
         * already stored in 72(sp).
         */
        bne   r2, r0, .Lexception_exit
 401009c:	1000021e 	bne	r2,zero,40100a8 <alt_exception+0x88>

        /*
         * Otherwise, modify 72(sp) to re-issue the instruction that caused the
         * exception.
         */
        addi  r15, ea, -4  /* instruction that caused exception */
 40100a0:	ebffff04 	addi	r15,ea,-4
        stw   r15,  72(sp)
 40100a4:	dbc01215 	stw	r15,72(sp)
        /* 
         * Restore the saved registers, so that all general purpose registers 
         * have been restored to their state at the time the interrupt occured.
         */

        ldw   r5,  68(sp)
 40100a8:	d9401117 	ldw	r5,68(sp)
        ldw   ea,  72(sp)  /* This becomes the PC once eret is executed */
 40100ac:	df401217 	ldw	ea,72(sp)
        ldw   ra,   0(sp)
 40100b0:	dfc00017 	ldw	ra,0(sp)

        wrctl estatus, r5
 40100b4:	2801707a 	wrctl	estatus,r5

        ldw   r1,   8(sp)
 40100b8:	d8400217 	ldw	at,8(sp)
        ldw   r2,  12(sp)
 40100bc:	d8800317 	ldw	r2,12(sp)
        ldw   r3,  16(sp)
 40100c0:	d8c00417 	ldw	r3,16(sp)
        ldw   r4,  20(sp)
 40100c4:	d9000517 	ldw	r4,20(sp)
        ldw   r5,  24(sp)
 40100c8:	d9400617 	ldw	r5,24(sp)
        ldw   r6,  28(sp)
 40100cc:	d9800717 	ldw	r6,28(sp)
        ldw   r7,  32(sp)
 40100d0:	d9c00817 	ldw	r7,32(sp)

#if defined(ALT_EXCEPTION_STACK) && defined(ALT_STACK_CHECK)
        ldw   et, %gprel(alt_exception_old_stack_limit)(gp)
#endif

        ldw   r8,  36(sp)
 40100d4:	da000917 	ldw	r8,36(sp)
        ldw   r9,  40(sp)
 40100d8:	da400a17 	ldw	r9,40(sp)
        ldw   r10, 44(sp)
 40100dc:	da800b17 	ldw	r10,44(sp)
        ldw   r11, 48(sp)
 40100e0:	dac00c17 	ldw	r11,48(sp)
        ldw   r12, 52(sp)
 40100e4:	db000d17 	ldw	r12,52(sp)
        ldw   r13, 56(sp)
 40100e8:	db400e17 	ldw	r13,56(sp)
        ldw   r14, 60(sp)
 40100ec:	db800f17 	ldw	r14,60(sp)
        ldw   r15, 64(sp)
 40100f0:	dbc01017 	ldw	r15,64(sp)
        stw   et, %gprel(alt_stack_limit_value)(gp)
        stw   zero, %gprel(alt_exception_old_stack_limit)(gp)
#endif /* ALT_STACK_CHECK */
        ldw   sp,  76(sp)
#else /* ALT_EXCEPTION_STACK disabled */
        addi  sp, sp, 76
 40100f4:	dec01304 	addi	sp,sp,76

        /*
         * Return to the interrupted instruction.
         */

        eret
 40100f8:	ef80083a 	eret

040100fc <alt_irq_handler>:
 * instruction is present if the macro ALT_CI_INTERRUPT_VECTOR defined.
 */

void alt_irq_handler (void) __attribute__ ((section (".exceptions")));
void alt_irq_handler (void)
{
 40100fc:	defff904 	addi	sp,sp,-28
 4010100:	dfc00615 	stw	ra,24(sp)
 4010104:	df000515 	stw	fp,20(sp)
 4010108:	df000504 	addi	fp,sp,20
  
  /*
   * Notify the operating system that we are at interrupt level.
   */ 
  
  ALT_OS_INT_ENTER();
 401010c:	0001883a 	nop
#ifndef NIOS2_EIC_PRESENT
static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_irq_pending (void)
{
  alt_u32 active;

  NIOS2_READ_IPENDING (active);
 4010110:	0005313a 	rdctl	r2,ipending
 4010114:	e0bffe15 	stw	r2,-8(fp)

  return active;
 4010118:	e0bffe17 	ldw	r2,-8(fp)
   * Consider the case where the high priority interupt is asserted during
   * the interrupt entry sequence for a lower priority interrupt to see why
   * this is the case.
   */

  active = alt_irq_pending ();
 401011c:	e0bffb15 	stw	r2,-20(fp)

  do
  {
    i = 0;
 4010120:	e03ffd15 	stw	zero,-12(fp)
    mask = 1;
 4010124:	00800044 	movi	r2,1
 4010128:	e0bffc15 	stw	r2,-16(fp)
     * called to clear the interrupt condition.
     */

    do
    {
      if (active & mask)
 401012c:	e0fffb17 	ldw	r3,-20(fp)
 4010130:	e0bffc17 	ldw	r2,-16(fp)
 4010134:	1884703a 	and	r2,r3,r2
 4010138:	10001426 	beq	r2,zero,401018c <alt_irq_handler+0x90>
      { 
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
        alt_irq[i].handler(alt_irq[i].context); 
 401013c:	008100b4 	movhi	r2,1026
 4010140:	10a92304 	addi	r2,r2,-23412
 4010144:	e0fffd17 	ldw	r3,-12(fp)
 4010148:	180690fa 	slli	r3,r3,3
 401014c:	10c5883a 	add	r2,r2,r3
 4010150:	10c00017 	ldw	r3,0(r2)
 4010154:	008100b4 	movhi	r2,1026
 4010158:	10a92304 	addi	r2,r2,-23412
 401015c:	e13ffd17 	ldw	r4,-12(fp)
 4010160:	200890fa 	slli	r4,r4,3
 4010164:	1105883a 	add	r2,r2,r4
 4010168:	10800104 	addi	r2,r2,4
 401016c:	10800017 	ldw	r2,0(r2)
 4010170:	1009883a 	mov	r4,r2
 4010174:	183ee83a 	callr	r3
#else
        alt_irq[i].handler(alt_irq[i].context, i); 
#endif
        break;
 4010178:	0001883a 	nop
#ifndef NIOS2_EIC_PRESENT
static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_irq_pending (void)
{
  alt_u32 active;

  NIOS2_READ_IPENDING (active);
 401017c:	0005313a 	rdctl	r2,ipending
 4010180:	e0bfff15 	stw	r2,-4(fp)

  return active;
 4010184:	e0bfff17 	ldw	r2,-4(fp)
 4010188:	00000706 	br	40101a8 <alt_irq_handler+0xac>
      }
      mask <<= 1;
 401018c:	e0bffc17 	ldw	r2,-16(fp)
 4010190:	1085883a 	add	r2,r2,r2
 4010194:	e0bffc15 	stw	r2,-16(fp)
      i++;
 4010198:	e0bffd17 	ldw	r2,-12(fp)
 401019c:	10800044 	addi	r2,r2,1
 40101a0:	e0bffd15 	stw	r2,-12(fp)

    } while (1);
 40101a4:	003fe106 	br	401012c <_gp+0xfffef8f0>

    active = alt_irq_pending ();
 40101a8:	e0bffb15 	stw	r2,-20(fp)
    
  } while (active);
 40101ac:	e0bffb17 	ldw	r2,-20(fp)
 40101b0:	103fdb1e 	bne	r2,zero,4010120 <_gp+0xfffef8e4>

  /*
   * Notify the operating system that interrupt processing is complete.
   */ 

  ALT_OS_INT_EXIT();
 40101b4:	0001883a 	nop
}
 40101b8:	0001883a 	nop
 40101bc:	e037883a 	mov	sp,fp
 40101c0:	dfc00117 	ldw	ra,4(sp)
 40101c4:	df000017 	ldw	fp,0(sp)
 40101c8:	dec00204 	addi	sp,sp,8
 40101cc:	f800283a 	ret

040101d0 <alt_instruction_exception_entry>:
 * that handler if it has been registered. Absent a handler, it will
 * break break or hang as discussed below.
 */
int 
alt_instruction_exception_entry (alt_u32 exception_pc)
{
 40101d0:	defffb04 	addi	sp,sp,-20
 40101d4:	dfc00415 	stw	ra,16(sp)
 40101d8:	df000315 	stw	fp,12(sp)
 40101dc:	df000304 	addi	fp,sp,12
 40101e0:	e13fff15 	stw	r4,-4(fp)
  cause = ( (cause & NIOS2_EXCEPTION_REG_CAUSE_MASK) >>
              NIOS2_EXCEPTION_REG_CAUSE_OFST );

  NIOS2_READ_BADADDR(badaddr);
#else
  cause = NIOS2_EXCEPTION_CAUSE_NOT_PRESENT;
 40101e4:	00bfffc4 	movi	r2,-1
 40101e8:	e0bffd15 	stw	r2,-12(fp)
  badaddr = 0;
 40101ec:	e03ffe15 	stw	zero,-8(fp)
#endif /* NIOS2_HAS_EXTRA_EXCEPTION_INFO */

  if(alt_instruction_exception_handler) {
 40101f0:	d0a70717 	ldw	r2,-25572(gp)
 40101f4:	10000726 	beq	r2,zero,4010214 <alt_instruction_exception_entry+0x44>
     * Call handler. Its return value indicates whether the exception-causing
     * instruction should be re-issued. The code that called us,
     * alt_eceptions_entry.S, will look at this value and adjust the ea
     * register as necessary
     */
    return alt_instruction_exception_handler(cause, exception_pc, badaddr);
 40101f8:	d0a70717 	ldw	r2,-25572(gp)
 40101fc:	e0fffd17 	ldw	r3,-12(fp)
 4010200:	e1bffe17 	ldw	r6,-8(fp)
 4010204:	e17fff17 	ldw	r5,-4(fp)
 4010208:	1809883a 	mov	r4,r3
 401020c:	103ee83a 	callr	r2
 4010210:	00000206 	br	401021c <alt_instruction_exception_entry+0x4c>
   *    (a peripheral which negates its interrupt output before its
   *    interrupt handler has been executed will cause spurious interrupts)
   */
  else {
#ifdef NIOS2_HAS_DEBUG_STUB
    NIOS2_BREAK();
 4010214:	003da03a 	break	0
      ;
#endif /* NIOS2_HAS_DEBUG_STUB */
  }

  /* We should not get here. Remove compiler warning. */
  return NIOS2_EXCEPTION_RETURN_REISSUE_INST;
 4010218:	0005883a 	mov	r2,zero
}
 401021c:	e037883a 	mov	sp,fp
 4010220:	dfc00117 	ldw	ra,4(sp)
 4010224:	df000017 	ldw	fp,0(sp)
 4010228:	dec00204 	addi	sp,sp,8
 401022c:	f800283a 	ret

Disassembly of section .text:

04010230 <_start>:

    /*
     * Now that the caches are initialized, set up the stack pointer and global pointer.
     * The values provided by the linker are assumed to be correctly aligned.
     */
    movhi sp, %hi(__alt_stack_pointer)
 4010230:	06c100b4 	movhi	sp,1026
    ori sp, sp, %lo(__alt_stack_pointer)
 4010234:	dec00014 	ori	sp,sp,0
    movhi gp, %hi(_gp)
 4010238:	068100b4 	movhi	gp,1026
    ori gp, gp, %lo(_gp)
 401023c:	d6820f14 	ori	gp,gp,2108
 */
#ifndef ALT_SIM_OPTIMIZE
    /* Log that the BSS is about to be cleared. */
    ALT_LOG_PUTS(alt_log_msg_bss)

    movhi r2, %hi(__bss_start)
 4010240:	00810074 	movhi	r2,1025
    ori r2, r2, %lo(__bss_start)
 4010244:	10a90814 	ori	r2,r2,42016

    movhi r3, %hi(__bss_end)
 4010248:	00c10074 	movhi	r3,1025
    ori r3, r3, %lo(__bss_end)
 401024c:	18e96314 	ori	r3,r3,42380

    beq r2, r3, 1f
 4010250:	10c00326 	beq	r2,r3,4010260 <_start+0x30>

0:
    stw zero, (r2)
 4010254:	10000015 	stw	zero,0(r2)
    addi r2, r2, 4
 4010258:	10800104 	addi	r2,r2,4
    bltu r2, r3, 0b
 401025c:	10fffd36 	bltu	r2,r3,4010254 <_gp+0xfffefa18>
     * section aren't defined until alt_load() has been called).
     */
    mov   et, zero
#endif

    call alt_load
 4010260:	40145e80 	call	40145e8 <alt_load>

    /* Log that alt_main is about to be called. */
    ALT_LOG_PUTS(alt_log_msg_alt_main)

    /* Call the C entry point. It should never return. */
    call alt_main
 4010264:	40147840 	call	4014784 <alt_main>

04010268 <alt_after_alt_main>:

    /* Wait in infinite loop in case alt_main does return. */
alt_after_alt_main:
    br alt_after_alt_main
 4010268:	003fff06 	br	4010268 <_gp+0xfffefa2c>

0401026c <timer_isr>:
// The timer interrupt is set for 20.83 us which is 1/48000.
// By setting the timer interrupt at the sampling rate, a new sample is never missed and the
// audio output fifo never gets overloaded.
// This is easier than using the interrupts provided with the audio core.
void timer_isr(void *context)
{
 401026c:	defffd04 	addi	sp,sp,-12
 4010270:	df000215 	stw	fp,8(sp)
 4010274:	df000204 	addi	fp,sp,8
 4010278:	e13fff15 	stw	r4,-4(fp)
	uint16 right_sample, left_sample;

	// clear timer interrupt
	*TimerPtr = 0;
 401027c:	d0a00117 	ldw	r2,-32764(gp)
 4010280:	10000015 	stw	zero,0(r2)

	if (TOGGLE == 0)
 4010284:	d0a6fc0b 	ldhu	r2,-25616(gp)
 4010288:	10bfffcc 	andi	r2,r2,65535
 401028c:	1000031e 	bne	r2,zero,401029c <timer_isr+0x30>
	{
		TOGGLE = 1;
 4010290:	00800044 	movi	r2,1
 4010294:	d0a6fc0d 	sth	r2,-25616(gp)
 4010298:	00000106 	br	40102a0 <timer_isr+0x34>
	}
	else
	{
		TOGGLE = 0;
 401029c:	d026fc0d 	sth	zero,-25616(gp)
	}
	*PinPtr = TOGGLE;
 40102a0:	d0a00217 	ldw	r2,-32760(gp)
 40102a4:	d0e6fc0b 	ldhu	r3,-25616(gp)
 40102a8:	18ffffcc 	andi	r3,r3,65535
 40102ac:	10c00015 	stw	r3,0(r2)

	if (SAMPLE_CNT < MAX_SAMPLES)
 40102b0:	d0e6fa17 	ldw	r3,-25624(gp)
 40102b4:	008000b4 	movhi	r2,2
 40102b8:	18803a2e 	bgeu	r3,r2,40103a4 <timer_isr+0x138>
	{
		left_sample = SdramPtr[SAMPLE_CNT++];	// read left side sample first
 40102bc:	d0e6fd17 	ldw	r3,-25612(gp)
 40102c0:	d0a6fa17 	ldw	r2,-25624(gp)
 40102c4:	11000044 	addi	r4,r2,1
 40102c8:	d126fa15 	stw	r4,-25624(gp)
 40102cc:	1085883a 	add	r2,r2,r2
 40102d0:	1885883a 	add	r2,r3,r2
 40102d4:	1080000b 	ldhu	r2,0(r2)
 40102d8:	e0bffe8d 	sth	r2,-6(fp)
		*FiltPtr = left_sample;					// send left side sample to filter
 40102dc:	d0a00417 	ldw	r2,-32752(gp)
 40102e0:	e0fffe8b 	ldhu	r3,-6(fp)
 40102e4:	10c0000d 	sth	r3,0(r2)

		if (CHANNELS == 2)	// stereo mode
 40102e8:	d0a6fb17 	ldw	r2,-25620(gp)
 40102ec:	10800098 	cmpnei	r2,r2,2
 40102f0:	10001d1e 	bne	r2,zero,4010368 <timer_isr+0xfc>
		{
			right_sample = SdramPtr[SAMPLE_CNT++];	// only read right sample if stereo mode
 40102f4:	d0e6fd17 	ldw	r3,-25612(gp)
 40102f8:	d0a6fa17 	ldw	r2,-25624(gp)
 40102fc:	11000044 	addi	r4,r2,1
 4010300:	d126fa15 	stw	r4,-25624(gp)
 4010304:	1085883a 	add	r2,r2,r2
 4010308:	1885883a 	add	r2,r3,r2
 401030c:	1080000b 	ldhu	r2,0(r2)
 4010310:	e0bffe0d 	sth	r2,-8(fp)
			*FiltPtr = right_sample;				// send right side sample to filter
 4010314:	d0a00417 	ldw	r2,-32752(gp)
 4010318:	e0fffe0b 	ldhu	r3,-8(fp)
 401031c:	10c0000d 	sth	r3,0(r2)

			if (sw_val)	// if either switch is active, read samples from filter
 4010320:	d0a6fe03 	ldbu	r2,-25608(gp)
 4010324:	10803fcc 	andi	r2,r2,255
 4010328:	10000626 	beq	r2,zero,4010344 <timer_isr+0xd8>
			{
				left_sample = *FiltPtr;
 401032c:	d0a00417 	ldw	r2,-32752(gp)
 4010330:	1080000b 	ldhu	r2,0(r2)
 4010334:	e0bffe8d 	sth	r2,-6(fp)
				right_sample = *FiltPtr;
 4010338:	d0a00417 	ldw	r2,-32752(gp)
 401033c:	1080000b 	ldhu	r2,0(r2)
 4010340:	e0bffe0d 	sth	r2,-8(fp)
			}
			AudioPtr[3] = right_sample;		// in stereo, output left and right samples to board lineout
 4010344:	d0a00017 	ldw	r2,-32768(gp)
 4010348:	10800304 	addi	r2,r2,12
 401034c:	e0fffe0b 	ldhu	r3,-8(fp)
 4010350:	10c00015 	stw	r3,0(r2)
			AudioPtr[2] = left_sample;
 4010354:	d0a00017 	ldw	r2,-32768(gp)
 4010358:	10800204 	addi	r2,r2,8
 401035c:	e0fffe8b 	ldhu	r3,-6(fp)
 4010360:	10c00015 	stw	r3,0(r2)
	else	// this will allow continuous looping of audio, comment this out to only play once
	{
		SAMPLE_CNT = 0;
	}

	return;
 4010364:	00001106 	br	40103ac <timer_isr+0x140>
			AudioPtr[3] = right_sample;		// in stereo, output left and right samples to board lineout
			AudioPtr[2] = left_sample;
		}
		else	// mono mode
		{
			if (sw_val)	// if either switch is active, read sample from filter
 4010368:	d0a6fe03 	ldbu	r2,-25608(gp)
 401036c:	10803fcc 	andi	r2,r2,255
 4010370:	10000326 	beq	r2,zero,4010380 <timer_isr+0x114>
			{
				left_sample = *FiltPtr;
 4010374:	d0a00417 	ldw	r2,-32752(gp)
 4010378:	1080000b 	ldhu	r2,0(r2)
 401037c:	e0bffe8d 	sth	r2,-6(fp)
			}
			AudioPtr[3] = left_sample;		// in mono, output same sample to both sides
 4010380:	d0a00017 	ldw	r2,-32768(gp)
 4010384:	10800304 	addi	r2,r2,12
 4010388:	e0fffe8b 	ldhu	r3,-6(fp)
 401038c:	10c00015 	stw	r3,0(r2)
			AudioPtr[2] = left_sample;
 4010390:	d0a00017 	ldw	r2,-32768(gp)
 4010394:	10800204 	addi	r2,r2,8
 4010398:	e0fffe8b 	ldhu	r3,-6(fp)
 401039c:	10c00015 	stw	r3,0(r2)
	else	// this will allow continuous looping of audio, comment this out to only play once
	{
		SAMPLE_CNT = 0;
	}

	return;
 40103a0:	00000206 	br	40103ac <timer_isr+0x140>
		}

	}
	else	// this will allow continuous looping of audio, comment this out to only play once
	{
		SAMPLE_CNT = 0;
 40103a4:	d026fa15 	stw	zero,-25624(gp)
	}

	return;
 40103a8:	0001883a 	nop
}
 40103ac:	e037883a 	mov	sp,fp
 40103b0:	df000017 	ldw	fp,0(sp)
 40103b4:	dec00104 	addi	sp,sp,4
 40103b8:	f800283a 	ret

040103bc <switches_isr>:
// This function triggers whenever any switch on the board goes low or high.
// If no switches are high, there is no filtering occurring.
// If SW0 is high, the low-pass filter should be enabled.
// If SW1 is high, the high-pass filter should be enabled.
void switches_isr(void *context)
{
 40103bc:	defffe04 	addi	sp,sp,-8
 40103c0:	df000115 	stw	fp,4(sp)
 40103c4:	df000104 	addi	fp,sp,4
 40103c8:	e13fff15 	stw	r4,-4(fp)
	sw_val = *SwPtr & 0x3;	// read sw1 and sw0 values (bitmask with 0b00000011)
 40103cc:	d0a00317 	ldw	r2,-32756(gp)
 40103d0:	10800017 	ldw	r2,0(r2)
 40103d4:	108000cc 	andi	r2,r2,3
 40103d8:	d0a6fe05 	stb	r2,-25608(gp)

	if (sw_val == 0b01)			// if sw0 enabled, set audio filter component to low-pass
 40103dc:	d0a6fe03 	ldbu	r2,-25608(gp)
 40103e0:	10803fcc 	andi	r2,r2,255
 40103e4:	10800058 	cmpnei	r2,r2,1
 40103e8:	1000041e 	bne	r2,zero,40103fc <switches_isr+0x40>
	{
		*(FiltPtr + 1) = 0;
 40103ec:	d0a00417 	ldw	r2,-32752(gp)
 40103f0:	10800084 	addi	r2,r2,2
 40103f4:	1000000d 	sth	zero,0(r2)
 40103f8:	00000806 	br	401041c <switches_isr+0x60>
	}
	else if (sw_val == 0b10)	// if sw1 enabled, set audio filter component to high-pass
 40103fc:	d0a6fe03 	ldbu	r2,-25608(gp)
 4010400:	10803fcc 	andi	r2,r2,255
 4010404:	10800098 	cmpnei	r2,r2,2
 4010408:	1000041e 	bne	r2,zero,401041c <switches_isr+0x60>
	{
		*(FiltPtr + 1) = 1;
 401040c:	d0a00417 	ldw	r2,-32752(gp)
 4010410:	10800084 	addi	r2,r2,2
 4010414:	00c00044 	movi	r3,1
 4010418:	10c0000d 	sth	r3,0(r2)
	}

	*(SwPtr + 3) = 0;	// clear interrupt (write any value to edgecapture register)
 401041c:	d0a00317 	ldw	r2,-32756(gp)
 4010420:	10800304 	addi	r2,r2,12
 4010424:	10000015 	stw	zero,0(r2)

	return;
 4010428:	0001883a 	nop
}
 401042c:	e037883a 	mov	sp,fp
 4010430:	df000017 	ldw	fp,0(sp)
 4010434:	dec00104 	addi	sp,sp,4
 4010438:	f800283a 	ret

0401043c <read_file>:

// this function reads a .wav file and stores the data in the SDRAM
// first it parses the header and stores that information in variables.
// Only files with 48K sample rates and 16 bit data will work with this program.
void read_file(void)
{
 401043c:	defff004 	addi	sp,sp,-64
 4010440:	dfc00f15 	stw	ra,60(sp)
 4010444:	df000e15 	stw	fp,56(sp)
 4010448:	df000e04 	addi	fp,sp,56
	uint8 ChunkID[4], Format[4], Subchunk1ID[4], Subchunk2ID[4];
	uint32 ChunkSize, Subchunk1Size, SampleRate, ByteRate, Subchunk2Size;
	uint16 AudioFormat, NumChannels, BlockAlign, BitsPerSample;
	uint16 Data;
	FILE* fp;
	uint32 i = 0;
 401044c:	e03ff215 	stw	zero,-56(fp)

	// start reading
	  fp = fopen("/mnt/host/audioTones.wav", "r");
 4010450:	01410074 	movhi	r5,1025
 4010454:	295b2404 	addi	r5,r5,27792
 4010458:	01010074 	movhi	r4,1025
 401045c:	211b2504 	addi	r4,r4,27796
 4010460:	40107b40 	call	40107b4 <fopen>
 4010464:	e0bff315 	stw	r2,-52(fp)

	  if(fp == NULL)
 4010468:	e0bff317 	ldw	r2,-52(fp)
 401046c:	1000041e 	bne	r2,zero,4010480 <read_file+0x44>
	  {
	    printf("error, no file open!\n");
 4010470:	01010074 	movhi	r4,1025
 4010474:	211b2c04 	addi	r4,r4,27824
 4010478:	40120a40 	call	40120a4 <puts>
	    	SdramPtr[i++] = Data;   // store in sdram.

	    }
	    printf("file read \n");	// let user know file was read
	  }
}
 401047c:	00006906 	br	4010624 <read_file+0x1e8>
	    printf("error, no file open!\n");
	  }

	  else
	  {
	    printf("file opened.\n");
 4010480:	01010074 	movhi	r4,1025
 4010484:	211b3204 	addi	r4,r4,27848
 4010488:	40120a40 	call	40120a4 <puts>
	    fread(ChunkID,1,4,fp);
 401048c:	e0bff404 	addi	r2,fp,-48
 4010490:	e1fff317 	ldw	r7,-52(fp)
 4010494:	01800104 	movi	r6,4
 4010498:	01400044 	movi	r5,1
 401049c:	1009883a 	mov	r4,r2
 40104a0:	4010a080 	call	4010a08 <fread>
	    fread(&ChunkSize,4,1,fp);
 40104a4:	e0bff804 	addi	r2,fp,-32
 40104a8:	e1fff317 	ldw	r7,-52(fp)
 40104ac:	01800044 	movi	r6,1
 40104b0:	01400104 	movi	r5,4
 40104b4:	1009883a 	mov	r4,r2
 40104b8:	4010a080 	call	4010a08 <fread>
	    fread(Format,1,4,fp);
 40104bc:	e0bff504 	addi	r2,fp,-44
 40104c0:	e1fff317 	ldw	r7,-52(fp)
 40104c4:	01800104 	movi	r6,4
 40104c8:	01400044 	movi	r5,1
 40104cc:	1009883a 	mov	r4,r2
 40104d0:	4010a080 	call	4010a08 <fread>
	    fread(Subchunk1ID,1,4,fp);
 40104d4:	e0bff604 	addi	r2,fp,-40
 40104d8:	e1fff317 	ldw	r7,-52(fp)
 40104dc:	01800104 	movi	r6,4
 40104e0:	01400044 	movi	r5,1
 40104e4:	1009883a 	mov	r4,r2
 40104e8:	4010a080 	call	4010a08 <fread>
	    fread(&Subchunk1Size,4,1,fp);
 40104ec:	e0bff904 	addi	r2,fp,-28
 40104f0:	e1fff317 	ldw	r7,-52(fp)
 40104f4:	01800044 	movi	r6,1
 40104f8:	01400104 	movi	r5,4
 40104fc:	1009883a 	mov	r4,r2
 4010500:	4010a080 	call	4010a08 <fread>
	    fread(&AudioFormat,2,1,fp);
 4010504:	e0bffd04 	addi	r2,fp,-12
 4010508:	e1fff317 	ldw	r7,-52(fp)
 401050c:	01800044 	movi	r6,1
 4010510:	01400084 	movi	r5,2
 4010514:	1009883a 	mov	r4,r2
 4010518:	4010a080 	call	4010a08 <fread>
	    fread(&NumChannels,2,1,fp);
 401051c:	e0bffd84 	addi	r2,fp,-10
 4010520:	e1fff317 	ldw	r7,-52(fp)
 4010524:	01800044 	movi	r6,1
 4010528:	01400084 	movi	r5,2
 401052c:	1009883a 	mov	r4,r2
 4010530:	4010a080 	call	4010a08 <fread>
	    fread(&SampleRate,4,1,fp);
 4010534:	e0bffa04 	addi	r2,fp,-24
 4010538:	e1fff317 	ldw	r7,-52(fp)
 401053c:	01800044 	movi	r6,1
 4010540:	01400104 	movi	r5,4
 4010544:	1009883a 	mov	r4,r2
 4010548:	4010a080 	call	4010a08 <fread>
	    fread(&ByteRate,4,1,fp);
 401054c:	e0bffb04 	addi	r2,fp,-20
 4010550:	e1fff317 	ldw	r7,-52(fp)
 4010554:	01800044 	movi	r6,1
 4010558:	01400104 	movi	r5,4
 401055c:	1009883a 	mov	r4,r2
 4010560:	4010a080 	call	4010a08 <fread>
	    fread(&BlockAlign,2,1,fp);
 4010564:	e0bffe04 	addi	r2,fp,-8
 4010568:	e1fff317 	ldw	r7,-52(fp)
 401056c:	01800044 	movi	r6,1
 4010570:	01400084 	movi	r5,2
 4010574:	1009883a 	mov	r4,r2
 4010578:	4010a080 	call	4010a08 <fread>
	    fread(&BitsPerSample,2,1,fp);
 401057c:	e0bffe84 	addi	r2,fp,-6
 4010580:	e1fff317 	ldw	r7,-52(fp)
 4010584:	01800044 	movi	r6,1
 4010588:	01400084 	movi	r5,2
 401058c:	1009883a 	mov	r4,r2
 4010590:	4010a080 	call	4010a08 <fread>
	    fread(&Subchunk2ID,1,4,fp);
 4010594:	e0bff704 	addi	r2,fp,-36
 4010598:	e1fff317 	ldw	r7,-52(fp)
 401059c:	01800104 	movi	r6,4
 40105a0:	01400044 	movi	r5,1
 40105a4:	1009883a 	mov	r4,r2
 40105a8:	4010a080 	call	4010a08 <fread>
	    fread(&Subchunk2Size,4,1,fp);
 40105ac:	e0bffc04 	addi	r2,fp,-16
 40105b0:	e1fff317 	ldw	r7,-52(fp)
 40105b4:	01800044 	movi	r6,1
 40105b8:	01400104 	movi	r5,4
 40105bc:	1009883a 	mov	r4,r2
 40105c0:	4010a080 	call	4010a08 <fread>

	    CHANNELS = NumChannels;
 40105c4:	e0bffd8b 	ldhu	r2,-10(fp)
 40105c8:	10bfffcc 	andi	r2,r2,65535
 40105cc:	d0a6fb15 	stw	r2,-25620(gp)

	    while (i < MAX_SAMPLES)
 40105d0:	00000e06 	br	401060c <read_file+0x1d0>
	    {

	    	fread(&Data, 2, 1, fp);	// read the file in one short int at a time
 40105d4:	e0bfff04 	addi	r2,fp,-4
 40105d8:	e1fff317 	ldw	r7,-52(fp)
 40105dc:	01800044 	movi	r6,1
 40105e0:	01400084 	movi	r5,2
 40105e4:	1009883a 	mov	r4,r2
 40105e8:	4010a080 	call	4010a08 <fread>
	    	SdramPtr[i++] = Data;   // store in sdram.
 40105ec:	d0e6fd17 	ldw	r3,-25612(gp)
 40105f0:	e0bff217 	ldw	r2,-56(fp)
 40105f4:	11000044 	addi	r4,r2,1
 40105f8:	e13ff215 	stw	r4,-56(fp)
 40105fc:	1085883a 	add	r2,r2,r2
 4010600:	1885883a 	add	r2,r3,r2
 4010604:	e0ffff0b 	ldhu	r3,-4(fp)
 4010608:	10c0000d 	sth	r3,0(r2)
	    fread(&Subchunk2ID,1,4,fp);
	    fread(&Subchunk2Size,4,1,fp);

	    CHANNELS = NumChannels;

	    while (i < MAX_SAMPLES)
 401060c:	e0fff217 	ldw	r3,-56(fp)
 4010610:	008000b4 	movhi	r2,2
 4010614:	18bfef36 	bltu	r3,r2,40105d4 <_gp+0xfffefd98>

	    	fread(&Data, 2, 1, fp);	// read the file in one short int at a time
	    	SdramPtr[i++] = Data;   // store in sdram.

	    }
	    printf("file read \n");	// let user know file was read
 4010618:	01010074 	movhi	r4,1025
 401061c:	211b3604 	addi	r4,r4,27864
 4010620:	40120a40 	call	40120a4 <puts>
	  }
}
 4010624:	0001883a 	nop
 4010628:	e037883a 	mov	sp,fp
 401062c:	dfc00117 	ldw	ra,4(sp)
 4010630:	df000017 	ldw	fp,0(sp)
 4010634:	dec00204 	addi	sp,sp,8
 4010638:	f800283a 	ret

0401063c <main>:


int main(void)
{
 401063c:	defffd04 	addi	sp,sp,-12
 4010640:	dfc00215 	stw	ra,8(sp)
 4010644:	df000115 	stw	fp,4(sp)
 4010648:	df000104 	addi	fp,sp,4
	// clear timer interrupt
	*TimerPtr = 0;
 401064c:	d0a00117 	ldw	r2,-32764(gp)
 4010650:	10000015 	stw	zero,0(r2)

	printf("ESD-I Audio Demo Program Running.\n");
 4010654:	01010074 	movhi	r4,1025
 4010658:	211b3904 	addi	r4,r4,27876
 401065c:	40120a40 	call	40120a4 <puts>

#if (FIRST_TIME)
	read_file();
 4010660:	401043c0 	call	401043c <read_file>

	// Register interrupts

	// Use legacy register because the audio core forces the system to legacy
	// alt_irq_register(TIMER_0_IRQ,0,timer_isr);
	alt_ic_isr_register(TIMER_0_IRQ_INTERRUPT_CONTROLLER_ID,TIMER_0_IRQ,timer_isr,0,0);
 4010664:	d8000015 	stw	zero,0(sp)
 4010668:	000f883a 	mov	r7,zero
 401066c:	01810074 	movhi	r6,1025
 4010670:	31809b04 	addi	r6,r6,620
 4010674:	000b883a 	mov	r5,zero
 4010678:	0009883a 	mov	r4,zero
 401067c:	40141f80 	call	40141f8 <alt_ic_isr_register>

	// set up interrupts for switches
	alt_ic_isr_register(SWITCHES_IRQ_INTERRUPT_CONTROLLER_ID,SWITCHES_IRQ,switches_isr,0,0);
 4010680:	d8000015 	stw	zero,0(sp)
 4010684:	000f883a 	mov	r7,zero
 4010688:	01810074 	movhi	r6,1025
 401068c:	3180ef04 	addi	r6,r6,956
 4010690:	01400044 	movi	r5,1
 4010694:	0009883a 	mov	r4,zero
 4010698:	40141f80 	call	40141f8 <alt_ic_isr_register>
	*(SwPtr + 2) = 0x00000003;	// enable interrupts on SW0 and SW1
 401069c:	d0a00317 	ldw	r2,-32756(gp)
 40106a0:	10800204 	addi	r2,r2,8
 40106a4:	00c000c4 	movi	r3,3
 40106a8:	10c00015 	stw	r3,0(r2)

	// initialize timer interrupt 48Khz
	TimerPtr[4] = 3;
 40106ac:	d0a00117 	ldw	r2,-32764(gp)
 40106b0:	10800404 	addi	r2,r2,16
 40106b4:	00c000c4 	movi	r3,3
 40106b8:	10c00015 	stw	r3,0(r2)


 while (1)
 {
 }
 40106bc:	003fff06 	br	40106bc <_gp+0xfffefe80>

040106c0 <_fopen_r>:
 40106c0:	defffa04 	addi	sp,sp,-24
 40106c4:	3005883a 	mov	r2,r6
 40106c8:	dcc00415 	stw	r19,16(sp)
 40106cc:	d80d883a 	mov	r6,sp
 40106d0:	2827883a 	mov	r19,r5
 40106d4:	100b883a 	mov	r5,r2
 40106d8:	dc800315 	stw	r18,12(sp)
 40106dc:	dfc00515 	stw	ra,20(sp)
 40106e0:	dc400215 	stw	r17,8(sp)
 40106e4:	dc000115 	stw	r16,4(sp)
 40106e8:	2025883a 	mov	r18,r4
 40106ec:	4012bdc0 	call	4012bdc <__sflags>
 40106f0:	10002726 	beq	r2,zero,4010790 <_fopen_r+0xd0>
 40106f4:	9009883a 	mov	r4,r18
 40106f8:	1023883a 	mov	r17,r2
 40106fc:	4012a5c0 	call	4012a5c <__sfp>
 4010700:	1021883a 	mov	r16,r2
 4010704:	10002226 	beq	r2,zero,4010790 <_fopen_r+0xd0>
 4010708:	d9800017 	ldw	r6,0(sp)
 401070c:	01c06d84 	movi	r7,438
 4010710:	980b883a 	mov	r5,r19
 4010714:	9009883a 	mov	r4,r18
 4010718:	4011f840 	call	4011f84 <_open_r>
 401071c:	10001916 	blt	r2,zero,4010784 <_fopen_r+0xc4>
 4010720:	8080038d 	sth	r2,14(r16)
 4010724:	00810074 	movhi	r2,1025
 4010728:	1088bf04 	addi	r2,r2,8956
 401072c:	80800815 	stw	r2,32(r16)
 4010730:	00810074 	movhi	r2,1025
 4010734:	1088d604 	addi	r2,r2,9048
 4010738:	80800915 	stw	r2,36(r16)
 401073c:	00810074 	movhi	r2,1025
 4010740:	1088f504 	addi	r2,r2,9172
 4010744:	80800a15 	stw	r2,40(r16)
 4010748:	00810074 	movhi	r2,1025
 401074c:	10890c04 	addi	r2,r2,9264
 4010750:	8440030d 	sth	r17,12(r16)
 4010754:	84000715 	stw	r16,28(r16)
 4010758:	80800b15 	stw	r2,44(r16)
 401075c:	8c40400c 	andi	r17,r17,256
 4010760:	88000d1e 	bne	r17,zero,4010798 <_fopen_r+0xd8>
 4010764:	8005883a 	mov	r2,r16
 4010768:	dfc00517 	ldw	ra,20(sp)
 401076c:	dcc00417 	ldw	r19,16(sp)
 4010770:	dc800317 	ldw	r18,12(sp)
 4010774:	dc400217 	ldw	r17,8(sp)
 4010778:	dc000117 	ldw	r16,4(sp)
 401077c:	dec00604 	addi	sp,sp,24
 4010780:	f800283a 	ret
 4010784:	4012b9c0 	call	4012b9c <__sfp_lock_acquire>
 4010788:	8000030d 	sth	zero,12(r16)
 401078c:	4012ba00 	call	4012ba0 <__sfp_lock_release>
 4010790:	0005883a 	mov	r2,zero
 4010794:	003ff406 	br	4010768 <_gp+0xfffeff2c>
 4010798:	01c00084 	movi	r7,2
 401079c:	000d883a 	mov	r6,zero
 40107a0:	800b883a 	mov	r5,r16
 40107a4:	9009883a 	mov	r4,r18
 40107a8:	4010e700 	call	4010e70 <_fseek_r>
 40107ac:	8005883a 	mov	r2,r16
 40107b0:	003fed06 	br	4010768 <_gp+0xfffeff2c>

040107b4 <fopen>:
 40107b4:	008100b4 	movhi	r2,1026
 40107b8:	10a21504 	addi	r2,r2,-30636
 40107bc:	280d883a 	mov	r6,r5
 40107c0:	200b883a 	mov	r5,r4
 40107c4:	11000017 	ldw	r4,0(r2)
 40107c8:	40106c01 	jmpi	40106c0 <_fopen_r>

040107cc <_fread_r>:
 40107cc:	defff404 	addi	sp,sp,-48
 40107d0:	dd000615 	stw	r20,24(sp)
 40107d4:	dcc00515 	stw	r19,20(sp)
 40107d8:	2029883a 	mov	r20,r4
 40107dc:	2827883a 	mov	r19,r5
 40107e0:	3809883a 	mov	r4,r7
 40107e4:	300b883a 	mov	r5,r6
 40107e8:	ddc00915 	stw	r23,36(sp)
 40107ec:	dd400715 	stw	r21,28(sp)
 40107f0:	dc000215 	stw	r16,8(sp)
 40107f4:	dfc00b15 	stw	ra,44(sp)
 40107f8:	df000a15 	stw	fp,40(sp)
 40107fc:	dd800815 	stw	r22,32(sp)
 4010800:	dc800415 	stw	r18,16(sp)
 4010804:	dc400315 	stw	r17,12(sp)
 4010808:	302f883a 	mov	r23,r6
 401080c:	382b883a 	mov	r21,r7
 4010810:	4013f9c0 	call	4013f9c <__mulsi3>
 4010814:	dc000c17 	ldw	r16,48(sp)
 4010818:	10003826 	beq	r2,zero,40108fc <_fread_r+0x130>
 401081c:	102d883a 	mov	r22,r2
 4010820:	a0000226 	beq	r20,zero,401082c <_fread_r+0x60>
 4010824:	a0800e17 	ldw	r2,56(r20)
 4010828:	10006e26 	beq	r2,zero,40109e4 <_fread_r+0x218>
 401082c:	8080030b 	ldhu	r2,12(r16)
 4010830:	10c8000c 	andi	r3,r2,8192
 4010834:	1800061e 	bne	r3,zero,4010850 <_fread_r+0x84>
 4010838:	81001917 	ldw	r4,100(r16)
 401083c:	00f7ffc4 	movi	r3,-8193
 4010840:	10880014 	ori	r2,r2,8192
 4010844:	20c6703a 	and	r3,r4,r3
 4010848:	8080030d 	sth	r2,12(r16)
 401084c:	80c01915 	stw	r3,100(r16)
 4010850:	84400117 	ldw	r17,4(r16)
 4010854:	88005f16 	blt	r17,zero,40109d4 <_fread_r+0x208>
 4010858:	8809883a 	mov	r4,r17
 401085c:	1080008c 	andi	r2,r2,2
 4010860:	1000281e 	bne	r2,zero,4010904 <_fread_r+0x138>
 4010864:	b025883a 	mov	r18,r22
 4010868:	00000b06 	br	4010898 <_fread_r+0xcc>
 401086c:	4011d140 	call	4011d14 <memcpy>
 4010870:	80800017 	ldw	r2,0(r16)
 4010874:	9c67883a 	add	r19,r19,r17
 4010878:	9465c83a 	sub	r18,r18,r17
 401087c:	1463883a 	add	r17,r2,r17
 4010880:	800b883a 	mov	r5,r16
 4010884:	a009883a 	mov	r4,r20
 4010888:	84400015 	stw	r17,0(r16)
 401088c:	40120d40 	call	40120d4 <__srefill_r>
 4010890:	10004c1e 	bne	r2,zero,40109c4 <_fread_r+0x1f8>
 4010894:	84400117 	ldw	r17,4(r16)
 4010898:	880d883a 	mov	r6,r17
 401089c:	9809883a 	mov	r4,r19
 40108a0:	81400017 	ldw	r5,0(r16)
 40108a4:	8cbff136 	bltu	r17,r18,401086c <_gp+0xffff0030>
 40108a8:	900d883a 	mov	r6,r18
 40108ac:	4011d140 	call	4011d14 <memcpy>
 40108b0:	80c00117 	ldw	r3,4(r16)
 40108b4:	81000017 	ldw	r4,0(r16)
 40108b8:	a805883a 	mov	r2,r21
 40108bc:	1c87c83a 	sub	r3,r3,r18
 40108c0:	24a5883a 	add	r18,r4,r18
 40108c4:	80c00115 	stw	r3,4(r16)
 40108c8:	84800015 	stw	r18,0(r16)
 40108cc:	dfc00b17 	ldw	ra,44(sp)
 40108d0:	df000a17 	ldw	fp,40(sp)
 40108d4:	ddc00917 	ldw	r23,36(sp)
 40108d8:	dd800817 	ldw	r22,32(sp)
 40108dc:	dd400717 	ldw	r21,28(sp)
 40108e0:	dd000617 	ldw	r20,24(sp)
 40108e4:	dcc00517 	ldw	r19,20(sp)
 40108e8:	dc800417 	ldw	r18,16(sp)
 40108ec:	dc400317 	ldw	r17,12(sp)
 40108f0:	dc000217 	ldw	r16,8(sp)
 40108f4:	dec00c04 	addi	sp,sp,48
 40108f8:	f800283a 	ret
 40108fc:	0005883a 	mov	r2,zero
 4010900:	003ff206 	br	40108cc <_gp+0xffff0090>
 4010904:	b007883a 	mov	r3,r22
 4010908:	2580012e 	bgeu	r4,r22,4010910 <_fread_r+0x144>
 401090c:	2007883a 	mov	r3,r4
 4010910:	81400017 	ldw	r5,0(r16)
 4010914:	180d883a 	mov	r6,r3
 4010918:	9809883a 	mov	r4,r19
 401091c:	d8c00115 	stw	r3,4(sp)
 4010920:	4011d140 	call	4011d14 <memcpy>
 4010924:	d8c00117 	ldw	r3,4(sp)
 4010928:	84400017 	ldw	r17,0(r16)
 401092c:	80800117 	ldw	r2,4(r16)
 4010930:	81400c17 	ldw	r5,48(r16)
 4010934:	88e3883a 	add	r17,r17,r3
 4010938:	10c5c83a 	sub	r2,r2,r3
 401093c:	84400015 	stw	r17,0(r16)
 4010940:	80800115 	stw	r2,4(r16)
 4010944:	b0e5c83a 	sub	r18,r22,r3
 4010948:	28002c26 	beq	r5,zero,40109fc <_fread_r+0x230>
 401094c:	90002c26 	beq	r18,zero,4010a00 <_fread_r+0x234>
 4010950:	80801004 	addi	r2,r16,64
 4010954:	28800526 	beq	r5,r2,401096c <_fread_r+0x1a0>
 4010958:	a009883a 	mov	r4,r20
 401095c:	d8c00115 	stw	r3,4(sp)
 4010960:	4010b600 	call	4010b60 <_free_r>
 4010964:	d8c00117 	ldw	r3,4(sp)
 4010968:	84400017 	ldw	r17,0(r16)
 401096c:	80000c15 	stw	zero,48(r16)
 4010970:	80800517 	ldw	r2,20(r16)
 4010974:	87000417 	ldw	fp,16(r16)
 4010978:	98e7883a 	add	r19,r19,r3
 401097c:	d8800015 	stw	r2,0(sp)
 4010980:	00000106 	br	4010988 <_fread_r+0x1bc>
 4010984:	90001e26 	beq	r18,zero,4010a00 <_fread_r+0x234>
 4010988:	84c00415 	stw	r19,16(r16)
 401098c:	84800515 	stw	r18,20(r16)
 4010990:	84c00015 	stw	r19,0(r16)
 4010994:	a009883a 	mov	r4,r20
 4010998:	800b883a 	mov	r5,r16
 401099c:	40120d40 	call	40120d4 <__srefill_r>
 40109a0:	d9000017 	ldw	r4,0(sp)
 40109a4:	80c00117 	ldw	r3,4(r16)
 40109a8:	87000415 	stw	fp,16(r16)
 40109ac:	81000515 	stw	r4,20(r16)
 40109b0:	84400015 	stw	r17,0(r16)
 40109b4:	80000115 	stw	zero,4(r16)
 40109b8:	90e5c83a 	sub	r18,r18,r3
 40109bc:	98e7883a 	add	r19,r19,r3
 40109c0:	103ff026 	beq	r2,zero,4010984 <_gp+0xffff0148>
 40109c4:	b80b883a 	mov	r5,r23
 40109c8:	b489c83a 	sub	r4,r22,r18
 40109cc:	4013ee00 	call	4013ee0 <__udivsi3>
 40109d0:	003fbe06 	br	40108cc <_gp+0xffff0090>
 40109d4:	80000115 	stw	zero,4(r16)
 40109d8:	0009883a 	mov	r4,zero
 40109dc:	0023883a 	mov	r17,zero
 40109e0:	003f9e06 	br	401085c <_gp+0xffff0020>
 40109e4:	a009883a 	mov	r4,r20
 40109e8:	4012b8c0 	call	4012b8c <__sinit>
 40109ec:	8080030b 	ldhu	r2,12(r16)
 40109f0:	10c8000c 	andi	r3,r2,8192
 40109f4:	183f961e 	bne	r3,zero,4010850 <_gp+0xffff0014>
 40109f8:	003f8f06 	br	4010838 <_gp+0xfffefffc>
 40109fc:	903fdc1e 	bne	r18,zero,4010970 <_gp+0xffff0134>
 4010a00:	a805883a 	mov	r2,r21
 4010a04:	003fb106 	br	40108cc <_gp+0xffff0090>

04010a08 <fread>:
 4010a08:	defffe04 	addi	sp,sp,-8
 4010a0c:	008100b4 	movhi	r2,1026
 4010a10:	d9c00015 	stw	r7,0(sp)
 4010a14:	10a21504 	addi	r2,r2,-30636
 4010a18:	300f883a 	mov	r7,r6
 4010a1c:	280d883a 	mov	r6,r5
 4010a20:	200b883a 	mov	r5,r4
 4010a24:	11000017 	ldw	r4,0(r2)
 4010a28:	dfc00115 	stw	ra,4(sp)
 4010a2c:	40107cc0 	call	40107cc <_fread_r>
 4010a30:	dfc00117 	ldw	ra,4(sp)
 4010a34:	dec00204 	addi	sp,sp,8
 4010a38:	f800283a 	ret

04010a3c <_malloc_trim_r>:
 4010a3c:	defffb04 	addi	sp,sp,-20
 4010a40:	dcc00315 	stw	r19,12(sp)
 4010a44:	04c10074 	movhi	r19,1025
 4010a48:	dc800215 	stw	r18,8(sp)
 4010a4c:	dc400115 	stw	r17,4(sp)
 4010a50:	dc000015 	stw	r16,0(sp)
 4010a54:	dfc00415 	stw	ra,16(sp)
 4010a58:	2821883a 	mov	r16,r5
 4010a5c:	9cdc6904 	addi	r19,r19,29092
 4010a60:	2025883a 	mov	r18,r4
 4010a64:	40148000 	call	4014800 <__malloc_lock>
 4010a68:	98800217 	ldw	r2,8(r19)
 4010a6c:	14400117 	ldw	r17,4(r2)
 4010a70:	00bfff04 	movi	r2,-4
 4010a74:	88a2703a 	and	r17,r17,r2
 4010a78:	8c21c83a 	sub	r16,r17,r16
 4010a7c:	8403fbc4 	addi	r16,r16,4079
 4010a80:	8020d33a 	srli	r16,r16,12
 4010a84:	0083ffc4 	movi	r2,4095
 4010a88:	843fffc4 	addi	r16,r16,-1
 4010a8c:	8020933a 	slli	r16,r16,12
 4010a90:	1400060e 	bge	r2,r16,4010aac <_malloc_trim_r+0x70>
 4010a94:	000b883a 	mov	r5,zero
 4010a98:	9009883a 	mov	r4,r18
 4010a9c:	40122a80 	call	40122a8 <_sbrk_r>
 4010aa0:	98c00217 	ldw	r3,8(r19)
 4010aa4:	1c47883a 	add	r3,r3,r17
 4010aa8:	10c00a26 	beq	r2,r3,4010ad4 <_malloc_trim_r+0x98>
 4010aac:	9009883a 	mov	r4,r18
 4010ab0:	40148240 	call	4014824 <__malloc_unlock>
 4010ab4:	0005883a 	mov	r2,zero
 4010ab8:	dfc00417 	ldw	ra,16(sp)
 4010abc:	dcc00317 	ldw	r19,12(sp)
 4010ac0:	dc800217 	ldw	r18,8(sp)
 4010ac4:	dc400117 	ldw	r17,4(sp)
 4010ac8:	dc000017 	ldw	r16,0(sp)
 4010acc:	dec00504 	addi	sp,sp,20
 4010ad0:	f800283a 	ret
 4010ad4:	040bc83a 	sub	r5,zero,r16
 4010ad8:	9009883a 	mov	r4,r18
 4010adc:	40122a80 	call	40122a8 <_sbrk_r>
 4010ae0:	00ffffc4 	movi	r3,-1
 4010ae4:	10c00d26 	beq	r2,r3,4010b1c <_malloc_trim_r+0xe0>
 4010ae8:	00c100b4 	movhi	r3,1026
 4010aec:	18e91904 	addi	r3,r3,-23452
 4010af0:	18800017 	ldw	r2,0(r3)
 4010af4:	99000217 	ldw	r4,8(r19)
 4010af8:	8c23c83a 	sub	r17,r17,r16
 4010afc:	8c400054 	ori	r17,r17,1
 4010b00:	1421c83a 	sub	r16,r2,r16
 4010b04:	24400115 	stw	r17,4(r4)
 4010b08:	9009883a 	mov	r4,r18
 4010b0c:	1c000015 	stw	r16,0(r3)
 4010b10:	40148240 	call	4014824 <__malloc_unlock>
 4010b14:	00800044 	movi	r2,1
 4010b18:	003fe706 	br	4010ab8 <_gp+0xffff027c>
 4010b1c:	000b883a 	mov	r5,zero
 4010b20:	9009883a 	mov	r4,r18
 4010b24:	40122a80 	call	40122a8 <_sbrk_r>
 4010b28:	99000217 	ldw	r4,8(r19)
 4010b2c:	014003c4 	movi	r5,15
 4010b30:	1107c83a 	sub	r3,r2,r4
 4010b34:	28ffdd0e 	bge	r5,r3,4010aac <_gp+0xffff0270>
 4010b38:	014100b4 	movhi	r5,1026
 4010b3c:	29621604 	addi	r5,r5,-30632
 4010b40:	29400017 	ldw	r5,0(r5)
 4010b44:	18c00054 	ori	r3,r3,1
 4010b48:	20c00115 	stw	r3,4(r4)
 4010b4c:	00c100b4 	movhi	r3,1026
 4010b50:	1145c83a 	sub	r2,r2,r5
 4010b54:	18e91904 	addi	r3,r3,-23452
 4010b58:	18800015 	stw	r2,0(r3)
 4010b5c:	003fd306 	br	4010aac <_gp+0xffff0270>

04010b60 <_free_r>:
 4010b60:	28004126 	beq	r5,zero,4010c68 <_free_r+0x108>
 4010b64:	defffd04 	addi	sp,sp,-12
 4010b68:	dc400115 	stw	r17,4(sp)
 4010b6c:	dc000015 	stw	r16,0(sp)
 4010b70:	2023883a 	mov	r17,r4
 4010b74:	2821883a 	mov	r16,r5
 4010b78:	dfc00215 	stw	ra,8(sp)
 4010b7c:	40148000 	call	4014800 <__malloc_lock>
 4010b80:	81ffff17 	ldw	r7,-4(r16)
 4010b84:	00bfff84 	movi	r2,-2
 4010b88:	01010074 	movhi	r4,1025
 4010b8c:	81bffe04 	addi	r6,r16,-8
 4010b90:	3884703a 	and	r2,r7,r2
 4010b94:	211c6904 	addi	r4,r4,29092
 4010b98:	308b883a 	add	r5,r6,r2
 4010b9c:	2a400117 	ldw	r9,4(r5)
 4010ba0:	22000217 	ldw	r8,8(r4)
 4010ba4:	00ffff04 	movi	r3,-4
 4010ba8:	48c6703a 	and	r3,r9,r3
 4010bac:	2a005726 	beq	r5,r8,4010d0c <_free_r+0x1ac>
 4010bb0:	28c00115 	stw	r3,4(r5)
 4010bb4:	39c0004c 	andi	r7,r7,1
 4010bb8:	3800091e 	bne	r7,zero,4010be0 <_free_r+0x80>
 4010bbc:	823ffe17 	ldw	r8,-8(r16)
 4010bc0:	22400204 	addi	r9,r4,8
 4010bc4:	320dc83a 	sub	r6,r6,r8
 4010bc8:	31c00217 	ldw	r7,8(r6)
 4010bcc:	1205883a 	add	r2,r2,r8
 4010bd0:	3a406526 	beq	r7,r9,4010d68 <_free_r+0x208>
 4010bd4:	32000317 	ldw	r8,12(r6)
 4010bd8:	3a000315 	stw	r8,12(r7)
 4010bdc:	41c00215 	stw	r7,8(r8)
 4010be0:	28cf883a 	add	r7,r5,r3
 4010be4:	39c00117 	ldw	r7,4(r7)
 4010be8:	39c0004c 	andi	r7,r7,1
 4010bec:	38003a26 	beq	r7,zero,4010cd8 <_free_r+0x178>
 4010bf0:	10c00054 	ori	r3,r2,1
 4010bf4:	30c00115 	stw	r3,4(r6)
 4010bf8:	3087883a 	add	r3,r6,r2
 4010bfc:	18800015 	stw	r2,0(r3)
 4010c00:	00c07fc4 	movi	r3,511
 4010c04:	18801936 	bltu	r3,r2,4010c6c <_free_r+0x10c>
 4010c08:	1004d0fa 	srli	r2,r2,3
 4010c0c:	01c00044 	movi	r7,1
 4010c10:	21400117 	ldw	r5,4(r4)
 4010c14:	10c00044 	addi	r3,r2,1
 4010c18:	18c7883a 	add	r3,r3,r3
 4010c1c:	1005d0ba 	srai	r2,r2,2
 4010c20:	18c7883a 	add	r3,r3,r3
 4010c24:	18c7883a 	add	r3,r3,r3
 4010c28:	1907883a 	add	r3,r3,r4
 4010c2c:	3884983a 	sll	r2,r7,r2
 4010c30:	19c00017 	ldw	r7,0(r3)
 4010c34:	1a3ffe04 	addi	r8,r3,-8
 4010c38:	1144b03a 	or	r2,r2,r5
 4010c3c:	32000315 	stw	r8,12(r6)
 4010c40:	31c00215 	stw	r7,8(r6)
 4010c44:	20800115 	stw	r2,4(r4)
 4010c48:	19800015 	stw	r6,0(r3)
 4010c4c:	39800315 	stw	r6,12(r7)
 4010c50:	8809883a 	mov	r4,r17
 4010c54:	dfc00217 	ldw	ra,8(sp)
 4010c58:	dc400117 	ldw	r17,4(sp)
 4010c5c:	dc000017 	ldw	r16,0(sp)
 4010c60:	dec00304 	addi	sp,sp,12
 4010c64:	40148241 	jmpi	4014824 <__malloc_unlock>
 4010c68:	f800283a 	ret
 4010c6c:	100ad27a 	srli	r5,r2,9
 4010c70:	00c00104 	movi	r3,4
 4010c74:	19404a36 	bltu	r3,r5,4010da0 <_free_r+0x240>
 4010c78:	100ad1ba 	srli	r5,r2,6
 4010c7c:	28c00e44 	addi	r3,r5,57
 4010c80:	18c7883a 	add	r3,r3,r3
 4010c84:	29400e04 	addi	r5,r5,56
 4010c88:	18c7883a 	add	r3,r3,r3
 4010c8c:	18c7883a 	add	r3,r3,r3
 4010c90:	1909883a 	add	r4,r3,r4
 4010c94:	20c00017 	ldw	r3,0(r4)
 4010c98:	01c10074 	movhi	r7,1025
 4010c9c:	213ffe04 	addi	r4,r4,-8
 4010ca0:	39dc6904 	addi	r7,r7,29092
 4010ca4:	20c04426 	beq	r4,r3,4010db8 <_free_r+0x258>
 4010ca8:	01ffff04 	movi	r7,-4
 4010cac:	19400117 	ldw	r5,4(r3)
 4010cb0:	29ca703a 	and	r5,r5,r7
 4010cb4:	1140022e 	bgeu	r2,r5,4010cc0 <_free_r+0x160>
 4010cb8:	18c00217 	ldw	r3,8(r3)
 4010cbc:	20fffb1e 	bne	r4,r3,4010cac <_gp+0xffff0470>
 4010cc0:	19000317 	ldw	r4,12(r3)
 4010cc4:	31000315 	stw	r4,12(r6)
 4010cc8:	30c00215 	stw	r3,8(r6)
 4010ccc:	21800215 	stw	r6,8(r4)
 4010cd0:	19800315 	stw	r6,12(r3)
 4010cd4:	003fde06 	br	4010c50 <_gp+0xffff0414>
 4010cd8:	29c00217 	ldw	r7,8(r5)
 4010cdc:	10c5883a 	add	r2,r2,r3
 4010ce0:	00c10074 	movhi	r3,1025
 4010ce4:	18dc6b04 	addi	r3,r3,29100
 4010ce8:	38c03b26 	beq	r7,r3,4010dd8 <_free_r+0x278>
 4010cec:	2a000317 	ldw	r8,12(r5)
 4010cf0:	11400054 	ori	r5,r2,1
 4010cf4:	3087883a 	add	r3,r6,r2
 4010cf8:	3a000315 	stw	r8,12(r7)
 4010cfc:	41c00215 	stw	r7,8(r8)
 4010d00:	31400115 	stw	r5,4(r6)
 4010d04:	18800015 	stw	r2,0(r3)
 4010d08:	003fbd06 	br	4010c00 <_gp+0xffff03c4>
 4010d0c:	39c0004c 	andi	r7,r7,1
 4010d10:	10c5883a 	add	r2,r2,r3
 4010d14:	3800071e 	bne	r7,zero,4010d34 <_free_r+0x1d4>
 4010d18:	81fffe17 	ldw	r7,-8(r16)
 4010d1c:	31cdc83a 	sub	r6,r6,r7
 4010d20:	30c00317 	ldw	r3,12(r6)
 4010d24:	31400217 	ldw	r5,8(r6)
 4010d28:	11c5883a 	add	r2,r2,r7
 4010d2c:	28c00315 	stw	r3,12(r5)
 4010d30:	19400215 	stw	r5,8(r3)
 4010d34:	10c00054 	ori	r3,r2,1
 4010d38:	30c00115 	stw	r3,4(r6)
 4010d3c:	00c100b4 	movhi	r3,1026
 4010d40:	18e21704 	addi	r3,r3,-30628
 4010d44:	18c00017 	ldw	r3,0(r3)
 4010d48:	21800215 	stw	r6,8(r4)
 4010d4c:	10ffc036 	bltu	r2,r3,4010c50 <_gp+0xffff0414>
 4010d50:	008100b4 	movhi	r2,1026
 4010d54:	10a91104 	addi	r2,r2,-23484
 4010d58:	11400017 	ldw	r5,0(r2)
 4010d5c:	8809883a 	mov	r4,r17
 4010d60:	4010a3c0 	call	4010a3c <_malloc_trim_r>
 4010d64:	003fba06 	br	4010c50 <_gp+0xffff0414>
 4010d68:	28c9883a 	add	r4,r5,r3
 4010d6c:	21000117 	ldw	r4,4(r4)
 4010d70:	2100004c 	andi	r4,r4,1
 4010d74:	2000391e 	bne	r4,zero,4010e5c <_free_r+0x2fc>
 4010d78:	29c00217 	ldw	r7,8(r5)
 4010d7c:	29000317 	ldw	r4,12(r5)
 4010d80:	1885883a 	add	r2,r3,r2
 4010d84:	10c00054 	ori	r3,r2,1
 4010d88:	39000315 	stw	r4,12(r7)
 4010d8c:	21c00215 	stw	r7,8(r4)
 4010d90:	30c00115 	stw	r3,4(r6)
 4010d94:	308d883a 	add	r6,r6,r2
 4010d98:	30800015 	stw	r2,0(r6)
 4010d9c:	003fac06 	br	4010c50 <_gp+0xffff0414>
 4010da0:	00c00504 	movi	r3,20
 4010da4:	19401536 	bltu	r3,r5,4010dfc <_free_r+0x29c>
 4010da8:	28c01704 	addi	r3,r5,92
 4010dac:	18c7883a 	add	r3,r3,r3
 4010db0:	294016c4 	addi	r5,r5,91
 4010db4:	003fb406 	br	4010c88 <_gp+0xffff044c>
 4010db8:	280bd0ba 	srai	r5,r5,2
 4010dbc:	00c00044 	movi	r3,1
 4010dc0:	38800117 	ldw	r2,4(r7)
 4010dc4:	194a983a 	sll	r5,r3,r5
 4010dc8:	2007883a 	mov	r3,r4
 4010dcc:	2884b03a 	or	r2,r5,r2
 4010dd0:	38800115 	stw	r2,4(r7)
 4010dd4:	003fbb06 	br	4010cc4 <_gp+0xffff0488>
 4010dd8:	21800515 	stw	r6,20(r4)
 4010ddc:	21800415 	stw	r6,16(r4)
 4010de0:	10c00054 	ori	r3,r2,1
 4010de4:	31c00315 	stw	r7,12(r6)
 4010de8:	31c00215 	stw	r7,8(r6)
 4010dec:	30c00115 	stw	r3,4(r6)
 4010df0:	308d883a 	add	r6,r6,r2
 4010df4:	30800015 	stw	r2,0(r6)
 4010df8:	003f9506 	br	4010c50 <_gp+0xffff0414>
 4010dfc:	00c01504 	movi	r3,84
 4010e00:	19400536 	bltu	r3,r5,4010e18 <_free_r+0x2b8>
 4010e04:	100ad33a 	srli	r5,r2,12
 4010e08:	28c01bc4 	addi	r3,r5,111
 4010e0c:	18c7883a 	add	r3,r3,r3
 4010e10:	29401b84 	addi	r5,r5,110
 4010e14:	003f9c06 	br	4010c88 <_gp+0xffff044c>
 4010e18:	00c05504 	movi	r3,340
 4010e1c:	19400536 	bltu	r3,r5,4010e34 <_free_r+0x2d4>
 4010e20:	100ad3fa 	srli	r5,r2,15
 4010e24:	28c01e04 	addi	r3,r5,120
 4010e28:	18c7883a 	add	r3,r3,r3
 4010e2c:	29401dc4 	addi	r5,r5,119
 4010e30:	003f9506 	br	4010c88 <_gp+0xffff044c>
 4010e34:	00c15504 	movi	r3,1364
 4010e38:	19400536 	bltu	r3,r5,4010e50 <_free_r+0x2f0>
 4010e3c:	100ad4ba 	srli	r5,r2,18
 4010e40:	28c01f44 	addi	r3,r5,125
 4010e44:	18c7883a 	add	r3,r3,r3
 4010e48:	29401f04 	addi	r5,r5,124
 4010e4c:	003f8e06 	br	4010c88 <_gp+0xffff044c>
 4010e50:	00c03f84 	movi	r3,254
 4010e54:	01401f84 	movi	r5,126
 4010e58:	003f8b06 	br	4010c88 <_gp+0xffff044c>
 4010e5c:	10c00054 	ori	r3,r2,1
 4010e60:	30c00115 	stw	r3,4(r6)
 4010e64:	308d883a 	add	r6,r6,r2
 4010e68:	30800015 	stw	r2,0(r6)
 4010e6c:	003f7806 	br	4010c50 <_gp+0xffff0414>

04010e70 <_fseek_r>:
 4010e70:	4010e901 	jmpi	4010e90 <_fseeko_r>

04010e74 <fseek>:
 4010e74:	008100b4 	movhi	r2,1026
 4010e78:	10a21504 	addi	r2,r2,-30636
 4010e7c:	300f883a 	mov	r7,r6
 4010e80:	280d883a 	mov	r6,r5
 4010e84:	200b883a 	mov	r5,r4
 4010e88:	11000017 	ldw	r4,0(r2)
 4010e8c:	4010e901 	jmpi	4010e90 <_fseeko_r>

04010e90 <_fseeko_r>:
 4010e90:	deffe804 	addi	sp,sp,-96
 4010e94:	dd401415 	stw	r21,80(sp)
 4010e98:	dc801115 	stw	r18,68(sp)
 4010e9c:	dc401015 	stw	r17,64(sp)
 4010ea0:	dc000f15 	stw	r16,60(sp)
 4010ea4:	dfc01715 	stw	ra,92(sp)
 4010ea8:	ddc01615 	stw	r23,88(sp)
 4010eac:	dd801515 	stw	r22,84(sp)
 4010eb0:	dd001315 	stw	r20,76(sp)
 4010eb4:	dcc01215 	stw	r19,72(sp)
 4010eb8:	2023883a 	mov	r17,r4
 4010ebc:	2821883a 	mov	r16,r5
 4010ec0:	302b883a 	mov	r21,r6
 4010ec4:	3825883a 	mov	r18,r7
 4010ec8:	20000226 	beq	r4,zero,4010ed4 <_fseeko_r+0x44>
 4010ecc:	20800e17 	ldw	r2,56(r4)
 4010ed0:	10005a26 	beq	r2,zero,401103c <_fseeko_r+0x1ac>
 4010ed4:	8080030b 	ldhu	r2,12(r16)
 4010ed8:	00c04204 	movi	r3,264
 4010edc:	1080420c 	andi	r2,r2,264
 4010ee0:	10c05b26 	beq	r2,r3,4011050 <_fseeko_r+0x1c0>
 4010ee4:	85000a17 	ldw	r20,40(r16)
 4010ee8:	a000f626 	beq	r20,zero,40112c4 <_fseeko_r+0x434>
 4010eec:	00800044 	movi	r2,1
 4010ef0:	90803e26 	beq	r18,r2,4010fec <_fseeko_r+0x15c>
 4010ef4:	00800084 	movi	r2,2
 4010ef8:	90801026 	beq	r18,r2,4010f3c <_fseeko_r+0xac>
 4010efc:	90000f26 	beq	r18,zero,4010f3c <_fseeko_r+0xac>
 4010f00:	00800584 	movi	r2,22
 4010f04:	88800015 	stw	r2,0(r17)
 4010f08:	04ffffc4 	movi	r19,-1
 4010f0c:	9805883a 	mov	r2,r19
 4010f10:	dfc01717 	ldw	ra,92(sp)
 4010f14:	ddc01617 	ldw	r23,88(sp)
 4010f18:	dd801517 	ldw	r22,84(sp)
 4010f1c:	dd401417 	ldw	r21,80(sp)
 4010f20:	dd001317 	ldw	r20,76(sp)
 4010f24:	dcc01217 	ldw	r19,72(sp)
 4010f28:	dc801117 	ldw	r18,68(sp)
 4010f2c:	dc401017 	ldw	r17,64(sp)
 4010f30:	dc000f17 	ldw	r16,60(sp)
 4010f34:	dec01804 	addi	sp,sp,96
 4010f38:	f800283a 	ret
 4010f3c:	80800417 	ldw	r2,16(r16)
 4010f40:	002f883a 	mov	r23,zero
 4010f44:	0027883a 	mov	r19,zero
 4010f48:	1000cb26 	beq	r2,zero,4011278 <_fseeko_r+0x3e8>
 4010f4c:	8080030b 	ldhu	r2,12(r16)
 4010f50:	10c2068c 	andi	r3,r2,2074
 4010f54:	1800071e 	bne	r3,zero,4010f74 <_fseeko_r+0xe4>
 4010f58:	10c1000c 	andi	r3,r2,1024
 4010f5c:	1800451e 	bne	r3,zero,4011074 <_fseeko_r+0x1e4>
 4010f60:	00c10074 	movhi	r3,1025
 4010f64:	18c8f504 	addi	r3,r3,9172
 4010f68:	a0c0b726 	beq	r20,r3,4011248 <_fseeko_r+0x3b8>
 4010f6c:	10820014 	ori	r2,r2,2048
 4010f70:	8080030d 	sth	r2,12(r16)
 4010f74:	800b883a 	mov	r5,r16
 4010f78:	8809883a 	mov	r4,r17
 4010f7c:	40127a00 	call	40127a0 <_fflush_r>
 4010f80:	1027883a 	mov	r19,r2
 4010f84:	103fe01e 	bne	r2,zero,4010f08 <_gp+0xffff06cc>
 4010f88:	81400717 	ldw	r5,28(r16)
 4010f8c:	900f883a 	mov	r7,r18
 4010f90:	a80d883a 	mov	r6,r21
 4010f94:	8809883a 	mov	r4,r17
 4010f98:	a03ee83a 	callr	r20
 4010f9c:	00ffffc4 	movi	r3,-1
 4010fa0:	10ffd926 	beq	r2,r3,4010f08 <_gp+0xffff06cc>
 4010fa4:	81400c17 	ldw	r5,48(r16)
 4010fa8:	28000526 	beq	r5,zero,4010fc0 <_fseeko_r+0x130>
 4010fac:	80801004 	addi	r2,r16,64
 4010fb0:	28800226 	beq	r5,r2,4010fbc <_fseeko_r+0x12c>
 4010fb4:	8809883a 	mov	r4,r17
 4010fb8:	4010b600 	call	4010b60 <_free_r>
 4010fbc:	80000c15 	stw	zero,48(r16)
 4010fc0:	8080030b 	ldhu	r2,12(r16)
 4010fc4:	80c00417 	ldw	r3,16(r16)
 4010fc8:	80000115 	stw	zero,4(r16)
 4010fcc:	10bdf7cc 	andi	r2,r2,63455
 4010fd0:	80c00015 	stw	r3,0(r16)
 4010fd4:	8080030d 	sth	r2,12(r16)
 4010fd8:	01800204 	movi	r6,8
 4010fdc:	000b883a 	mov	r5,zero
 4010fe0:	81001704 	addi	r4,r16,92
 4010fe4:	4011e5c0 	call	4011e5c <memset>
 4010fe8:	003fc806 	br	4010f0c <_gp+0xffff06d0>
 4010fec:	800b883a 	mov	r5,r16
 4010ff0:	8809883a 	mov	r4,r17
 4010ff4:	40127a00 	call	40127a0 <_fflush_r>
 4010ff8:	8080030b 	ldhu	r2,12(r16)
 4010ffc:	10c4000c 	andi	r3,r2,4096
 4011000:	18008726 	beq	r3,zero,4011220 <_fseeko_r+0x390>
 4011004:	84c01417 	ldw	r19,80(r16)
 4011008:	10c0010c 	andi	r3,r2,4
 401100c:	1800431e 	bne	r3,zero,401111c <_fseeko_r+0x28c>
 4011010:	1080020c 	andi	r2,r2,8
 4011014:	10008026 	beq	r2,zero,4011218 <_fseeko_r+0x388>
 4011018:	80c00017 	ldw	r3,0(r16)
 401101c:	80800417 	ldw	r2,16(r16)
 4011020:	18000226 	beq	r3,zero,401102c <_fseeko_r+0x19c>
 4011024:	1887c83a 	sub	r3,r3,r2
 4011028:	98e7883a 	add	r19,r19,r3
 401102c:	aceb883a 	add	r21,r21,r19
 4011030:	05c00044 	movi	r23,1
 4011034:	0025883a 	mov	r18,zero
 4011038:	003fc306 	br	4010f48 <_gp+0xffff070c>
 401103c:	4012b8c0 	call	4012b8c <__sinit>
 4011040:	8080030b 	ldhu	r2,12(r16)
 4011044:	00c04204 	movi	r3,264
 4011048:	1080420c 	andi	r2,r2,264
 401104c:	10ffa51e 	bne	r2,r3,4010ee4 <_gp+0xffff06a8>
 4011050:	800b883a 	mov	r5,r16
 4011054:	8809883a 	mov	r4,r17
 4011058:	40127a00 	call	40127a0 <_fflush_r>
 401105c:	003fa106 	br	4010ee4 <_gp+0xffff06a8>
 4011060:	8080030b 	ldhu	r2,12(r16)
 4011064:	00c10004 	movi	r3,1024
 4011068:	80c01315 	stw	r3,76(r16)
 401106c:	10c4b03a 	or	r2,r2,r3
 4011070:	8080030d 	sth	r2,12(r16)
 4011074:	9000311e 	bne	r18,zero,401113c <_fseeko_r+0x2ac>
 4011078:	a82d883a 	mov	r22,r21
 401107c:	b800371e 	bne	r23,zero,401115c <_fseeko_r+0x2cc>
 4011080:	8080030b 	ldhu	r2,12(r16)
 4011084:	1084000c 	andi	r2,r2,4096
 4011088:	10007f26 	beq	r2,zero,4011288 <_fseeko_r+0x3f8>
 401108c:	80801417 	ldw	r2,80(r16)
 4011090:	81800117 	ldw	r6,4(r16)
 4011094:	81400c17 	ldw	r5,48(r16)
 4011098:	11a7c83a 	sub	r19,r2,r6
 401109c:	28008226 	beq	r5,zero,40112a8 <_fseeko_r+0x418>
 40110a0:	81c00f17 	ldw	r7,60(r16)
 40110a4:	99e7c83a 	sub	r19,r19,r7
 40110a8:	81000e17 	ldw	r4,56(r16)
 40110ac:	80800417 	ldw	r2,16(r16)
 40110b0:	99a7883a 	add	r19,r19,r6
 40110b4:	2087c83a 	sub	r3,r4,r2
 40110b8:	98e7c83a 	sub	r19,r19,r3
 40110bc:	38c7883a 	add	r3,r7,r3
 40110c0:	b4c02b16 	blt	r22,r19,4011170 <_fseeko_r+0x2e0>
 40110c4:	98c9883a 	add	r4,r19,r3
 40110c8:	b100292e 	bgeu	r22,r4,4011170 <_fseeko_r+0x2e0>
 40110cc:	b4e7c83a 	sub	r19,r22,r19
 40110d0:	14c5883a 	add	r2,r2,r19
 40110d4:	1ce7c83a 	sub	r19,r3,r19
 40110d8:	80800015 	stw	r2,0(r16)
 40110dc:	84c00115 	stw	r19,4(r16)
 40110e0:	28000526 	beq	r5,zero,40110f8 <_fseeko_r+0x268>
 40110e4:	80801004 	addi	r2,r16,64
 40110e8:	28800226 	beq	r5,r2,40110f4 <_fseeko_r+0x264>
 40110ec:	8809883a 	mov	r4,r17
 40110f0:	4010b600 	call	4010b60 <_free_r>
 40110f4:	80000c15 	stw	zero,48(r16)
 40110f8:	8080030b 	ldhu	r2,12(r16)
 40110fc:	01800204 	movi	r6,8
 4011100:	000b883a 	mov	r5,zero
 4011104:	10bff7cc 	andi	r2,r2,65503
 4011108:	8080030d 	sth	r2,12(r16)
 401110c:	81001704 	addi	r4,r16,92
 4011110:	4011e5c0 	call	4011e5c <memset>
 4011114:	0027883a 	mov	r19,zero
 4011118:	003f7c06 	br	4010f0c <_gp+0xffff06d0>
 401111c:	80c00117 	ldw	r3,4(r16)
 4011120:	80800c17 	ldw	r2,48(r16)
 4011124:	98e7c83a 	sub	r19,r19,r3
 4011128:	10003b26 	beq	r2,zero,4011218 <_fseeko_r+0x388>
 401112c:	80c00f17 	ldw	r3,60(r16)
 4011130:	80800417 	ldw	r2,16(r16)
 4011134:	98e7c83a 	sub	r19,r19,r3
 4011138:	003fbc06 	br	401102c <_gp+0xffff07f0>
 401113c:	8140038f 	ldh	r5,14(r16)
 4011140:	d80d883a 	mov	r6,sp
 4011144:	8809883a 	mov	r4,r17
 4011148:	40112f00 	call	40112f0 <_fstat_r>
 401114c:	103f891e 	bne	r2,zero,4010f74 <_gp+0xffff0738>
 4011150:	dd800417 	ldw	r22,16(sp)
 4011154:	adad883a 	add	r22,r21,r22
 4011158:	b83fc926 	beq	r23,zero,4011080 <_gp+0xffff0844>
 401115c:	81400c17 	ldw	r5,48(r16)
 4011160:	81800117 	ldw	r6,4(r16)
 4011164:	28005026 	beq	r5,zero,40112a8 <_fseeko_r+0x418>
 4011168:	81c00f17 	ldw	r7,60(r16)
 401116c:	003fce06 	br	40110a8 <_gp+0xffff086c>
 4011170:	84c01317 	ldw	r19,76(r16)
 4011174:	81400717 	ldw	r5,28(r16)
 4011178:	000f883a 	mov	r7,zero
 401117c:	04e7c83a 	sub	r19,zero,r19
 4011180:	9da6703a 	and	r19,r19,r22
 4011184:	980d883a 	mov	r6,r19
 4011188:	8809883a 	mov	r4,r17
 401118c:	a03ee83a 	callr	r20
 4011190:	00ffffc4 	movi	r3,-1
 4011194:	10ff7726 	beq	r2,r3,4010f74 <_gp+0xffff0738>
 4011198:	80800417 	ldw	r2,16(r16)
 401119c:	81400c17 	ldw	r5,48(r16)
 40111a0:	80000115 	stw	zero,4(r16)
 40111a4:	80800015 	stw	r2,0(r16)
 40111a8:	28000526 	beq	r5,zero,40111c0 <_fseeko_r+0x330>
 40111ac:	80801004 	addi	r2,r16,64
 40111b0:	28800226 	beq	r5,r2,40111bc <_fseeko_r+0x32c>
 40111b4:	8809883a 	mov	r4,r17
 40111b8:	4010b600 	call	4010b60 <_free_r>
 40111bc:	80000c15 	stw	zero,48(r16)
 40111c0:	8080030b 	ldhu	r2,12(r16)
 40111c4:	b4e7c83a 	sub	r19,r22,r19
 40111c8:	10bff7cc 	andi	r2,r2,65503
 40111cc:	8080030d 	sth	r2,12(r16)
 40111d0:	98000b26 	beq	r19,zero,4011200 <_fseeko_r+0x370>
 40111d4:	800b883a 	mov	r5,r16
 40111d8:	8809883a 	mov	r4,r17
 40111dc:	40120d40 	call	40120d4 <__srefill_r>
 40111e0:	103f641e 	bne	r2,zero,4010f74 <_gp+0xffff0738>
 40111e4:	80800117 	ldw	r2,4(r16)
 40111e8:	14ff6236 	bltu	r2,r19,4010f74 <_gp+0xffff0738>
 40111ec:	80c00017 	ldw	r3,0(r16)
 40111f0:	14c5c83a 	sub	r2,r2,r19
 40111f4:	80800115 	stw	r2,4(r16)
 40111f8:	1ce7883a 	add	r19,r3,r19
 40111fc:	84c00015 	stw	r19,0(r16)
 4011200:	01800204 	movi	r6,8
 4011204:	000b883a 	mov	r5,zero
 4011208:	81001704 	addi	r4,r16,92
 401120c:	4011e5c0 	call	4011e5c <memset>
 4011210:	0027883a 	mov	r19,zero
 4011214:	003f3d06 	br	4010f0c <_gp+0xffff06d0>
 4011218:	80800417 	ldw	r2,16(r16)
 401121c:	003f8306 	br	401102c <_gp+0xffff07f0>
 4011220:	81400717 	ldw	r5,28(r16)
 4011224:	900f883a 	mov	r7,r18
 4011228:	000d883a 	mov	r6,zero
 401122c:	8809883a 	mov	r4,r17
 4011230:	a03ee83a 	callr	r20
 4011234:	1027883a 	mov	r19,r2
 4011238:	00bfffc4 	movi	r2,-1
 401123c:	98bf3226 	beq	r19,r2,4010f08 <_gp+0xffff06cc>
 4011240:	8080030b 	ldhu	r2,12(r16)
 4011244:	003f7006 	br	4011008 <_gp+0xffff07cc>
 4011248:	8140038f 	ldh	r5,14(r16)
 401124c:	283f4716 	blt	r5,zero,4010f6c <_gp+0xffff0730>
 4011250:	d80d883a 	mov	r6,sp
 4011254:	8809883a 	mov	r4,r17
 4011258:	40112f00 	call	40112f0 <_fstat_r>
 401125c:	1000041e 	bne	r2,zero,4011270 <_fseeko_r+0x3e0>
 4011260:	d8800117 	ldw	r2,4(sp)
 4011264:	00e00014 	movui	r3,32768
 4011268:	10bc000c 	andi	r2,r2,61440
 401126c:	10ff7c26 	beq	r2,r3,4011060 <_gp+0xffff0824>
 4011270:	8080030b 	ldhu	r2,12(r16)
 4011274:	003f3d06 	br	4010f6c <_gp+0xffff0730>
 4011278:	800b883a 	mov	r5,r16
 401127c:	8809883a 	mov	r4,r17
 4011280:	401134c0 	call	401134c <__smakebuf_r>
 4011284:	003f3106 	br	4010f4c <_gp+0xffff0710>
 4011288:	81400717 	ldw	r5,28(r16)
 401128c:	01c00044 	movi	r7,1
 4011290:	000d883a 	mov	r6,zero
 4011294:	8809883a 	mov	r4,r17
 4011298:	a03ee83a 	callr	r20
 401129c:	00ffffc4 	movi	r3,-1
 40112a0:	10ff7b1e 	bne	r2,r3,4011090 <_gp+0xffff0854>
 40112a4:	003f3306 	br	4010f74 <_gp+0xffff0738>
 40112a8:	80c00017 	ldw	r3,0(r16)
 40112ac:	80800417 	ldw	r2,16(r16)
 40112b0:	000b883a 	mov	r5,zero
 40112b4:	1887c83a 	sub	r3,r3,r2
 40112b8:	98e7c83a 	sub	r19,r19,r3
 40112bc:	30c7883a 	add	r3,r6,r3
 40112c0:	003f7f06 	br	40110c0 <_gp+0xffff0884>
 40112c4:	00800744 	movi	r2,29
 40112c8:	88800015 	stw	r2,0(r17)
 40112cc:	04ffffc4 	movi	r19,-1
 40112d0:	003f0e06 	br	4010f0c <_gp+0xffff06d0>

040112d4 <fseeko>:
 40112d4:	008100b4 	movhi	r2,1026
 40112d8:	10a21504 	addi	r2,r2,-30636
 40112dc:	300f883a 	mov	r7,r6
 40112e0:	280d883a 	mov	r6,r5
 40112e4:	200b883a 	mov	r5,r4
 40112e8:	11000017 	ldw	r4,0(r2)
 40112ec:	4010e901 	jmpi	4010e90 <_fseeko_r>

040112f0 <_fstat_r>:
 40112f0:	defffd04 	addi	sp,sp,-12
 40112f4:	2805883a 	mov	r2,r5
 40112f8:	dc000015 	stw	r16,0(sp)
 40112fc:	040100b4 	movhi	r16,1026
 4011300:	dc400115 	stw	r17,4(sp)
 4011304:	84290e04 	addi	r16,r16,-23496
 4011308:	2023883a 	mov	r17,r4
 401130c:	300b883a 	mov	r5,r6
 4011310:	1009883a 	mov	r4,r2
 4011314:	dfc00215 	stw	ra,8(sp)
 4011318:	80000015 	stw	zero,0(r16)
 401131c:	40141400 	call	4014140 <fstat>
 4011320:	00ffffc4 	movi	r3,-1
 4011324:	10c00526 	beq	r2,r3,401133c <_fstat_r+0x4c>
 4011328:	dfc00217 	ldw	ra,8(sp)
 401132c:	dc400117 	ldw	r17,4(sp)
 4011330:	dc000017 	ldw	r16,0(sp)
 4011334:	dec00304 	addi	sp,sp,12
 4011338:	f800283a 	ret
 401133c:	80c00017 	ldw	r3,0(r16)
 4011340:	183ff926 	beq	r3,zero,4011328 <_gp+0xffff0aec>
 4011344:	88c00015 	stw	r3,0(r17)
 4011348:	003ff706 	br	4011328 <_gp+0xffff0aec>

0401134c <__smakebuf_r>:
 401134c:	2880030b 	ldhu	r2,12(r5)
 4011350:	10c0008c 	andi	r3,r2,2
 4011354:	1800411e 	bne	r3,zero,401145c <__smakebuf_r+0x110>
 4011358:	deffec04 	addi	sp,sp,-80
 401135c:	dc000f15 	stw	r16,60(sp)
 4011360:	2821883a 	mov	r16,r5
 4011364:	2940038f 	ldh	r5,14(r5)
 4011368:	dc401015 	stw	r17,64(sp)
 401136c:	dfc01315 	stw	ra,76(sp)
 4011370:	dcc01215 	stw	r19,72(sp)
 4011374:	dc801115 	stw	r18,68(sp)
 4011378:	2023883a 	mov	r17,r4
 401137c:	28001c16 	blt	r5,zero,40113f0 <__smakebuf_r+0xa4>
 4011380:	d80d883a 	mov	r6,sp
 4011384:	40112f00 	call	40112f0 <_fstat_r>
 4011388:	10001816 	blt	r2,zero,40113ec <__smakebuf_r+0xa0>
 401138c:	d8800117 	ldw	r2,4(sp)
 4011390:	00e00014 	movui	r3,32768
 4011394:	10bc000c 	andi	r2,r2,61440
 4011398:	14c80020 	cmpeqi	r19,r2,8192
 401139c:	10c03726 	beq	r2,r3,401147c <__smakebuf_r+0x130>
 40113a0:	80c0030b 	ldhu	r3,12(r16)
 40113a4:	18c20014 	ori	r3,r3,2048
 40113a8:	80c0030d 	sth	r3,12(r16)
 40113ac:	00c80004 	movi	r3,8192
 40113b0:	10c0521e 	bne	r2,r3,40114fc <__smakebuf_r+0x1b0>
 40113b4:	8140038f 	ldh	r5,14(r16)
 40113b8:	8809883a 	mov	r4,r17
 40113bc:	40132d80 	call	40132d8 <_isatty_r>
 40113c0:	10004c26 	beq	r2,zero,40114f4 <__smakebuf_r+0x1a8>
 40113c4:	8080030b 	ldhu	r2,12(r16)
 40113c8:	80c010c4 	addi	r3,r16,67
 40113cc:	80c00015 	stw	r3,0(r16)
 40113d0:	10800054 	ori	r2,r2,1
 40113d4:	8080030d 	sth	r2,12(r16)
 40113d8:	00800044 	movi	r2,1
 40113dc:	80c00415 	stw	r3,16(r16)
 40113e0:	80800515 	stw	r2,20(r16)
 40113e4:	04810004 	movi	r18,1024
 40113e8:	00000706 	br	4011408 <__smakebuf_r+0xbc>
 40113ec:	8080030b 	ldhu	r2,12(r16)
 40113f0:	10c0200c 	andi	r3,r2,128
 40113f4:	18001f1e 	bne	r3,zero,4011474 <__smakebuf_r+0x128>
 40113f8:	04810004 	movi	r18,1024
 40113fc:	10820014 	ori	r2,r2,2048
 4011400:	8080030d 	sth	r2,12(r16)
 4011404:	0027883a 	mov	r19,zero
 4011408:	900b883a 	mov	r5,r18
 401140c:	8809883a 	mov	r4,r17
 4011410:	40115080 	call	4011508 <_malloc_r>
 4011414:	10002c26 	beq	r2,zero,40114c8 <__smakebuf_r+0x17c>
 4011418:	80c0030b 	ldhu	r3,12(r16)
 401141c:	01010074 	movhi	r4,1025
 4011420:	210a0d04 	addi	r4,r4,10292
 4011424:	89000f15 	stw	r4,60(r17)
 4011428:	18c02014 	ori	r3,r3,128
 401142c:	80c0030d 	sth	r3,12(r16)
 4011430:	80800015 	stw	r2,0(r16)
 4011434:	80800415 	stw	r2,16(r16)
 4011438:	84800515 	stw	r18,20(r16)
 401143c:	98001a1e 	bne	r19,zero,40114a8 <__smakebuf_r+0x15c>
 4011440:	dfc01317 	ldw	ra,76(sp)
 4011444:	dcc01217 	ldw	r19,72(sp)
 4011448:	dc801117 	ldw	r18,68(sp)
 401144c:	dc401017 	ldw	r17,64(sp)
 4011450:	dc000f17 	ldw	r16,60(sp)
 4011454:	dec01404 	addi	sp,sp,80
 4011458:	f800283a 	ret
 401145c:	288010c4 	addi	r2,r5,67
 4011460:	28800015 	stw	r2,0(r5)
 4011464:	28800415 	stw	r2,16(r5)
 4011468:	00800044 	movi	r2,1
 401146c:	28800515 	stw	r2,20(r5)
 4011470:	f800283a 	ret
 4011474:	04801004 	movi	r18,64
 4011478:	003fe006 	br	40113fc <_gp+0xffff0bc0>
 401147c:	81000a17 	ldw	r4,40(r16)
 4011480:	00c10074 	movhi	r3,1025
 4011484:	18c8f504 	addi	r3,r3,9172
 4011488:	20ffc51e 	bne	r4,r3,40113a0 <_gp+0xffff0b64>
 401148c:	8080030b 	ldhu	r2,12(r16)
 4011490:	04810004 	movi	r18,1024
 4011494:	84801315 	stw	r18,76(r16)
 4011498:	1484b03a 	or	r2,r2,r18
 401149c:	8080030d 	sth	r2,12(r16)
 40114a0:	0027883a 	mov	r19,zero
 40114a4:	003fd806 	br	4011408 <_gp+0xffff0bcc>
 40114a8:	8140038f 	ldh	r5,14(r16)
 40114ac:	8809883a 	mov	r4,r17
 40114b0:	40132d80 	call	40132d8 <_isatty_r>
 40114b4:	103fe226 	beq	r2,zero,4011440 <_gp+0xffff0c04>
 40114b8:	8080030b 	ldhu	r2,12(r16)
 40114bc:	10800054 	ori	r2,r2,1
 40114c0:	8080030d 	sth	r2,12(r16)
 40114c4:	003fde06 	br	4011440 <_gp+0xffff0c04>
 40114c8:	8080030b 	ldhu	r2,12(r16)
 40114cc:	10c0800c 	andi	r3,r2,512
 40114d0:	183fdb1e 	bne	r3,zero,4011440 <_gp+0xffff0c04>
 40114d4:	10800094 	ori	r2,r2,2
 40114d8:	80c010c4 	addi	r3,r16,67
 40114dc:	8080030d 	sth	r2,12(r16)
 40114e0:	00800044 	movi	r2,1
 40114e4:	80c00015 	stw	r3,0(r16)
 40114e8:	80c00415 	stw	r3,16(r16)
 40114ec:	80800515 	stw	r2,20(r16)
 40114f0:	003fd306 	br	4011440 <_gp+0xffff0c04>
 40114f4:	04810004 	movi	r18,1024
 40114f8:	003fc306 	br	4011408 <_gp+0xffff0bcc>
 40114fc:	0027883a 	mov	r19,zero
 4011500:	04810004 	movi	r18,1024
 4011504:	003fc006 	br	4011408 <_gp+0xffff0bcc>

04011508 <_malloc_r>:
 4011508:	defff504 	addi	sp,sp,-44
 401150c:	dc800315 	stw	r18,12(sp)
 4011510:	dfc00a15 	stw	ra,40(sp)
 4011514:	df000915 	stw	fp,36(sp)
 4011518:	ddc00815 	stw	r23,32(sp)
 401151c:	dd800715 	stw	r22,28(sp)
 4011520:	dd400615 	stw	r21,24(sp)
 4011524:	dd000515 	stw	r20,20(sp)
 4011528:	dcc00415 	stw	r19,16(sp)
 401152c:	dc400215 	stw	r17,8(sp)
 4011530:	dc000115 	stw	r16,4(sp)
 4011534:	288002c4 	addi	r2,r5,11
 4011538:	00c00584 	movi	r3,22
 401153c:	2025883a 	mov	r18,r4
 4011540:	18807f2e 	bgeu	r3,r2,4011740 <_malloc_r+0x238>
 4011544:	047ffe04 	movi	r17,-8
 4011548:	1462703a 	and	r17,r2,r17
 401154c:	8800a316 	blt	r17,zero,40117dc <_malloc_r+0x2d4>
 4011550:	8940a236 	bltu	r17,r5,40117dc <_malloc_r+0x2d4>
 4011554:	40148000 	call	4014800 <__malloc_lock>
 4011558:	00807dc4 	movi	r2,503
 401155c:	1441e92e 	bgeu	r2,r17,4011d04 <_malloc_r+0x7fc>
 4011560:	8804d27a 	srli	r2,r17,9
 4011564:	1000a126 	beq	r2,zero,40117ec <_malloc_r+0x2e4>
 4011568:	00c00104 	movi	r3,4
 401156c:	18811e36 	bltu	r3,r2,40119e8 <_malloc_r+0x4e0>
 4011570:	8804d1ba 	srli	r2,r17,6
 4011574:	12000e44 	addi	r8,r2,57
 4011578:	11c00e04 	addi	r7,r2,56
 401157c:	4209883a 	add	r4,r8,r8
 4011580:	04c10074 	movhi	r19,1025
 4011584:	2109883a 	add	r4,r4,r4
 4011588:	9cdc6904 	addi	r19,r19,29092
 401158c:	2109883a 	add	r4,r4,r4
 4011590:	9909883a 	add	r4,r19,r4
 4011594:	24000117 	ldw	r16,4(r4)
 4011598:	213ffe04 	addi	r4,r4,-8
 401159c:	24009726 	beq	r4,r16,40117fc <_malloc_r+0x2f4>
 40115a0:	80800117 	ldw	r2,4(r16)
 40115a4:	01bfff04 	movi	r6,-4
 40115a8:	014003c4 	movi	r5,15
 40115ac:	1184703a 	and	r2,r2,r6
 40115b0:	1447c83a 	sub	r3,r2,r17
 40115b4:	28c00716 	blt	r5,r3,40115d4 <_malloc_r+0xcc>
 40115b8:	1800920e 	bge	r3,zero,4011804 <_malloc_r+0x2fc>
 40115bc:	84000317 	ldw	r16,12(r16)
 40115c0:	24008e26 	beq	r4,r16,40117fc <_malloc_r+0x2f4>
 40115c4:	80800117 	ldw	r2,4(r16)
 40115c8:	1184703a 	and	r2,r2,r6
 40115cc:	1447c83a 	sub	r3,r2,r17
 40115d0:	28fff90e 	bge	r5,r3,40115b8 <_gp+0xffff0d7c>
 40115d4:	3809883a 	mov	r4,r7
 40115d8:	01810074 	movhi	r6,1025
 40115dc:	9c000417 	ldw	r16,16(r19)
 40115e0:	319c6904 	addi	r6,r6,29092
 40115e4:	32000204 	addi	r8,r6,8
 40115e8:	82013426 	beq	r16,r8,4011abc <_malloc_r+0x5b4>
 40115ec:	80c00117 	ldw	r3,4(r16)
 40115f0:	00bfff04 	movi	r2,-4
 40115f4:	188e703a 	and	r7,r3,r2
 40115f8:	3c45c83a 	sub	r2,r7,r17
 40115fc:	00c003c4 	movi	r3,15
 4011600:	18811f16 	blt	r3,r2,4011a80 <_malloc_r+0x578>
 4011604:	32000515 	stw	r8,20(r6)
 4011608:	32000415 	stw	r8,16(r6)
 401160c:	10007f0e 	bge	r2,zero,401180c <_malloc_r+0x304>
 4011610:	00807fc4 	movi	r2,511
 4011614:	11c0fd36 	bltu	r2,r7,4011a0c <_malloc_r+0x504>
 4011618:	3806d0fa 	srli	r3,r7,3
 401161c:	01c00044 	movi	r7,1
 4011620:	30800117 	ldw	r2,4(r6)
 4011624:	19400044 	addi	r5,r3,1
 4011628:	294b883a 	add	r5,r5,r5
 401162c:	1807d0ba 	srai	r3,r3,2
 4011630:	294b883a 	add	r5,r5,r5
 4011634:	294b883a 	add	r5,r5,r5
 4011638:	298b883a 	add	r5,r5,r6
 401163c:	38c6983a 	sll	r3,r7,r3
 4011640:	29c00017 	ldw	r7,0(r5)
 4011644:	2a7ffe04 	addi	r9,r5,-8
 4011648:	1886b03a 	or	r3,r3,r2
 401164c:	82400315 	stw	r9,12(r16)
 4011650:	81c00215 	stw	r7,8(r16)
 4011654:	30c00115 	stw	r3,4(r6)
 4011658:	2c000015 	stw	r16,0(r5)
 401165c:	3c000315 	stw	r16,12(r7)
 4011660:	2005d0ba 	srai	r2,r4,2
 4011664:	01400044 	movi	r5,1
 4011668:	288a983a 	sll	r5,r5,r2
 401166c:	19406f36 	bltu	r3,r5,401182c <_malloc_r+0x324>
 4011670:	28c4703a 	and	r2,r5,r3
 4011674:	10000a1e 	bne	r2,zero,40116a0 <_malloc_r+0x198>
 4011678:	00bfff04 	movi	r2,-4
 401167c:	294b883a 	add	r5,r5,r5
 4011680:	2088703a 	and	r4,r4,r2
 4011684:	28c4703a 	and	r2,r5,r3
 4011688:	21000104 	addi	r4,r4,4
 401168c:	1000041e 	bne	r2,zero,40116a0 <_malloc_r+0x198>
 4011690:	294b883a 	add	r5,r5,r5
 4011694:	28c4703a 	and	r2,r5,r3
 4011698:	21000104 	addi	r4,r4,4
 401169c:	103ffc26 	beq	r2,zero,4011690 <_gp+0xffff0e54>
 40116a0:	02bfff04 	movi	r10,-4
 40116a4:	024003c4 	movi	r9,15
 40116a8:	21800044 	addi	r6,r4,1
 40116ac:	318d883a 	add	r6,r6,r6
 40116b0:	318d883a 	add	r6,r6,r6
 40116b4:	318d883a 	add	r6,r6,r6
 40116b8:	998d883a 	add	r6,r19,r6
 40116bc:	333ffe04 	addi	r12,r6,-8
 40116c0:	2017883a 	mov	r11,r4
 40116c4:	31800104 	addi	r6,r6,4
 40116c8:	34000017 	ldw	r16,0(r6)
 40116cc:	31fffd04 	addi	r7,r6,-12
 40116d0:	81c0041e 	bne	r16,r7,40116e4 <_malloc_r+0x1dc>
 40116d4:	0000fb06 	br	4011ac4 <_malloc_r+0x5bc>
 40116d8:	1801030e 	bge	r3,zero,4011ae8 <_malloc_r+0x5e0>
 40116dc:	84000317 	ldw	r16,12(r16)
 40116e0:	81c0f826 	beq	r16,r7,4011ac4 <_malloc_r+0x5bc>
 40116e4:	80800117 	ldw	r2,4(r16)
 40116e8:	1284703a 	and	r2,r2,r10
 40116ec:	1447c83a 	sub	r3,r2,r17
 40116f0:	48fff90e 	bge	r9,r3,40116d8 <_gp+0xffff0e9c>
 40116f4:	80800317 	ldw	r2,12(r16)
 40116f8:	81000217 	ldw	r4,8(r16)
 40116fc:	89400054 	ori	r5,r17,1
 4011700:	81400115 	stw	r5,4(r16)
 4011704:	20800315 	stw	r2,12(r4)
 4011708:	11000215 	stw	r4,8(r2)
 401170c:	8463883a 	add	r17,r16,r17
 4011710:	9c400515 	stw	r17,20(r19)
 4011714:	9c400415 	stw	r17,16(r19)
 4011718:	18800054 	ori	r2,r3,1
 401171c:	88800115 	stw	r2,4(r17)
 4011720:	8a000315 	stw	r8,12(r17)
 4011724:	8a000215 	stw	r8,8(r17)
 4011728:	88e3883a 	add	r17,r17,r3
 401172c:	88c00015 	stw	r3,0(r17)
 4011730:	9009883a 	mov	r4,r18
 4011734:	40148240 	call	4014824 <__malloc_unlock>
 4011738:	80800204 	addi	r2,r16,8
 401173c:	00001b06 	br	40117ac <_malloc_r+0x2a4>
 4011740:	04400404 	movi	r17,16
 4011744:	89402536 	bltu	r17,r5,40117dc <_malloc_r+0x2d4>
 4011748:	40148000 	call	4014800 <__malloc_lock>
 401174c:	00800184 	movi	r2,6
 4011750:	01000084 	movi	r4,2
 4011754:	04c10074 	movhi	r19,1025
 4011758:	1085883a 	add	r2,r2,r2
 401175c:	9cdc6904 	addi	r19,r19,29092
 4011760:	1085883a 	add	r2,r2,r2
 4011764:	9885883a 	add	r2,r19,r2
 4011768:	14000117 	ldw	r16,4(r2)
 401176c:	10fffe04 	addi	r3,r2,-8
 4011770:	80c0d926 	beq	r16,r3,4011ad8 <_malloc_r+0x5d0>
 4011774:	80c00117 	ldw	r3,4(r16)
 4011778:	81000317 	ldw	r4,12(r16)
 401177c:	00bfff04 	movi	r2,-4
 4011780:	1884703a 	and	r2,r3,r2
 4011784:	81400217 	ldw	r5,8(r16)
 4011788:	8085883a 	add	r2,r16,r2
 401178c:	10c00117 	ldw	r3,4(r2)
 4011790:	29000315 	stw	r4,12(r5)
 4011794:	21400215 	stw	r5,8(r4)
 4011798:	18c00054 	ori	r3,r3,1
 401179c:	10c00115 	stw	r3,4(r2)
 40117a0:	9009883a 	mov	r4,r18
 40117a4:	40148240 	call	4014824 <__malloc_unlock>
 40117a8:	80800204 	addi	r2,r16,8
 40117ac:	dfc00a17 	ldw	ra,40(sp)
 40117b0:	df000917 	ldw	fp,36(sp)
 40117b4:	ddc00817 	ldw	r23,32(sp)
 40117b8:	dd800717 	ldw	r22,28(sp)
 40117bc:	dd400617 	ldw	r21,24(sp)
 40117c0:	dd000517 	ldw	r20,20(sp)
 40117c4:	dcc00417 	ldw	r19,16(sp)
 40117c8:	dc800317 	ldw	r18,12(sp)
 40117cc:	dc400217 	ldw	r17,8(sp)
 40117d0:	dc000117 	ldw	r16,4(sp)
 40117d4:	dec00b04 	addi	sp,sp,44
 40117d8:	f800283a 	ret
 40117dc:	00800304 	movi	r2,12
 40117e0:	90800015 	stw	r2,0(r18)
 40117e4:	0005883a 	mov	r2,zero
 40117e8:	003ff006 	br	40117ac <_gp+0xffff0f70>
 40117ec:	01002004 	movi	r4,128
 40117f0:	02001004 	movi	r8,64
 40117f4:	01c00fc4 	movi	r7,63
 40117f8:	003f6106 	br	4011580 <_gp+0xffff0d44>
 40117fc:	4009883a 	mov	r4,r8
 4011800:	003f7506 	br	40115d8 <_gp+0xffff0d9c>
 4011804:	81000317 	ldw	r4,12(r16)
 4011808:	003fde06 	br	4011784 <_gp+0xffff0f48>
 401180c:	81c5883a 	add	r2,r16,r7
 4011810:	11400117 	ldw	r5,4(r2)
 4011814:	9009883a 	mov	r4,r18
 4011818:	29400054 	ori	r5,r5,1
 401181c:	11400115 	stw	r5,4(r2)
 4011820:	40148240 	call	4014824 <__malloc_unlock>
 4011824:	80800204 	addi	r2,r16,8
 4011828:	003fe006 	br	40117ac <_gp+0xffff0f70>
 401182c:	9c000217 	ldw	r16,8(r19)
 4011830:	00bfff04 	movi	r2,-4
 4011834:	85800117 	ldw	r22,4(r16)
 4011838:	b0ac703a 	and	r22,r22,r2
 401183c:	b4400336 	bltu	r22,r17,401184c <_malloc_r+0x344>
 4011840:	b445c83a 	sub	r2,r22,r17
 4011844:	00c003c4 	movi	r3,15
 4011848:	18805d16 	blt	r3,r2,40119c0 <_malloc_r+0x4b8>
 401184c:	05c100b4 	movhi	r23,1026
 4011850:	008100b4 	movhi	r2,1026
 4011854:	10a91104 	addi	r2,r2,-23484
 4011858:	bde21604 	addi	r23,r23,-30632
 401185c:	15400017 	ldw	r21,0(r2)
 4011860:	b8c00017 	ldw	r3,0(r23)
 4011864:	00bfffc4 	movi	r2,-1
 4011868:	858d883a 	add	r6,r16,r22
 401186c:	8d6b883a 	add	r21,r17,r21
 4011870:	1880ea26 	beq	r3,r2,4011c1c <_malloc_r+0x714>
 4011874:	ad4403c4 	addi	r21,r21,4111
 4011878:	00bc0004 	movi	r2,-4096
 401187c:	a8aa703a 	and	r21,r21,r2
 4011880:	a80b883a 	mov	r5,r21
 4011884:	9009883a 	mov	r4,r18
 4011888:	d9800015 	stw	r6,0(sp)
 401188c:	40122a80 	call	40122a8 <_sbrk_r>
 4011890:	1029883a 	mov	r20,r2
 4011894:	00bfffc4 	movi	r2,-1
 4011898:	d9800017 	ldw	r6,0(sp)
 401189c:	a080e826 	beq	r20,r2,4011c40 <_malloc_r+0x738>
 40118a0:	a180a636 	bltu	r20,r6,4011b3c <_malloc_r+0x634>
 40118a4:	070100b4 	movhi	fp,1026
 40118a8:	e7291904 	addi	fp,fp,-23452
 40118ac:	e0800017 	ldw	r2,0(fp)
 40118b0:	a887883a 	add	r3,r21,r2
 40118b4:	e0c00015 	stw	r3,0(fp)
 40118b8:	3500e626 	beq	r6,r20,4011c54 <_malloc_r+0x74c>
 40118bc:	b9000017 	ldw	r4,0(r23)
 40118c0:	00bfffc4 	movi	r2,-1
 40118c4:	2080ee26 	beq	r4,r2,4011c80 <_malloc_r+0x778>
 40118c8:	a185c83a 	sub	r2,r20,r6
 40118cc:	10c5883a 	add	r2,r2,r3
 40118d0:	e0800015 	stw	r2,0(fp)
 40118d4:	a0c001cc 	andi	r3,r20,7
 40118d8:	1800bc26 	beq	r3,zero,4011bcc <_malloc_r+0x6c4>
 40118dc:	a0e9c83a 	sub	r20,r20,r3
 40118e0:	00840204 	movi	r2,4104
 40118e4:	a5000204 	addi	r20,r20,8
 40118e8:	10c7c83a 	sub	r3,r2,r3
 40118ec:	a545883a 	add	r2,r20,r21
 40118f0:	1083ffcc 	andi	r2,r2,4095
 40118f4:	18abc83a 	sub	r21,r3,r2
 40118f8:	a80b883a 	mov	r5,r21
 40118fc:	9009883a 	mov	r4,r18
 4011900:	40122a80 	call	40122a8 <_sbrk_r>
 4011904:	00ffffc4 	movi	r3,-1
 4011908:	10c0e126 	beq	r2,r3,4011c90 <_malloc_r+0x788>
 401190c:	1505c83a 	sub	r2,r2,r20
 4011910:	1545883a 	add	r2,r2,r21
 4011914:	10800054 	ori	r2,r2,1
 4011918:	e0c00017 	ldw	r3,0(fp)
 401191c:	9d000215 	stw	r20,8(r19)
 4011920:	a0800115 	stw	r2,4(r20)
 4011924:	a8c7883a 	add	r3,r21,r3
 4011928:	e0c00015 	stw	r3,0(fp)
 401192c:	84c00e26 	beq	r16,r19,4011968 <_malloc_r+0x460>
 4011930:	018003c4 	movi	r6,15
 4011934:	3580a72e 	bgeu	r6,r22,4011bd4 <_malloc_r+0x6cc>
 4011938:	81400117 	ldw	r5,4(r16)
 401193c:	013ffe04 	movi	r4,-8
 4011940:	b0bffd04 	addi	r2,r22,-12
 4011944:	1104703a 	and	r2,r2,r4
 4011948:	2900004c 	andi	r4,r5,1
 401194c:	2088b03a 	or	r4,r4,r2
 4011950:	81000115 	stw	r4,4(r16)
 4011954:	01400144 	movi	r5,5
 4011958:	8089883a 	add	r4,r16,r2
 401195c:	21400115 	stw	r5,4(r4)
 4011960:	21400215 	stw	r5,8(r4)
 4011964:	3080cd36 	bltu	r6,r2,4011c9c <_malloc_r+0x794>
 4011968:	008100b4 	movhi	r2,1026
 401196c:	10a91004 	addi	r2,r2,-23488
 4011970:	11000017 	ldw	r4,0(r2)
 4011974:	20c0012e 	bgeu	r4,r3,401197c <_malloc_r+0x474>
 4011978:	10c00015 	stw	r3,0(r2)
 401197c:	008100b4 	movhi	r2,1026
 4011980:	10a90f04 	addi	r2,r2,-23492
 4011984:	11000017 	ldw	r4,0(r2)
 4011988:	9c000217 	ldw	r16,8(r19)
 401198c:	20c0012e 	bgeu	r4,r3,4011994 <_malloc_r+0x48c>
 4011990:	10c00015 	stw	r3,0(r2)
 4011994:	80c00117 	ldw	r3,4(r16)
 4011998:	00bfff04 	movi	r2,-4
 401199c:	1886703a 	and	r3,r3,r2
 40119a0:	1c45c83a 	sub	r2,r3,r17
 40119a4:	1c400236 	bltu	r3,r17,40119b0 <_malloc_r+0x4a8>
 40119a8:	00c003c4 	movi	r3,15
 40119ac:	18800416 	blt	r3,r2,40119c0 <_malloc_r+0x4b8>
 40119b0:	9009883a 	mov	r4,r18
 40119b4:	40148240 	call	4014824 <__malloc_unlock>
 40119b8:	0005883a 	mov	r2,zero
 40119bc:	003f7b06 	br	40117ac <_gp+0xffff0f70>
 40119c0:	88c00054 	ori	r3,r17,1
 40119c4:	80c00115 	stw	r3,4(r16)
 40119c8:	8463883a 	add	r17,r16,r17
 40119cc:	10800054 	ori	r2,r2,1
 40119d0:	9c400215 	stw	r17,8(r19)
 40119d4:	88800115 	stw	r2,4(r17)
 40119d8:	9009883a 	mov	r4,r18
 40119dc:	40148240 	call	4014824 <__malloc_unlock>
 40119e0:	80800204 	addi	r2,r16,8
 40119e4:	003f7106 	br	40117ac <_gp+0xffff0f70>
 40119e8:	00c00504 	movi	r3,20
 40119ec:	18804a2e 	bgeu	r3,r2,4011b18 <_malloc_r+0x610>
 40119f0:	00c01504 	movi	r3,84
 40119f4:	18806e36 	bltu	r3,r2,4011bb0 <_malloc_r+0x6a8>
 40119f8:	8804d33a 	srli	r2,r17,12
 40119fc:	12001bc4 	addi	r8,r2,111
 4011a00:	11c01b84 	addi	r7,r2,110
 4011a04:	4209883a 	add	r4,r8,r8
 4011a08:	003edd06 	br	4011580 <_gp+0xffff0d44>
 4011a0c:	3804d27a 	srli	r2,r7,9
 4011a10:	00c00104 	movi	r3,4
 4011a14:	1880442e 	bgeu	r3,r2,4011b28 <_malloc_r+0x620>
 4011a18:	00c00504 	movi	r3,20
 4011a1c:	18808136 	bltu	r3,r2,4011c24 <_malloc_r+0x71c>
 4011a20:	11401704 	addi	r5,r2,92
 4011a24:	10c016c4 	addi	r3,r2,91
 4011a28:	294b883a 	add	r5,r5,r5
 4011a2c:	294b883a 	add	r5,r5,r5
 4011a30:	294b883a 	add	r5,r5,r5
 4011a34:	994b883a 	add	r5,r19,r5
 4011a38:	28800017 	ldw	r2,0(r5)
 4011a3c:	01810074 	movhi	r6,1025
 4011a40:	297ffe04 	addi	r5,r5,-8
 4011a44:	319c6904 	addi	r6,r6,29092
 4011a48:	28806526 	beq	r5,r2,4011be0 <_malloc_r+0x6d8>
 4011a4c:	01bfff04 	movi	r6,-4
 4011a50:	10c00117 	ldw	r3,4(r2)
 4011a54:	1986703a 	and	r3,r3,r6
 4011a58:	38c0022e 	bgeu	r7,r3,4011a64 <_malloc_r+0x55c>
 4011a5c:	10800217 	ldw	r2,8(r2)
 4011a60:	28bffb1e 	bne	r5,r2,4011a50 <_gp+0xffff1214>
 4011a64:	11400317 	ldw	r5,12(r2)
 4011a68:	98c00117 	ldw	r3,4(r19)
 4011a6c:	81400315 	stw	r5,12(r16)
 4011a70:	80800215 	stw	r2,8(r16)
 4011a74:	2c000215 	stw	r16,8(r5)
 4011a78:	14000315 	stw	r16,12(r2)
 4011a7c:	003ef806 	br	4011660 <_gp+0xffff0e24>
 4011a80:	88c00054 	ori	r3,r17,1
 4011a84:	80c00115 	stw	r3,4(r16)
 4011a88:	8463883a 	add	r17,r16,r17
 4011a8c:	34400515 	stw	r17,20(r6)
 4011a90:	34400415 	stw	r17,16(r6)
 4011a94:	10c00054 	ori	r3,r2,1
 4011a98:	8a000315 	stw	r8,12(r17)
 4011a9c:	8a000215 	stw	r8,8(r17)
 4011aa0:	88c00115 	stw	r3,4(r17)
 4011aa4:	88a3883a 	add	r17,r17,r2
 4011aa8:	88800015 	stw	r2,0(r17)
 4011aac:	9009883a 	mov	r4,r18
 4011ab0:	40148240 	call	4014824 <__malloc_unlock>
 4011ab4:	80800204 	addi	r2,r16,8
 4011ab8:	003f3c06 	br	40117ac <_gp+0xffff0f70>
 4011abc:	30c00117 	ldw	r3,4(r6)
 4011ac0:	003ee706 	br	4011660 <_gp+0xffff0e24>
 4011ac4:	5ac00044 	addi	r11,r11,1
 4011ac8:	588000cc 	andi	r2,r11,3
 4011acc:	31800204 	addi	r6,r6,8
 4011ad0:	103efd1e 	bne	r2,zero,40116c8 <_gp+0xffff0e8c>
 4011ad4:	00002406 	br	4011b68 <_malloc_r+0x660>
 4011ad8:	14000317 	ldw	r16,12(r2)
 4011adc:	143f251e 	bne	r2,r16,4011774 <_gp+0xffff0f38>
 4011ae0:	21000084 	addi	r4,r4,2
 4011ae4:	003ebc06 	br	40115d8 <_gp+0xffff0d9c>
 4011ae8:	8085883a 	add	r2,r16,r2
 4011aec:	10c00117 	ldw	r3,4(r2)
 4011af0:	81000317 	ldw	r4,12(r16)
 4011af4:	81400217 	ldw	r5,8(r16)
 4011af8:	18c00054 	ori	r3,r3,1
 4011afc:	10c00115 	stw	r3,4(r2)
 4011b00:	29000315 	stw	r4,12(r5)
 4011b04:	21400215 	stw	r5,8(r4)
 4011b08:	9009883a 	mov	r4,r18
 4011b0c:	40148240 	call	4014824 <__malloc_unlock>
 4011b10:	80800204 	addi	r2,r16,8
 4011b14:	003f2506 	br	40117ac <_gp+0xffff0f70>
 4011b18:	12001704 	addi	r8,r2,92
 4011b1c:	11c016c4 	addi	r7,r2,91
 4011b20:	4209883a 	add	r4,r8,r8
 4011b24:	003e9606 	br	4011580 <_gp+0xffff0d44>
 4011b28:	3804d1ba 	srli	r2,r7,6
 4011b2c:	11400e44 	addi	r5,r2,57
 4011b30:	10c00e04 	addi	r3,r2,56
 4011b34:	294b883a 	add	r5,r5,r5
 4011b38:	003fbc06 	br	4011a2c <_gp+0xffff11f0>
 4011b3c:	84ff5926 	beq	r16,r19,40118a4 <_gp+0xffff1068>
 4011b40:	00810074 	movhi	r2,1025
 4011b44:	109c6904 	addi	r2,r2,29092
 4011b48:	14000217 	ldw	r16,8(r2)
 4011b4c:	00bfff04 	movi	r2,-4
 4011b50:	80c00117 	ldw	r3,4(r16)
 4011b54:	1886703a 	and	r3,r3,r2
 4011b58:	003f9106 	br	40119a0 <_gp+0xffff1164>
 4011b5c:	60800217 	ldw	r2,8(r12)
 4011b60:	213fffc4 	addi	r4,r4,-1
 4011b64:	1300651e 	bne	r2,r12,4011cfc <_malloc_r+0x7f4>
 4011b68:	208000cc 	andi	r2,r4,3
 4011b6c:	633ffe04 	addi	r12,r12,-8
 4011b70:	103ffa1e 	bne	r2,zero,4011b5c <_gp+0xffff1320>
 4011b74:	98800117 	ldw	r2,4(r19)
 4011b78:	0146303a 	nor	r3,zero,r5
 4011b7c:	1884703a 	and	r2,r3,r2
 4011b80:	98800115 	stw	r2,4(r19)
 4011b84:	294b883a 	add	r5,r5,r5
 4011b88:	117f2836 	bltu	r2,r5,401182c <_gp+0xffff0ff0>
 4011b8c:	283f2726 	beq	r5,zero,401182c <_gp+0xffff0ff0>
 4011b90:	2886703a 	and	r3,r5,r2
 4011b94:	5809883a 	mov	r4,r11
 4011b98:	183ec31e 	bne	r3,zero,40116a8 <_gp+0xffff0e6c>
 4011b9c:	294b883a 	add	r5,r5,r5
 4011ba0:	2886703a 	and	r3,r5,r2
 4011ba4:	21000104 	addi	r4,r4,4
 4011ba8:	183ffc26 	beq	r3,zero,4011b9c <_gp+0xffff1360>
 4011bac:	003ebe06 	br	40116a8 <_gp+0xffff0e6c>
 4011bb0:	00c05504 	movi	r3,340
 4011bb4:	18801236 	bltu	r3,r2,4011c00 <_malloc_r+0x6f8>
 4011bb8:	8804d3fa 	srli	r2,r17,15
 4011bbc:	12001e04 	addi	r8,r2,120
 4011bc0:	11c01dc4 	addi	r7,r2,119
 4011bc4:	4209883a 	add	r4,r8,r8
 4011bc8:	003e6d06 	br	4011580 <_gp+0xffff0d44>
 4011bcc:	00c40004 	movi	r3,4096
 4011bd0:	003f4606 	br	40118ec <_gp+0xffff10b0>
 4011bd4:	00800044 	movi	r2,1
 4011bd8:	a0800115 	stw	r2,4(r20)
 4011bdc:	003f7406 	br	40119b0 <_gp+0xffff1174>
 4011be0:	1805d0ba 	srai	r2,r3,2
 4011be4:	01c00044 	movi	r7,1
 4011be8:	30c00117 	ldw	r3,4(r6)
 4011bec:	388e983a 	sll	r7,r7,r2
 4011bf0:	2805883a 	mov	r2,r5
 4011bf4:	38c6b03a 	or	r3,r7,r3
 4011bf8:	30c00115 	stw	r3,4(r6)
 4011bfc:	003f9b06 	br	4011a6c <_gp+0xffff1230>
 4011c00:	00c15504 	movi	r3,1364
 4011c04:	18801a36 	bltu	r3,r2,4011c70 <_malloc_r+0x768>
 4011c08:	8804d4ba 	srli	r2,r17,18
 4011c0c:	12001f44 	addi	r8,r2,125
 4011c10:	11c01f04 	addi	r7,r2,124
 4011c14:	4209883a 	add	r4,r8,r8
 4011c18:	003e5906 	br	4011580 <_gp+0xffff0d44>
 4011c1c:	ad400404 	addi	r21,r21,16
 4011c20:	003f1706 	br	4011880 <_gp+0xffff1044>
 4011c24:	00c01504 	movi	r3,84
 4011c28:	18802336 	bltu	r3,r2,4011cb8 <_malloc_r+0x7b0>
 4011c2c:	3804d33a 	srli	r2,r7,12
 4011c30:	11401bc4 	addi	r5,r2,111
 4011c34:	10c01b84 	addi	r3,r2,110
 4011c38:	294b883a 	add	r5,r5,r5
 4011c3c:	003f7b06 	br	4011a2c <_gp+0xffff11f0>
 4011c40:	9c000217 	ldw	r16,8(r19)
 4011c44:	00bfff04 	movi	r2,-4
 4011c48:	80c00117 	ldw	r3,4(r16)
 4011c4c:	1886703a 	and	r3,r3,r2
 4011c50:	003f5306 	br	40119a0 <_gp+0xffff1164>
 4011c54:	3083ffcc 	andi	r2,r6,4095
 4011c58:	103f181e 	bne	r2,zero,40118bc <_gp+0xffff1080>
 4011c5c:	99000217 	ldw	r4,8(r19)
 4011c60:	b545883a 	add	r2,r22,r21
 4011c64:	10800054 	ori	r2,r2,1
 4011c68:	20800115 	stw	r2,4(r4)
 4011c6c:	003f3e06 	br	4011968 <_gp+0xffff112c>
 4011c70:	01003f84 	movi	r4,254
 4011c74:	02001fc4 	movi	r8,127
 4011c78:	01c01f84 	movi	r7,126
 4011c7c:	003e4006 	br	4011580 <_gp+0xffff0d44>
 4011c80:	008100b4 	movhi	r2,1026
 4011c84:	10a21604 	addi	r2,r2,-30632
 4011c88:	15000015 	stw	r20,0(r2)
 4011c8c:	003f1106 	br	40118d4 <_gp+0xffff1098>
 4011c90:	00800044 	movi	r2,1
 4011c94:	002b883a 	mov	r21,zero
 4011c98:	003f1f06 	br	4011918 <_gp+0xffff10dc>
 4011c9c:	81400204 	addi	r5,r16,8
 4011ca0:	9009883a 	mov	r4,r18
 4011ca4:	4010b600 	call	4010b60 <_free_r>
 4011ca8:	008100b4 	movhi	r2,1026
 4011cac:	10a91904 	addi	r2,r2,-23452
 4011cb0:	10c00017 	ldw	r3,0(r2)
 4011cb4:	003f2c06 	br	4011968 <_gp+0xffff112c>
 4011cb8:	00c05504 	movi	r3,340
 4011cbc:	18800536 	bltu	r3,r2,4011cd4 <_malloc_r+0x7cc>
 4011cc0:	3804d3fa 	srli	r2,r7,15
 4011cc4:	11401e04 	addi	r5,r2,120
 4011cc8:	10c01dc4 	addi	r3,r2,119
 4011ccc:	294b883a 	add	r5,r5,r5
 4011cd0:	003f5606 	br	4011a2c <_gp+0xffff11f0>
 4011cd4:	00c15504 	movi	r3,1364
 4011cd8:	18800536 	bltu	r3,r2,4011cf0 <_malloc_r+0x7e8>
 4011cdc:	3804d4ba 	srli	r2,r7,18
 4011ce0:	11401f44 	addi	r5,r2,125
 4011ce4:	10c01f04 	addi	r3,r2,124
 4011ce8:	294b883a 	add	r5,r5,r5
 4011cec:	003f4f06 	br	4011a2c <_gp+0xffff11f0>
 4011cf0:	01403f84 	movi	r5,254
 4011cf4:	00c01f84 	movi	r3,126
 4011cf8:	003f4c06 	br	4011a2c <_gp+0xffff11f0>
 4011cfc:	98800117 	ldw	r2,4(r19)
 4011d00:	003fa006 	br	4011b84 <_gp+0xffff1348>
 4011d04:	8808d0fa 	srli	r4,r17,3
 4011d08:	20800044 	addi	r2,r4,1
 4011d0c:	1085883a 	add	r2,r2,r2
 4011d10:	003e9006 	br	4011754 <_gp+0xffff0f18>

04011d14 <memcpy>:
 4011d14:	defffd04 	addi	sp,sp,-12
 4011d18:	dfc00215 	stw	ra,8(sp)
 4011d1c:	dc400115 	stw	r17,4(sp)
 4011d20:	dc000015 	stw	r16,0(sp)
 4011d24:	00c003c4 	movi	r3,15
 4011d28:	2005883a 	mov	r2,r4
 4011d2c:	1980452e 	bgeu	r3,r6,4011e44 <memcpy+0x130>
 4011d30:	2906b03a 	or	r3,r5,r4
 4011d34:	18c000cc 	andi	r3,r3,3
 4011d38:	1800441e 	bne	r3,zero,4011e4c <memcpy+0x138>
 4011d3c:	347ffc04 	addi	r17,r6,-16
 4011d40:	8822d13a 	srli	r17,r17,4
 4011d44:	28c00104 	addi	r3,r5,4
 4011d48:	23400104 	addi	r13,r4,4
 4011d4c:	8820913a 	slli	r16,r17,4
 4011d50:	2b000204 	addi	r12,r5,8
 4011d54:	22c00204 	addi	r11,r4,8
 4011d58:	84000504 	addi	r16,r16,20
 4011d5c:	2a800304 	addi	r10,r5,12
 4011d60:	22400304 	addi	r9,r4,12
 4011d64:	2c21883a 	add	r16,r5,r16
 4011d68:	2811883a 	mov	r8,r5
 4011d6c:	200f883a 	mov	r7,r4
 4011d70:	41000017 	ldw	r4,0(r8)
 4011d74:	1fc00017 	ldw	ra,0(r3)
 4011d78:	63c00017 	ldw	r15,0(r12)
 4011d7c:	39000015 	stw	r4,0(r7)
 4011d80:	53800017 	ldw	r14,0(r10)
 4011d84:	6fc00015 	stw	ra,0(r13)
 4011d88:	5bc00015 	stw	r15,0(r11)
 4011d8c:	4b800015 	stw	r14,0(r9)
 4011d90:	18c00404 	addi	r3,r3,16
 4011d94:	39c00404 	addi	r7,r7,16
 4011d98:	42000404 	addi	r8,r8,16
 4011d9c:	6b400404 	addi	r13,r13,16
 4011da0:	63000404 	addi	r12,r12,16
 4011da4:	5ac00404 	addi	r11,r11,16
 4011da8:	52800404 	addi	r10,r10,16
 4011dac:	4a400404 	addi	r9,r9,16
 4011db0:	1c3fef1e 	bne	r3,r16,4011d70 <_gp+0xffff1534>
 4011db4:	89c00044 	addi	r7,r17,1
 4011db8:	380e913a 	slli	r7,r7,4
 4011dbc:	310003cc 	andi	r4,r6,15
 4011dc0:	02c000c4 	movi	r11,3
 4011dc4:	11c7883a 	add	r3,r2,r7
 4011dc8:	29cb883a 	add	r5,r5,r7
 4011dcc:	5900212e 	bgeu	r11,r4,4011e54 <memcpy+0x140>
 4011dd0:	1813883a 	mov	r9,r3
 4011dd4:	2811883a 	mov	r8,r5
 4011dd8:	200f883a 	mov	r7,r4
 4011ddc:	42800017 	ldw	r10,0(r8)
 4011de0:	4a400104 	addi	r9,r9,4
 4011de4:	39ffff04 	addi	r7,r7,-4
 4011de8:	4abfff15 	stw	r10,-4(r9)
 4011dec:	42000104 	addi	r8,r8,4
 4011df0:	59fffa36 	bltu	r11,r7,4011ddc <_gp+0xffff15a0>
 4011df4:	213fff04 	addi	r4,r4,-4
 4011df8:	2008d0ba 	srli	r4,r4,2
 4011dfc:	318000cc 	andi	r6,r6,3
 4011e00:	21000044 	addi	r4,r4,1
 4011e04:	2109883a 	add	r4,r4,r4
 4011e08:	2109883a 	add	r4,r4,r4
 4011e0c:	1907883a 	add	r3,r3,r4
 4011e10:	290b883a 	add	r5,r5,r4
 4011e14:	30000626 	beq	r6,zero,4011e30 <memcpy+0x11c>
 4011e18:	198d883a 	add	r6,r3,r6
 4011e1c:	29c00003 	ldbu	r7,0(r5)
 4011e20:	18c00044 	addi	r3,r3,1
 4011e24:	29400044 	addi	r5,r5,1
 4011e28:	19ffffc5 	stb	r7,-1(r3)
 4011e2c:	19bffb1e 	bne	r3,r6,4011e1c <_gp+0xffff15e0>
 4011e30:	dfc00217 	ldw	ra,8(sp)
 4011e34:	dc400117 	ldw	r17,4(sp)
 4011e38:	dc000017 	ldw	r16,0(sp)
 4011e3c:	dec00304 	addi	sp,sp,12
 4011e40:	f800283a 	ret
 4011e44:	2007883a 	mov	r3,r4
 4011e48:	003ff206 	br	4011e14 <_gp+0xffff15d8>
 4011e4c:	2007883a 	mov	r3,r4
 4011e50:	003ff106 	br	4011e18 <_gp+0xffff15dc>
 4011e54:	200d883a 	mov	r6,r4
 4011e58:	003fee06 	br	4011e14 <_gp+0xffff15d8>

04011e5c <memset>:
 4011e5c:	20c000cc 	andi	r3,r4,3
 4011e60:	2005883a 	mov	r2,r4
 4011e64:	18004426 	beq	r3,zero,4011f78 <memset+0x11c>
 4011e68:	31ffffc4 	addi	r7,r6,-1
 4011e6c:	30004026 	beq	r6,zero,4011f70 <memset+0x114>
 4011e70:	2813883a 	mov	r9,r5
 4011e74:	200d883a 	mov	r6,r4
 4011e78:	2007883a 	mov	r3,r4
 4011e7c:	00000406 	br	4011e90 <memset+0x34>
 4011e80:	3a3fffc4 	addi	r8,r7,-1
 4011e84:	31800044 	addi	r6,r6,1
 4011e88:	38003926 	beq	r7,zero,4011f70 <memset+0x114>
 4011e8c:	400f883a 	mov	r7,r8
 4011e90:	18c00044 	addi	r3,r3,1
 4011e94:	32400005 	stb	r9,0(r6)
 4011e98:	1a0000cc 	andi	r8,r3,3
 4011e9c:	403ff81e 	bne	r8,zero,4011e80 <_gp+0xffff1644>
 4011ea0:	010000c4 	movi	r4,3
 4011ea4:	21c02d2e 	bgeu	r4,r7,4011f5c <memset+0x100>
 4011ea8:	29003fcc 	andi	r4,r5,255
 4011eac:	200c923a 	slli	r6,r4,8
 4011eb0:	3108b03a 	or	r4,r6,r4
 4011eb4:	200c943a 	slli	r6,r4,16
 4011eb8:	218cb03a 	or	r6,r4,r6
 4011ebc:	010003c4 	movi	r4,15
 4011ec0:	21c0182e 	bgeu	r4,r7,4011f24 <memset+0xc8>
 4011ec4:	3b3ffc04 	addi	r12,r7,-16
 4011ec8:	6018d13a 	srli	r12,r12,4
 4011ecc:	1a000104 	addi	r8,r3,4
 4011ed0:	1ac00204 	addi	r11,r3,8
 4011ed4:	6008913a 	slli	r4,r12,4
 4011ed8:	1a800304 	addi	r10,r3,12
 4011edc:	1813883a 	mov	r9,r3
 4011ee0:	21000504 	addi	r4,r4,20
 4011ee4:	1909883a 	add	r4,r3,r4
 4011ee8:	49800015 	stw	r6,0(r9)
 4011eec:	41800015 	stw	r6,0(r8)
 4011ef0:	59800015 	stw	r6,0(r11)
 4011ef4:	51800015 	stw	r6,0(r10)
 4011ef8:	42000404 	addi	r8,r8,16
 4011efc:	4a400404 	addi	r9,r9,16
 4011f00:	5ac00404 	addi	r11,r11,16
 4011f04:	52800404 	addi	r10,r10,16
 4011f08:	413ff71e 	bne	r8,r4,4011ee8 <_gp+0xffff16ac>
 4011f0c:	63000044 	addi	r12,r12,1
 4011f10:	6018913a 	slli	r12,r12,4
 4011f14:	39c003cc 	andi	r7,r7,15
 4011f18:	010000c4 	movi	r4,3
 4011f1c:	1b07883a 	add	r3,r3,r12
 4011f20:	21c00e2e 	bgeu	r4,r7,4011f5c <memset+0x100>
 4011f24:	1813883a 	mov	r9,r3
 4011f28:	3811883a 	mov	r8,r7
 4011f2c:	010000c4 	movi	r4,3
 4011f30:	49800015 	stw	r6,0(r9)
 4011f34:	423fff04 	addi	r8,r8,-4
 4011f38:	4a400104 	addi	r9,r9,4
 4011f3c:	223ffc36 	bltu	r4,r8,4011f30 <_gp+0xffff16f4>
 4011f40:	393fff04 	addi	r4,r7,-4
 4011f44:	2008d0ba 	srli	r4,r4,2
 4011f48:	39c000cc 	andi	r7,r7,3
 4011f4c:	21000044 	addi	r4,r4,1
 4011f50:	2109883a 	add	r4,r4,r4
 4011f54:	2109883a 	add	r4,r4,r4
 4011f58:	1907883a 	add	r3,r3,r4
 4011f5c:	38000526 	beq	r7,zero,4011f74 <memset+0x118>
 4011f60:	19cf883a 	add	r7,r3,r7
 4011f64:	19400005 	stb	r5,0(r3)
 4011f68:	18c00044 	addi	r3,r3,1
 4011f6c:	38fffd1e 	bne	r7,r3,4011f64 <_gp+0xffff1728>
 4011f70:	f800283a 	ret
 4011f74:	f800283a 	ret
 4011f78:	2007883a 	mov	r3,r4
 4011f7c:	300f883a 	mov	r7,r6
 4011f80:	003fc706 	br	4011ea0 <_gp+0xffff1664>

04011f84 <_open_r>:
 4011f84:	defffd04 	addi	sp,sp,-12
 4011f88:	2805883a 	mov	r2,r5
 4011f8c:	dc000015 	stw	r16,0(sp)
 4011f90:	040100b4 	movhi	r16,1026
 4011f94:	dc400115 	stw	r17,4(sp)
 4011f98:	300b883a 	mov	r5,r6
 4011f9c:	84290e04 	addi	r16,r16,-23496
 4011fa0:	2023883a 	mov	r17,r4
 4011fa4:	380d883a 	mov	r6,r7
 4011fa8:	1009883a 	mov	r4,r2
 4011fac:	dfc00215 	stw	ra,8(sp)
 4011fb0:	80000015 	stw	zero,0(r16)
 4011fb4:	40149700 	call	4014970 <open>
 4011fb8:	00ffffc4 	movi	r3,-1
 4011fbc:	10c00526 	beq	r2,r3,4011fd4 <_open_r+0x50>
 4011fc0:	dfc00217 	ldw	ra,8(sp)
 4011fc4:	dc400117 	ldw	r17,4(sp)
 4011fc8:	dc000017 	ldw	r16,0(sp)
 4011fcc:	dec00304 	addi	sp,sp,12
 4011fd0:	f800283a 	ret
 4011fd4:	80c00017 	ldw	r3,0(r16)
 4011fd8:	183ff926 	beq	r3,zero,4011fc0 <_gp+0xffff1784>
 4011fdc:	88c00015 	stw	r3,0(r17)
 4011fe0:	003ff706 	br	4011fc0 <_gp+0xffff1784>

04011fe4 <_puts_r>:
 4011fe4:	defff604 	addi	sp,sp,-40
 4011fe8:	dc000715 	stw	r16,28(sp)
 4011fec:	2021883a 	mov	r16,r4
 4011ff0:	2809883a 	mov	r4,r5
 4011ff4:	dc400815 	stw	r17,32(sp)
 4011ff8:	dfc00915 	stw	ra,36(sp)
 4011ffc:	2823883a 	mov	r17,r5
 4012000:	40124380 	call	4012438 <strlen>
 4012004:	10c00044 	addi	r3,r2,1
 4012008:	d8800115 	stw	r2,4(sp)
 401200c:	00810074 	movhi	r2,1025
 4012010:	109b4304 	addi	r2,r2,27916
 4012014:	d8800215 	stw	r2,8(sp)
 4012018:	00800044 	movi	r2,1
 401201c:	d8800315 	stw	r2,12(sp)
 4012020:	00800084 	movi	r2,2
 4012024:	dc400015 	stw	r17,0(sp)
 4012028:	d8c00615 	stw	r3,24(sp)
 401202c:	dec00415 	stw	sp,16(sp)
 4012030:	d8800515 	stw	r2,20(sp)
 4012034:	80000226 	beq	r16,zero,4012040 <_puts_r+0x5c>
 4012038:	80800e17 	ldw	r2,56(r16)
 401203c:	10001426 	beq	r2,zero,4012090 <_puts_r+0xac>
 4012040:	81400217 	ldw	r5,8(r16)
 4012044:	2880030b 	ldhu	r2,12(r5)
 4012048:	10c8000c 	andi	r3,r2,8192
 401204c:	1800061e 	bne	r3,zero,4012068 <_puts_r+0x84>
 4012050:	29001917 	ldw	r4,100(r5)
 4012054:	00f7ffc4 	movi	r3,-8193
 4012058:	10880014 	ori	r2,r2,8192
 401205c:	20c6703a 	and	r3,r4,r3
 4012060:	2880030d 	sth	r2,12(r5)
 4012064:	28c01915 	stw	r3,100(r5)
 4012068:	d9800404 	addi	r6,sp,16
 401206c:	8009883a 	mov	r4,r16
 4012070:	4012c880 	call	4012c88 <__sfvwrite_r>
 4012074:	1000091e 	bne	r2,zero,401209c <_puts_r+0xb8>
 4012078:	00800284 	movi	r2,10
 401207c:	dfc00917 	ldw	ra,36(sp)
 4012080:	dc400817 	ldw	r17,32(sp)
 4012084:	dc000717 	ldw	r16,28(sp)
 4012088:	dec00a04 	addi	sp,sp,40
 401208c:	f800283a 	ret
 4012090:	8009883a 	mov	r4,r16
 4012094:	4012b8c0 	call	4012b8c <__sinit>
 4012098:	003fe906 	br	4012040 <_gp+0xffff1804>
 401209c:	00bfffc4 	movi	r2,-1
 40120a0:	003ff606 	br	401207c <_gp+0xffff1840>

040120a4 <puts>:
 40120a4:	008100b4 	movhi	r2,1026
 40120a8:	10a21504 	addi	r2,r2,-30636
 40120ac:	200b883a 	mov	r5,r4
 40120b0:	11000017 	ldw	r4,0(r2)
 40120b4:	4011fe41 	jmpi	4011fe4 <_puts_r>

040120b8 <lflush>:
 40120b8:	2080030b 	ldhu	r2,12(r4)
 40120bc:	00c00244 	movi	r3,9
 40120c0:	1080024c 	andi	r2,r2,9
 40120c4:	10c00226 	beq	r2,r3,40120d0 <lflush+0x18>
 40120c8:	0005883a 	mov	r2,zero
 40120cc:	f800283a 	ret
 40120d0:	40127fc1 	jmpi	40127fc <fflush>

040120d4 <__srefill_r>:
 40120d4:	defffc04 	addi	sp,sp,-16
 40120d8:	dc400115 	stw	r17,4(sp)
 40120dc:	dc000015 	stw	r16,0(sp)
 40120e0:	dfc00315 	stw	ra,12(sp)
 40120e4:	dc800215 	stw	r18,8(sp)
 40120e8:	2023883a 	mov	r17,r4
 40120ec:	2821883a 	mov	r16,r5
 40120f0:	20000226 	beq	r4,zero,40120fc <__srefill_r+0x28>
 40120f4:	20800e17 	ldw	r2,56(r4)
 40120f8:	10003c26 	beq	r2,zero,40121ec <__srefill_r+0x118>
 40120fc:	80c0030b 	ldhu	r3,12(r16)
 4012100:	1908000c 	andi	r4,r3,8192
 4012104:	1805883a 	mov	r2,r3
 4012108:	2000071e 	bne	r4,zero,4012128 <__srefill_r+0x54>
 401210c:	81001917 	ldw	r4,100(r16)
 4012110:	18880014 	ori	r2,r3,8192
 4012114:	00f7ffc4 	movi	r3,-8193
 4012118:	20c8703a 	and	r4,r4,r3
 401211c:	8080030d 	sth	r2,12(r16)
 4012120:	1007883a 	mov	r3,r2
 4012124:	81001915 	stw	r4,100(r16)
 4012128:	80000115 	stw	zero,4(r16)
 401212c:	1100080c 	andi	r4,r2,32
 4012130:	2000571e 	bne	r4,zero,4012290 <__srefill_r+0x1bc>
 4012134:	1100010c 	andi	r4,r2,4
 4012138:	20001f26 	beq	r4,zero,40121b8 <__srefill_r+0xe4>
 401213c:	81400c17 	ldw	r5,48(r16)
 4012140:	28000826 	beq	r5,zero,4012164 <__srefill_r+0x90>
 4012144:	80801004 	addi	r2,r16,64
 4012148:	28800226 	beq	r5,r2,4012154 <__srefill_r+0x80>
 401214c:	8809883a 	mov	r4,r17
 4012150:	4010b600 	call	4010b60 <_free_r>
 4012154:	80800f17 	ldw	r2,60(r16)
 4012158:	80000c15 	stw	zero,48(r16)
 401215c:	80800115 	stw	r2,4(r16)
 4012160:	1000391e 	bne	r2,zero,4012248 <__srefill_r+0x174>
 4012164:	80800417 	ldw	r2,16(r16)
 4012168:	10004b26 	beq	r2,zero,4012298 <__srefill_r+0x1c4>
 401216c:	8480030b 	ldhu	r18,12(r16)
 4012170:	908000cc 	andi	r2,r18,3
 4012174:	10001f1e 	bne	r2,zero,40121f4 <__srefill_r+0x120>
 4012178:	81800417 	ldw	r6,16(r16)
 401217c:	80800817 	ldw	r2,32(r16)
 4012180:	81c00517 	ldw	r7,20(r16)
 4012184:	81400717 	ldw	r5,28(r16)
 4012188:	81800015 	stw	r6,0(r16)
 401218c:	8809883a 	mov	r4,r17
 4012190:	103ee83a 	callr	r2
 4012194:	80800115 	stw	r2,4(r16)
 4012198:	00800e0e 	bge	zero,r2,40121d4 <__srefill_r+0x100>
 401219c:	0005883a 	mov	r2,zero
 40121a0:	dfc00317 	ldw	ra,12(sp)
 40121a4:	dc800217 	ldw	r18,8(sp)
 40121a8:	dc400117 	ldw	r17,4(sp)
 40121ac:	dc000017 	ldw	r16,0(sp)
 40121b0:	dec00404 	addi	sp,sp,16
 40121b4:	f800283a 	ret
 40121b8:	1100040c 	andi	r4,r2,16
 40121bc:	20003026 	beq	r4,zero,4012280 <__srefill_r+0x1ac>
 40121c0:	1080020c 	andi	r2,r2,8
 40121c4:	1000241e 	bne	r2,zero,4012258 <__srefill_r+0x184>
 40121c8:	18c00114 	ori	r3,r3,4
 40121cc:	80c0030d 	sth	r3,12(r16)
 40121d0:	003fe406 	br	4012164 <_gp+0xffff1928>
 40121d4:	80c0030b 	ldhu	r3,12(r16)
 40121d8:	1000161e 	bne	r2,zero,4012234 <__srefill_r+0x160>
 40121dc:	18c00814 	ori	r3,r3,32
 40121e0:	00bfffc4 	movi	r2,-1
 40121e4:	80c0030d 	sth	r3,12(r16)
 40121e8:	003fed06 	br	40121a0 <_gp+0xffff1964>
 40121ec:	4012b8c0 	call	4012b8c <__sinit>
 40121f0:	003fc206 	br	40120fc <_gp+0xffff18c0>
 40121f4:	008100b4 	movhi	r2,1026
 40121f8:	10a21404 	addi	r2,r2,-30640
 40121fc:	11000017 	ldw	r4,0(r2)
 4012200:	01410074 	movhi	r5,1025
 4012204:	00800044 	movi	r2,1
 4012208:	29482e04 	addi	r5,r5,8376
 401220c:	8080030d 	sth	r2,12(r16)
 4012210:	40131500 	call	4013150 <_fwalk>
 4012214:	00800244 	movi	r2,9
 4012218:	8480030d 	sth	r18,12(r16)
 401221c:	9480024c 	andi	r18,r18,9
 4012220:	90bfd51e 	bne	r18,r2,4012178 <_gp+0xffff193c>
 4012224:	800b883a 	mov	r5,r16
 4012228:	8809883a 	mov	r4,r17
 401222c:	40125840 	call	4012584 <__sflush_r>
 4012230:	003fd106 	br	4012178 <_gp+0xffff193c>
 4012234:	18c01014 	ori	r3,r3,64
 4012238:	80000115 	stw	zero,4(r16)
 401223c:	00bfffc4 	movi	r2,-1
 4012240:	80c0030d 	sth	r3,12(r16)
 4012244:	003fd606 	br	40121a0 <_gp+0xffff1964>
 4012248:	80c00e17 	ldw	r3,56(r16)
 401224c:	0005883a 	mov	r2,zero
 4012250:	80c00015 	stw	r3,0(r16)
 4012254:	003fd206 	br	40121a0 <_gp+0xffff1964>
 4012258:	800b883a 	mov	r5,r16
 401225c:	8809883a 	mov	r4,r17
 4012260:	40127a00 	call	40127a0 <_fflush_r>
 4012264:	10000a1e 	bne	r2,zero,4012290 <__srefill_r+0x1bc>
 4012268:	8080030b 	ldhu	r2,12(r16)
 401226c:	00fffdc4 	movi	r3,-9
 4012270:	80000215 	stw	zero,8(r16)
 4012274:	1886703a 	and	r3,r3,r2
 4012278:	80000615 	stw	zero,24(r16)
 401227c:	003fd206 	br	40121c8 <_gp+0xffff198c>
 4012280:	00800244 	movi	r2,9
 4012284:	88800015 	stw	r2,0(r17)
 4012288:	18c01014 	ori	r3,r3,64
 401228c:	80c0030d 	sth	r3,12(r16)
 4012290:	00bfffc4 	movi	r2,-1
 4012294:	003fc206 	br	40121a0 <_gp+0xffff1964>
 4012298:	800b883a 	mov	r5,r16
 401229c:	8809883a 	mov	r4,r17
 40122a0:	401134c0 	call	401134c <__smakebuf_r>
 40122a4:	003fb106 	br	401216c <_gp+0xffff1930>

040122a8 <_sbrk_r>:
 40122a8:	defffd04 	addi	sp,sp,-12
 40122ac:	dc000015 	stw	r16,0(sp)
 40122b0:	040100b4 	movhi	r16,1026
 40122b4:	dc400115 	stw	r17,4(sp)
 40122b8:	84290e04 	addi	r16,r16,-23496
 40122bc:	2023883a 	mov	r17,r4
 40122c0:	2809883a 	mov	r4,r5
 40122c4:	dfc00215 	stw	ra,8(sp)
 40122c8:	80000015 	stw	zero,0(r16)
 40122cc:	4014c900 	call	4014c90 <sbrk>
 40122d0:	00ffffc4 	movi	r3,-1
 40122d4:	10c00526 	beq	r2,r3,40122ec <_sbrk_r+0x44>
 40122d8:	dfc00217 	ldw	ra,8(sp)
 40122dc:	dc400117 	ldw	r17,4(sp)
 40122e0:	dc000017 	ldw	r16,0(sp)
 40122e4:	dec00304 	addi	sp,sp,12
 40122e8:	f800283a 	ret
 40122ec:	80c00017 	ldw	r3,0(r16)
 40122f0:	183ff926 	beq	r3,zero,40122d8 <_gp+0xffff1a9c>
 40122f4:	88c00015 	stw	r3,0(r17)
 40122f8:	003ff706 	br	40122d8 <_gp+0xffff1a9c>

040122fc <__sread>:
 40122fc:	defffe04 	addi	sp,sp,-8
 4012300:	dc000015 	stw	r16,0(sp)
 4012304:	2821883a 	mov	r16,r5
 4012308:	2940038f 	ldh	r5,14(r5)
 401230c:	dfc00115 	stw	ra,4(sp)
 4012310:	40135cc0 	call	40135cc <_read_r>
 4012314:	10000716 	blt	r2,zero,4012334 <__sread+0x38>
 4012318:	80c01417 	ldw	r3,80(r16)
 401231c:	1887883a 	add	r3,r3,r2
 4012320:	80c01415 	stw	r3,80(r16)
 4012324:	dfc00117 	ldw	ra,4(sp)
 4012328:	dc000017 	ldw	r16,0(sp)
 401232c:	dec00204 	addi	sp,sp,8
 4012330:	f800283a 	ret
 4012334:	80c0030b 	ldhu	r3,12(r16)
 4012338:	18fbffcc 	andi	r3,r3,61439
 401233c:	80c0030d 	sth	r3,12(r16)
 4012340:	dfc00117 	ldw	ra,4(sp)
 4012344:	dc000017 	ldw	r16,0(sp)
 4012348:	dec00204 	addi	sp,sp,8
 401234c:	f800283a 	ret

04012350 <__seofread>:
 4012350:	0005883a 	mov	r2,zero
 4012354:	f800283a 	ret

04012358 <__swrite>:
 4012358:	2880030b 	ldhu	r2,12(r5)
 401235c:	defffb04 	addi	sp,sp,-20
 4012360:	dcc00315 	stw	r19,12(sp)
 4012364:	dc800215 	stw	r18,8(sp)
 4012368:	dc400115 	stw	r17,4(sp)
 401236c:	dc000015 	stw	r16,0(sp)
 4012370:	dfc00415 	stw	ra,16(sp)
 4012374:	10c0400c 	andi	r3,r2,256
 4012378:	2821883a 	mov	r16,r5
 401237c:	2023883a 	mov	r17,r4
 4012380:	3025883a 	mov	r18,r6
 4012384:	3827883a 	mov	r19,r7
 4012388:	18000526 	beq	r3,zero,40123a0 <__swrite+0x48>
 401238c:	2940038f 	ldh	r5,14(r5)
 4012390:	01c00084 	movi	r7,2
 4012394:	000d883a 	mov	r6,zero
 4012398:	401332c0 	call	401332c <_lseek_r>
 401239c:	8080030b 	ldhu	r2,12(r16)
 40123a0:	8140038f 	ldh	r5,14(r16)
 40123a4:	10bbffcc 	andi	r2,r2,61439
 40123a8:	980f883a 	mov	r7,r19
 40123ac:	900d883a 	mov	r6,r18
 40123b0:	8809883a 	mov	r4,r17
 40123b4:	8080030d 	sth	r2,12(r16)
 40123b8:	dfc00417 	ldw	ra,16(sp)
 40123bc:	dcc00317 	ldw	r19,12(sp)
 40123c0:	dc800217 	ldw	r18,8(sp)
 40123c4:	dc400117 	ldw	r17,4(sp)
 40123c8:	dc000017 	ldw	r16,0(sp)
 40123cc:	dec00504 	addi	sp,sp,20
 40123d0:	40124d01 	jmpi	40124d0 <_write_r>

040123d4 <__sseek>:
 40123d4:	defffe04 	addi	sp,sp,-8
 40123d8:	dc000015 	stw	r16,0(sp)
 40123dc:	2821883a 	mov	r16,r5
 40123e0:	2940038f 	ldh	r5,14(r5)
 40123e4:	dfc00115 	stw	ra,4(sp)
 40123e8:	401332c0 	call	401332c <_lseek_r>
 40123ec:	00ffffc4 	movi	r3,-1
 40123f0:	10c00826 	beq	r2,r3,4012414 <__sseek+0x40>
 40123f4:	80c0030b 	ldhu	r3,12(r16)
 40123f8:	80801415 	stw	r2,80(r16)
 40123fc:	18c40014 	ori	r3,r3,4096
 4012400:	80c0030d 	sth	r3,12(r16)
 4012404:	dfc00117 	ldw	ra,4(sp)
 4012408:	dc000017 	ldw	r16,0(sp)
 401240c:	dec00204 	addi	sp,sp,8
 4012410:	f800283a 	ret
 4012414:	80c0030b 	ldhu	r3,12(r16)
 4012418:	18fbffcc 	andi	r3,r3,61439
 401241c:	80c0030d 	sth	r3,12(r16)
 4012420:	dfc00117 	ldw	ra,4(sp)
 4012424:	dc000017 	ldw	r16,0(sp)
 4012428:	dec00204 	addi	sp,sp,8
 401242c:	f800283a 	ret

04012430 <__sclose>:
 4012430:	2940038f 	ldh	r5,14(r5)
 4012434:	40125301 	jmpi	4012530 <_close_r>

04012438 <strlen>:
 4012438:	208000cc 	andi	r2,r4,3
 401243c:	10002026 	beq	r2,zero,40124c0 <strlen+0x88>
 4012440:	20800007 	ldb	r2,0(r4)
 4012444:	10002026 	beq	r2,zero,40124c8 <strlen+0x90>
 4012448:	2005883a 	mov	r2,r4
 401244c:	00000206 	br	4012458 <strlen+0x20>
 4012450:	10c00007 	ldb	r3,0(r2)
 4012454:	18001826 	beq	r3,zero,40124b8 <strlen+0x80>
 4012458:	10800044 	addi	r2,r2,1
 401245c:	10c000cc 	andi	r3,r2,3
 4012460:	183ffb1e 	bne	r3,zero,4012450 <_gp+0xffff1c14>
 4012464:	10c00017 	ldw	r3,0(r2)
 4012468:	01ffbff4 	movhi	r7,65279
 401246c:	39ffbfc4 	addi	r7,r7,-257
 4012470:	00ca303a 	nor	r5,zero,r3
 4012474:	01a02074 	movhi	r6,32897
 4012478:	19c7883a 	add	r3,r3,r7
 401247c:	31a02004 	addi	r6,r6,-32640
 4012480:	1946703a 	and	r3,r3,r5
 4012484:	1986703a 	and	r3,r3,r6
 4012488:	1800091e 	bne	r3,zero,40124b0 <strlen+0x78>
 401248c:	10800104 	addi	r2,r2,4
 4012490:	10c00017 	ldw	r3,0(r2)
 4012494:	19cb883a 	add	r5,r3,r7
 4012498:	00c6303a 	nor	r3,zero,r3
 401249c:	28c6703a 	and	r3,r5,r3
 40124a0:	1986703a 	and	r3,r3,r6
 40124a4:	183ff926 	beq	r3,zero,401248c <_gp+0xffff1c50>
 40124a8:	00000106 	br	40124b0 <strlen+0x78>
 40124ac:	10800044 	addi	r2,r2,1
 40124b0:	10c00007 	ldb	r3,0(r2)
 40124b4:	183ffd1e 	bne	r3,zero,40124ac <_gp+0xffff1c70>
 40124b8:	1105c83a 	sub	r2,r2,r4
 40124bc:	f800283a 	ret
 40124c0:	2005883a 	mov	r2,r4
 40124c4:	003fe706 	br	4012464 <_gp+0xffff1c28>
 40124c8:	0005883a 	mov	r2,zero
 40124cc:	f800283a 	ret

040124d0 <_write_r>:
 40124d0:	defffd04 	addi	sp,sp,-12
 40124d4:	2805883a 	mov	r2,r5
 40124d8:	dc000015 	stw	r16,0(sp)
 40124dc:	040100b4 	movhi	r16,1026
 40124e0:	dc400115 	stw	r17,4(sp)
 40124e4:	300b883a 	mov	r5,r6
 40124e8:	84290e04 	addi	r16,r16,-23496
 40124ec:	2023883a 	mov	r17,r4
 40124f0:	380d883a 	mov	r6,r7
 40124f4:	1009883a 	mov	r4,r2
 40124f8:	dfc00215 	stw	ra,8(sp)
 40124fc:	80000015 	stw	zero,0(r16)
 4012500:	4014d7c0 	call	4014d7c <write>
 4012504:	00ffffc4 	movi	r3,-1
 4012508:	10c00526 	beq	r2,r3,4012520 <_write_r+0x50>
 401250c:	dfc00217 	ldw	ra,8(sp)
 4012510:	dc400117 	ldw	r17,4(sp)
 4012514:	dc000017 	ldw	r16,0(sp)
 4012518:	dec00304 	addi	sp,sp,12
 401251c:	f800283a 	ret
 4012520:	80c00017 	ldw	r3,0(r16)
 4012524:	183ff926 	beq	r3,zero,401250c <_gp+0xffff1cd0>
 4012528:	88c00015 	stw	r3,0(r17)
 401252c:	003ff706 	br	401250c <_gp+0xffff1cd0>

04012530 <_close_r>:
 4012530:	defffd04 	addi	sp,sp,-12
 4012534:	dc000015 	stw	r16,0(sp)
 4012538:	040100b4 	movhi	r16,1026
 401253c:	dc400115 	stw	r17,4(sp)
 4012540:	84290e04 	addi	r16,r16,-23496
 4012544:	2023883a 	mov	r17,r4
 4012548:	2809883a 	mov	r4,r5
 401254c:	dfc00215 	stw	ra,8(sp)
 4012550:	80000015 	stw	zero,0(r16)
 4012554:	40140000 	call	4014000 <close>
 4012558:	00ffffc4 	movi	r3,-1
 401255c:	10c00526 	beq	r2,r3,4012574 <_close_r+0x44>
 4012560:	dfc00217 	ldw	ra,8(sp)
 4012564:	dc400117 	ldw	r17,4(sp)
 4012568:	dc000017 	ldw	r16,0(sp)
 401256c:	dec00304 	addi	sp,sp,12
 4012570:	f800283a 	ret
 4012574:	80c00017 	ldw	r3,0(r16)
 4012578:	183ff926 	beq	r3,zero,4012560 <_gp+0xffff1d24>
 401257c:	88c00015 	stw	r3,0(r17)
 4012580:	003ff706 	br	4012560 <_gp+0xffff1d24>

04012584 <__sflush_r>:
 4012584:	2880030b 	ldhu	r2,12(r5)
 4012588:	defffb04 	addi	sp,sp,-20
 401258c:	dcc00315 	stw	r19,12(sp)
 4012590:	dc400115 	stw	r17,4(sp)
 4012594:	dfc00415 	stw	ra,16(sp)
 4012598:	dc800215 	stw	r18,8(sp)
 401259c:	dc000015 	stw	r16,0(sp)
 40125a0:	10c0020c 	andi	r3,r2,8
 40125a4:	2823883a 	mov	r17,r5
 40125a8:	2027883a 	mov	r19,r4
 40125ac:	1800311e 	bne	r3,zero,4012674 <__sflush_r+0xf0>
 40125b0:	28c00117 	ldw	r3,4(r5)
 40125b4:	10820014 	ori	r2,r2,2048
 40125b8:	2880030d 	sth	r2,12(r5)
 40125bc:	00c04b0e 	bge	zero,r3,40126ec <__sflush_r+0x168>
 40125c0:	8a000a17 	ldw	r8,40(r17)
 40125c4:	40002326 	beq	r8,zero,4012654 <__sflush_r+0xd0>
 40125c8:	9c000017 	ldw	r16,0(r19)
 40125cc:	10c4000c 	andi	r3,r2,4096
 40125d0:	98000015 	stw	zero,0(r19)
 40125d4:	18004826 	beq	r3,zero,40126f8 <__sflush_r+0x174>
 40125d8:	89801417 	ldw	r6,80(r17)
 40125dc:	10c0010c 	andi	r3,r2,4
 40125e0:	18000626 	beq	r3,zero,40125fc <__sflush_r+0x78>
 40125e4:	88c00117 	ldw	r3,4(r17)
 40125e8:	88800c17 	ldw	r2,48(r17)
 40125ec:	30cdc83a 	sub	r6,r6,r3
 40125f0:	10000226 	beq	r2,zero,40125fc <__sflush_r+0x78>
 40125f4:	88800f17 	ldw	r2,60(r17)
 40125f8:	308dc83a 	sub	r6,r6,r2
 40125fc:	89400717 	ldw	r5,28(r17)
 4012600:	000f883a 	mov	r7,zero
 4012604:	9809883a 	mov	r4,r19
 4012608:	403ee83a 	callr	r8
 401260c:	00ffffc4 	movi	r3,-1
 4012610:	10c04426 	beq	r2,r3,4012724 <__sflush_r+0x1a0>
 4012614:	88c0030b 	ldhu	r3,12(r17)
 4012618:	89000417 	ldw	r4,16(r17)
 401261c:	88000115 	stw	zero,4(r17)
 4012620:	197dffcc 	andi	r5,r3,63487
 4012624:	8940030d 	sth	r5,12(r17)
 4012628:	89000015 	stw	r4,0(r17)
 401262c:	18c4000c 	andi	r3,r3,4096
 4012630:	18002c1e 	bne	r3,zero,40126e4 <__sflush_r+0x160>
 4012634:	89400c17 	ldw	r5,48(r17)
 4012638:	9c000015 	stw	r16,0(r19)
 401263c:	28000526 	beq	r5,zero,4012654 <__sflush_r+0xd0>
 4012640:	88801004 	addi	r2,r17,64
 4012644:	28800226 	beq	r5,r2,4012650 <__sflush_r+0xcc>
 4012648:	9809883a 	mov	r4,r19
 401264c:	4010b600 	call	4010b60 <_free_r>
 4012650:	88000c15 	stw	zero,48(r17)
 4012654:	0005883a 	mov	r2,zero
 4012658:	dfc00417 	ldw	ra,16(sp)
 401265c:	dcc00317 	ldw	r19,12(sp)
 4012660:	dc800217 	ldw	r18,8(sp)
 4012664:	dc400117 	ldw	r17,4(sp)
 4012668:	dc000017 	ldw	r16,0(sp)
 401266c:	dec00504 	addi	sp,sp,20
 4012670:	f800283a 	ret
 4012674:	2c800417 	ldw	r18,16(r5)
 4012678:	903ff626 	beq	r18,zero,4012654 <_gp+0xffff1e18>
 401267c:	2c000017 	ldw	r16,0(r5)
 4012680:	108000cc 	andi	r2,r2,3
 4012684:	2c800015 	stw	r18,0(r5)
 4012688:	84a1c83a 	sub	r16,r16,r18
 401268c:	1000131e 	bne	r2,zero,40126dc <__sflush_r+0x158>
 4012690:	28800517 	ldw	r2,20(r5)
 4012694:	88800215 	stw	r2,8(r17)
 4012698:	04000316 	blt	zero,r16,40126a8 <__sflush_r+0x124>
 401269c:	003fed06 	br	4012654 <_gp+0xffff1e18>
 40126a0:	90a5883a 	add	r18,r18,r2
 40126a4:	043feb0e 	bge	zero,r16,4012654 <_gp+0xffff1e18>
 40126a8:	88800917 	ldw	r2,36(r17)
 40126ac:	89400717 	ldw	r5,28(r17)
 40126b0:	800f883a 	mov	r7,r16
 40126b4:	900d883a 	mov	r6,r18
 40126b8:	9809883a 	mov	r4,r19
 40126bc:	103ee83a 	callr	r2
 40126c0:	80a1c83a 	sub	r16,r16,r2
 40126c4:	00bff616 	blt	zero,r2,40126a0 <_gp+0xffff1e64>
 40126c8:	88c0030b 	ldhu	r3,12(r17)
 40126cc:	00bfffc4 	movi	r2,-1
 40126d0:	18c01014 	ori	r3,r3,64
 40126d4:	88c0030d 	sth	r3,12(r17)
 40126d8:	003fdf06 	br	4012658 <_gp+0xffff1e1c>
 40126dc:	0005883a 	mov	r2,zero
 40126e0:	003fec06 	br	4012694 <_gp+0xffff1e58>
 40126e4:	88801415 	stw	r2,80(r17)
 40126e8:	003fd206 	br	4012634 <_gp+0xffff1df8>
 40126ec:	28c00f17 	ldw	r3,60(r5)
 40126f0:	00ffb316 	blt	zero,r3,40125c0 <_gp+0xffff1d84>
 40126f4:	003fd706 	br	4012654 <_gp+0xffff1e18>
 40126f8:	89400717 	ldw	r5,28(r17)
 40126fc:	000d883a 	mov	r6,zero
 4012700:	01c00044 	movi	r7,1
 4012704:	9809883a 	mov	r4,r19
 4012708:	403ee83a 	callr	r8
 401270c:	100d883a 	mov	r6,r2
 4012710:	00bfffc4 	movi	r2,-1
 4012714:	30801426 	beq	r6,r2,4012768 <__sflush_r+0x1e4>
 4012718:	8880030b 	ldhu	r2,12(r17)
 401271c:	8a000a17 	ldw	r8,40(r17)
 4012720:	003fae06 	br	40125dc <_gp+0xffff1da0>
 4012724:	98c00017 	ldw	r3,0(r19)
 4012728:	183fba26 	beq	r3,zero,4012614 <_gp+0xffff1dd8>
 401272c:	01000744 	movi	r4,29
 4012730:	19000626 	beq	r3,r4,401274c <__sflush_r+0x1c8>
 4012734:	01000584 	movi	r4,22
 4012738:	19000426 	beq	r3,r4,401274c <__sflush_r+0x1c8>
 401273c:	88c0030b 	ldhu	r3,12(r17)
 4012740:	18c01014 	ori	r3,r3,64
 4012744:	88c0030d 	sth	r3,12(r17)
 4012748:	003fc306 	br	4012658 <_gp+0xffff1e1c>
 401274c:	8880030b 	ldhu	r2,12(r17)
 4012750:	88c00417 	ldw	r3,16(r17)
 4012754:	88000115 	stw	zero,4(r17)
 4012758:	10bdffcc 	andi	r2,r2,63487
 401275c:	8880030d 	sth	r2,12(r17)
 4012760:	88c00015 	stw	r3,0(r17)
 4012764:	003fb306 	br	4012634 <_gp+0xffff1df8>
 4012768:	98800017 	ldw	r2,0(r19)
 401276c:	103fea26 	beq	r2,zero,4012718 <_gp+0xffff1edc>
 4012770:	00c00744 	movi	r3,29
 4012774:	10c00226 	beq	r2,r3,4012780 <__sflush_r+0x1fc>
 4012778:	00c00584 	movi	r3,22
 401277c:	10c0031e 	bne	r2,r3,401278c <__sflush_r+0x208>
 4012780:	9c000015 	stw	r16,0(r19)
 4012784:	0005883a 	mov	r2,zero
 4012788:	003fb306 	br	4012658 <_gp+0xffff1e1c>
 401278c:	88c0030b 	ldhu	r3,12(r17)
 4012790:	3005883a 	mov	r2,r6
 4012794:	18c01014 	ori	r3,r3,64
 4012798:	88c0030d 	sth	r3,12(r17)
 401279c:	003fae06 	br	4012658 <_gp+0xffff1e1c>

040127a0 <_fflush_r>:
 40127a0:	defffd04 	addi	sp,sp,-12
 40127a4:	dc000115 	stw	r16,4(sp)
 40127a8:	dfc00215 	stw	ra,8(sp)
 40127ac:	2021883a 	mov	r16,r4
 40127b0:	20000226 	beq	r4,zero,40127bc <_fflush_r+0x1c>
 40127b4:	20800e17 	ldw	r2,56(r4)
 40127b8:	10000c26 	beq	r2,zero,40127ec <_fflush_r+0x4c>
 40127bc:	2880030f 	ldh	r2,12(r5)
 40127c0:	1000051e 	bne	r2,zero,40127d8 <_fflush_r+0x38>
 40127c4:	0005883a 	mov	r2,zero
 40127c8:	dfc00217 	ldw	ra,8(sp)
 40127cc:	dc000117 	ldw	r16,4(sp)
 40127d0:	dec00304 	addi	sp,sp,12
 40127d4:	f800283a 	ret
 40127d8:	8009883a 	mov	r4,r16
 40127dc:	dfc00217 	ldw	ra,8(sp)
 40127e0:	dc000117 	ldw	r16,4(sp)
 40127e4:	dec00304 	addi	sp,sp,12
 40127e8:	40125841 	jmpi	4012584 <__sflush_r>
 40127ec:	d9400015 	stw	r5,0(sp)
 40127f0:	4012b8c0 	call	4012b8c <__sinit>
 40127f4:	d9400017 	ldw	r5,0(sp)
 40127f8:	003ff006 	br	40127bc <_gp+0xffff1f80>

040127fc <fflush>:
 40127fc:	20000526 	beq	r4,zero,4012814 <fflush+0x18>
 4012800:	008100b4 	movhi	r2,1026
 4012804:	10a21504 	addi	r2,r2,-30636
 4012808:	200b883a 	mov	r5,r4
 401280c:	11000017 	ldw	r4,0(r2)
 4012810:	40127a01 	jmpi	40127a0 <_fflush_r>
 4012814:	008100b4 	movhi	r2,1026
 4012818:	10a21404 	addi	r2,r2,-30640
 401281c:	11000017 	ldw	r4,0(r2)
 4012820:	01410074 	movhi	r5,1025
 4012824:	2949e804 	addi	r5,r5,10144
 4012828:	40132141 	jmpi	4013214 <_fwalk_reent>

0401282c <__fp_unlock>:
 401282c:	0005883a 	mov	r2,zero
 4012830:	f800283a 	ret

04012834 <_cleanup_r>:
 4012834:	01410074 	movhi	r5,1025
 4012838:	294f3904 	addi	r5,r5,15588
 401283c:	40132141 	jmpi	4013214 <_fwalk_reent>

04012840 <__sinit.part.1>:
 4012840:	defff704 	addi	sp,sp,-36
 4012844:	00c10074 	movhi	r3,1025
 4012848:	dfc00815 	stw	ra,32(sp)
 401284c:	ddc00715 	stw	r23,28(sp)
 4012850:	dd800615 	stw	r22,24(sp)
 4012854:	dd400515 	stw	r21,20(sp)
 4012858:	dd000415 	stw	r20,16(sp)
 401285c:	dcc00315 	stw	r19,12(sp)
 4012860:	dc800215 	stw	r18,8(sp)
 4012864:	dc400115 	stw	r17,4(sp)
 4012868:	dc000015 	stw	r16,0(sp)
 401286c:	18ca0d04 	addi	r3,r3,10292
 4012870:	24000117 	ldw	r16,4(r4)
 4012874:	20c00f15 	stw	r3,60(r4)
 4012878:	2080bb04 	addi	r2,r4,748
 401287c:	00c000c4 	movi	r3,3
 4012880:	20c0b915 	stw	r3,740(r4)
 4012884:	2080ba15 	stw	r2,744(r4)
 4012888:	2000b815 	stw	zero,736(r4)
 401288c:	05c00204 	movi	r23,8
 4012890:	00800104 	movi	r2,4
 4012894:	2025883a 	mov	r18,r4
 4012898:	b80d883a 	mov	r6,r23
 401289c:	81001704 	addi	r4,r16,92
 40128a0:	000b883a 	mov	r5,zero
 40128a4:	80000015 	stw	zero,0(r16)
 40128a8:	80000115 	stw	zero,4(r16)
 40128ac:	80000215 	stw	zero,8(r16)
 40128b0:	8080030d 	sth	r2,12(r16)
 40128b4:	80001915 	stw	zero,100(r16)
 40128b8:	8000038d 	sth	zero,14(r16)
 40128bc:	80000415 	stw	zero,16(r16)
 40128c0:	80000515 	stw	zero,20(r16)
 40128c4:	80000615 	stw	zero,24(r16)
 40128c8:	4011e5c0 	call	4011e5c <memset>
 40128cc:	05810074 	movhi	r22,1025
 40128d0:	94400217 	ldw	r17,8(r18)
 40128d4:	05410074 	movhi	r21,1025
 40128d8:	05010074 	movhi	r20,1025
 40128dc:	04c10074 	movhi	r19,1025
 40128e0:	b588bf04 	addi	r22,r22,8956
 40128e4:	ad48d604 	addi	r21,r21,9048
 40128e8:	a508f504 	addi	r20,r20,9172
 40128ec:	9cc90c04 	addi	r19,r19,9264
 40128f0:	85800815 	stw	r22,32(r16)
 40128f4:	85400915 	stw	r21,36(r16)
 40128f8:	85000a15 	stw	r20,40(r16)
 40128fc:	84c00b15 	stw	r19,44(r16)
 4012900:	84000715 	stw	r16,28(r16)
 4012904:	00800284 	movi	r2,10
 4012908:	8880030d 	sth	r2,12(r17)
 401290c:	00800044 	movi	r2,1
 4012910:	b80d883a 	mov	r6,r23
 4012914:	89001704 	addi	r4,r17,92
 4012918:	000b883a 	mov	r5,zero
 401291c:	88000015 	stw	zero,0(r17)
 4012920:	88000115 	stw	zero,4(r17)
 4012924:	88000215 	stw	zero,8(r17)
 4012928:	88001915 	stw	zero,100(r17)
 401292c:	8880038d 	sth	r2,14(r17)
 4012930:	88000415 	stw	zero,16(r17)
 4012934:	88000515 	stw	zero,20(r17)
 4012938:	88000615 	stw	zero,24(r17)
 401293c:	4011e5c0 	call	4011e5c <memset>
 4012940:	94000317 	ldw	r16,12(r18)
 4012944:	00800484 	movi	r2,18
 4012948:	8c400715 	stw	r17,28(r17)
 401294c:	8d800815 	stw	r22,32(r17)
 4012950:	8d400915 	stw	r21,36(r17)
 4012954:	8d000a15 	stw	r20,40(r17)
 4012958:	8cc00b15 	stw	r19,44(r17)
 401295c:	8080030d 	sth	r2,12(r16)
 4012960:	00800084 	movi	r2,2
 4012964:	80000015 	stw	zero,0(r16)
 4012968:	80000115 	stw	zero,4(r16)
 401296c:	80000215 	stw	zero,8(r16)
 4012970:	80001915 	stw	zero,100(r16)
 4012974:	8080038d 	sth	r2,14(r16)
 4012978:	80000415 	stw	zero,16(r16)
 401297c:	80000515 	stw	zero,20(r16)
 4012980:	80000615 	stw	zero,24(r16)
 4012984:	b80d883a 	mov	r6,r23
 4012988:	000b883a 	mov	r5,zero
 401298c:	81001704 	addi	r4,r16,92
 4012990:	4011e5c0 	call	4011e5c <memset>
 4012994:	00800044 	movi	r2,1
 4012998:	84000715 	stw	r16,28(r16)
 401299c:	85800815 	stw	r22,32(r16)
 40129a0:	85400915 	stw	r21,36(r16)
 40129a4:	85000a15 	stw	r20,40(r16)
 40129a8:	84c00b15 	stw	r19,44(r16)
 40129ac:	90800e15 	stw	r2,56(r18)
 40129b0:	dfc00817 	ldw	ra,32(sp)
 40129b4:	ddc00717 	ldw	r23,28(sp)
 40129b8:	dd800617 	ldw	r22,24(sp)
 40129bc:	dd400517 	ldw	r21,20(sp)
 40129c0:	dd000417 	ldw	r20,16(sp)
 40129c4:	dcc00317 	ldw	r19,12(sp)
 40129c8:	dc800217 	ldw	r18,8(sp)
 40129cc:	dc400117 	ldw	r17,4(sp)
 40129d0:	dc000017 	ldw	r16,0(sp)
 40129d4:	dec00904 	addi	sp,sp,36
 40129d8:	f800283a 	ret

040129dc <__fp_lock>:
 40129dc:	0005883a 	mov	r2,zero
 40129e0:	f800283a 	ret

040129e4 <__sfmoreglue>:
 40129e4:	defffc04 	addi	sp,sp,-16
 40129e8:	dc800215 	stw	r18,8(sp)
 40129ec:	2825883a 	mov	r18,r5
 40129f0:	dc000015 	stw	r16,0(sp)
 40129f4:	01401a04 	movi	r5,104
 40129f8:	2021883a 	mov	r16,r4
 40129fc:	913fffc4 	addi	r4,r18,-1
 4012a00:	dfc00315 	stw	ra,12(sp)
 4012a04:	dc400115 	stw	r17,4(sp)
 4012a08:	4013f9c0 	call	4013f9c <__mulsi3>
 4012a0c:	8009883a 	mov	r4,r16
 4012a10:	11401d04 	addi	r5,r2,116
 4012a14:	1023883a 	mov	r17,r2
 4012a18:	40115080 	call	4011508 <_malloc_r>
 4012a1c:	1021883a 	mov	r16,r2
 4012a20:	10000726 	beq	r2,zero,4012a40 <__sfmoreglue+0x5c>
 4012a24:	11000304 	addi	r4,r2,12
 4012a28:	10000015 	stw	zero,0(r2)
 4012a2c:	14800115 	stw	r18,4(r2)
 4012a30:	11000215 	stw	r4,8(r2)
 4012a34:	89801a04 	addi	r6,r17,104
 4012a38:	000b883a 	mov	r5,zero
 4012a3c:	4011e5c0 	call	4011e5c <memset>
 4012a40:	8005883a 	mov	r2,r16
 4012a44:	dfc00317 	ldw	ra,12(sp)
 4012a48:	dc800217 	ldw	r18,8(sp)
 4012a4c:	dc400117 	ldw	r17,4(sp)
 4012a50:	dc000017 	ldw	r16,0(sp)
 4012a54:	dec00404 	addi	sp,sp,16
 4012a58:	f800283a 	ret

04012a5c <__sfp>:
 4012a5c:	defffb04 	addi	sp,sp,-20
 4012a60:	dc000015 	stw	r16,0(sp)
 4012a64:	040100b4 	movhi	r16,1026
 4012a68:	84221404 	addi	r16,r16,-30640
 4012a6c:	dcc00315 	stw	r19,12(sp)
 4012a70:	2027883a 	mov	r19,r4
 4012a74:	81000017 	ldw	r4,0(r16)
 4012a78:	dfc00415 	stw	ra,16(sp)
 4012a7c:	dc800215 	stw	r18,8(sp)
 4012a80:	20800e17 	ldw	r2,56(r4)
 4012a84:	dc400115 	stw	r17,4(sp)
 4012a88:	1000021e 	bne	r2,zero,4012a94 <__sfp+0x38>
 4012a8c:	40128400 	call	4012840 <__sinit.part.1>
 4012a90:	81000017 	ldw	r4,0(r16)
 4012a94:	2480b804 	addi	r18,r4,736
 4012a98:	047fffc4 	movi	r17,-1
 4012a9c:	91000117 	ldw	r4,4(r18)
 4012aa0:	94000217 	ldw	r16,8(r18)
 4012aa4:	213fffc4 	addi	r4,r4,-1
 4012aa8:	20000a16 	blt	r4,zero,4012ad4 <__sfp+0x78>
 4012aac:	8080030f 	ldh	r2,12(r16)
 4012ab0:	10000c26 	beq	r2,zero,4012ae4 <__sfp+0x88>
 4012ab4:	80c01d04 	addi	r3,r16,116
 4012ab8:	00000206 	br	4012ac4 <__sfp+0x68>
 4012abc:	18bfe60f 	ldh	r2,-104(r3)
 4012ac0:	10000826 	beq	r2,zero,4012ae4 <__sfp+0x88>
 4012ac4:	213fffc4 	addi	r4,r4,-1
 4012ac8:	1c3ffd04 	addi	r16,r3,-12
 4012acc:	18c01a04 	addi	r3,r3,104
 4012ad0:	247ffa1e 	bne	r4,r17,4012abc <_gp+0xffff2280>
 4012ad4:	90800017 	ldw	r2,0(r18)
 4012ad8:	10001d26 	beq	r2,zero,4012b50 <__sfp+0xf4>
 4012adc:	1025883a 	mov	r18,r2
 4012ae0:	003fee06 	br	4012a9c <_gp+0xffff2260>
 4012ae4:	00bfffc4 	movi	r2,-1
 4012ae8:	8080038d 	sth	r2,14(r16)
 4012aec:	00800044 	movi	r2,1
 4012af0:	8080030d 	sth	r2,12(r16)
 4012af4:	80001915 	stw	zero,100(r16)
 4012af8:	80000015 	stw	zero,0(r16)
 4012afc:	80000215 	stw	zero,8(r16)
 4012b00:	80000115 	stw	zero,4(r16)
 4012b04:	80000415 	stw	zero,16(r16)
 4012b08:	80000515 	stw	zero,20(r16)
 4012b0c:	80000615 	stw	zero,24(r16)
 4012b10:	01800204 	movi	r6,8
 4012b14:	000b883a 	mov	r5,zero
 4012b18:	81001704 	addi	r4,r16,92
 4012b1c:	4011e5c0 	call	4011e5c <memset>
 4012b20:	8005883a 	mov	r2,r16
 4012b24:	80000c15 	stw	zero,48(r16)
 4012b28:	80000d15 	stw	zero,52(r16)
 4012b2c:	80001115 	stw	zero,68(r16)
 4012b30:	80001215 	stw	zero,72(r16)
 4012b34:	dfc00417 	ldw	ra,16(sp)
 4012b38:	dcc00317 	ldw	r19,12(sp)
 4012b3c:	dc800217 	ldw	r18,8(sp)
 4012b40:	dc400117 	ldw	r17,4(sp)
 4012b44:	dc000017 	ldw	r16,0(sp)
 4012b48:	dec00504 	addi	sp,sp,20
 4012b4c:	f800283a 	ret
 4012b50:	01400104 	movi	r5,4
 4012b54:	9809883a 	mov	r4,r19
 4012b58:	40129e40 	call	40129e4 <__sfmoreglue>
 4012b5c:	90800015 	stw	r2,0(r18)
 4012b60:	103fde1e 	bne	r2,zero,4012adc <_gp+0xffff22a0>
 4012b64:	00800304 	movi	r2,12
 4012b68:	98800015 	stw	r2,0(r19)
 4012b6c:	0005883a 	mov	r2,zero
 4012b70:	003ff006 	br	4012b34 <_gp+0xffff22f8>

04012b74 <_cleanup>:
 4012b74:	008100b4 	movhi	r2,1026
 4012b78:	10a21404 	addi	r2,r2,-30640
 4012b7c:	11000017 	ldw	r4,0(r2)
 4012b80:	01410074 	movhi	r5,1025
 4012b84:	294f3904 	addi	r5,r5,15588
 4012b88:	40132141 	jmpi	4013214 <_fwalk_reent>

04012b8c <__sinit>:
 4012b8c:	20800e17 	ldw	r2,56(r4)
 4012b90:	10000126 	beq	r2,zero,4012b98 <__sinit+0xc>
 4012b94:	f800283a 	ret
 4012b98:	40128401 	jmpi	4012840 <__sinit.part.1>

04012b9c <__sfp_lock_acquire>:
 4012b9c:	f800283a 	ret

04012ba0 <__sfp_lock_release>:
 4012ba0:	f800283a 	ret

04012ba4 <__sinit_lock_acquire>:
 4012ba4:	f800283a 	ret

04012ba8 <__sinit_lock_release>:
 4012ba8:	f800283a 	ret

04012bac <__fp_lock_all>:
 4012bac:	008100b4 	movhi	r2,1026
 4012bb0:	10a21504 	addi	r2,r2,-30636
 4012bb4:	11000017 	ldw	r4,0(r2)
 4012bb8:	01410074 	movhi	r5,1025
 4012bbc:	294a7704 	addi	r5,r5,10716
 4012bc0:	40131501 	jmpi	4013150 <_fwalk>

04012bc4 <__fp_unlock_all>:
 4012bc4:	008100b4 	movhi	r2,1026
 4012bc8:	10a21504 	addi	r2,r2,-30636
 4012bcc:	11000017 	ldw	r4,0(r2)
 4012bd0:	01410074 	movhi	r5,1025
 4012bd4:	294a0b04 	addi	r5,r5,10284
 4012bd8:	40131501 	jmpi	4013150 <_fwalk>

04012bdc <__sflags>:
 4012bdc:	28800007 	ldb	r2,0(r5)
 4012be0:	00c01c84 	movi	r3,114
 4012be4:	10c02426 	beq	r2,r3,4012c78 <__sflags+0x9c>
 4012be8:	00c01dc4 	movi	r3,119
 4012bec:	10c01e26 	beq	r2,r3,4012c68 <__sflags+0x8c>
 4012bf0:	00c01844 	movi	r3,97
 4012bf4:	10c00426 	beq	r2,r3,4012c08 <__sflags+0x2c>
 4012bf8:	00800584 	movi	r2,22
 4012bfc:	20800015 	stw	r2,0(r4)
 4012c00:	0005883a 	mov	r2,zero
 4012c04:	f800283a 	ret
 4012c08:	02c08204 	movi	r11,520
 4012c0c:	01000044 	movi	r4,1
 4012c10:	00804204 	movi	r2,264
 4012c14:	01c00ac4 	movi	r7,43
 4012c18:	02bff8c4 	movi	r10,-29
 4012c1c:	027fff04 	movi	r9,-4
 4012c20:	02001e04 	movi	r8,120
 4012c24:	29400044 	addi	r5,r5,1
 4012c28:	28c00007 	ldb	r3,0(r5)
 4012c2c:	18000626 	beq	r3,zero,4012c48 <__sflags+0x6c>
 4012c30:	19c00826 	beq	r3,r7,4012c54 <__sflags+0x78>
 4012c34:	1a3ffb1e 	bne	r3,r8,4012c24 <_gp+0xffff23e8>
 4012c38:	29400044 	addi	r5,r5,1
 4012c3c:	28c00007 	ldb	r3,0(r5)
 4012c40:	21020014 	ori	r4,r4,2048
 4012c44:	183ffa1e 	bne	r3,zero,4012c30 <_gp+0xffff23f4>
 4012c48:	22c8b03a 	or	r4,r4,r11
 4012c4c:	31000015 	stw	r4,0(r6)
 4012c50:	f800283a 	ret
 4012c54:	1284703a 	and	r2,r2,r10
 4012c58:	2248703a 	and	r4,r4,r9
 4012c5c:	10800414 	ori	r2,r2,16
 4012c60:	21000094 	ori	r4,r4,2
 4012c64:	003fef06 	br	4012c24 <_gp+0xffff23e8>
 4012c68:	02c18004 	movi	r11,1536
 4012c6c:	01000044 	movi	r4,1
 4012c70:	00800204 	movi	r2,8
 4012c74:	003fe706 	br	4012c14 <_gp+0xffff23d8>
 4012c78:	0017883a 	mov	r11,zero
 4012c7c:	0009883a 	mov	r4,zero
 4012c80:	00800104 	movi	r2,4
 4012c84:	003fe306 	br	4012c14 <_gp+0xffff23d8>

04012c88 <__sfvwrite_r>:
 4012c88:	30800217 	ldw	r2,8(r6)
 4012c8c:	10006726 	beq	r2,zero,4012e2c <__sfvwrite_r+0x1a4>
 4012c90:	28c0030b 	ldhu	r3,12(r5)
 4012c94:	defff404 	addi	sp,sp,-48
 4012c98:	dd400715 	stw	r21,28(sp)
 4012c9c:	dd000615 	stw	r20,24(sp)
 4012ca0:	dc000215 	stw	r16,8(sp)
 4012ca4:	dfc00b15 	stw	ra,44(sp)
 4012ca8:	df000a15 	stw	fp,40(sp)
 4012cac:	ddc00915 	stw	r23,36(sp)
 4012cb0:	dd800815 	stw	r22,32(sp)
 4012cb4:	dcc00515 	stw	r19,20(sp)
 4012cb8:	dc800415 	stw	r18,16(sp)
 4012cbc:	dc400315 	stw	r17,12(sp)
 4012cc0:	1880020c 	andi	r2,r3,8
 4012cc4:	2821883a 	mov	r16,r5
 4012cc8:	202b883a 	mov	r21,r4
 4012ccc:	3029883a 	mov	r20,r6
 4012cd0:	10002726 	beq	r2,zero,4012d70 <__sfvwrite_r+0xe8>
 4012cd4:	28800417 	ldw	r2,16(r5)
 4012cd8:	10002526 	beq	r2,zero,4012d70 <__sfvwrite_r+0xe8>
 4012cdc:	1880008c 	andi	r2,r3,2
 4012ce0:	a4400017 	ldw	r17,0(r20)
 4012ce4:	10002a26 	beq	r2,zero,4012d90 <__sfvwrite_r+0x108>
 4012ce8:	05a00034 	movhi	r22,32768
 4012cec:	0027883a 	mov	r19,zero
 4012cf0:	0025883a 	mov	r18,zero
 4012cf4:	b5bf0004 	addi	r22,r22,-1024
 4012cf8:	980d883a 	mov	r6,r19
 4012cfc:	a809883a 	mov	r4,r21
 4012d00:	90004626 	beq	r18,zero,4012e1c <__sfvwrite_r+0x194>
 4012d04:	900f883a 	mov	r7,r18
 4012d08:	b480022e 	bgeu	r22,r18,4012d14 <__sfvwrite_r+0x8c>
 4012d0c:	01e00034 	movhi	r7,32768
 4012d10:	39ff0004 	addi	r7,r7,-1024
 4012d14:	80800917 	ldw	r2,36(r16)
 4012d18:	81400717 	ldw	r5,28(r16)
 4012d1c:	103ee83a 	callr	r2
 4012d20:	00805a0e 	bge	zero,r2,4012e8c <__sfvwrite_r+0x204>
 4012d24:	a0c00217 	ldw	r3,8(r20)
 4012d28:	98a7883a 	add	r19,r19,r2
 4012d2c:	90a5c83a 	sub	r18,r18,r2
 4012d30:	1885c83a 	sub	r2,r3,r2
 4012d34:	a0800215 	stw	r2,8(r20)
 4012d38:	103fef1e 	bne	r2,zero,4012cf8 <_gp+0xffff24bc>
 4012d3c:	0005883a 	mov	r2,zero
 4012d40:	dfc00b17 	ldw	ra,44(sp)
 4012d44:	df000a17 	ldw	fp,40(sp)
 4012d48:	ddc00917 	ldw	r23,36(sp)
 4012d4c:	dd800817 	ldw	r22,32(sp)
 4012d50:	dd400717 	ldw	r21,28(sp)
 4012d54:	dd000617 	ldw	r20,24(sp)
 4012d58:	dcc00517 	ldw	r19,20(sp)
 4012d5c:	dc800417 	ldw	r18,16(sp)
 4012d60:	dc400317 	ldw	r17,12(sp)
 4012d64:	dc000217 	ldw	r16,8(sp)
 4012d68:	dec00c04 	addi	sp,sp,48
 4012d6c:	f800283a 	ret
 4012d70:	800b883a 	mov	r5,r16
 4012d74:	a809883a 	mov	r4,r21
 4012d78:	4013b900 	call	4013b90 <__swsetup_r>
 4012d7c:	1000ee1e 	bne	r2,zero,4013138 <__sfvwrite_r+0x4b0>
 4012d80:	80c0030b 	ldhu	r3,12(r16)
 4012d84:	a4400017 	ldw	r17,0(r20)
 4012d88:	1880008c 	andi	r2,r3,2
 4012d8c:	103fd61e 	bne	r2,zero,4012ce8 <_gp+0xffff24ac>
 4012d90:	1880004c 	andi	r2,r3,1
 4012d94:	1000421e 	bne	r2,zero,4012ea0 <__sfvwrite_r+0x218>
 4012d98:	0039883a 	mov	fp,zero
 4012d9c:	0025883a 	mov	r18,zero
 4012da0:	90001a26 	beq	r18,zero,4012e0c <__sfvwrite_r+0x184>
 4012da4:	1880800c 	andi	r2,r3,512
 4012da8:	84c00217 	ldw	r19,8(r16)
 4012dac:	10002126 	beq	r2,zero,4012e34 <__sfvwrite_r+0x1ac>
 4012db0:	982f883a 	mov	r23,r19
 4012db4:	94c09636 	bltu	r18,r19,4013010 <__sfvwrite_r+0x388>
 4012db8:	1881200c 	andi	r2,r3,1152
 4012dbc:	1000a11e 	bne	r2,zero,4013044 <__sfvwrite_r+0x3bc>
 4012dc0:	81000017 	ldw	r4,0(r16)
 4012dc4:	b80d883a 	mov	r6,r23
 4012dc8:	e00b883a 	mov	r5,fp
 4012dcc:	40134700 	call	4013470 <memmove>
 4012dd0:	80c00217 	ldw	r3,8(r16)
 4012dd4:	81000017 	ldw	r4,0(r16)
 4012dd8:	9005883a 	mov	r2,r18
 4012ddc:	1ce7c83a 	sub	r19,r3,r19
 4012de0:	25cf883a 	add	r7,r4,r23
 4012de4:	84c00215 	stw	r19,8(r16)
 4012de8:	81c00015 	stw	r7,0(r16)
 4012dec:	a0c00217 	ldw	r3,8(r20)
 4012df0:	e0b9883a 	add	fp,fp,r2
 4012df4:	90a5c83a 	sub	r18,r18,r2
 4012df8:	18a7c83a 	sub	r19,r3,r2
 4012dfc:	a4c00215 	stw	r19,8(r20)
 4012e00:	983fce26 	beq	r19,zero,4012d3c <_gp+0xffff2500>
 4012e04:	80c0030b 	ldhu	r3,12(r16)
 4012e08:	903fe61e 	bne	r18,zero,4012da4 <_gp+0xffff2568>
 4012e0c:	8f000017 	ldw	fp,0(r17)
 4012e10:	8c800117 	ldw	r18,4(r17)
 4012e14:	8c400204 	addi	r17,r17,8
 4012e18:	003fe106 	br	4012da0 <_gp+0xffff2564>
 4012e1c:	8cc00017 	ldw	r19,0(r17)
 4012e20:	8c800117 	ldw	r18,4(r17)
 4012e24:	8c400204 	addi	r17,r17,8
 4012e28:	003fb306 	br	4012cf8 <_gp+0xffff24bc>
 4012e2c:	0005883a 	mov	r2,zero
 4012e30:	f800283a 	ret
 4012e34:	81000017 	ldw	r4,0(r16)
 4012e38:	80800417 	ldw	r2,16(r16)
 4012e3c:	11005a36 	bltu	r2,r4,4012fa8 <__sfvwrite_r+0x320>
 4012e40:	85c00517 	ldw	r23,20(r16)
 4012e44:	95c05836 	bltu	r18,r23,4012fa8 <__sfvwrite_r+0x320>
 4012e48:	00a00034 	movhi	r2,32768
 4012e4c:	10bfffc4 	addi	r2,r2,-1
 4012e50:	9009883a 	mov	r4,r18
 4012e54:	1480012e 	bgeu	r2,r18,4012e5c <__sfvwrite_r+0x1d4>
 4012e58:	1009883a 	mov	r4,r2
 4012e5c:	b80b883a 	mov	r5,r23
 4012e60:	4013de80 	call	4013de8 <__divsi3>
 4012e64:	b80b883a 	mov	r5,r23
 4012e68:	1009883a 	mov	r4,r2
 4012e6c:	4013f9c0 	call	4013f9c <__mulsi3>
 4012e70:	81400717 	ldw	r5,28(r16)
 4012e74:	80c00917 	ldw	r3,36(r16)
 4012e78:	100f883a 	mov	r7,r2
 4012e7c:	e00d883a 	mov	r6,fp
 4012e80:	a809883a 	mov	r4,r21
 4012e84:	183ee83a 	callr	r3
 4012e88:	00bfd816 	blt	zero,r2,4012dec <_gp+0xffff25b0>
 4012e8c:	8080030b 	ldhu	r2,12(r16)
 4012e90:	10801014 	ori	r2,r2,64
 4012e94:	8080030d 	sth	r2,12(r16)
 4012e98:	00bfffc4 	movi	r2,-1
 4012e9c:	003fa806 	br	4012d40 <_gp+0xffff2504>
 4012ea0:	0027883a 	mov	r19,zero
 4012ea4:	0011883a 	mov	r8,zero
 4012ea8:	0039883a 	mov	fp,zero
 4012eac:	0025883a 	mov	r18,zero
 4012eb0:	90001f26 	beq	r18,zero,4012f30 <__sfvwrite_r+0x2a8>
 4012eb4:	40005a26 	beq	r8,zero,4013020 <__sfvwrite_r+0x398>
 4012eb8:	982d883a 	mov	r22,r19
 4012ebc:	94c0012e 	bgeu	r18,r19,4012ec4 <__sfvwrite_r+0x23c>
 4012ec0:	902d883a 	mov	r22,r18
 4012ec4:	81000017 	ldw	r4,0(r16)
 4012ec8:	80800417 	ldw	r2,16(r16)
 4012ecc:	b02f883a 	mov	r23,r22
 4012ed0:	81c00517 	ldw	r7,20(r16)
 4012ed4:	1100032e 	bgeu	r2,r4,4012ee4 <__sfvwrite_r+0x25c>
 4012ed8:	80c00217 	ldw	r3,8(r16)
 4012edc:	38c7883a 	add	r3,r7,r3
 4012ee0:	1d801816 	blt	r3,r22,4012f44 <__sfvwrite_r+0x2bc>
 4012ee4:	b1c03e16 	blt	r22,r7,4012fe0 <__sfvwrite_r+0x358>
 4012ee8:	80800917 	ldw	r2,36(r16)
 4012eec:	81400717 	ldw	r5,28(r16)
 4012ef0:	e00d883a 	mov	r6,fp
 4012ef4:	da000115 	stw	r8,4(sp)
 4012ef8:	a809883a 	mov	r4,r21
 4012efc:	103ee83a 	callr	r2
 4012f00:	102f883a 	mov	r23,r2
 4012f04:	da000117 	ldw	r8,4(sp)
 4012f08:	00bfe00e 	bge	zero,r2,4012e8c <_gp+0xffff2650>
 4012f0c:	9de7c83a 	sub	r19,r19,r23
 4012f10:	98001f26 	beq	r19,zero,4012f90 <__sfvwrite_r+0x308>
 4012f14:	a0800217 	ldw	r2,8(r20)
 4012f18:	e5f9883a 	add	fp,fp,r23
 4012f1c:	95e5c83a 	sub	r18,r18,r23
 4012f20:	15efc83a 	sub	r23,r2,r23
 4012f24:	a5c00215 	stw	r23,8(r20)
 4012f28:	b83f8426 	beq	r23,zero,4012d3c <_gp+0xffff2500>
 4012f2c:	903fe11e 	bne	r18,zero,4012eb4 <_gp+0xffff2678>
 4012f30:	8f000017 	ldw	fp,0(r17)
 4012f34:	8c800117 	ldw	r18,4(r17)
 4012f38:	0011883a 	mov	r8,zero
 4012f3c:	8c400204 	addi	r17,r17,8
 4012f40:	003fdb06 	br	4012eb0 <_gp+0xffff2674>
 4012f44:	180d883a 	mov	r6,r3
 4012f48:	e00b883a 	mov	r5,fp
 4012f4c:	da000115 	stw	r8,4(sp)
 4012f50:	d8c00015 	stw	r3,0(sp)
 4012f54:	40134700 	call	4013470 <memmove>
 4012f58:	d8c00017 	ldw	r3,0(sp)
 4012f5c:	80800017 	ldw	r2,0(r16)
 4012f60:	800b883a 	mov	r5,r16
 4012f64:	a809883a 	mov	r4,r21
 4012f68:	10c5883a 	add	r2,r2,r3
 4012f6c:	80800015 	stw	r2,0(r16)
 4012f70:	d8c00015 	stw	r3,0(sp)
 4012f74:	40127a00 	call	40127a0 <_fflush_r>
 4012f78:	d8c00017 	ldw	r3,0(sp)
 4012f7c:	da000117 	ldw	r8,4(sp)
 4012f80:	103fc21e 	bne	r2,zero,4012e8c <_gp+0xffff2650>
 4012f84:	182f883a 	mov	r23,r3
 4012f88:	9de7c83a 	sub	r19,r19,r23
 4012f8c:	983fe11e 	bne	r19,zero,4012f14 <_gp+0xffff26d8>
 4012f90:	800b883a 	mov	r5,r16
 4012f94:	a809883a 	mov	r4,r21
 4012f98:	40127a00 	call	40127a0 <_fflush_r>
 4012f9c:	103fbb1e 	bne	r2,zero,4012e8c <_gp+0xffff2650>
 4012fa0:	0011883a 	mov	r8,zero
 4012fa4:	003fdb06 	br	4012f14 <_gp+0xffff26d8>
 4012fa8:	94c0012e 	bgeu	r18,r19,4012fb0 <__sfvwrite_r+0x328>
 4012fac:	9027883a 	mov	r19,r18
 4012fb0:	980d883a 	mov	r6,r19
 4012fb4:	e00b883a 	mov	r5,fp
 4012fb8:	40134700 	call	4013470 <memmove>
 4012fbc:	80800217 	ldw	r2,8(r16)
 4012fc0:	80c00017 	ldw	r3,0(r16)
 4012fc4:	14c5c83a 	sub	r2,r2,r19
 4012fc8:	1cc7883a 	add	r3,r3,r19
 4012fcc:	80800215 	stw	r2,8(r16)
 4012fd0:	80c00015 	stw	r3,0(r16)
 4012fd4:	10004326 	beq	r2,zero,40130e4 <__sfvwrite_r+0x45c>
 4012fd8:	9805883a 	mov	r2,r19
 4012fdc:	003f8306 	br	4012dec <_gp+0xffff25b0>
 4012fe0:	b00d883a 	mov	r6,r22
 4012fe4:	e00b883a 	mov	r5,fp
 4012fe8:	da000115 	stw	r8,4(sp)
 4012fec:	40134700 	call	4013470 <memmove>
 4012ff0:	80800217 	ldw	r2,8(r16)
 4012ff4:	80c00017 	ldw	r3,0(r16)
 4012ff8:	da000117 	ldw	r8,4(sp)
 4012ffc:	1585c83a 	sub	r2,r2,r22
 4013000:	1dad883a 	add	r22,r3,r22
 4013004:	80800215 	stw	r2,8(r16)
 4013008:	85800015 	stw	r22,0(r16)
 401300c:	003fbf06 	br	4012f0c <_gp+0xffff26d0>
 4013010:	81000017 	ldw	r4,0(r16)
 4013014:	9027883a 	mov	r19,r18
 4013018:	902f883a 	mov	r23,r18
 401301c:	003f6906 	br	4012dc4 <_gp+0xffff2588>
 4013020:	900d883a 	mov	r6,r18
 4013024:	01400284 	movi	r5,10
 4013028:	e009883a 	mov	r4,fp
 401302c:	401338c0 	call	401338c <memchr>
 4013030:	10003e26 	beq	r2,zero,401312c <__sfvwrite_r+0x4a4>
 4013034:	10800044 	addi	r2,r2,1
 4013038:	1727c83a 	sub	r19,r2,fp
 401303c:	02000044 	movi	r8,1
 4013040:	003f9d06 	br	4012eb8 <_gp+0xffff267c>
 4013044:	80800517 	ldw	r2,20(r16)
 4013048:	81400417 	ldw	r5,16(r16)
 401304c:	81c00017 	ldw	r7,0(r16)
 4013050:	10a7883a 	add	r19,r2,r2
 4013054:	9885883a 	add	r2,r19,r2
 4013058:	1026d7fa 	srli	r19,r2,31
 401305c:	396dc83a 	sub	r22,r7,r5
 4013060:	b1000044 	addi	r4,r22,1
 4013064:	9885883a 	add	r2,r19,r2
 4013068:	1027d07a 	srai	r19,r2,1
 401306c:	2485883a 	add	r2,r4,r18
 4013070:	980d883a 	mov	r6,r19
 4013074:	9880022e 	bgeu	r19,r2,4013080 <__sfvwrite_r+0x3f8>
 4013078:	1027883a 	mov	r19,r2
 401307c:	100d883a 	mov	r6,r2
 4013080:	18c1000c 	andi	r3,r3,1024
 4013084:	18001c26 	beq	r3,zero,40130f8 <__sfvwrite_r+0x470>
 4013088:	300b883a 	mov	r5,r6
 401308c:	a809883a 	mov	r4,r21
 4013090:	40115080 	call	4011508 <_malloc_r>
 4013094:	102f883a 	mov	r23,r2
 4013098:	10002926 	beq	r2,zero,4013140 <__sfvwrite_r+0x4b8>
 401309c:	81400417 	ldw	r5,16(r16)
 40130a0:	b00d883a 	mov	r6,r22
 40130a4:	1009883a 	mov	r4,r2
 40130a8:	4011d140 	call	4011d14 <memcpy>
 40130ac:	8080030b 	ldhu	r2,12(r16)
 40130b0:	00fedfc4 	movi	r3,-1153
 40130b4:	10c4703a 	and	r2,r2,r3
 40130b8:	10802014 	ori	r2,r2,128
 40130bc:	8080030d 	sth	r2,12(r16)
 40130c0:	bd89883a 	add	r4,r23,r22
 40130c4:	9d8fc83a 	sub	r7,r19,r22
 40130c8:	85c00415 	stw	r23,16(r16)
 40130cc:	84c00515 	stw	r19,20(r16)
 40130d0:	81000015 	stw	r4,0(r16)
 40130d4:	9027883a 	mov	r19,r18
 40130d8:	81c00215 	stw	r7,8(r16)
 40130dc:	902f883a 	mov	r23,r18
 40130e0:	003f3806 	br	4012dc4 <_gp+0xffff2588>
 40130e4:	800b883a 	mov	r5,r16
 40130e8:	a809883a 	mov	r4,r21
 40130ec:	40127a00 	call	40127a0 <_fflush_r>
 40130f0:	103fb926 	beq	r2,zero,4012fd8 <_gp+0xffff279c>
 40130f4:	003f6506 	br	4012e8c <_gp+0xffff2650>
 40130f8:	a809883a 	mov	r4,r21
 40130fc:	401362c0 	call	401362c <_realloc_r>
 4013100:	102f883a 	mov	r23,r2
 4013104:	103fee1e 	bne	r2,zero,40130c0 <_gp+0xffff2884>
 4013108:	81400417 	ldw	r5,16(r16)
 401310c:	a809883a 	mov	r4,r21
 4013110:	4010b600 	call	4010b60 <_free_r>
 4013114:	8080030b 	ldhu	r2,12(r16)
 4013118:	00ffdfc4 	movi	r3,-129
 401311c:	1884703a 	and	r2,r3,r2
 4013120:	00c00304 	movi	r3,12
 4013124:	a8c00015 	stw	r3,0(r21)
 4013128:	003f5906 	br	4012e90 <_gp+0xffff2654>
 401312c:	94c00044 	addi	r19,r18,1
 4013130:	02000044 	movi	r8,1
 4013134:	003f6006 	br	4012eb8 <_gp+0xffff267c>
 4013138:	00bfffc4 	movi	r2,-1
 401313c:	003f0006 	br	4012d40 <_gp+0xffff2504>
 4013140:	00800304 	movi	r2,12
 4013144:	a8800015 	stw	r2,0(r21)
 4013148:	8080030b 	ldhu	r2,12(r16)
 401314c:	003f5006 	br	4012e90 <_gp+0xffff2654>

04013150 <_fwalk>:
 4013150:	defff704 	addi	sp,sp,-36
 4013154:	dd000415 	stw	r20,16(sp)
 4013158:	dfc00815 	stw	ra,32(sp)
 401315c:	ddc00715 	stw	r23,28(sp)
 4013160:	dd800615 	stw	r22,24(sp)
 4013164:	dd400515 	stw	r21,20(sp)
 4013168:	dcc00315 	stw	r19,12(sp)
 401316c:	dc800215 	stw	r18,8(sp)
 4013170:	dc400115 	stw	r17,4(sp)
 4013174:	dc000015 	stw	r16,0(sp)
 4013178:	2500b804 	addi	r20,r4,736
 401317c:	a0002326 	beq	r20,zero,401320c <_fwalk+0xbc>
 4013180:	282b883a 	mov	r21,r5
 4013184:	002f883a 	mov	r23,zero
 4013188:	05800044 	movi	r22,1
 401318c:	04ffffc4 	movi	r19,-1
 4013190:	a4400117 	ldw	r17,4(r20)
 4013194:	a4800217 	ldw	r18,8(r20)
 4013198:	8c7fffc4 	addi	r17,r17,-1
 401319c:	88000d16 	blt	r17,zero,40131d4 <_fwalk+0x84>
 40131a0:	94000304 	addi	r16,r18,12
 40131a4:	94800384 	addi	r18,r18,14
 40131a8:	8080000b 	ldhu	r2,0(r16)
 40131ac:	8c7fffc4 	addi	r17,r17,-1
 40131b0:	813ffd04 	addi	r4,r16,-12
 40131b4:	b080042e 	bgeu	r22,r2,40131c8 <_fwalk+0x78>
 40131b8:	9080000f 	ldh	r2,0(r18)
 40131bc:	14c00226 	beq	r2,r19,40131c8 <_fwalk+0x78>
 40131c0:	a83ee83a 	callr	r21
 40131c4:	b8aeb03a 	or	r23,r23,r2
 40131c8:	84001a04 	addi	r16,r16,104
 40131cc:	94801a04 	addi	r18,r18,104
 40131d0:	8cfff51e 	bne	r17,r19,40131a8 <_gp+0xffff296c>
 40131d4:	a5000017 	ldw	r20,0(r20)
 40131d8:	a03fed1e 	bne	r20,zero,4013190 <_gp+0xffff2954>
 40131dc:	b805883a 	mov	r2,r23
 40131e0:	dfc00817 	ldw	ra,32(sp)
 40131e4:	ddc00717 	ldw	r23,28(sp)
 40131e8:	dd800617 	ldw	r22,24(sp)
 40131ec:	dd400517 	ldw	r21,20(sp)
 40131f0:	dd000417 	ldw	r20,16(sp)
 40131f4:	dcc00317 	ldw	r19,12(sp)
 40131f8:	dc800217 	ldw	r18,8(sp)
 40131fc:	dc400117 	ldw	r17,4(sp)
 4013200:	dc000017 	ldw	r16,0(sp)
 4013204:	dec00904 	addi	sp,sp,36
 4013208:	f800283a 	ret
 401320c:	002f883a 	mov	r23,zero
 4013210:	003ff206 	br	40131dc <_gp+0xffff29a0>

04013214 <_fwalk_reent>:
 4013214:	defff704 	addi	sp,sp,-36
 4013218:	dd000415 	stw	r20,16(sp)
 401321c:	dfc00815 	stw	ra,32(sp)
 4013220:	ddc00715 	stw	r23,28(sp)
 4013224:	dd800615 	stw	r22,24(sp)
 4013228:	dd400515 	stw	r21,20(sp)
 401322c:	dcc00315 	stw	r19,12(sp)
 4013230:	dc800215 	stw	r18,8(sp)
 4013234:	dc400115 	stw	r17,4(sp)
 4013238:	dc000015 	stw	r16,0(sp)
 401323c:	2500b804 	addi	r20,r4,736
 4013240:	a0002326 	beq	r20,zero,40132d0 <_fwalk_reent+0xbc>
 4013244:	282b883a 	mov	r21,r5
 4013248:	2027883a 	mov	r19,r4
 401324c:	002f883a 	mov	r23,zero
 4013250:	05800044 	movi	r22,1
 4013254:	04bfffc4 	movi	r18,-1
 4013258:	a4400117 	ldw	r17,4(r20)
 401325c:	a4000217 	ldw	r16,8(r20)
 4013260:	8c7fffc4 	addi	r17,r17,-1
 4013264:	88000c16 	blt	r17,zero,4013298 <_fwalk_reent+0x84>
 4013268:	84000304 	addi	r16,r16,12
 401326c:	8080000b 	ldhu	r2,0(r16)
 4013270:	8c7fffc4 	addi	r17,r17,-1
 4013274:	817ffd04 	addi	r5,r16,-12
 4013278:	b080052e 	bgeu	r22,r2,4013290 <_fwalk_reent+0x7c>
 401327c:	8080008f 	ldh	r2,2(r16)
 4013280:	9809883a 	mov	r4,r19
 4013284:	14800226 	beq	r2,r18,4013290 <_fwalk_reent+0x7c>
 4013288:	a83ee83a 	callr	r21
 401328c:	b8aeb03a 	or	r23,r23,r2
 4013290:	84001a04 	addi	r16,r16,104
 4013294:	8cbff51e 	bne	r17,r18,401326c <_gp+0xffff2a30>
 4013298:	a5000017 	ldw	r20,0(r20)
 401329c:	a03fee1e 	bne	r20,zero,4013258 <_gp+0xffff2a1c>
 40132a0:	b805883a 	mov	r2,r23
 40132a4:	dfc00817 	ldw	ra,32(sp)
 40132a8:	ddc00717 	ldw	r23,28(sp)
 40132ac:	dd800617 	ldw	r22,24(sp)
 40132b0:	dd400517 	ldw	r21,20(sp)
 40132b4:	dd000417 	ldw	r20,16(sp)
 40132b8:	dcc00317 	ldw	r19,12(sp)
 40132bc:	dc800217 	ldw	r18,8(sp)
 40132c0:	dc400117 	ldw	r17,4(sp)
 40132c4:	dc000017 	ldw	r16,0(sp)
 40132c8:	dec00904 	addi	sp,sp,36
 40132cc:	f800283a 	ret
 40132d0:	002f883a 	mov	r23,zero
 40132d4:	003ff206 	br	40132a0 <_gp+0xffff2a64>

040132d8 <_isatty_r>:
 40132d8:	defffd04 	addi	sp,sp,-12
 40132dc:	dc000015 	stw	r16,0(sp)
 40132e0:	040100b4 	movhi	r16,1026
 40132e4:	dc400115 	stw	r17,4(sp)
 40132e8:	84290e04 	addi	r16,r16,-23496
 40132ec:	2023883a 	mov	r17,r4
 40132f0:	2809883a 	mov	r4,r5
 40132f4:	dfc00215 	stw	ra,8(sp)
 40132f8:	80000015 	stw	zero,0(r16)
 40132fc:	40144d40 	call	40144d4 <isatty>
 4013300:	00ffffc4 	movi	r3,-1
 4013304:	10c00526 	beq	r2,r3,401331c <_isatty_r+0x44>
 4013308:	dfc00217 	ldw	ra,8(sp)
 401330c:	dc400117 	ldw	r17,4(sp)
 4013310:	dc000017 	ldw	r16,0(sp)
 4013314:	dec00304 	addi	sp,sp,12
 4013318:	f800283a 	ret
 401331c:	80c00017 	ldw	r3,0(r16)
 4013320:	183ff926 	beq	r3,zero,4013308 <_gp+0xffff2acc>
 4013324:	88c00015 	stw	r3,0(r17)
 4013328:	003ff706 	br	4013308 <_gp+0xffff2acc>

0401332c <_lseek_r>:
 401332c:	defffd04 	addi	sp,sp,-12
 4013330:	2805883a 	mov	r2,r5
 4013334:	dc000015 	stw	r16,0(sp)
 4013338:	040100b4 	movhi	r16,1026
 401333c:	dc400115 	stw	r17,4(sp)
 4013340:	300b883a 	mov	r5,r6
 4013344:	84290e04 	addi	r16,r16,-23496
 4013348:	2023883a 	mov	r17,r4
 401334c:	380d883a 	mov	r6,r7
 4013350:	1009883a 	mov	r4,r2
 4013354:	dfc00215 	stw	ra,8(sp)
 4013358:	80000015 	stw	zero,0(r16)
 401335c:	40146a80 	call	40146a8 <lseek>
 4013360:	00ffffc4 	movi	r3,-1
 4013364:	10c00526 	beq	r2,r3,401337c <_lseek_r+0x50>
 4013368:	dfc00217 	ldw	ra,8(sp)
 401336c:	dc400117 	ldw	r17,4(sp)
 4013370:	dc000017 	ldw	r16,0(sp)
 4013374:	dec00304 	addi	sp,sp,12
 4013378:	f800283a 	ret
 401337c:	80c00017 	ldw	r3,0(r16)
 4013380:	183ff926 	beq	r3,zero,4013368 <_gp+0xffff2b2c>
 4013384:	88c00015 	stw	r3,0(r17)
 4013388:	003ff706 	br	4013368 <_gp+0xffff2b2c>

0401338c <memchr>:
 401338c:	208000cc 	andi	r2,r4,3
 4013390:	280f883a 	mov	r7,r5
 4013394:	10003426 	beq	r2,zero,4013468 <memchr+0xdc>
 4013398:	30bfffc4 	addi	r2,r6,-1
 401339c:	30001a26 	beq	r6,zero,4013408 <memchr+0x7c>
 40133a0:	20c00003 	ldbu	r3,0(r4)
 40133a4:	29803fcc 	andi	r6,r5,255
 40133a8:	30c0051e 	bne	r6,r3,40133c0 <memchr+0x34>
 40133ac:	00001806 	br	4013410 <memchr+0x84>
 40133b0:	10001526 	beq	r2,zero,4013408 <memchr+0x7c>
 40133b4:	20c00003 	ldbu	r3,0(r4)
 40133b8:	10bfffc4 	addi	r2,r2,-1
 40133bc:	30c01426 	beq	r6,r3,4013410 <memchr+0x84>
 40133c0:	21000044 	addi	r4,r4,1
 40133c4:	20c000cc 	andi	r3,r4,3
 40133c8:	183ff91e 	bne	r3,zero,40133b0 <_gp+0xffff2b74>
 40133cc:	020000c4 	movi	r8,3
 40133d0:	40801136 	bltu	r8,r2,4013418 <memchr+0x8c>
 40133d4:	10000c26 	beq	r2,zero,4013408 <memchr+0x7c>
 40133d8:	20c00003 	ldbu	r3,0(r4)
 40133dc:	29403fcc 	andi	r5,r5,255
 40133e0:	28c00b26 	beq	r5,r3,4013410 <memchr+0x84>
 40133e4:	20c00044 	addi	r3,r4,1
 40133e8:	39803fcc 	andi	r6,r7,255
 40133ec:	2089883a 	add	r4,r4,r2
 40133f0:	00000306 	br	4013400 <memchr+0x74>
 40133f4:	18c00044 	addi	r3,r3,1
 40133f8:	197fffc3 	ldbu	r5,-1(r3)
 40133fc:	31400526 	beq	r6,r5,4013414 <memchr+0x88>
 4013400:	1805883a 	mov	r2,r3
 4013404:	20fffb1e 	bne	r4,r3,40133f4 <_gp+0xffff2bb8>
 4013408:	0005883a 	mov	r2,zero
 401340c:	f800283a 	ret
 4013410:	2005883a 	mov	r2,r4
 4013414:	f800283a 	ret
 4013418:	28c03fcc 	andi	r3,r5,255
 401341c:	1812923a 	slli	r9,r3,8
 4013420:	02ffbff4 	movhi	r11,65279
 4013424:	02a02074 	movhi	r10,32897
 4013428:	48d2b03a 	or	r9,r9,r3
 401342c:	4806943a 	slli	r3,r9,16
 4013430:	5affbfc4 	addi	r11,r11,-257
 4013434:	52a02004 	addi	r10,r10,-32640
 4013438:	48d2b03a 	or	r9,r9,r3
 401343c:	20c00017 	ldw	r3,0(r4)
 4013440:	48c6f03a 	xor	r3,r9,r3
 4013444:	1acd883a 	add	r6,r3,r11
 4013448:	00c6303a 	nor	r3,zero,r3
 401344c:	30c6703a 	and	r3,r6,r3
 4013450:	1a86703a 	and	r3,r3,r10
 4013454:	183fe01e 	bne	r3,zero,40133d8 <_gp+0xffff2b9c>
 4013458:	10bfff04 	addi	r2,r2,-4
 401345c:	21000104 	addi	r4,r4,4
 4013460:	40bff636 	bltu	r8,r2,401343c <_gp+0xffff2c00>
 4013464:	003fdb06 	br	40133d4 <_gp+0xffff2b98>
 4013468:	3005883a 	mov	r2,r6
 401346c:	003fd706 	br	40133cc <_gp+0xffff2b90>

04013470 <memmove>:
 4013470:	2005883a 	mov	r2,r4
 4013474:	29000b2e 	bgeu	r5,r4,40134a4 <memmove+0x34>
 4013478:	298f883a 	add	r7,r5,r6
 401347c:	21c0092e 	bgeu	r4,r7,40134a4 <memmove+0x34>
 4013480:	2187883a 	add	r3,r4,r6
 4013484:	198bc83a 	sub	r5,r3,r6
 4013488:	30004826 	beq	r6,zero,40135ac <memmove+0x13c>
 401348c:	39ffffc4 	addi	r7,r7,-1
 4013490:	39000003 	ldbu	r4,0(r7)
 4013494:	18ffffc4 	addi	r3,r3,-1
 4013498:	19000005 	stb	r4,0(r3)
 401349c:	28fffb1e 	bne	r5,r3,401348c <_gp+0xffff2c50>
 40134a0:	f800283a 	ret
 40134a4:	00c003c4 	movi	r3,15
 40134a8:	1980412e 	bgeu	r3,r6,40135b0 <memmove+0x140>
 40134ac:	2886b03a 	or	r3,r5,r2
 40134b0:	18c000cc 	andi	r3,r3,3
 40134b4:	1800401e 	bne	r3,zero,40135b8 <memmove+0x148>
 40134b8:	33fffc04 	addi	r15,r6,-16
 40134bc:	781ed13a 	srli	r15,r15,4
 40134c0:	28c00104 	addi	r3,r5,4
 40134c4:	13400104 	addi	r13,r2,4
 40134c8:	781c913a 	slli	r14,r15,4
 40134cc:	2b000204 	addi	r12,r5,8
 40134d0:	12c00204 	addi	r11,r2,8
 40134d4:	73800504 	addi	r14,r14,20
 40134d8:	2a800304 	addi	r10,r5,12
 40134dc:	12400304 	addi	r9,r2,12
 40134e0:	2b9d883a 	add	r14,r5,r14
 40134e4:	2811883a 	mov	r8,r5
 40134e8:	100f883a 	mov	r7,r2
 40134ec:	41000017 	ldw	r4,0(r8)
 40134f0:	39c00404 	addi	r7,r7,16
 40134f4:	18c00404 	addi	r3,r3,16
 40134f8:	393ffc15 	stw	r4,-16(r7)
 40134fc:	193ffc17 	ldw	r4,-16(r3)
 4013500:	6b400404 	addi	r13,r13,16
 4013504:	5ac00404 	addi	r11,r11,16
 4013508:	693ffc15 	stw	r4,-16(r13)
 401350c:	61000017 	ldw	r4,0(r12)
 4013510:	4a400404 	addi	r9,r9,16
 4013514:	42000404 	addi	r8,r8,16
 4013518:	593ffc15 	stw	r4,-16(r11)
 401351c:	51000017 	ldw	r4,0(r10)
 4013520:	63000404 	addi	r12,r12,16
 4013524:	52800404 	addi	r10,r10,16
 4013528:	493ffc15 	stw	r4,-16(r9)
 401352c:	1bbfef1e 	bne	r3,r14,40134ec <_gp+0xffff2cb0>
 4013530:	79000044 	addi	r4,r15,1
 4013534:	2008913a 	slli	r4,r4,4
 4013538:	328003cc 	andi	r10,r6,15
 401353c:	02c000c4 	movi	r11,3
 4013540:	1107883a 	add	r3,r2,r4
 4013544:	290b883a 	add	r5,r5,r4
 4013548:	5a801e2e 	bgeu	r11,r10,40135c4 <memmove+0x154>
 401354c:	1813883a 	mov	r9,r3
 4013550:	2811883a 	mov	r8,r5
 4013554:	500f883a 	mov	r7,r10
 4013558:	41000017 	ldw	r4,0(r8)
 401355c:	4a400104 	addi	r9,r9,4
 4013560:	39ffff04 	addi	r7,r7,-4
 4013564:	493fff15 	stw	r4,-4(r9)
 4013568:	42000104 	addi	r8,r8,4
 401356c:	59fffa36 	bltu	r11,r7,4013558 <_gp+0xffff2d1c>
 4013570:	513fff04 	addi	r4,r10,-4
 4013574:	2008d0ba 	srli	r4,r4,2
 4013578:	318000cc 	andi	r6,r6,3
 401357c:	21000044 	addi	r4,r4,1
 4013580:	2109883a 	add	r4,r4,r4
 4013584:	2109883a 	add	r4,r4,r4
 4013588:	1907883a 	add	r3,r3,r4
 401358c:	290b883a 	add	r5,r5,r4
 4013590:	30000b26 	beq	r6,zero,40135c0 <memmove+0x150>
 4013594:	198d883a 	add	r6,r3,r6
 4013598:	29c00003 	ldbu	r7,0(r5)
 401359c:	18c00044 	addi	r3,r3,1
 40135a0:	29400044 	addi	r5,r5,1
 40135a4:	19ffffc5 	stb	r7,-1(r3)
 40135a8:	19bffb1e 	bne	r3,r6,4013598 <_gp+0xffff2d5c>
 40135ac:	f800283a 	ret
 40135b0:	1007883a 	mov	r3,r2
 40135b4:	003ff606 	br	4013590 <_gp+0xffff2d54>
 40135b8:	1007883a 	mov	r3,r2
 40135bc:	003ff506 	br	4013594 <_gp+0xffff2d58>
 40135c0:	f800283a 	ret
 40135c4:	500d883a 	mov	r6,r10
 40135c8:	003ff106 	br	4013590 <_gp+0xffff2d54>

040135cc <_read_r>:
 40135cc:	defffd04 	addi	sp,sp,-12
 40135d0:	2805883a 	mov	r2,r5
 40135d4:	dc000015 	stw	r16,0(sp)
 40135d8:	040100b4 	movhi	r16,1026
 40135dc:	dc400115 	stw	r17,4(sp)
 40135e0:	300b883a 	mov	r5,r6
 40135e4:	84290e04 	addi	r16,r16,-23496
 40135e8:	2023883a 	mov	r17,r4
 40135ec:	380d883a 	mov	r6,r7
 40135f0:	1009883a 	mov	r4,r2
 40135f4:	dfc00215 	stw	ra,8(sp)
 40135f8:	80000015 	stw	zero,0(r16)
 40135fc:	4014b080 	call	4014b08 <read>
 4013600:	00ffffc4 	movi	r3,-1
 4013604:	10c00526 	beq	r2,r3,401361c <_read_r+0x50>
 4013608:	dfc00217 	ldw	ra,8(sp)
 401360c:	dc400117 	ldw	r17,4(sp)
 4013610:	dc000017 	ldw	r16,0(sp)
 4013614:	dec00304 	addi	sp,sp,12
 4013618:	f800283a 	ret
 401361c:	80c00017 	ldw	r3,0(r16)
 4013620:	183ff926 	beq	r3,zero,4013608 <_gp+0xffff2dcc>
 4013624:	88c00015 	stw	r3,0(r17)
 4013628:	003ff706 	br	4013608 <_gp+0xffff2dcc>

0401362c <_realloc_r>:
 401362c:	defff604 	addi	sp,sp,-40
 4013630:	dc800215 	stw	r18,8(sp)
 4013634:	dfc00915 	stw	ra,36(sp)
 4013638:	df000815 	stw	fp,32(sp)
 401363c:	ddc00715 	stw	r23,28(sp)
 4013640:	dd800615 	stw	r22,24(sp)
 4013644:	dd400515 	stw	r21,20(sp)
 4013648:	dd000415 	stw	r20,16(sp)
 401364c:	dcc00315 	stw	r19,12(sp)
 4013650:	dc400115 	stw	r17,4(sp)
 4013654:	dc000015 	stw	r16,0(sp)
 4013658:	3025883a 	mov	r18,r6
 401365c:	2800b726 	beq	r5,zero,401393c <_realloc_r+0x310>
 4013660:	282b883a 	mov	r21,r5
 4013664:	2029883a 	mov	r20,r4
 4013668:	40148000 	call	4014800 <__malloc_lock>
 401366c:	a8bfff17 	ldw	r2,-4(r21)
 4013670:	043fff04 	movi	r16,-4
 4013674:	90c002c4 	addi	r3,r18,11
 4013678:	01000584 	movi	r4,22
 401367c:	acfffe04 	addi	r19,r21,-8
 4013680:	1420703a 	and	r16,r2,r16
 4013684:	20c0332e 	bgeu	r4,r3,4013754 <_realloc_r+0x128>
 4013688:	047ffe04 	movi	r17,-8
 401368c:	1c62703a 	and	r17,r3,r17
 4013690:	8807883a 	mov	r3,r17
 4013694:	88005816 	blt	r17,zero,40137f8 <_realloc_r+0x1cc>
 4013698:	8c805736 	bltu	r17,r18,40137f8 <_realloc_r+0x1cc>
 401369c:	80c0300e 	bge	r16,r3,4013760 <_realloc_r+0x134>
 40136a0:	07010074 	movhi	fp,1025
 40136a4:	e71c6904 	addi	fp,fp,29092
 40136a8:	e1c00217 	ldw	r7,8(fp)
 40136ac:	9c09883a 	add	r4,r19,r16
 40136b0:	22000117 	ldw	r8,4(r4)
 40136b4:	21c06326 	beq	r4,r7,4013844 <_realloc_r+0x218>
 40136b8:	017fff84 	movi	r5,-2
 40136bc:	414a703a 	and	r5,r8,r5
 40136c0:	214b883a 	add	r5,r4,r5
 40136c4:	29800117 	ldw	r6,4(r5)
 40136c8:	3180004c 	andi	r6,r6,1
 40136cc:	30003f26 	beq	r6,zero,40137cc <_realloc_r+0x1a0>
 40136d0:	1080004c 	andi	r2,r2,1
 40136d4:	10008326 	beq	r2,zero,40138e4 <_realloc_r+0x2b8>
 40136d8:	900b883a 	mov	r5,r18
 40136dc:	a009883a 	mov	r4,r20
 40136e0:	40115080 	call	4011508 <_malloc_r>
 40136e4:	1025883a 	mov	r18,r2
 40136e8:	10011e26 	beq	r2,zero,4013b64 <_realloc_r+0x538>
 40136ec:	a93fff17 	ldw	r4,-4(r21)
 40136f0:	10fffe04 	addi	r3,r2,-8
 40136f4:	00bfff84 	movi	r2,-2
 40136f8:	2084703a 	and	r2,r4,r2
 40136fc:	9885883a 	add	r2,r19,r2
 4013700:	1880ee26 	beq	r3,r2,4013abc <_realloc_r+0x490>
 4013704:	81bfff04 	addi	r6,r16,-4
 4013708:	00800904 	movi	r2,36
 401370c:	1180b836 	bltu	r2,r6,40139f0 <_realloc_r+0x3c4>
 4013710:	00c004c4 	movi	r3,19
 4013714:	19809636 	bltu	r3,r6,4013970 <_realloc_r+0x344>
 4013718:	9005883a 	mov	r2,r18
 401371c:	a807883a 	mov	r3,r21
 4013720:	19000017 	ldw	r4,0(r3)
 4013724:	11000015 	stw	r4,0(r2)
 4013728:	19000117 	ldw	r4,4(r3)
 401372c:	11000115 	stw	r4,4(r2)
 4013730:	18c00217 	ldw	r3,8(r3)
 4013734:	10c00215 	stw	r3,8(r2)
 4013738:	a80b883a 	mov	r5,r21
 401373c:	a009883a 	mov	r4,r20
 4013740:	4010b600 	call	4010b60 <_free_r>
 4013744:	a009883a 	mov	r4,r20
 4013748:	40148240 	call	4014824 <__malloc_unlock>
 401374c:	9005883a 	mov	r2,r18
 4013750:	00001206 	br	401379c <_realloc_r+0x170>
 4013754:	00c00404 	movi	r3,16
 4013758:	1823883a 	mov	r17,r3
 401375c:	003fce06 	br	4013698 <_gp+0xffff2e5c>
 4013760:	a825883a 	mov	r18,r21
 4013764:	8445c83a 	sub	r2,r16,r17
 4013768:	00c003c4 	movi	r3,15
 401376c:	18802636 	bltu	r3,r2,4013808 <_realloc_r+0x1dc>
 4013770:	99800117 	ldw	r6,4(r19)
 4013774:	9c07883a 	add	r3,r19,r16
 4013778:	3180004c 	andi	r6,r6,1
 401377c:	3420b03a 	or	r16,r6,r16
 4013780:	9c000115 	stw	r16,4(r19)
 4013784:	18800117 	ldw	r2,4(r3)
 4013788:	10800054 	ori	r2,r2,1
 401378c:	18800115 	stw	r2,4(r3)
 4013790:	a009883a 	mov	r4,r20
 4013794:	40148240 	call	4014824 <__malloc_unlock>
 4013798:	9005883a 	mov	r2,r18
 401379c:	dfc00917 	ldw	ra,36(sp)
 40137a0:	df000817 	ldw	fp,32(sp)
 40137a4:	ddc00717 	ldw	r23,28(sp)
 40137a8:	dd800617 	ldw	r22,24(sp)
 40137ac:	dd400517 	ldw	r21,20(sp)
 40137b0:	dd000417 	ldw	r20,16(sp)
 40137b4:	dcc00317 	ldw	r19,12(sp)
 40137b8:	dc800217 	ldw	r18,8(sp)
 40137bc:	dc400117 	ldw	r17,4(sp)
 40137c0:	dc000017 	ldw	r16,0(sp)
 40137c4:	dec00a04 	addi	sp,sp,40
 40137c8:	f800283a 	ret
 40137cc:	017fff04 	movi	r5,-4
 40137d0:	414a703a 	and	r5,r8,r5
 40137d4:	814d883a 	add	r6,r16,r5
 40137d8:	30c01f16 	blt	r6,r3,4013858 <_realloc_r+0x22c>
 40137dc:	20800317 	ldw	r2,12(r4)
 40137e0:	20c00217 	ldw	r3,8(r4)
 40137e4:	a825883a 	mov	r18,r21
 40137e8:	3021883a 	mov	r16,r6
 40137ec:	18800315 	stw	r2,12(r3)
 40137f0:	10c00215 	stw	r3,8(r2)
 40137f4:	003fdb06 	br	4013764 <_gp+0xffff2f28>
 40137f8:	00800304 	movi	r2,12
 40137fc:	a0800015 	stw	r2,0(r20)
 4013800:	0005883a 	mov	r2,zero
 4013804:	003fe506 	br	401379c <_gp+0xffff2f60>
 4013808:	98c00117 	ldw	r3,4(r19)
 401380c:	9c4b883a 	add	r5,r19,r17
 4013810:	11000054 	ori	r4,r2,1
 4013814:	18c0004c 	andi	r3,r3,1
 4013818:	1c62b03a 	or	r17,r3,r17
 401381c:	9c400115 	stw	r17,4(r19)
 4013820:	29000115 	stw	r4,4(r5)
 4013824:	2885883a 	add	r2,r5,r2
 4013828:	10c00117 	ldw	r3,4(r2)
 401382c:	29400204 	addi	r5,r5,8
 4013830:	a009883a 	mov	r4,r20
 4013834:	18c00054 	ori	r3,r3,1
 4013838:	10c00115 	stw	r3,4(r2)
 401383c:	4010b600 	call	4010b60 <_free_r>
 4013840:	003fd306 	br	4013790 <_gp+0xffff2f54>
 4013844:	017fff04 	movi	r5,-4
 4013848:	414a703a 	and	r5,r8,r5
 401384c:	89800404 	addi	r6,r17,16
 4013850:	8151883a 	add	r8,r16,r5
 4013854:	4180590e 	bge	r8,r6,40139bc <_realloc_r+0x390>
 4013858:	1080004c 	andi	r2,r2,1
 401385c:	103f9e1e 	bne	r2,zero,40136d8 <_gp+0xffff2e9c>
 4013860:	adbffe17 	ldw	r22,-8(r21)
 4013864:	00bfff04 	movi	r2,-4
 4013868:	9dadc83a 	sub	r22,r19,r22
 401386c:	b1800117 	ldw	r6,4(r22)
 4013870:	3084703a 	and	r2,r6,r2
 4013874:	20002026 	beq	r4,zero,40138f8 <_realloc_r+0x2cc>
 4013878:	80af883a 	add	r23,r16,r2
 401387c:	b96f883a 	add	r23,r23,r5
 4013880:	21c05f26 	beq	r4,r7,4013a00 <_realloc_r+0x3d4>
 4013884:	b8c01c16 	blt	r23,r3,40138f8 <_realloc_r+0x2cc>
 4013888:	20800317 	ldw	r2,12(r4)
 401388c:	20c00217 	ldw	r3,8(r4)
 4013890:	81bfff04 	addi	r6,r16,-4
 4013894:	01000904 	movi	r4,36
 4013898:	18800315 	stw	r2,12(r3)
 401389c:	10c00215 	stw	r3,8(r2)
 40138a0:	b0c00217 	ldw	r3,8(r22)
 40138a4:	b0800317 	ldw	r2,12(r22)
 40138a8:	b4800204 	addi	r18,r22,8
 40138ac:	18800315 	stw	r2,12(r3)
 40138b0:	10c00215 	stw	r3,8(r2)
 40138b4:	21801b36 	bltu	r4,r6,4013924 <_realloc_r+0x2f8>
 40138b8:	008004c4 	movi	r2,19
 40138bc:	1180352e 	bgeu	r2,r6,4013994 <_realloc_r+0x368>
 40138c0:	a8800017 	ldw	r2,0(r21)
 40138c4:	b0800215 	stw	r2,8(r22)
 40138c8:	a8800117 	ldw	r2,4(r21)
 40138cc:	b0800315 	stw	r2,12(r22)
 40138d0:	008006c4 	movi	r2,27
 40138d4:	11807f36 	bltu	r2,r6,4013ad4 <_realloc_r+0x4a8>
 40138d8:	b0800404 	addi	r2,r22,16
 40138dc:	ad400204 	addi	r21,r21,8
 40138e0:	00002d06 	br	4013998 <_realloc_r+0x36c>
 40138e4:	adbffe17 	ldw	r22,-8(r21)
 40138e8:	00bfff04 	movi	r2,-4
 40138ec:	9dadc83a 	sub	r22,r19,r22
 40138f0:	b1000117 	ldw	r4,4(r22)
 40138f4:	2084703a 	and	r2,r4,r2
 40138f8:	b03f7726 	beq	r22,zero,40136d8 <_gp+0xffff2e9c>
 40138fc:	80af883a 	add	r23,r16,r2
 4013900:	b8ff7516 	blt	r23,r3,40136d8 <_gp+0xffff2e9c>
 4013904:	b0800317 	ldw	r2,12(r22)
 4013908:	b0c00217 	ldw	r3,8(r22)
 401390c:	81bfff04 	addi	r6,r16,-4
 4013910:	01000904 	movi	r4,36
 4013914:	18800315 	stw	r2,12(r3)
 4013918:	10c00215 	stw	r3,8(r2)
 401391c:	b4800204 	addi	r18,r22,8
 4013920:	21bfe52e 	bgeu	r4,r6,40138b8 <_gp+0xffff307c>
 4013924:	a80b883a 	mov	r5,r21
 4013928:	9009883a 	mov	r4,r18
 401392c:	40134700 	call	4013470 <memmove>
 4013930:	b821883a 	mov	r16,r23
 4013934:	b027883a 	mov	r19,r22
 4013938:	003f8a06 	br	4013764 <_gp+0xffff2f28>
 401393c:	300b883a 	mov	r5,r6
 4013940:	dfc00917 	ldw	ra,36(sp)
 4013944:	df000817 	ldw	fp,32(sp)
 4013948:	ddc00717 	ldw	r23,28(sp)
 401394c:	dd800617 	ldw	r22,24(sp)
 4013950:	dd400517 	ldw	r21,20(sp)
 4013954:	dd000417 	ldw	r20,16(sp)
 4013958:	dcc00317 	ldw	r19,12(sp)
 401395c:	dc800217 	ldw	r18,8(sp)
 4013960:	dc400117 	ldw	r17,4(sp)
 4013964:	dc000017 	ldw	r16,0(sp)
 4013968:	dec00a04 	addi	sp,sp,40
 401396c:	40115081 	jmpi	4011508 <_malloc_r>
 4013970:	a8c00017 	ldw	r3,0(r21)
 4013974:	90c00015 	stw	r3,0(r18)
 4013978:	a8c00117 	ldw	r3,4(r21)
 401397c:	90c00115 	stw	r3,4(r18)
 4013980:	00c006c4 	movi	r3,27
 4013984:	19804536 	bltu	r3,r6,4013a9c <_realloc_r+0x470>
 4013988:	90800204 	addi	r2,r18,8
 401398c:	a8c00204 	addi	r3,r21,8
 4013990:	003f6306 	br	4013720 <_gp+0xffff2ee4>
 4013994:	9005883a 	mov	r2,r18
 4013998:	a8c00017 	ldw	r3,0(r21)
 401399c:	b821883a 	mov	r16,r23
 40139a0:	b027883a 	mov	r19,r22
 40139a4:	10c00015 	stw	r3,0(r2)
 40139a8:	a8c00117 	ldw	r3,4(r21)
 40139ac:	10c00115 	stw	r3,4(r2)
 40139b0:	a8c00217 	ldw	r3,8(r21)
 40139b4:	10c00215 	stw	r3,8(r2)
 40139b8:	003f6a06 	br	4013764 <_gp+0xffff2f28>
 40139bc:	9c67883a 	add	r19,r19,r17
 40139c0:	4445c83a 	sub	r2,r8,r17
 40139c4:	e4c00215 	stw	r19,8(fp)
 40139c8:	10800054 	ori	r2,r2,1
 40139cc:	98800115 	stw	r2,4(r19)
 40139d0:	a8bfff17 	ldw	r2,-4(r21)
 40139d4:	a009883a 	mov	r4,r20
 40139d8:	1080004c 	andi	r2,r2,1
 40139dc:	1462b03a 	or	r17,r2,r17
 40139e0:	ac7fff15 	stw	r17,-4(r21)
 40139e4:	40148240 	call	4014824 <__malloc_unlock>
 40139e8:	a805883a 	mov	r2,r21
 40139ec:	003f6b06 	br	401379c <_gp+0xffff2f60>
 40139f0:	a80b883a 	mov	r5,r21
 40139f4:	9009883a 	mov	r4,r18
 40139f8:	40134700 	call	4013470 <memmove>
 40139fc:	003f4e06 	br	4013738 <_gp+0xffff2efc>
 4013a00:	89000404 	addi	r4,r17,16
 4013a04:	b93fbc16 	blt	r23,r4,40138f8 <_gp+0xffff30bc>
 4013a08:	b0800317 	ldw	r2,12(r22)
 4013a0c:	b0c00217 	ldw	r3,8(r22)
 4013a10:	81bfff04 	addi	r6,r16,-4
 4013a14:	01000904 	movi	r4,36
 4013a18:	18800315 	stw	r2,12(r3)
 4013a1c:	10c00215 	stw	r3,8(r2)
 4013a20:	b4800204 	addi	r18,r22,8
 4013a24:	21804336 	bltu	r4,r6,4013b34 <_realloc_r+0x508>
 4013a28:	008004c4 	movi	r2,19
 4013a2c:	11803f2e 	bgeu	r2,r6,4013b2c <_realloc_r+0x500>
 4013a30:	a8800017 	ldw	r2,0(r21)
 4013a34:	b0800215 	stw	r2,8(r22)
 4013a38:	a8800117 	ldw	r2,4(r21)
 4013a3c:	b0800315 	stw	r2,12(r22)
 4013a40:	008006c4 	movi	r2,27
 4013a44:	11803f36 	bltu	r2,r6,4013b44 <_realloc_r+0x518>
 4013a48:	b0800404 	addi	r2,r22,16
 4013a4c:	ad400204 	addi	r21,r21,8
 4013a50:	a8c00017 	ldw	r3,0(r21)
 4013a54:	10c00015 	stw	r3,0(r2)
 4013a58:	a8c00117 	ldw	r3,4(r21)
 4013a5c:	10c00115 	stw	r3,4(r2)
 4013a60:	a8c00217 	ldw	r3,8(r21)
 4013a64:	10c00215 	stw	r3,8(r2)
 4013a68:	b447883a 	add	r3,r22,r17
 4013a6c:	bc45c83a 	sub	r2,r23,r17
 4013a70:	e0c00215 	stw	r3,8(fp)
 4013a74:	10800054 	ori	r2,r2,1
 4013a78:	18800115 	stw	r2,4(r3)
 4013a7c:	b0800117 	ldw	r2,4(r22)
 4013a80:	a009883a 	mov	r4,r20
 4013a84:	1080004c 	andi	r2,r2,1
 4013a88:	1462b03a 	or	r17,r2,r17
 4013a8c:	b4400115 	stw	r17,4(r22)
 4013a90:	40148240 	call	4014824 <__malloc_unlock>
 4013a94:	9005883a 	mov	r2,r18
 4013a98:	003f4006 	br	401379c <_gp+0xffff2f60>
 4013a9c:	a8c00217 	ldw	r3,8(r21)
 4013aa0:	90c00215 	stw	r3,8(r18)
 4013aa4:	a8c00317 	ldw	r3,12(r21)
 4013aa8:	90c00315 	stw	r3,12(r18)
 4013aac:	30801126 	beq	r6,r2,4013af4 <_realloc_r+0x4c8>
 4013ab0:	90800404 	addi	r2,r18,16
 4013ab4:	a8c00404 	addi	r3,r21,16
 4013ab8:	003f1906 	br	4013720 <_gp+0xffff2ee4>
 4013abc:	90ffff17 	ldw	r3,-4(r18)
 4013ac0:	00bfff04 	movi	r2,-4
 4013ac4:	a825883a 	mov	r18,r21
 4013ac8:	1884703a 	and	r2,r3,r2
 4013acc:	80a1883a 	add	r16,r16,r2
 4013ad0:	003f2406 	br	4013764 <_gp+0xffff2f28>
 4013ad4:	a8800217 	ldw	r2,8(r21)
 4013ad8:	b0800415 	stw	r2,16(r22)
 4013adc:	a8800317 	ldw	r2,12(r21)
 4013ae0:	b0800515 	stw	r2,20(r22)
 4013ae4:	31000a26 	beq	r6,r4,4013b10 <_realloc_r+0x4e4>
 4013ae8:	b0800604 	addi	r2,r22,24
 4013aec:	ad400404 	addi	r21,r21,16
 4013af0:	003fa906 	br	4013998 <_gp+0xffff315c>
 4013af4:	a9000417 	ldw	r4,16(r21)
 4013af8:	90800604 	addi	r2,r18,24
 4013afc:	a8c00604 	addi	r3,r21,24
 4013b00:	91000415 	stw	r4,16(r18)
 4013b04:	a9000517 	ldw	r4,20(r21)
 4013b08:	91000515 	stw	r4,20(r18)
 4013b0c:	003f0406 	br	4013720 <_gp+0xffff2ee4>
 4013b10:	a8c00417 	ldw	r3,16(r21)
 4013b14:	ad400604 	addi	r21,r21,24
 4013b18:	b0800804 	addi	r2,r22,32
 4013b1c:	b0c00615 	stw	r3,24(r22)
 4013b20:	a8ffff17 	ldw	r3,-4(r21)
 4013b24:	b0c00715 	stw	r3,28(r22)
 4013b28:	003f9b06 	br	4013998 <_gp+0xffff315c>
 4013b2c:	9005883a 	mov	r2,r18
 4013b30:	003fc706 	br	4013a50 <_gp+0xffff3214>
 4013b34:	a80b883a 	mov	r5,r21
 4013b38:	9009883a 	mov	r4,r18
 4013b3c:	40134700 	call	4013470 <memmove>
 4013b40:	003fc906 	br	4013a68 <_gp+0xffff322c>
 4013b44:	a8800217 	ldw	r2,8(r21)
 4013b48:	b0800415 	stw	r2,16(r22)
 4013b4c:	a8800317 	ldw	r2,12(r21)
 4013b50:	b0800515 	stw	r2,20(r22)
 4013b54:	31000726 	beq	r6,r4,4013b74 <_realloc_r+0x548>
 4013b58:	b0800604 	addi	r2,r22,24
 4013b5c:	ad400404 	addi	r21,r21,16
 4013b60:	003fbb06 	br	4013a50 <_gp+0xffff3214>
 4013b64:	a009883a 	mov	r4,r20
 4013b68:	40148240 	call	4014824 <__malloc_unlock>
 4013b6c:	0005883a 	mov	r2,zero
 4013b70:	003f0a06 	br	401379c <_gp+0xffff2f60>
 4013b74:	a8c00417 	ldw	r3,16(r21)
 4013b78:	ad400604 	addi	r21,r21,24
 4013b7c:	b0800804 	addi	r2,r22,32
 4013b80:	b0c00615 	stw	r3,24(r22)
 4013b84:	a8ffff17 	ldw	r3,-4(r21)
 4013b88:	b0c00715 	stw	r3,28(r22)
 4013b8c:	003fb006 	br	4013a50 <_gp+0xffff3214>

04013b90 <__swsetup_r>:
 4013b90:	008100b4 	movhi	r2,1026
 4013b94:	defffd04 	addi	sp,sp,-12
 4013b98:	10a21504 	addi	r2,r2,-30636
 4013b9c:	dc400115 	stw	r17,4(sp)
 4013ba0:	2023883a 	mov	r17,r4
 4013ba4:	11000017 	ldw	r4,0(r2)
 4013ba8:	dc000015 	stw	r16,0(sp)
 4013bac:	dfc00215 	stw	ra,8(sp)
 4013bb0:	2821883a 	mov	r16,r5
 4013bb4:	20000226 	beq	r4,zero,4013bc0 <__swsetup_r+0x30>
 4013bb8:	20800e17 	ldw	r2,56(r4)
 4013bbc:	10003126 	beq	r2,zero,4013c84 <__swsetup_r+0xf4>
 4013bc0:	8080030b 	ldhu	r2,12(r16)
 4013bc4:	10c0020c 	andi	r3,r2,8
 4013bc8:	1009883a 	mov	r4,r2
 4013bcc:	18000f26 	beq	r3,zero,4013c0c <__swsetup_r+0x7c>
 4013bd0:	80c00417 	ldw	r3,16(r16)
 4013bd4:	18001526 	beq	r3,zero,4013c2c <__swsetup_r+0x9c>
 4013bd8:	1100004c 	andi	r4,r2,1
 4013bdc:	20001c1e 	bne	r4,zero,4013c50 <__swsetup_r+0xc0>
 4013be0:	1080008c 	andi	r2,r2,2
 4013be4:	1000291e 	bne	r2,zero,4013c8c <__swsetup_r+0xfc>
 4013be8:	80800517 	ldw	r2,20(r16)
 4013bec:	80800215 	stw	r2,8(r16)
 4013bf0:	18001c26 	beq	r3,zero,4013c64 <__swsetup_r+0xd4>
 4013bf4:	0005883a 	mov	r2,zero
 4013bf8:	dfc00217 	ldw	ra,8(sp)
 4013bfc:	dc400117 	ldw	r17,4(sp)
 4013c00:	dc000017 	ldw	r16,0(sp)
 4013c04:	dec00304 	addi	sp,sp,12
 4013c08:	f800283a 	ret
 4013c0c:	2080040c 	andi	r2,r4,16
 4013c10:	10002e26 	beq	r2,zero,4013ccc <__swsetup_r+0x13c>
 4013c14:	2080010c 	andi	r2,r4,4
 4013c18:	10001e1e 	bne	r2,zero,4013c94 <__swsetup_r+0x104>
 4013c1c:	80c00417 	ldw	r3,16(r16)
 4013c20:	20800214 	ori	r2,r4,8
 4013c24:	8080030d 	sth	r2,12(r16)
 4013c28:	183feb1e 	bne	r3,zero,4013bd8 <_gp+0xffff339c>
 4013c2c:	1100a00c 	andi	r4,r2,640
 4013c30:	01408004 	movi	r5,512
 4013c34:	217fe826 	beq	r4,r5,4013bd8 <_gp+0xffff339c>
 4013c38:	800b883a 	mov	r5,r16
 4013c3c:	8809883a 	mov	r4,r17
 4013c40:	401134c0 	call	401134c <__smakebuf_r>
 4013c44:	8080030b 	ldhu	r2,12(r16)
 4013c48:	80c00417 	ldw	r3,16(r16)
 4013c4c:	003fe206 	br	4013bd8 <_gp+0xffff339c>
 4013c50:	80800517 	ldw	r2,20(r16)
 4013c54:	80000215 	stw	zero,8(r16)
 4013c58:	0085c83a 	sub	r2,zero,r2
 4013c5c:	80800615 	stw	r2,24(r16)
 4013c60:	183fe41e 	bne	r3,zero,4013bf4 <_gp+0xffff33b8>
 4013c64:	80c0030b 	ldhu	r3,12(r16)
 4013c68:	0005883a 	mov	r2,zero
 4013c6c:	1900200c 	andi	r4,r3,128
 4013c70:	203fe126 	beq	r4,zero,4013bf8 <_gp+0xffff33bc>
 4013c74:	18c01014 	ori	r3,r3,64
 4013c78:	80c0030d 	sth	r3,12(r16)
 4013c7c:	00bfffc4 	movi	r2,-1
 4013c80:	003fdd06 	br	4013bf8 <_gp+0xffff33bc>
 4013c84:	4012b8c0 	call	4012b8c <__sinit>
 4013c88:	003fcd06 	br	4013bc0 <_gp+0xffff3384>
 4013c8c:	0005883a 	mov	r2,zero
 4013c90:	003fd606 	br	4013bec <_gp+0xffff33b0>
 4013c94:	81400c17 	ldw	r5,48(r16)
 4013c98:	28000626 	beq	r5,zero,4013cb4 <__swsetup_r+0x124>
 4013c9c:	80801004 	addi	r2,r16,64
 4013ca0:	28800326 	beq	r5,r2,4013cb0 <__swsetup_r+0x120>
 4013ca4:	8809883a 	mov	r4,r17
 4013ca8:	4010b600 	call	4010b60 <_free_r>
 4013cac:	8100030b 	ldhu	r4,12(r16)
 4013cb0:	80000c15 	stw	zero,48(r16)
 4013cb4:	80c00417 	ldw	r3,16(r16)
 4013cb8:	00bff6c4 	movi	r2,-37
 4013cbc:	1108703a 	and	r4,r2,r4
 4013cc0:	80000115 	stw	zero,4(r16)
 4013cc4:	80c00015 	stw	r3,0(r16)
 4013cc8:	003fd506 	br	4013c20 <_gp+0xffff33e4>
 4013ccc:	00800244 	movi	r2,9
 4013cd0:	88800015 	stw	r2,0(r17)
 4013cd4:	20801014 	ori	r2,r4,64
 4013cd8:	8080030d 	sth	r2,12(r16)
 4013cdc:	00bfffc4 	movi	r2,-1
 4013ce0:	003fc506 	br	4013bf8 <_gp+0xffff33bc>

04013ce4 <_fclose_r>:
 4013ce4:	28003926 	beq	r5,zero,4013dcc <_fclose_r+0xe8>
 4013ce8:	defffc04 	addi	sp,sp,-16
 4013cec:	dc400115 	stw	r17,4(sp)
 4013cf0:	dc000015 	stw	r16,0(sp)
 4013cf4:	dfc00315 	stw	ra,12(sp)
 4013cf8:	dc800215 	stw	r18,8(sp)
 4013cfc:	2023883a 	mov	r17,r4
 4013d00:	2821883a 	mov	r16,r5
 4013d04:	20000226 	beq	r4,zero,4013d10 <_fclose_r+0x2c>
 4013d08:	20800e17 	ldw	r2,56(r4)
 4013d0c:	10002726 	beq	r2,zero,4013dac <_fclose_r+0xc8>
 4013d10:	8080030f 	ldh	r2,12(r16)
 4013d14:	1000071e 	bne	r2,zero,4013d34 <_fclose_r+0x50>
 4013d18:	0005883a 	mov	r2,zero
 4013d1c:	dfc00317 	ldw	ra,12(sp)
 4013d20:	dc800217 	ldw	r18,8(sp)
 4013d24:	dc400117 	ldw	r17,4(sp)
 4013d28:	dc000017 	ldw	r16,0(sp)
 4013d2c:	dec00404 	addi	sp,sp,16
 4013d30:	f800283a 	ret
 4013d34:	800b883a 	mov	r5,r16
 4013d38:	8809883a 	mov	r4,r17
 4013d3c:	40125840 	call	4012584 <__sflush_r>
 4013d40:	1025883a 	mov	r18,r2
 4013d44:	80800b17 	ldw	r2,44(r16)
 4013d48:	10000426 	beq	r2,zero,4013d5c <_fclose_r+0x78>
 4013d4c:	81400717 	ldw	r5,28(r16)
 4013d50:	8809883a 	mov	r4,r17
 4013d54:	103ee83a 	callr	r2
 4013d58:	10001616 	blt	r2,zero,4013db4 <_fclose_r+0xd0>
 4013d5c:	8080030b 	ldhu	r2,12(r16)
 4013d60:	1080200c 	andi	r2,r2,128
 4013d64:	1000151e 	bne	r2,zero,4013dbc <_fclose_r+0xd8>
 4013d68:	81400c17 	ldw	r5,48(r16)
 4013d6c:	28000526 	beq	r5,zero,4013d84 <_fclose_r+0xa0>
 4013d70:	80801004 	addi	r2,r16,64
 4013d74:	28800226 	beq	r5,r2,4013d80 <_fclose_r+0x9c>
 4013d78:	8809883a 	mov	r4,r17
 4013d7c:	4010b600 	call	4010b60 <_free_r>
 4013d80:	80000c15 	stw	zero,48(r16)
 4013d84:	81401117 	ldw	r5,68(r16)
 4013d88:	28000326 	beq	r5,zero,4013d98 <_fclose_r+0xb4>
 4013d8c:	8809883a 	mov	r4,r17
 4013d90:	4010b600 	call	4010b60 <_free_r>
 4013d94:	80001115 	stw	zero,68(r16)
 4013d98:	4012b9c0 	call	4012b9c <__sfp_lock_acquire>
 4013d9c:	8000030d 	sth	zero,12(r16)
 4013da0:	4012ba00 	call	4012ba0 <__sfp_lock_release>
 4013da4:	9005883a 	mov	r2,r18
 4013da8:	003fdc06 	br	4013d1c <_gp+0xffff34e0>
 4013dac:	4012b8c0 	call	4012b8c <__sinit>
 4013db0:	003fd706 	br	4013d10 <_gp+0xffff34d4>
 4013db4:	04bfffc4 	movi	r18,-1
 4013db8:	003fe806 	br	4013d5c <_gp+0xffff3520>
 4013dbc:	81400417 	ldw	r5,16(r16)
 4013dc0:	8809883a 	mov	r4,r17
 4013dc4:	4010b600 	call	4010b60 <_free_r>
 4013dc8:	003fe706 	br	4013d68 <_gp+0xffff352c>
 4013dcc:	0005883a 	mov	r2,zero
 4013dd0:	f800283a 	ret

04013dd4 <fclose>:
 4013dd4:	008100b4 	movhi	r2,1026
 4013dd8:	10a21504 	addi	r2,r2,-30636
 4013ddc:	200b883a 	mov	r5,r4
 4013de0:	11000017 	ldw	r4,0(r2)
 4013de4:	4013ce41 	jmpi	4013ce4 <_fclose_r>

04013de8 <__divsi3>:
 4013de8:	20001b16 	blt	r4,zero,4013e58 <__divsi3+0x70>
 4013dec:	000f883a 	mov	r7,zero
 4013df0:	28001616 	blt	r5,zero,4013e4c <__divsi3+0x64>
 4013df4:	200d883a 	mov	r6,r4
 4013df8:	29001a2e 	bgeu	r5,r4,4013e64 <__divsi3+0x7c>
 4013dfc:	00800804 	movi	r2,32
 4013e00:	00c00044 	movi	r3,1
 4013e04:	00000106 	br	4013e0c <__divsi3+0x24>
 4013e08:	10000d26 	beq	r2,zero,4013e40 <__divsi3+0x58>
 4013e0c:	294b883a 	add	r5,r5,r5
 4013e10:	10bfffc4 	addi	r2,r2,-1
 4013e14:	18c7883a 	add	r3,r3,r3
 4013e18:	293ffb36 	bltu	r5,r4,4013e08 <_gp+0xffff35cc>
 4013e1c:	0005883a 	mov	r2,zero
 4013e20:	18000726 	beq	r3,zero,4013e40 <__divsi3+0x58>
 4013e24:	0005883a 	mov	r2,zero
 4013e28:	31400236 	bltu	r6,r5,4013e34 <__divsi3+0x4c>
 4013e2c:	314dc83a 	sub	r6,r6,r5
 4013e30:	10c4b03a 	or	r2,r2,r3
 4013e34:	1806d07a 	srli	r3,r3,1
 4013e38:	280ad07a 	srli	r5,r5,1
 4013e3c:	183ffa1e 	bne	r3,zero,4013e28 <_gp+0xffff35ec>
 4013e40:	38000126 	beq	r7,zero,4013e48 <__divsi3+0x60>
 4013e44:	0085c83a 	sub	r2,zero,r2
 4013e48:	f800283a 	ret
 4013e4c:	014bc83a 	sub	r5,zero,r5
 4013e50:	39c0005c 	xori	r7,r7,1
 4013e54:	003fe706 	br	4013df4 <_gp+0xffff35b8>
 4013e58:	0109c83a 	sub	r4,zero,r4
 4013e5c:	01c00044 	movi	r7,1
 4013e60:	003fe306 	br	4013df0 <_gp+0xffff35b4>
 4013e64:	00c00044 	movi	r3,1
 4013e68:	003fee06 	br	4013e24 <_gp+0xffff35e8>

04013e6c <__modsi3>:
 4013e6c:	20001716 	blt	r4,zero,4013ecc <__modsi3+0x60>
 4013e70:	000f883a 	mov	r7,zero
 4013e74:	2005883a 	mov	r2,r4
 4013e78:	28001216 	blt	r5,zero,4013ec4 <__modsi3+0x58>
 4013e7c:	2900162e 	bgeu	r5,r4,4013ed8 <__modsi3+0x6c>
 4013e80:	01800804 	movi	r6,32
 4013e84:	00c00044 	movi	r3,1
 4013e88:	00000106 	br	4013e90 <__modsi3+0x24>
 4013e8c:	30000a26 	beq	r6,zero,4013eb8 <__modsi3+0x4c>
 4013e90:	294b883a 	add	r5,r5,r5
 4013e94:	31bfffc4 	addi	r6,r6,-1
 4013e98:	18c7883a 	add	r3,r3,r3
 4013e9c:	293ffb36 	bltu	r5,r4,4013e8c <_gp+0xffff3650>
 4013ea0:	18000526 	beq	r3,zero,4013eb8 <__modsi3+0x4c>
 4013ea4:	1806d07a 	srli	r3,r3,1
 4013ea8:	11400136 	bltu	r2,r5,4013eb0 <__modsi3+0x44>
 4013eac:	1145c83a 	sub	r2,r2,r5
 4013eb0:	280ad07a 	srli	r5,r5,1
 4013eb4:	183ffb1e 	bne	r3,zero,4013ea4 <_gp+0xffff3668>
 4013eb8:	38000126 	beq	r7,zero,4013ec0 <__modsi3+0x54>
 4013ebc:	0085c83a 	sub	r2,zero,r2
 4013ec0:	f800283a 	ret
 4013ec4:	014bc83a 	sub	r5,zero,r5
 4013ec8:	003fec06 	br	4013e7c <_gp+0xffff3640>
 4013ecc:	0109c83a 	sub	r4,zero,r4
 4013ed0:	01c00044 	movi	r7,1
 4013ed4:	003fe706 	br	4013e74 <_gp+0xffff3638>
 4013ed8:	00c00044 	movi	r3,1
 4013edc:	003ff106 	br	4013ea4 <_gp+0xffff3668>

04013ee0 <__udivsi3>:
 4013ee0:	200d883a 	mov	r6,r4
 4013ee4:	2900152e 	bgeu	r5,r4,4013f3c <__udivsi3+0x5c>
 4013ee8:	28001416 	blt	r5,zero,4013f3c <__udivsi3+0x5c>
 4013eec:	00800804 	movi	r2,32
 4013ef0:	00c00044 	movi	r3,1
 4013ef4:	00000206 	br	4013f00 <__udivsi3+0x20>
 4013ef8:	10000e26 	beq	r2,zero,4013f34 <__udivsi3+0x54>
 4013efc:	28000516 	blt	r5,zero,4013f14 <__udivsi3+0x34>
 4013f00:	294b883a 	add	r5,r5,r5
 4013f04:	10bfffc4 	addi	r2,r2,-1
 4013f08:	18c7883a 	add	r3,r3,r3
 4013f0c:	293ffa36 	bltu	r5,r4,4013ef8 <_gp+0xffff36bc>
 4013f10:	18000826 	beq	r3,zero,4013f34 <__udivsi3+0x54>
 4013f14:	0005883a 	mov	r2,zero
 4013f18:	31400236 	bltu	r6,r5,4013f24 <__udivsi3+0x44>
 4013f1c:	314dc83a 	sub	r6,r6,r5
 4013f20:	10c4b03a 	or	r2,r2,r3
 4013f24:	1806d07a 	srli	r3,r3,1
 4013f28:	280ad07a 	srli	r5,r5,1
 4013f2c:	183ffa1e 	bne	r3,zero,4013f18 <_gp+0xffff36dc>
 4013f30:	f800283a 	ret
 4013f34:	0005883a 	mov	r2,zero
 4013f38:	f800283a 	ret
 4013f3c:	00c00044 	movi	r3,1
 4013f40:	003ff406 	br	4013f14 <_gp+0xffff36d8>

04013f44 <__umodsi3>:
 4013f44:	2005883a 	mov	r2,r4
 4013f48:	2900122e 	bgeu	r5,r4,4013f94 <__umodsi3+0x50>
 4013f4c:	28001116 	blt	r5,zero,4013f94 <__umodsi3+0x50>
 4013f50:	01800804 	movi	r6,32
 4013f54:	00c00044 	movi	r3,1
 4013f58:	00000206 	br	4013f64 <__umodsi3+0x20>
 4013f5c:	30000c26 	beq	r6,zero,4013f90 <__umodsi3+0x4c>
 4013f60:	28000516 	blt	r5,zero,4013f78 <__umodsi3+0x34>
 4013f64:	294b883a 	add	r5,r5,r5
 4013f68:	31bfffc4 	addi	r6,r6,-1
 4013f6c:	18c7883a 	add	r3,r3,r3
 4013f70:	293ffa36 	bltu	r5,r4,4013f5c <_gp+0xffff3720>
 4013f74:	18000626 	beq	r3,zero,4013f90 <__umodsi3+0x4c>
 4013f78:	1806d07a 	srli	r3,r3,1
 4013f7c:	11400136 	bltu	r2,r5,4013f84 <__umodsi3+0x40>
 4013f80:	1145c83a 	sub	r2,r2,r5
 4013f84:	280ad07a 	srli	r5,r5,1
 4013f88:	183ffb1e 	bne	r3,zero,4013f78 <_gp+0xffff373c>
 4013f8c:	f800283a 	ret
 4013f90:	f800283a 	ret
 4013f94:	00c00044 	movi	r3,1
 4013f98:	003ff706 	br	4013f78 <_gp+0xffff373c>

04013f9c <__mulsi3>:
 4013f9c:	0005883a 	mov	r2,zero
 4013fa0:	20000726 	beq	r4,zero,4013fc0 <__mulsi3+0x24>
 4013fa4:	20c0004c 	andi	r3,r4,1
 4013fa8:	2008d07a 	srli	r4,r4,1
 4013fac:	18000126 	beq	r3,zero,4013fb4 <__mulsi3+0x18>
 4013fb0:	1145883a 	add	r2,r2,r5
 4013fb4:	294b883a 	add	r5,r5,r5
 4013fb8:	203ffa1e 	bne	r4,zero,4013fa4 <_gp+0xffff3768>
 4013fbc:	f800283a 	ret
 4013fc0:	f800283a 	ret

04013fc4 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
 4013fc4:	defffe04 	addi	sp,sp,-8
 4013fc8:	dfc00115 	stw	ra,4(sp)
 4013fcc:	df000015 	stw	fp,0(sp)
 4013fd0:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
 4013fd4:	d0a00e17 	ldw	r2,-32712(gp)
 4013fd8:	10000326 	beq	r2,zero,4013fe8 <alt_get_errno+0x24>
 4013fdc:	d0a00e17 	ldw	r2,-32712(gp)
 4013fe0:	103ee83a 	callr	r2
 4013fe4:	00000106 	br	4013fec <alt_get_errno+0x28>
 4013fe8:	d0a6ff04 	addi	r2,gp,-25604
}
 4013fec:	e037883a 	mov	sp,fp
 4013ff0:	dfc00117 	ldw	ra,4(sp)
 4013ff4:	df000017 	ldw	fp,0(sp)
 4013ff8:	dec00204 	addi	sp,sp,8
 4013ffc:	f800283a 	ret

04014000 <close>:
 *
 * ALT_CLOSE is mapped onto the close() system call in alt_syscall.h
 */
 
int ALT_CLOSE (int fildes)
{
 4014000:	defffb04 	addi	sp,sp,-20
 4014004:	dfc00415 	stw	ra,16(sp)
 4014008:	df000315 	stw	fp,12(sp)
 401400c:	df000304 	addi	fp,sp,12
 4014010:	e13fff15 	stw	r4,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (fildes < 0) ? NULL : &alt_fd_list[fildes];
 4014014:	e0bfff17 	ldw	r2,-4(fp)
 4014018:	10000816 	blt	r2,zero,401403c <close+0x3c>
 401401c:	01400304 	movi	r5,12
 4014020:	e13fff17 	ldw	r4,-4(fp)
 4014024:	4013f9c0 	call	4013f9c <__mulsi3>
 4014028:	1007883a 	mov	r3,r2
 401402c:	00810074 	movhi	r2,1025
 4014030:	109d7504 	addi	r2,r2,30164
 4014034:	1885883a 	add	r2,r3,r2
 4014038:	00000106 	br	4014040 <close+0x40>
 401403c:	0005883a 	mov	r2,zero
 4014040:	e0bffd15 	stw	r2,-12(fp)

  if (fd)
 4014044:	e0bffd17 	ldw	r2,-12(fp)
 4014048:	10001926 	beq	r2,zero,40140b0 <close+0xb0>
    /*
     * If the associated file system/device has a close function, call it so 
     * that any necessary cleanup code can run.
     */

    rval = (fd->dev->close) ? fd->dev->close(fd) : 0;
 401404c:	e0bffd17 	ldw	r2,-12(fp)
 4014050:	10800017 	ldw	r2,0(r2)
 4014054:	10800417 	ldw	r2,16(r2)
 4014058:	10000626 	beq	r2,zero,4014074 <close+0x74>
 401405c:	e0bffd17 	ldw	r2,-12(fp)
 4014060:	10800017 	ldw	r2,0(r2)
 4014064:	10800417 	ldw	r2,16(r2)
 4014068:	e13ffd17 	ldw	r4,-12(fp)
 401406c:	103ee83a 	callr	r2
 4014070:	00000106 	br	4014078 <close+0x78>
 4014074:	0005883a 	mov	r2,zero
 4014078:	e0bffe15 	stw	r2,-8(fp)

    /* Free the file descriptor structure and return. */

    alt_release_fd (fildes);
 401407c:	e13fff17 	ldw	r4,-4(fp)
 4014080:	4014c0c0 	call	4014c0c <alt_release_fd>
    if (rval < 0)
 4014084:	e0bffe17 	ldw	r2,-8(fp)
 4014088:	1000070e 	bge	r2,zero,40140a8 <close+0xa8>
    {
      ALT_ERRNO = -rval;
 401408c:	4013fc40 	call	4013fc4 <alt_get_errno>
 4014090:	1007883a 	mov	r3,r2
 4014094:	e0bffe17 	ldw	r2,-8(fp)
 4014098:	0085c83a 	sub	r2,zero,r2
 401409c:	18800015 	stw	r2,0(r3)
      return -1;
 40140a0:	00bfffc4 	movi	r2,-1
 40140a4:	00000706 	br	40140c4 <close+0xc4>
    }
    return 0;
 40140a8:	0005883a 	mov	r2,zero
 40140ac:	00000506 	br	40140c4 <close+0xc4>
  }
  else
  {
    ALT_ERRNO = EBADFD;
 40140b0:	4013fc40 	call	4013fc4 <alt_get_errno>
 40140b4:	1007883a 	mov	r3,r2
 40140b8:	00801444 	movi	r2,81
 40140bc:	18800015 	stw	r2,0(r3)
    return -1;
 40140c0:	00bfffc4 	movi	r2,-1
  }
}
 40140c4:	e037883a 	mov	sp,fp
 40140c8:	dfc00117 	ldw	ra,4(sp)
 40140cc:	df000017 	ldw	fp,0(sp)
 40140d0:	dec00204 	addi	sp,sp,8
 40140d4:	f800283a 	ret

040140d8 <alt_dev_null_write>:
 * by the alt_dev_null device. It simple discards all data passed to it, and
 * indicates that the data has been successfully transmitted.
 */

static int alt_dev_null_write (alt_fd* fd, const char* ptr, int len)
{
 40140d8:	defffc04 	addi	sp,sp,-16
 40140dc:	df000315 	stw	fp,12(sp)
 40140e0:	df000304 	addi	fp,sp,12
 40140e4:	e13ffd15 	stw	r4,-12(fp)
 40140e8:	e17ffe15 	stw	r5,-8(fp)
 40140ec:	e1bfff15 	stw	r6,-4(fp)
  return len;
 40140f0:	e0bfff17 	ldw	r2,-4(fp)
}
 40140f4:	e037883a 	mov	sp,fp
 40140f8:	df000017 	ldw	fp,0(sp)
 40140fc:	dec00104 	addi	sp,sp,4
 4014100:	f800283a 	ret

04014104 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
 4014104:	defffe04 	addi	sp,sp,-8
 4014108:	dfc00115 	stw	ra,4(sp)
 401410c:	df000015 	stw	fp,0(sp)
 4014110:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
 4014114:	d0a00e17 	ldw	r2,-32712(gp)
 4014118:	10000326 	beq	r2,zero,4014128 <alt_get_errno+0x24>
 401411c:	d0a00e17 	ldw	r2,-32712(gp)
 4014120:	103ee83a 	callr	r2
 4014124:	00000106 	br	401412c <alt_get_errno+0x28>
 4014128:	d0a6ff04 	addi	r2,gp,-25604
}
 401412c:	e037883a 	mov	sp,fp
 4014130:	dfc00117 	ldw	ra,4(sp)
 4014134:	df000017 	ldw	fp,0(sp)
 4014138:	dec00204 	addi	sp,sp,8
 401413c:	f800283a 	ret

04014140 <fstat>:
}

#else /* !ALT_USE_DIRECT_DRIVERS */

int ALT_FSTAT (int file, struct stat *st)
{
 4014140:	defffb04 	addi	sp,sp,-20
 4014144:	dfc00415 	stw	ra,16(sp)
 4014148:	df000315 	stw	fp,12(sp)
 401414c:	df000304 	addi	fp,sp,12
 4014150:	e13ffe15 	stw	r4,-8(fp)
 4014154:	e17fff15 	stw	r5,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
 4014158:	e0bffe17 	ldw	r2,-8(fp)
 401415c:	10000816 	blt	r2,zero,4014180 <fstat+0x40>
 4014160:	01400304 	movi	r5,12
 4014164:	e13ffe17 	ldw	r4,-8(fp)
 4014168:	4013f9c0 	call	4013f9c <__mulsi3>
 401416c:	1007883a 	mov	r3,r2
 4014170:	00810074 	movhi	r2,1025
 4014174:	109d7504 	addi	r2,r2,30164
 4014178:	1885883a 	add	r2,r3,r2
 401417c:	00000106 	br	4014184 <fstat+0x44>
 4014180:	0005883a 	mov	r2,zero
 4014184:	e0bffd15 	stw	r2,-12(fp)
  
  if (fd)
 4014188:	e0bffd17 	ldw	r2,-12(fp)
 401418c:	10001026 	beq	r2,zero,40141d0 <fstat+0x90>
  {
    /* Call the drivers fstat() function to fill out the "st" structure. */

    if (fd->dev->fstat)
 4014190:	e0bffd17 	ldw	r2,-12(fp)
 4014194:	10800017 	ldw	r2,0(r2)
 4014198:	10800817 	ldw	r2,32(r2)
 401419c:	10000726 	beq	r2,zero,40141bc <fstat+0x7c>
    {
      return fd->dev->fstat(fd, st);
 40141a0:	e0bffd17 	ldw	r2,-12(fp)
 40141a4:	10800017 	ldw	r2,0(r2)
 40141a8:	10800817 	ldw	r2,32(r2)
 40141ac:	e17fff17 	ldw	r5,-4(fp)
 40141b0:	e13ffd17 	ldw	r4,-12(fp)
 40141b4:	103ee83a 	callr	r2
 40141b8:	00000a06 	br	40141e4 <fstat+0xa4>
     * device.
     */
 
    else
    {
      st->st_mode = _IFCHR;
 40141bc:	e0bfff17 	ldw	r2,-4(fp)
 40141c0:	00c80004 	movi	r3,8192
 40141c4:	10c00115 	stw	r3,4(r2)
      return 0;
 40141c8:	0005883a 	mov	r2,zero
 40141cc:	00000506 	br	40141e4 <fstat+0xa4>
    }
  }
  else
  {
    ALT_ERRNO = EBADFD;
 40141d0:	40141040 	call	4014104 <alt_get_errno>
 40141d4:	1007883a 	mov	r3,r2
 40141d8:	00801444 	movi	r2,81
 40141dc:	18800015 	stw	r2,0(r3)
    return -1;
 40141e0:	00bfffc4 	movi	r2,-1
  }
}
 40141e4:	e037883a 	mov	sp,fp
 40141e8:	dfc00117 	ldw	ra,4(sp)
 40141ec:	df000017 	ldw	fp,0(sp)
 40141f0:	dec00204 	addi	sp,sp,8
 40141f4:	f800283a 	ret

040141f8 <alt_ic_isr_register>:
  * @param irq              IRQ number
  * @return                 0 if successful, else error (-1)
  */
int alt_ic_isr_register(alt_u32 ic_id, alt_u32 irq, alt_isr_func isr, 
  void *isr_context, void *flags)
{
 40141f8:	defff904 	addi	sp,sp,-28
 40141fc:	dfc00615 	stw	ra,24(sp)
 4014200:	df000515 	stw	fp,20(sp)
 4014204:	df000504 	addi	fp,sp,20
 4014208:	e13ffc15 	stw	r4,-16(fp)
 401420c:	e17ffd15 	stw	r5,-12(fp)
 4014210:	e1bffe15 	stw	r6,-8(fp)
 4014214:	e1ffff15 	stw	r7,-4(fp)
    return alt_iic_isr_register(ic_id, irq, isr, isr_context, flags);
 4014218:	e0800217 	ldw	r2,8(fp)
 401421c:	d8800015 	stw	r2,0(sp)
 4014220:	e1ffff17 	ldw	r7,-4(fp)
 4014224:	e1bffe17 	ldw	r6,-8(fp)
 4014228:	e17ffd17 	ldw	r5,-12(fp)
 401422c:	e13ffc17 	ldw	r4,-16(fp)
 4014230:	40143a80 	call	40143a8 <alt_iic_isr_register>
}  
 4014234:	e037883a 	mov	sp,fp
 4014238:	dfc00117 	ldw	ra,4(sp)
 401423c:	df000017 	ldw	fp,0(sp)
 4014240:	dec00204 	addi	sp,sp,8
 4014244:	f800283a 	ret

04014248 <alt_ic_irq_enable>:
  * @param ic_id            Ignored.
  * @param irq              IRQ number
  * @return                 0 if successful, else error (-1)
  */
int alt_ic_irq_enable (alt_u32 ic_id, alt_u32 irq)
{
 4014248:	defff904 	addi	sp,sp,-28
 401424c:	df000615 	stw	fp,24(sp)
 4014250:	df000604 	addi	fp,sp,24
 4014254:	e13ffe15 	stw	r4,-8(fp)
 4014258:	e17fff15 	stw	r5,-4(fp)
 401425c:	e0bfff17 	ldw	r2,-4(fp)
 4014260:	e0bffa15 	stw	r2,-24(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 4014264:	0005303a 	rdctl	r2,status
 4014268:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 401426c:	e0fffb17 	ldw	r3,-20(fp)
 4014270:	00bfff84 	movi	r2,-2
 4014274:	1884703a 	and	r2,r3,r2
 4014278:	1001703a 	wrctl	status,r2
  
  return context;
 401427c:	e0bffb17 	ldw	r2,-20(fp)
static ALT_INLINE int ALT_ALWAYS_INLINE alt_irq_enable (alt_u32 id)
{
  alt_irq_context  status;
  extern volatile alt_u32 alt_irq_active;

  status = alt_irq_disable_all ();
 4014280:	e0bffc15 	stw	r2,-16(fp)

  alt_irq_active |= (1 << id);
 4014284:	00c00044 	movi	r3,1
 4014288:	e0bffa17 	ldw	r2,-24(fp)
 401428c:	1884983a 	sll	r2,r3,r2
 4014290:	1007883a 	mov	r3,r2
 4014294:	d0a70317 	ldw	r2,-25588(gp)
 4014298:	1884b03a 	or	r2,r3,r2
 401429c:	d0a70315 	stw	r2,-25588(gp)
  NIOS2_WRITE_IENABLE (alt_irq_active);
 40142a0:	d0a70317 	ldw	r2,-25588(gp)
 40142a4:	100170fa 	wrctl	ienable,r2
 40142a8:	e0bffc17 	ldw	r2,-16(fp)
 40142ac:	e0bffd15 	stw	r2,-12(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 40142b0:	e0bffd17 	ldw	r2,-12(fp)
 40142b4:	1001703a 	wrctl	status,r2

  alt_irq_enable_all(status);

  return 0;
 40142b8:	0005883a 	mov	r2,zero
    return alt_irq_enable(irq);
 40142bc:	0001883a 	nop
}
 40142c0:	e037883a 	mov	sp,fp
 40142c4:	df000017 	ldw	fp,0(sp)
 40142c8:	dec00104 	addi	sp,sp,4
 40142cc:	f800283a 	ret

040142d0 <alt_ic_irq_disable>:
  * @param ic_id            Ignored.
  * @param irq              IRQ number
  * @return                 0 if successful, else error (-1)
  */
int alt_ic_irq_disable(alt_u32 ic_id, alt_u32 irq)
{
 40142d0:	defff904 	addi	sp,sp,-28
 40142d4:	df000615 	stw	fp,24(sp)
 40142d8:	df000604 	addi	fp,sp,24
 40142dc:	e13ffe15 	stw	r4,-8(fp)
 40142e0:	e17fff15 	stw	r5,-4(fp)
 40142e4:	e0bfff17 	ldw	r2,-4(fp)
 40142e8:	e0bffa15 	stw	r2,-24(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 40142ec:	0005303a 	rdctl	r2,status
 40142f0:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 40142f4:	e0fffb17 	ldw	r3,-20(fp)
 40142f8:	00bfff84 	movi	r2,-2
 40142fc:	1884703a 	and	r2,r3,r2
 4014300:	1001703a 	wrctl	status,r2
  
  return context;
 4014304:	e0bffb17 	ldw	r2,-20(fp)
static ALT_INLINE int ALT_ALWAYS_INLINE alt_irq_disable (alt_u32 id)
{
  alt_irq_context  status;
  extern volatile alt_u32 alt_irq_active;

  status = alt_irq_disable_all ();
 4014308:	e0bffc15 	stw	r2,-16(fp)

  alt_irq_active &= ~(1 << id);
 401430c:	00c00044 	movi	r3,1
 4014310:	e0bffa17 	ldw	r2,-24(fp)
 4014314:	1884983a 	sll	r2,r3,r2
 4014318:	0084303a 	nor	r2,zero,r2
 401431c:	1007883a 	mov	r3,r2
 4014320:	d0a70317 	ldw	r2,-25588(gp)
 4014324:	1884703a 	and	r2,r3,r2
 4014328:	d0a70315 	stw	r2,-25588(gp)
  NIOS2_WRITE_IENABLE (alt_irq_active);
 401432c:	d0a70317 	ldw	r2,-25588(gp)
 4014330:	100170fa 	wrctl	ienable,r2
 4014334:	e0bffc17 	ldw	r2,-16(fp)
 4014338:	e0bffd15 	stw	r2,-12(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 401433c:	e0bffd17 	ldw	r2,-12(fp)
 4014340:	1001703a 	wrctl	status,r2

  alt_irq_enable_all(status);

  return 0;
 4014344:	0005883a 	mov	r2,zero
    return alt_irq_disable(irq);
 4014348:	0001883a 	nop
}
 401434c:	e037883a 	mov	sp,fp
 4014350:	df000017 	ldw	fp,0(sp)
 4014354:	dec00104 	addi	sp,sp,4
 4014358:	f800283a 	ret

0401435c <alt_ic_irq_enabled>:
  * @param irq              IRQ number
  * @return                 Zero if corresponding interrupt is disabled and
  *                         non-zero otherwise.
  */
alt_u32 alt_ic_irq_enabled(alt_u32 ic_id, alt_u32 irq)
{
 401435c:	defffc04 	addi	sp,sp,-16
 4014360:	df000315 	stw	fp,12(sp)
 4014364:	df000304 	addi	fp,sp,12
 4014368:	e13ffe15 	stw	r4,-8(fp)
 401436c:	e17fff15 	stw	r5,-4(fp)
    alt_u32 irq_enabled;

    NIOS2_READ_IENABLE(irq_enabled);
 4014370:	000530fa 	rdctl	r2,ienable
 4014374:	e0bffd15 	stw	r2,-12(fp)

    return (irq_enabled & (1 << irq)) ? 1: 0;
 4014378:	00c00044 	movi	r3,1
 401437c:	e0bfff17 	ldw	r2,-4(fp)
 4014380:	1884983a 	sll	r2,r3,r2
 4014384:	1007883a 	mov	r3,r2
 4014388:	e0bffd17 	ldw	r2,-12(fp)
 401438c:	1884703a 	and	r2,r3,r2
 4014390:	1004c03a 	cmpne	r2,r2,zero
 4014394:	10803fcc 	andi	r2,r2,255
}
 4014398:	e037883a 	mov	sp,fp
 401439c:	df000017 	ldw	fp,0(sp)
 40143a0:	dec00104 	addi	sp,sp,4
 40143a4:	f800283a 	ret

040143a8 <alt_iic_isr_register>:
  * @param flags            
  * @return                 0 if successful, else error (-1)
  */
int alt_iic_isr_register(alt_u32 ic_id, alt_u32 irq, alt_isr_func isr, 
  void *isr_context, void *flags)
{
 40143a8:	defff504 	addi	sp,sp,-44
 40143ac:	dfc00a15 	stw	ra,40(sp)
 40143b0:	df000915 	stw	fp,36(sp)
 40143b4:	df000904 	addi	fp,sp,36
 40143b8:	e13ffc15 	stw	r4,-16(fp)
 40143bc:	e17ffd15 	stw	r5,-12(fp)
 40143c0:	e1bffe15 	stw	r6,-8(fp)
 40143c4:	e1ffff15 	stw	r7,-4(fp)
  int rc = -EINVAL;  
 40143c8:	00bffa84 	movi	r2,-22
 40143cc:	e0bff715 	stw	r2,-36(fp)
  int id = irq;             /* IRQ interpreted as the interrupt ID. */
 40143d0:	e0bffd17 	ldw	r2,-12(fp)
 40143d4:	e0bff815 	stw	r2,-32(fp)
  alt_irq_context status;

  if (id < ALT_NIRQ)
 40143d8:	e0bff817 	ldw	r2,-32(fp)
 40143dc:	10800808 	cmpgei	r2,r2,32
 40143e0:	1000271e 	bne	r2,zero,4014480 <alt_iic_isr_register+0xd8>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 40143e4:	0005303a 	rdctl	r2,status
 40143e8:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 40143ec:	e0fffb17 	ldw	r3,-20(fp)
 40143f0:	00bfff84 	movi	r2,-2
 40143f4:	1884703a 	and	r2,r3,r2
 40143f8:	1001703a 	wrctl	status,r2
  
  return context;
 40143fc:	e0bffb17 	ldw	r2,-20(fp)
     * interrupts are disabled while the handler tables are updated to ensure
     * that an interrupt doesn't occur while the tables are in an inconsistant
     * state.
     */

    status = alt_irq_disable_all();
 4014400:	e0bffa15 	stw	r2,-24(fp)

    alt_irq[id].handler = isr;
 4014404:	008100b4 	movhi	r2,1026
 4014408:	10a92304 	addi	r2,r2,-23412
 401440c:	e0fff817 	ldw	r3,-32(fp)
 4014410:	180690fa 	slli	r3,r3,3
 4014414:	10c5883a 	add	r2,r2,r3
 4014418:	e0fffe17 	ldw	r3,-8(fp)
 401441c:	10c00015 	stw	r3,0(r2)
    alt_irq[id].context = isr_context;
 4014420:	008100b4 	movhi	r2,1026
 4014424:	10a92304 	addi	r2,r2,-23412
 4014428:	e0fff817 	ldw	r3,-32(fp)
 401442c:	180690fa 	slli	r3,r3,3
 4014430:	10c5883a 	add	r2,r2,r3
 4014434:	10800104 	addi	r2,r2,4
 4014438:	e0ffff17 	ldw	r3,-4(fp)
 401443c:	10c00015 	stw	r3,0(r2)

    rc = (isr) ? alt_ic_irq_enable(ic_id, id) : alt_ic_irq_disable(ic_id, id);
 4014440:	e0bffe17 	ldw	r2,-8(fp)
 4014444:	10000526 	beq	r2,zero,401445c <alt_iic_isr_register+0xb4>
 4014448:	e0bff817 	ldw	r2,-32(fp)
 401444c:	100b883a 	mov	r5,r2
 4014450:	e13ffc17 	ldw	r4,-16(fp)
 4014454:	40142480 	call	4014248 <alt_ic_irq_enable>
 4014458:	00000406 	br	401446c <alt_iic_isr_register+0xc4>
 401445c:	e0bff817 	ldw	r2,-32(fp)
 4014460:	100b883a 	mov	r5,r2
 4014464:	e13ffc17 	ldw	r4,-16(fp)
 4014468:	40142d00 	call	40142d0 <alt_ic_irq_disable>
 401446c:	e0bff715 	stw	r2,-36(fp)
 4014470:	e0bffa17 	ldw	r2,-24(fp)
 4014474:	e0bff915 	stw	r2,-28(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 4014478:	e0bff917 	ldw	r2,-28(fp)
 401447c:	1001703a 	wrctl	status,r2

    alt_irq_enable_all(status);
  }

  return rc; 
 4014480:	e0bff717 	ldw	r2,-36(fp)
}
 4014484:	e037883a 	mov	sp,fp
 4014488:	dfc00117 	ldw	ra,4(sp)
 401448c:	df000017 	ldw	fp,0(sp)
 4014490:	dec00204 	addi	sp,sp,8
 4014494:	f800283a 	ret

04014498 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
 4014498:	defffe04 	addi	sp,sp,-8
 401449c:	dfc00115 	stw	ra,4(sp)
 40144a0:	df000015 	stw	fp,0(sp)
 40144a4:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
 40144a8:	d0a00e17 	ldw	r2,-32712(gp)
 40144ac:	10000326 	beq	r2,zero,40144bc <alt_get_errno+0x24>
 40144b0:	d0a00e17 	ldw	r2,-32712(gp)
 40144b4:	103ee83a 	callr	r2
 40144b8:	00000106 	br	40144c0 <alt_get_errno+0x28>
 40144bc:	d0a6ff04 	addi	r2,gp,-25604
}
 40144c0:	e037883a 	mov	sp,fp
 40144c4:	dfc00117 	ldw	ra,4(sp)
 40144c8:	df000017 	ldw	fp,0(sp)
 40144cc:	dec00204 	addi	sp,sp,8
 40144d0:	f800283a 	ret

040144d4 <isatty>:
 *
 * ALT_ISATTY is mapped onto the isatty() system call in alt_syscall.h
 */
 
int ALT_ISATTY (int file)
{
 40144d4:	deffed04 	addi	sp,sp,-76
 40144d8:	dfc01215 	stw	ra,72(sp)
 40144dc:	df001115 	stw	fp,68(sp)
 40144e0:	df001104 	addi	fp,sp,68
 40144e4:	e13fff15 	stw	r4,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
 40144e8:	e0bfff17 	ldw	r2,-4(fp)
 40144ec:	10000816 	blt	r2,zero,4014510 <isatty+0x3c>
 40144f0:	01400304 	movi	r5,12
 40144f4:	e13fff17 	ldw	r4,-4(fp)
 40144f8:	4013f9c0 	call	4013f9c <__mulsi3>
 40144fc:	1007883a 	mov	r3,r2
 4014500:	00810074 	movhi	r2,1025
 4014504:	109d7504 	addi	r2,r2,30164
 4014508:	1885883a 	add	r2,r3,r2
 401450c:	00000106 	br	4014514 <isatty+0x40>
 4014510:	0005883a 	mov	r2,zero
 4014514:	e0bfef15 	stw	r2,-68(fp)
  
  if (fd)
 4014518:	e0bfef17 	ldw	r2,-68(fp)
 401451c:	10000e26 	beq	r2,zero,4014558 <isatty+0x84>
    /*
     * If a device driver does not provide an fstat() function, then it is 
     * treated as a terminal device by default.
     */

    if (!fd->dev->fstat)
 4014520:	e0bfef17 	ldw	r2,-68(fp)
 4014524:	10800017 	ldw	r2,0(r2)
 4014528:	10800817 	ldw	r2,32(r2)
 401452c:	1000021e 	bne	r2,zero,4014538 <isatty+0x64>
    {
      return 1;
 4014530:	00800044 	movi	r2,1
 4014534:	00000d06 	br	401456c <isatty+0x98>
     * this is called so that the device can identify itself.
     */ 

    else
    {
      fstat (file, &stat);
 4014538:	e0bff004 	addi	r2,fp,-64
 401453c:	100b883a 	mov	r5,r2
 4014540:	e13fff17 	ldw	r4,-4(fp)
 4014544:	40141400 	call	4014140 <fstat>
      return (stat.st_mode == _IFCHR) ? 1 : 0;
 4014548:	e0bff117 	ldw	r2,-60(fp)
 401454c:	10880020 	cmpeqi	r2,r2,8192
 4014550:	10803fcc 	andi	r2,r2,255
 4014554:	00000506 	br	401456c <isatty+0x98>
    }
  }
  else
  {
    ALT_ERRNO = EBADFD;
 4014558:	40144980 	call	4014498 <alt_get_errno>
 401455c:	1007883a 	mov	r3,r2
 4014560:	00801444 	movi	r2,81
 4014564:	18800015 	stw	r2,0(r3)
    return 0;
 4014568:	0005883a 	mov	r2,zero
  }
}
 401456c:	e037883a 	mov	sp,fp
 4014570:	dfc00117 	ldw	ra,4(sp)
 4014574:	df000017 	ldw	fp,0(sp)
 4014578:	dec00204 	addi	sp,sp,8
 401457c:	f800283a 	ret

04014580 <alt_load_section>:
 */

static void ALT_INLINE alt_load_section (alt_u32* from, 
                                         alt_u32* to, 
                                         alt_u32* end)
{
 4014580:	defffc04 	addi	sp,sp,-16
 4014584:	df000315 	stw	fp,12(sp)
 4014588:	df000304 	addi	fp,sp,12
 401458c:	e13ffd15 	stw	r4,-12(fp)
 4014590:	e17ffe15 	stw	r5,-8(fp)
 4014594:	e1bfff15 	stw	r6,-4(fp)
  if (to != from)
 4014598:	e0fffe17 	ldw	r3,-8(fp)
 401459c:	e0bffd17 	ldw	r2,-12(fp)
 40145a0:	18800c26 	beq	r3,r2,40145d4 <alt_load_section+0x54>
  {
    while( to != end )
 40145a4:	00000806 	br	40145c8 <alt_load_section+0x48>
    {
      *to++ = *from++;
 40145a8:	e0bffe17 	ldw	r2,-8(fp)
 40145ac:	10c00104 	addi	r3,r2,4
 40145b0:	e0fffe15 	stw	r3,-8(fp)
 40145b4:	e0fffd17 	ldw	r3,-12(fp)
 40145b8:	19000104 	addi	r4,r3,4
 40145bc:	e13ffd15 	stw	r4,-12(fp)
 40145c0:	18c00017 	ldw	r3,0(r3)
 40145c4:	10c00015 	stw	r3,0(r2)
                                         alt_u32* to, 
                                         alt_u32* end)
{
  if (to != from)
  {
    while( to != end )
 40145c8:	e0fffe17 	ldw	r3,-8(fp)
 40145cc:	e0bfff17 	ldw	r2,-4(fp)
 40145d0:	18bff51e 	bne	r3,r2,40145a8 <_gp+0xffff3d6c>
    {
      *to++ = *from++;
    }
  }
}
 40145d4:	0001883a 	nop
 40145d8:	e037883a 	mov	sp,fp
 40145dc:	df000017 	ldw	fp,0(sp)
 40145e0:	dec00104 	addi	sp,sp,4
 40145e4:	f800283a 	ret

040145e8 <alt_load>:
 * there is no bootloader, so this application is responsible for loading to
 * RAM any sections that are required.
 */  

void alt_load (void)
{
 40145e8:	defffe04 	addi	sp,sp,-8
 40145ec:	dfc00115 	stw	ra,4(sp)
 40145f0:	df000015 	stw	fp,0(sp)
 40145f4:	d839883a 	mov	fp,sp
  /* 
   * Copy the .rwdata section. 
   */

  alt_load_section (&__flash_rwdata_start, 
 40145f8:	018100b4 	movhi	r6,1026
 40145fc:	31a23404 	addi	r6,r6,-30512
 4014600:	01410074 	movhi	r5,1025
 4014604:	295b6004 	addi	r5,r5,28032
 4014608:	010100b4 	movhi	r4,1026
 401460c:	21223404 	addi	r4,r4,-30512
 4014610:	40145800 	call	4014580 <alt_load_section>

  /*
   * Copy the exception handler.
   */

  alt_load_section (&__flash_exceptions_start, 
 4014614:	01810074 	movhi	r6,1025
 4014618:	31808c04 	addi	r6,r6,560
 401461c:	01410074 	movhi	r5,1025
 4014620:	29400804 	addi	r5,r5,32
 4014624:	01010074 	movhi	r4,1025
 4014628:	21000804 	addi	r4,r4,32
 401462c:	40145800 	call	4014580 <alt_load_section>

  /*
   * Copy the .rodata section.
   */

  alt_load_section (&__flash_rodata_start, 
 4014630:	01810074 	movhi	r6,1025
 4014634:	319b6004 	addi	r6,r6,28032
 4014638:	01410074 	movhi	r5,1025
 401463c:	295b2404 	addi	r5,r5,27792
 4014640:	01010074 	movhi	r4,1025
 4014644:	211b2404 	addi	r4,r4,27792
 4014648:	40145800 	call	4014580 <alt_load_section>
  
  /*
   * Now ensure that the caches are in synch.
   */
  
  alt_dcache_flush_all();
 401464c:	401607c0 	call	401607c <alt_dcache_flush_all>
  alt_icache_flush_all();
 4014650:	40165180 	call	4016518 <alt_icache_flush_all>
}
 4014654:	0001883a 	nop
 4014658:	e037883a 	mov	sp,fp
 401465c:	dfc00117 	ldw	ra,4(sp)
 4014660:	df000017 	ldw	fp,0(sp)
 4014664:	dec00204 	addi	sp,sp,8
 4014668:	f800283a 	ret

0401466c <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
 401466c:	defffe04 	addi	sp,sp,-8
 4014670:	dfc00115 	stw	ra,4(sp)
 4014674:	df000015 	stw	fp,0(sp)
 4014678:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
 401467c:	d0a00e17 	ldw	r2,-32712(gp)
 4014680:	10000326 	beq	r2,zero,4014690 <alt_get_errno+0x24>
 4014684:	d0a00e17 	ldw	r2,-32712(gp)
 4014688:	103ee83a 	callr	r2
 401468c:	00000106 	br	4014694 <alt_get_errno+0x28>
 4014690:	d0a6ff04 	addi	r2,gp,-25604
}
 4014694:	e037883a 	mov	sp,fp
 4014698:	dfc00117 	ldw	ra,4(sp)
 401469c:	df000017 	ldw	fp,0(sp)
 40146a0:	dec00204 	addi	sp,sp,8
 40146a4:	f800283a 	ret

040146a8 <lseek>:
 * ALT_LSEEK is mapped onto the lseek() system call in alt_syscall.h
 *
 */

off_t ALT_LSEEK (int file, off_t ptr, int dir)
{
 40146a8:	defff904 	addi	sp,sp,-28
 40146ac:	dfc00615 	stw	ra,24(sp)
 40146b0:	df000515 	stw	fp,20(sp)
 40146b4:	df000504 	addi	fp,sp,20
 40146b8:	e13ffd15 	stw	r4,-12(fp)
 40146bc:	e17ffe15 	stw	r5,-8(fp)
 40146c0:	e1bfff15 	stw	r6,-4(fp)
  alt_fd* fd;
  off_t   rc = 0; 
 40146c4:	e03ffb15 	stw	zero,-20(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
 40146c8:	e0bffd17 	ldw	r2,-12(fp)
 40146cc:	10000816 	blt	r2,zero,40146f0 <lseek+0x48>
 40146d0:	01400304 	movi	r5,12
 40146d4:	e13ffd17 	ldw	r4,-12(fp)
 40146d8:	4013f9c0 	call	4013f9c <__mulsi3>
 40146dc:	1007883a 	mov	r3,r2
 40146e0:	00810074 	movhi	r2,1025
 40146e4:	109d7504 	addi	r2,r2,30164
 40146e8:	1885883a 	add	r2,r3,r2
 40146ec:	00000106 	br	40146f4 <lseek+0x4c>
 40146f0:	0005883a 	mov	r2,zero
 40146f4:	e0bffc15 	stw	r2,-16(fp)
  
  if (fd) 
 40146f8:	e0bffc17 	ldw	r2,-16(fp)
 40146fc:	10001026 	beq	r2,zero,4014740 <lseek+0x98>
    /*
     * If the device driver provides an implementation of the lseek() function,
     * then call that to process the request.
     */
 
    if (fd->dev->lseek)
 4014700:	e0bffc17 	ldw	r2,-16(fp)
 4014704:	10800017 	ldw	r2,0(r2)
 4014708:	10800717 	ldw	r2,28(r2)
 401470c:	10000926 	beq	r2,zero,4014734 <lseek+0x8c>
    {
      rc = fd->dev->lseek(fd, ptr, dir);
 4014710:	e0bffc17 	ldw	r2,-16(fp)
 4014714:	10800017 	ldw	r2,0(r2)
 4014718:	10800717 	ldw	r2,28(r2)
 401471c:	e1bfff17 	ldw	r6,-4(fp)
 4014720:	e17ffe17 	ldw	r5,-8(fp)
 4014724:	e13ffc17 	ldw	r4,-16(fp)
 4014728:	103ee83a 	callr	r2
 401472c:	e0bffb15 	stw	r2,-20(fp)
 4014730:	00000506 	br	4014748 <lseek+0xa0>
     * Otherwise return an error.
     */

    else
    {
      rc = -ENOTSUP;
 4014734:	00bfde84 	movi	r2,-134
 4014738:	e0bffb15 	stw	r2,-20(fp)
 401473c:	00000206 	br	4014748 <lseek+0xa0>
    }
  }
  else  
  {
    rc = -EBADFD;
 4014740:	00bfebc4 	movi	r2,-81
 4014744:	e0bffb15 	stw	r2,-20(fp)
  }

  if (rc < 0)
 4014748:	e0bffb17 	ldw	r2,-20(fp)
 401474c:	1000070e 	bge	r2,zero,401476c <lseek+0xc4>
  {
    ALT_ERRNO = -rc;
 4014750:	401466c0 	call	401466c <alt_get_errno>
 4014754:	1007883a 	mov	r3,r2
 4014758:	e0bffb17 	ldw	r2,-20(fp)
 401475c:	0085c83a 	sub	r2,zero,r2
 4014760:	18800015 	stw	r2,0(r3)
    rc = -1;
 4014764:	00bfffc4 	movi	r2,-1
 4014768:	e0bffb15 	stw	r2,-20(fp)
  }

  return rc;
 401476c:	e0bffb17 	ldw	r2,-20(fp)
}
 4014770:	e037883a 	mov	sp,fp
 4014774:	dfc00117 	ldw	ra,4(sp)
 4014778:	df000017 	ldw	fp,0(sp)
 401477c:	dec00204 	addi	sp,sp,8
 4014780:	f800283a 	ret

04014784 <alt_main>:
 * devices/filesystems/components in the system; and call the entry point for
 * the users application, i.e. main().
 */

void alt_main (void)
{
 4014784:	defffd04 	addi	sp,sp,-12
 4014788:	dfc00215 	stw	ra,8(sp)
 401478c:	df000115 	stw	fp,4(sp)
 4014790:	df000104 	addi	fp,sp,4
#endif

  /* ALT LOG - please see HAL/sys/alt_log_printf.h for details */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Entering alt_main, calling alt_irq_init.\r\n");
  /* Initialize the interrupt controller. */
  alt_irq_init (NULL);
 4014794:	0009883a 	mov	r4,zero
 4014798:	4014eb00 	call	4014eb0 <alt_irq_init>

  /* Initialize the operating system */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Done alt_irq_init, calling alt_os_init.\r\n");
  ALT_OS_INIT();
 401479c:	0001883a 	nop
  ALT_LOG_PRINT_BOOT("[alt_main.c] Done OS Init, calling alt_sem_create.\r\n");
  ALT_SEM_CREATE (&alt_fd_list_lock, 1);

  /* Initialize the device drivers/software components. */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling alt_sys_init.\r\n");
  alt_sys_init();
 40147a0:	4014ee80 	call	4014ee8 <alt_sys_init>
   * devices be present (not equal to /dev/null) and if direct drivers
   * aren't being used.
   */

    ALT_LOG_PRINT_BOOT("[alt_main.c] Redirecting IO.\r\n");
    alt_io_redirect(ALT_STDOUT, ALT_STDIN, ALT_STDERR);
 40147a4:	01810074 	movhi	r6,1025
 40147a8:	319b4704 	addi	r6,r6,27932
 40147ac:	01410074 	movhi	r5,1025
 40147b0:	295b4704 	addi	r5,r5,27932
 40147b4:	01010074 	movhi	r4,1025
 40147b8:	211b4704 	addi	r4,r4,27932
 40147bc:	40166b80 	call	40166b8 <alt_io_redirect>
  /* 
   * Call the C++ constructors 
   */

  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling C++ constructors.\r\n");
  _do_ctors ();
 40147c0:	401617c0 	call	401617c <_do_ctors>
   * redefined as _exit()). This is in the interest of reducing code footprint,
   * in that the atexit() overhead is removed when it's not needed.
   */

  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling atexit.\r\n");
  atexit (_do_dtors);
 40147c4:	01010074 	movhi	r4,1025
 40147c8:	21187704 	addi	r4,r4,25052
 40147cc:	40168fc0 	call	40168fc <atexit>
  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling main.\r\n");

#ifdef ALT_NO_EXIT
  main (alt_argc, alt_argv, alt_envp);
#else
  result = main (alt_argc, alt_argv, alt_envp);
 40147d0:	d0a70417 	ldw	r2,-25584(gp)
 40147d4:	d0e70517 	ldw	r3,-25580(gp)
 40147d8:	d1270617 	ldw	r4,-25576(gp)
 40147dc:	200d883a 	mov	r6,r4
 40147e0:	180b883a 	mov	r5,r3
 40147e4:	1009883a 	mov	r4,r2
 40147e8:	401063c0 	call	401063c <main>
 40147ec:	e0bfff15 	stw	r2,-4(fp)
  close(STDOUT_FILENO);
 40147f0:	01000044 	movi	r4,1
 40147f4:	40140000 	call	4014000 <close>
  exit (result);
 40147f8:	e13fff17 	ldw	r4,-4(fp)
 40147fc:	40169100 	call	4016910 <exit>

04014800 <__malloc_lock>:
 * configuration is single threaded, so there is nothing to do here. Note that 
 * this requires that malloc is never called by an interrupt service routine.
 */

void __malloc_lock ( struct _reent *_r )
{
 4014800:	defffe04 	addi	sp,sp,-8
 4014804:	df000115 	stw	fp,4(sp)
 4014808:	df000104 	addi	fp,sp,4
 401480c:	e13fff15 	stw	r4,-4(fp)
}
 4014810:	0001883a 	nop
 4014814:	e037883a 	mov	sp,fp
 4014818:	df000017 	ldw	fp,0(sp)
 401481c:	dec00104 	addi	sp,sp,4
 4014820:	f800283a 	ret

04014824 <__malloc_unlock>:
/*
 *
 */

void __malloc_unlock ( struct _reent *_r )
{
 4014824:	defffe04 	addi	sp,sp,-8
 4014828:	df000115 	stw	fp,4(sp)
 401482c:	df000104 	addi	fp,sp,4
 4014830:	e13fff15 	stw	r4,-4(fp)
}
 4014834:	0001883a 	nop
 4014838:	e037883a 	mov	sp,fp
 401483c:	df000017 	ldw	fp,0(sp)
 4014840:	dec00104 	addi	sp,sp,4
 4014844:	f800283a 	ret

04014848 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
 4014848:	defffe04 	addi	sp,sp,-8
 401484c:	dfc00115 	stw	ra,4(sp)
 4014850:	df000015 	stw	fp,0(sp)
 4014854:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
 4014858:	d0a00e17 	ldw	r2,-32712(gp)
 401485c:	10000326 	beq	r2,zero,401486c <alt_get_errno+0x24>
 4014860:	d0a00e17 	ldw	r2,-32712(gp)
 4014864:	103ee83a 	callr	r2
 4014868:	00000106 	br	4014870 <alt_get_errno+0x28>
 401486c:	d0a6ff04 	addi	r2,gp,-25604
}
 4014870:	e037883a 	mov	sp,fp
 4014874:	dfc00117 	ldw	ra,4(sp)
 4014878:	df000017 	ldw	fp,0(sp)
 401487c:	dec00204 	addi	sp,sp,8
 4014880:	f800283a 	ret

04014884 <alt_file_locked>:
 * performed for devices. Filesystems are required to handle the ioctl() call
 * themselves, and report the error from the filesystems open() function. 
 */ 

static int alt_file_locked (alt_fd* fd)
{
 4014884:	defffb04 	addi	sp,sp,-20
 4014888:	dfc00415 	stw	ra,16(sp)
 401488c:	df000315 	stw	fp,12(sp)
 4014890:	dc000215 	stw	r16,8(sp)
 4014894:	df000304 	addi	fp,sp,12
 4014898:	e13ffe15 	stw	r4,-8(fp)

  /*
   * Mark the file descriptor as belonging to a device.
   */

  fd->fd_flags |= ALT_FD_DEV;
 401489c:	e0bffe17 	ldw	r2,-8(fp)
 40148a0:	10800217 	ldw	r2,8(r2)
 40148a4:	10d00034 	orhi	r3,r2,16384
 40148a8:	e0bffe17 	ldw	r2,-8(fp)
 40148ac:	10c00215 	stw	r3,8(r2)
  /*
   * Loop through all current file descriptors searching for one that's locked
   * for exclusive access. If a match is found, generate an error.
   */

  for (i = 0; i <= alt_max_fd; i++)
 40148b0:	e03ffd15 	stw	zero,-12(fp)
 40148b4:	00002306 	br	4014944 <alt_file_locked+0xc0>
  {
    if ((alt_fd_list[i].dev == fd->dev) &&
 40148b8:	04010074 	movhi	r16,1025
 40148bc:	841d7504 	addi	r16,r16,30164
 40148c0:	e0bffd17 	ldw	r2,-12(fp)
 40148c4:	01400304 	movi	r5,12
 40148c8:	1009883a 	mov	r4,r2
 40148cc:	4013f9c0 	call	4013f9c <__mulsi3>
 40148d0:	8085883a 	add	r2,r16,r2
 40148d4:	10c00017 	ldw	r3,0(r2)
 40148d8:	e0bffe17 	ldw	r2,-8(fp)
 40148dc:	10800017 	ldw	r2,0(r2)
 40148e0:	1880151e 	bne	r3,r2,4014938 <alt_file_locked+0xb4>
        (alt_fd_list[i].fd_flags & ALT_FD_EXCL) &&
 40148e4:	04010074 	movhi	r16,1025
 40148e8:	841d7504 	addi	r16,r16,30164
 40148ec:	e0bffd17 	ldw	r2,-12(fp)
 40148f0:	01400304 	movi	r5,12
 40148f4:	1009883a 	mov	r4,r2
 40148f8:	4013f9c0 	call	4013f9c <__mulsi3>
 40148fc:	8085883a 	add	r2,r16,r2
 4014900:	10800204 	addi	r2,r2,8
 4014904:	10800017 	ldw	r2,0(r2)
   * for exclusive access. If a match is found, generate an error.
   */

  for (i = 0; i <= alt_max_fd; i++)
  {
    if ((alt_fd_list[i].dev == fd->dev) &&
 4014908:	10000b0e 	bge	r2,zero,4014938 <alt_file_locked+0xb4>
        (alt_fd_list[i].fd_flags & ALT_FD_EXCL) &&
        (&alt_fd_list[i] != fd))
 401490c:	01400304 	movi	r5,12
 4014910:	e13ffd17 	ldw	r4,-12(fp)
 4014914:	4013f9c0 	call	4013f9c <__mulsi3>
 4014918:	1007883a 	mov	r3,r2
 401491c:	00810074 	movhi	r2,1025
 4014920:	109d7504 	addi	r2,r2,30164
 4014924:	1887883a 	add	r3,r3,r2
   */

  for (i = 0; i <= alt_max_fd; i++)
  {
    if ((alt_fd_list[i].dev == fd->dev) &&
        (alt_fd_list[i].fd_flags & ALT_FD_EXCL) &&
 4014928:	e0bffe17 	ldw	r2,-8(fp)
 401492c:	18800226 	beq	r3,r2,4014938 <alt_file_locked+0xb4>
        (&alt_fd_list[i] != fd))
    {
      return -EACCES;
 4014930:	00bffcc4 	movi	r2,-13
 4014934:	00000806 	br	4014958 <alt_file_locked+0xd4>
  /*
   * Loop through all current file descriptors searching for one that's locked
   * for exclusive access. If a match is found, generate an error.
   */

  for (i = 0; i <= alt_max_fd; i++)
 4014938:	e0bffd17 	ldw	r2,-12(fp)
 401493c:	10800044 	addi	r2,r2,1
 4014940:	e0bffd15 	stw	r2,-12(fp)
 4014944:	d0a00d17 	ldw	r2,-32716(gp)
 4014948:	1007883a 	mov	r3,r2
 401494c:	e0bffd17 	ldw	r2,-12(fp)
 4014950:	18bfd92e 	bgeu	r3,r2,40148b8 <_gp+0xffff407c>
    }
  }
  
  /* The device is not locked */
 
  return 0;
 4014954:	0005883a 	mov	r2,zero
}
 4014958:	e6ffff04 	addi	sp,fp,-4
 401495c:	dfc00217 	ldw	ra,8(sp)
 4014960:	df000117 	ldw	fp,4(sp)
 4014964:	dc000017 	ldw	r16,0(sp)
 4014968:	dec00304 	addi	sp,sp,12
 401496c:	f800283a 	ret

04014970 <open>:
 *
 * ALT_OPEN is mapped onto the open() system call in alt_syscall.h
 */
 
int ALT_OPEN (const char* file, int flags, int mode)
{ 
 4014970:	defff604 	addi	sp,sp,-40
 4014974:	dfc00915 	stw	ra,36(sp)
 4014978:	df000815 	stw	fp,32(sp)
 401497c:	df000804 	addi	fp,sp,32
 4014980:	e13ffd15 	stw	r4,-12(fp)
 4014984:	e17ffe15 	stw	r5,-8(fp)
 4014988:	e1bfff15 	stw	r6,-4(fp)
  alt_dev* dev;
  alt_fd*  fd;
  int index  = -1;
 401498c:	00bfffc4 	movi	r2,-1
 4014990:	e0bff915 	stw	r2,-28(fp)
  int status = -ENODEV;
 4014994:	00bffb44 	movi	r2,-19
 4014998:	e0bffa15 	stw	r2,-24(fp)
  int isafs = 0;
 401499c:	e03ffb15 	stw	zero,-20(fp)
  /* 
   * Check the device list, to see if a device with a matching name is 
   * registered.
   */
  
  if (!(dev = alt_find_dev (file, &alt_dev_list)))
 40149a0:	d1600b04 	addi	r5,gp,-32724
 40149a4:	e13ffd17 	ldw	r4,-12(fp)
 40149a8:	401623c0 	call	401623c <alt_find_dev>
 40149ac:	e0bff815 	stw	r2,-32(fp)
 40149b0:	e0bff817 	ldw	r2,-32(fp)
 40149b4:	1000051e 	bne	r2,zero,40149cc <open+0x5c>
  {
    /* No matching device, so try the filesystem list */

    dev   = alt_find_file (file);
 40149b8:	e13ffd17 	ldw	r4,-12(fp)
 40149bc:	40162cc0 	call	40162cc <alt_find_file>
 40149c0:	e0bff815 	stw	r2,-32(fp)
    isafs = 1;
 40149c4:	00800044 	movi	r2,1
 40149c8:	e0bffb15 	stw	r2,-20(fp)

  /* 
   * If a matching device or filesystem is found, allocate a file descriptor. 
   */

  if (dev)
 40149cc:	e0bff817 	ldw	r2,-32(fp)
 40149d0:	10002b26 	beq	r2,zero,4014a80 <open+0x110>
  {
    if ((index = alt_get_fd (dev)) < 0)
 40149d4:	e13ff817 	ldw	r4,-32(fp)
 40149d8:	40164540 	call	4016454 <alt_get_fd>
 40149dc:	e0bff915 	stw	r2,-28(fp)
 40149e0:	e0bff917 	ldw	r2,-28(fp)
 40149e4:	1000030e 	bge	r2,zero,40149f4 <open+0x84>
    {
      status = index;
 40149e8:	e0bff917 	ldw	r2,-28(fp)
 40149ec:	e0bffa15 	stw	r2,-24(fp)
 40149f0:	00002506 	br	4014a88 <open+0x118>
    }
    else
    {
      fd = &alt_fd_list[index];
 40149f4:	01400304 	movi	r5,12
 40149f8:	e13ff917 	ldw	r4,-28(fp)
 40149fc:	4013f9c0 	call	4013f9c <__mulsi3>
 4014a00:	1007883a 	mov	r3,r2
 4014a04:	00810074 	movhi	r2,1025
 4014a08:	109d7504 	addi	r2,r2,30164
 4014a0c:	1885883a 	add	r2,r3,r2
 4014a10:	e0bffc15 	stw	r2,-16(fp)
      fd->fd_flags = (flags & ~ALT_FD_FLAGS_MASK);
 4014a14:	e0fffe17 	ldw	r3,-8(fp)
 4014a18:	00900034 	movhi	r2,16384
 4014a1c:	10bfffc4 	addi	r2,r2,-1
 4014a20:	1886703a 	and	r3,r3,r2
 4014a24:	e0bffc17 	ldw	r2,-16(fp)
 4014a28:	10c00215 	stw	r3,8(r2)
      
      /* If this is a device, ensure it isn't already locked */

      if (isafs || ((status = alt_file_locked (fd)) >= 0))
 4014a2c:	e0bffb17 	ldw	r2,-20(fp)
 4014a30:	1000051e 	bne	r2,zero,4014a48 <open+0xd8>
 4014a34:	e13ffc17 	ldw	r4,-16(fp)
 4014a38:	40148840 	call	4014884 <alt_file_locked>
 4014a3c:	e0bffa15 	stw	r2,-24(fp)
 4014a40:	e0bffa17 	ldw	r2,-24(fp)
 4014a44:	10001016 	blt	r2,zero,4014a88 <open+0x118>
        /* 
         * If the device or filesystem provides an open() callback function,
         * call it now to perform any device/filesystem specific operations.
         */
    
        status = (dev->open) ? dev->open(fd, file, flags, mode): 0;
 4014a48:	e0bff817 	ldw	r2,-32(fp)
 4014a4c:	10800317 	ldw	r2,12(r2)
 4014a50:	10000826 	beq	r2,zero,4014a74 <open+0x104>
 4014a54:	e0bff817 	ldw	r2,-32(fp)
 4014a58:	10800317 	ldw	r2,12(r2)
 4014a5c:	e1ffff17 	ldw	r7,-4(fp)
 4014a60:	e1bffe17 	ldw	r6,-8(fp)
 4014a64:	e17ffd17 	ldw	r5,-12(fp)
 4014a68:	e13ffc17 	ldw	r4,-16(fp)
 4014a6c:	103ee83a 	callr	r2
 4014a70:	00000106 	br	4014a78 <open+0x108>
 4014a74:	0005883a 	mov	r2,zero
 4014a78:	e0bffa15 	stw	r2,-24(fp)
 4014a7c:	00000206 	br	4014a88 <open+0x118>
      }
    }
  }
  else
  {
    status = -ENODEV;
 4014a80:	00bffb44 	movi	r2,-19
 4014a84:	e0bffa15 	stw	r2,-24(fp)
  }

  /* Allocation failed, so clean up and return an error */ 

  if (status < 0)
 4014a88:	e0bffa17 	ldw	r2,-24(fp)
 4014a8c:	1000090e 	bge	r2,zero,4014ab4 <open+0x144>
  {
    alt_release_fd (index);  
 4014a90:	e13ff917 	ldw	r4,-28(fp)
 4014a94:	4014c0c0 	call	4014c0c <alt_release_fd>
    ALT_ERRNO = -status;
 4014a98:	40148480 	call	4014848 <alt_get_errno>
 4014a9c:	1007883a 	mov	r3,r2
 4014aa0:	e0bffa17 	ldw	r2,-24(fp)
 4014aa4:	0085c83a 	sub	r2,zero,r2
 4014aa8:	18800015 	stw	r2,0(r3)
    return -1;
 4014aac:	00bfffc4 	movi	r2,-1
 4014ab0:	00000106 	br	4014ab8 <open+0x148>
  }
  
  /* return the reference upon success */

  return index;
 4014ab4:	e0bff917 	ldw	r2,-28(fp)
}
 4014ab8:	e037883a 	mov	sp,fp
 4014abc:	dfc00117 	ldw	ra,4(sp)
 4014ac0:	df000017 	ldw	fp,0(sp)
 4014ac4:	dec00204 	addi	sp,sp,8
 4014ac8:	f800283a 	ret

04014acc <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
 4014acc:	defffe04 	addi	sp,sp,-8
 4014ad0:	dfc00115 	stw	ra,4(sp)
 4014ad4:	df000015 	stw	fp,0(sp)
 4014ad8:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
 4014adc:	d0a00e17 	ldw	r2,-32712(gp)
 4014ae0:	10000326 	beq	r2,zero,4014af0 <alt_get_errno+0x24>
 4014ae4:	d0a00e17 	ldw	r2,-32712(gp)
 4014ae8:	103ee83a 	callr	r2
 4014aec:	00000106 	br	4014af4 <alt_get_errno+0x28>
 4014af0:	d0a6ff04 	addi	r2,gp,-25604
}
 4014af4:	e037883a 	mov	sp,fp
 4014af8:	dfc00117 	ldw	ra,4(sp)
 4014afc:	df000017 	ldw	fp,0(sp)
 4014b00:	dec00204 	addi	sp,sp,8
 4014b04:	f800283a 	ret

04014b08 <read>:
}

#else /* !ALT_USE_DIRECT_DRIVERS */

int ALT_READ (int file, void *ptr, size_t len)
{
 4014b08:	defff904 	addi	sp,sp,-28
 4014b0c:	dfc00615 	stw	ra,24(sp)
 4014b10:	df000515 	stw	fp,20(sp)
 4014b14:	df000504 	addi	fp,sp,20
 4014b18:	e13ffd15 	stw	r4,-12(fp)
 4014b1c:	e17ffe15 	stw	r5,-8(fp)
 4014b20:	e1bfff15 	stw	r6,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
 4014b24:	e0bffd17 	ldw	r2,-12(fp)
 4014b28:	10000816 	blt	r2,zero,4014b4c <read+0x44>
 4014b2c:	01400304 	movi	r5,12
 4014b30:	e13ffd17 	ldw	r4,-12(fp)
 4014b34:	4013f9c0 	call	4013f9c <__mulsi3>
 4014b38:	1007883a 	mov	r3,r2
 4014b3c:	00810074 	movhi	r2,1025
 4014b40:	109d7504 	addi	r2,r2,30164
 4014b44:	1885883a 	add	r2,r3,r2
 4014b48:	00000106 	br	4014b50 <read+0x48>
 4014b4c:	0005883a 	mov	r2,zero
 4014b50:	e0bffb15 	stw	r2,-20(fp)
  
  if (fd)
 4014b54:	e0bffb17 	ldw	r2,-20(fp)
 4014b58:	10002226 	beq	r2,zero,4014be4 <read+0xdc>
     * If the file has not been opened with read access, or if the driver does
     * not provide an implementation of read(), generate an error. Otherwise
     * call the drivers read() function to process the request.
     */

    if (((fd->fd_flags & O_ACCMODE) != O_WRONLY) && 
 4014b5c:	e0bffb17 	ldw	r2,-20(fp)
 4014b60:	10800217 	ldw	r2,8(r2)
 4014b64:	108000cc 	andi	r2,r2,3
 4014b68:	10800060 	cmpeqi	r2,r2,1
 4014b6c:	1000181e 	bne	r2,zero,4014bd0 <read+0xc8>
        (fd->dev->read))
 4014b70:	e0bffb17 	ldw	r2,-20(fp)
 4014b74:	10800017 	ldw	r2,0(r2)
 4014b78:	10800517 	ldw	r2,20(r2)
     * If the file has not been opened with read access, or if the driver does
     * not provide an implementation of read(), generate an error. Otherwise
     * call the drivers read() function to process the request.
     */

    if (((fd->fd_flags & O_ACCMODE) != O_WRONLY) && 
 4014b7c:	10001426 	beq	r2,zero,4014bd0 <read+0xc8>
        (fd->dev->read))
      {
        if ((rval = fd->dev->read(fd, ptr, len)) < 0)
 4014b80:	e0bffb17 	ldw	r2,-20(fp)
 4014b84:	10800017 	ldw	r2,0(r2)
 4014b88:	10800517 	ldw	r2,20(r2)
 4014b8c:	e0ffff17 	ldw	r3,-4(fp)
 4014b90:	180d883a 	mov	r6,r3
 4014b94:	e17ffe17 	ldw	r5,-8(fp)
 4014b98:	e13ffb17 	ldw	r4,-20(fp)
 4014b9c:	103ee83a 	callr	r2
 4014ba0:	e0bffc15 	stw	r2,-16(fp)
 4014ba4:	e0bffc17 	ldw	r2,-16(fp)
 4014ba8:	1000070e 	bge	r2,zero,4014bc8 <read+0xc0>
        {
          ALT_ERRNO = -rval;
 4014bac:	4014acc0 	call	4014acc <alt_get_errno>
 4014bb0:	1007883a 	mov	r3,r2
 4014bb4:	e0bffc17 	ldw	r2,-16(fp)
 4014bb8:	0085c83a 	sub	r2,zero,r2
 4014bbc:	18800015 	stw	r2,0(r3)
          return -1;
 4014bc0:	00bfffc4 	movi	r2,-1
 4014bc4:	00000c06 	br	4014bf8 <read+0xf0>
        }
        return rval;
 4014bc8:	e0bffc17 	ldw	r2,-16(fp)
 4014bcc:	00000a06 	br	4014bf8 <read+0xf0>
      }
      else
      {
        ALT_ERRNO = EACCES;
 4014bd0:	4014acc0 	call	4014acc <alt_get_errno>
 4014bd4:	1007883a 	mov	r3,r2
 4014bd8:	00800344 	movi	r2,13
 4014bdc:	18800015 	stw	r2,0(r3)
 4014be0:	00000406 	br	4014bf4 <read+0xec>
      }
    }
  else
  {
    ALT_ERRNO = EBADFD;
 4014be4:	4014acc0 	call	4014acc <alt_get_errno>
 4014be8:	1007883a 	mov	r3,r2
 4014bec:	00801444 	movi	r2,81
 4014bf0:	18800015 	stw	r2,0(r3)
  }
  return -1;
 4014bf4:	00bfffc4 	movi	r2,-1
}
 4014bf8:	e037883a 	mov	sp,fp
 4014bfc:	dfc00117 	ldw	ra,4(sp)
 4014c00:	df000017 	ldw	fp,0(sp)
 4014c04:	dec00204 	addi	sp,sp,8
 4014c08:	f800283a 	ret

04014c0c <alt_release_fd>:
 * File descriptors correcponding to standard in, standard out and standard 
 * error cannont be released backed to the pool. They are always reserved.
 */

void alt_release_fd (int fd)
{
 4014c0c:	defffc04 	addi	sp,sp,-16
 4014c10:	dfc00315 	stw	ra,12(sp)
 4014c14:	df000215 	stw	fp,8(sp)
 4014c18:	dc000115 	stw	r16,4(sp)
 4014c1c:	df000204 	addi	fp,sp,8
 4014c20:	e13ffe15 	stw	r4,-8(fp)
  if (fd > 2)
 4014c24:	e0bffe17 	ldw	r2,-8(fp)
 4014c28:	108000d0 	cmplti	r2,r2,3
 4014c2c:	1000111e 	bne	r2,zero,4014c74 <alt_release_fd+0x68>
  {
    alt_fd_list[fd].fd_flags = 0;
 4014c30:	04010074 	movhi	r16,1025
 4014c34:	841d7504 	addi	r16,r16,30164
 4014c38:	e0bffe17 	ldw	r2,-8(fp)
 4014c3c:	01400304 	movi	r5,12
 4014c40:	1009883a 	mov	r4,r2
 4014c44:	4013f9c0 	call	4013f9c <__mulsi3>
 4014c48:	8085883a 	add	r2,r16,r2
 4014c4c:	10800204 	addi	r2,r2,8
 4014c50:	10000015 	stw	zero,0(r2)
    alt_fd_list[fd].dev      = 0;
 4014c54:	04010074 	movhi	r16,1025
 4014c58:	841d7504 	addi	r16,r16,30164
 4014c5c:	e0bffe17 	ldw	r2,-8(fp)
 4014c60:	01400304 	movi	r5,12
 4014c64:	1009883a 	mov	r4,r2
 4014c68:	4013f9c0 	call	4013f9c <__mulsi3>
 4014c6c:	8085883a 	add	r2,r16,r2
 4014c70:	10000015 	stw	zero,0(r2)
  }
}
 4014c74:	0001883a 	nop
 4014c78:	e6ffff04 	addi	sp,fp,-4
 4014c7c:	dfc00217 	ldw	ra,8(sp)
 4014c80:	df000117 	ldw	fp,4(sp)
 4014c84:	dc000017 	ldw	r16,0(sp)
 4014c88:	dec00304 	addi	sp,sp,12
 4014c8c:	f800283a 	ret

04014c90 <sbrk>:
#endif
 
caddr_t ALT_SBRK (int incr) __attribute__ ((no_instrument_function ));

caddr_t ALT_SBRK (int incr)
{ 
 4014c90:	defff904 	addi	sp,sp,-28
 4014c94:	df000615 	stw	fp,24(sp)
 4014c98:	df000604 	addi	fp,sp,24
 4014c9c:	e13fff15 	stw	r4,-4(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 4014ca0:	0005303a 	rdctl	r2,status
 4014ca4:	e0bffe15 	stw	r2,-8(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 4014ca8:	e0fffe17 	ldw	r3,-8(fp)
 4014cac:	00bfff84 	movi	r2,-2
 4014cb0:	1884703a 	and	r2,r3,r2
 4014cb4:	1001703a 	wrctl	status,r2
  
  return context;
 4014cb8:	e0bffe17 	ldw	r2,-8(fp)
  alt_irq_context context;
  char *prev_heap_end; 

  context = alt_irq_disable_all();
 4014cbc:	e0bffb15 	stw	r2,-20(fp)

  /* Always return data aligned on a word boundary */
  heap_end = (char *)(((unsigned int)heap_end + 3) & ~3);
 4014cc0:	d0a01017 	ldw	r2,-32704(gp)
 4014cc4:	10c000c4 	addi	r3,r2,3
 4014cc8:	00bfff04 	movi	r2,-4
 4014ccc:	1884703a 	and	r2,r3,r2
 4014cd0:	d0a01015 	stw	r2,-32704(gp)
  if (((heap_end + incr) - __alt_heap_start) > ALT_MAX_HEAP_BYTES) {
    alt_irq_enable_all(context);
    return (caddr_t)-1;
  }
#else
  if ((heap_end + incr) > __alt_heap_limit) {
 4014cd4:	d0e01017 	ldw	r3,-32704(gp)
 4014cd8:	e0bfff17 	ldw	r2,-4(fp)
 4014cdc:	1887883a 	add	r3,r3,r2
 4014ce0:	008100b4 	movhi	r2,1026
 4014ce4:	10800004 	addi	r2,r2,0
 4014ce8:	10c0062e 	bgeu	r2,r3,4014d04 <sbrk+0x74>
 4014cec:	e0bffb17 	ldw	r2,-20(fp)
 4014cf0:	e0bffa15 	stw	r2,-24(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 4014cf4:	e0bffa17 	ldw	r2,-24(fp)
 4014cf8:	1001703a 	wrctl	status,r2
    alt_irq_enable_all(context);
    return (caddr_t)-1;
 4014cfc:	00bfffc4 	movi	r2,-1
 4014d00:	00000b06 	br	4014d30 <sbrk+0xa0>
  }
#endif

  prev_heap_end = heap_end; 
 4014d04:	d0a01017 	ldw	r2,-32704(gp)
 4014d08:	e0bffd15 	stw	r2,-12(fp)
  heap_end += incr; 
 4014d0c:	d0e01017 	ldw	r3,-32704(gp)
 4014d10:	e0bfff17 	ldw	r2,-4(fp)
 4014d14:	1885883a 	add	r2,r3,r2
 4014d18:	d0a01015 	stw	r2,-32704(gp)
 4014d1c:	e0bffb17 	ldw	r2,-20(fp)
 4014d20:	e0bffc15 	stw	r2,-16(fp)
 4014d24:	e0bffc17 	ldw	r2,-16(fp)
 4014d28:	1001703a 	wrctl	status,r2

#endif

  alt_irq_enable_all(context);

  return (caddr_t) prev_heap_end; 
 4014d2c:	e0bffd17 	ldw	r2,-12(fp)
} 
 4014d30:	e037883a 	mov	sp,fp
 4014d34:	df000017 	ldw	fp,0(sp)
 4014d38:	dec00104 	addi	sp,sp,4
 4014d3c:	f800283a 	ret

04014d40 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
 4014d40:	defffe04 	addi	sp,sp,-8
 4014d44:	dfc00115 	stw	ra,4(sp)
 4014d48:	df000015 	stw	fp,0(sp)
 4014d4c:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
 4014d50:	d0a00e17 	ldw	r2,-32712(gp)
 4014d54:	10000326 	beq	r2,zero,4014d64 <alt_get_errno+0x24>
 4014d58:	d0a00e17 	ldw	r2,-32712(gp)
 4014d5c:	103ee83a 	callr	r2
 4014d60:	00000106 	br	4014d68 <alt_get_errno+0x28>
 4014d64:	d0a6ff04 	addi	r2,gp,-25604
}
 4014d68:	e037883a 	mov	sp,fp
 4014d6c:	dfc00117 	ldw	ra,4(sp)
 4014d70:	df000017 	ldw	fp,0(sp)
 4014d74:	dec00204 	addi	sp,sp,8
 4014d78:	f800283a 	ret

04014d7c <write>:
}

#else /* !ALT_USE_DIRECT_DRIVERS */

int ALT_WRITE (int file, const void *ptr, size_t len)
{
 4014d7c:	defff904 	addi	sp,sp,-28
 4014d80:	dfc00615 	stw	ra,24(sp)
 4014d84:	df000515 	stw	fp,20(sp)
 4014d88:	df000504 	addi	fp,sp,20
 4014d8c:	e13ffd15 	stw	r4,-12(fp)
 4014d90:	e17ffe15 	stw	r5,-8(fp)
 4014d94:	e1bfff15 	stw	r6,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
 4014d98:	e0bffd17 	ldw	r2,-12(fp)
 4014d9c:	10000816 	blt	r2,zero,4014dc0 <write+0x44>
 4014da0:	01400304 	movi	r5,12
 4014da4:	e13ffd17 	ldw	r4,-12(fp)
 4014da8:	4013f9c0 	call	4013f9c <__mulsi3>
 4014dac:	1007883a 	mov	r3,r2
 4014db0:	00810074 	movhi	r2,1025
 4014db4:	109d7504 	addi	r2,r2,30164
 4014db8:	1885883a 	add	r2,r3,r2
 4014dbc:	00000106 	br	4014dc4 <write+0x48>
 4014dc0:	0005883a 	mov	r2,zero
 4014dc4:	e0bffb15 	stw	r2,-20(fp)
  
  if (fd)
 4014dc8:	e0bffb17 	ldw	r2,-20(fp)
 4014dcc:	10002126 	beq	r2,zero,4014e54 <write+0xd8>
     * If the file has not been opened with write access, or if the driver does
     * not provide an implementation of write(), generate an error. Otherwise
     * call the drivers write() function to process the request.
     */

    if (((fd->fd_flags & O_ACCMODE) != O_RDONLY) && fd->dev->write)
 4014dd0:	e0bffb17 	ldw	r2,-20(fp)
 4014dd4:	10800217 	ldw	r2,8(r2)
 4014dd8:	108000cc 	andi	r2,r2,3
 4014ddc:	10001826 	beq	r2,zero,4014e40 <write+0xc4>
 4014de0:	e0bffb17 	ldw	r2,-20(fp)
 4014de4:	10800017 	ldw	r2,0(r2)
 4014de8:	10800617 	ldw	r2,24(r2)
 4014dec:	10001426 	beq	r2,zero,4014e40 <write+0xc4>
    {
      
      /* ALT_LOG - see altera_hal/HAL/inc/sys/alt_log_printf.h */
      ALT_LOG_WRITE_FUNCTION(ptr,len);

      if ((rval = fd->dev->write(fd, ptr, len)) < 0)
 4014df0:	e0bffb17 	ldw	r2,-20(fp)
 4014df4:	10800017 	ldw	r2,0(r2)
 4014df8:	10800617 	ldw	r2,24(r2)
 4014dfc:	e0ffff17 	ldw	r3,-4(fp)
 4014e00:	180d883a 	mov	r6,r3
 4014e04:	e17ffe17 	ldw	r5,-8(fp)
 4014e08:	e13ffb17 	ldw	r4,-20(fp)
 4014e0c:	103ee83a 	callr	r2
 4014e10:	e0bffc15 	stw	r2,-16(fp)
 4014e14:	e0bffc17 	ldw	r2,-16(fp)
 4014e18:	1000070e 	bge	r2,zero,4014e38 <write+0xbc>
      {
        ALT_ERRNO = -rval;
 4014e1c:	4014d400 	call	4014d40 <alt_get_errno>
 4014e20:	1007883a 	mov	r3,r2
 4014e24:	e0bffc17 	ldw	r2,-16(fp)
 4014e28:	0085c83a 	sub	r2,zero,r2
 4014e2c:	18800015 	stw	r2,0(r3)
        return -1;
 4014e30:	00bfffc4 	movi	r2,-1
 4014e34:	00000c06 	br	4014e68 <write+0xec>
      }
      return rval;
 4014e38:	e0bffc17 	ldw	r2,-16(fp)
 4014e3c:	00000a06 	br	4014e68 <write+0xec>
    }
    else
    {
      ALT_ERRNO = EACCES;
 4014e40:	4014d400 	call	4014d40 <alt_get_errno>
 4014e44:	1007883a 	mov	r3,r2
 4014e48:	00800344 	movi	r2,13
 4014e4c:	18800015 	stw	r2,0(r3)
 4014e50:	00000406 	br	4014e64 <write+0xe8>
    }
  }
  else  
  {
    ALT_ERRNO = EBADFD;
 4014e54:	4014d400 	call	4014d40 <alt_get_errno>
 4014e58:	1007883a 	mov	r3,r2
 4014e5c:	00801444 	movi	r2,81
 4014e60:	18800015 	stw	r2,0(r3)
  }
  return -1;
 4014e64:	00bfffc4 	movi	r2,-1
}
 4014e68:	e037883a 	mov	sp,fp
 4014e6c:	dfc00117 	ldw	ra,4(sp)
 4014e70:	df000017 	ldw	fp,0(sp)
 4014e74:	dec00204 	addi	sp,sp,8
 4014e78:	f800283a 	ret

04014e7c <alt_dev_reg>:
 */

extern int alt_fs_reg  (alt_dev* dev); 

static ALT_INLINE int alt_dev_reg (alt_dev* dev)
{
 4014e7c:	defffd04 	addi	sp,sp,-12
 4014e80:	dfc00215 	stw	ra,8(sp)
 4014e84:	df000115 	stw	fp,4(sp)
 4014e88:	df000104 	addi	fp,sp,4
 4014e8c:	e13fff15 	stw	r4,-4(fp)
  extern alt_llist alt_dev_list;

  return alt_dev_llist_insert ((alt_dev_llist*) dev, &alt_dev_list);
 4014e90:	d1600b04 	addi	r5,gp,-32724
 4014e94:	e13fff17 	ldw	r4,-4(fp)
 4014e98:	40160d80 	call	40160d8 <alt_dev_llist_insert>
}
 4014e9c:	e037883a 	mov	sp,fp
 4014ea0:	dfc00117 	ldw	ra,4(sp)
 4014ea4:	df000017 	ldw	fp,0(sp)
 4014ea8:	dec00204 	addi	sp,sp,8
 4014eac:	f800283a 	ret

04014eb0 <alt_irq_init>:
 * The "base" parameter is ignored and only
 * present for backwards-compatibility.
 */

void alt_irq_init ( const void* base )
{
 4014eb0:	defffd04 	addi	sp,sp,-12
 4014eb4:	dfc00215 	stw	ra,8(sp)
 4014eb8:	df000115 	stw	fp,4(sp)
 4014ebc:	df000104 	addi	fp,sp,4
 4014ec0:	e13fff15 	stw	r4,-4(fp)
    ALTERA_NIOS2_GEN2_IRQ_INIT ( NIOS2_GEN2_0, nios2_gen2_0);
 4014ec4:	40168d80 	call	40168d8 <altera_nios2_gen2_irq_init>
 * alt_irq_cpu_enable_interrupts() enables the CPU to start taking interrupts.
 */
static ALT_INLINE void ALT_ALWAYS_INLINE 
       alt_irq_cpu_enable_interrupts (void)
{
    NIOS2_WRITE_STATUS(NIOS2_STATUS_PIE_MSK
 4014ec8:	00800044 	movi	r2,1
 4014ecc:	1001703a 	wrctl	status,r2
    alt_irq_cpu_enable_interrupts();
}
 4014ed0:	0001883a 	nop
 4014ed4:	e037883a 	mov	sp,fp
 4014ed8:	dfc00117 	ldw	ra,4(sp)
 4014edc:	df000017 	ldw	fp,0(sp)
 4014ee0:	dec00204 	addi	sp,sp,8
 4014ee4:	f800283a 	ret

04014ee8 <alt_sys_init>:
 * Initialize the non-interrupt controller devices.
 * Called after alt_irq_init().
 */

void alt_sys_init( void )
{
 4014ee8:	defffe04 	addi	sp,sp,-8
 4014eec:	dfc00115 	stw	ra,4(sp)
 4014ef0:	df000015 	stw	fp,0(sp)
 4014ef4:	d839883a 	mov	fp,sp
    ALTERA_AVALON_TIMER_INIT ( TIMER_0, timer_0);
 4014ef8:	01efaf54 	movui	r7,48829
 4014efc:	000d883a 	mov	r6,zero
 4014f00:	000b883a 	mov	r5,zero
 4014f04:	010100b4 	movhi	r4,1026
 4014f08:	21040004 	addi	r4,r4,4096
 4014f0c:	4015a500 	call	4015a50 <alt_avalon_timer_sc_init>
    ALTERA_AVALON_JTAG_UART_INIT ( JTAG_UART_0, jtag_uart_0);
 4014f10:	01800084 	movi	r6,2
 4014f14:	000b883a 	mov	r5,zero
 4014f18:	01010074 	movhi	r4,1025
 4014f1c:	211ddf04 	addi	r4,r4,30588
 4014f20:	40150d40 	call	40150d4 <altera_avalon_jtag_uart_init>
 4014f24:	01010074 	movhi	r4,1025
 4014f28:	211dd504 	addi	r4,r4,30548
 4014f2c:	4014e7c0 	call	4014e7c <alt_dev_reg>
    ALTERA_AVALON_SYSID_QSYS_INIT ( SYSID, sysid);
 4014f30:	0001883a 	nop
    ALTERA_HOSTFS_INIT ( ALTERA_HOSTFS, altera_hostfs);
 4014f34:	010100b4 	movhi	r4,1026
 4014f38:	2121ed04 	addi	r4,r4,-30796
 4014f3c:	40163d40 	call	40163d4 <alt_fs_reg>
    ALTERA_UP_AVALON_AUDIO_AND_VIDEO_CONFIG_INIT ( AUDIO_AND_VIDEO_CONFIG_0, audio_and_video_config_0);
 4014f40:	010100b4 	movhi	r4,1026
 4014f44:	2121f704 	addi	r4,r4,-30756
 4014f48:	4014e7c0 	call	4014e7c <alt_dev_reg>
    ALTERA_UP_AVALON_AUDIO_INIT ( AUDIO_0, audio_0);
 4014f4c:	010100b4 	movhi	r4,1026
 4014f50:	21220304 	addi	r4,r4,-30708
 4014f54:	4014e7c0 	call	4014e7c <alt_dev_reg>
}
 4014f58:	0001883a 	nop
 4014f5c:	e037883a 	mov	sp,fp
 4014f60:	dfc00117 	ldw	ra,4(sp)
 4014f64:	df000017 	ldw	fp,0(sp)
 4014f68:	dec00204 	addi	sp,sp,8
 4014f6c:	f800283a 	ret

04014f70 <altera_avalon_jtag_uart_read_fd>:
 *
 */

int 
altera_avalon_jtag_uart_read_fd(alt_fd* fd, char* buffer, int space)
{
 4014f70:	defffa04 	addi	sp,sp,-24
 4014f74:	dfc00515 	stw	ra,20(sp)
 4014f78:	df000415 	stw	fp,16(sp)
 4014f7c:	df000404 	addi	fp,sp,16
 4014f80:	e13ffd15 	stw	r4,-12(fp)
 4014f84:	e17ffe15 	stw	r5,-8(fp)
 4014f88:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
 4014f8c:	e0bffd17 	ldw	r2,-12(fp)
 4014f90:	10800017 	ldw	r2,0(r2)
 4014f94:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_jtag_uart_read(&dev->state, buffer, space,
 4014f98:	e0bffc17 	ldw	r2,-16(fp)
 4014f9c:	10c00a04 	addi	r3,r2,40
 4014fa0:	e0bffd17 	ldw	r2,-12(fp)
 4014fa4:	10800217 	ldw	r2,8(r2)
 4014fa8:	100f883a 	mov	r7,r2
 4014fac:	e1bfff17 	ldw	r6,-4(fp)
 4014fb0:	e17ffe17 	ldw	r5,-8(fp)
 4014fb4:	1809883a 	mov	r4,r3
 4014fb8:	40155980 	call	4015598 <altera_avalon_jtag_uart_read>
      fd->fd_flags);
}
 4014fbc:	e037883a 	mov	sp,fp
 4014fc0:	dfc00117 	ldw	ra,4(sp)
 4014fc4:	df000017 	ldw	fp,0(sp)
 4014fc8:	dec00204 	addi	sp,sp,8
 4014fcc:	f800283a 	ret

04014fd0 <altera_avalon_jtag_uart_write_fd>:

int 
altera_avalon_jtag_uart_write_fd(alt_fd* fd, const char* buffer, int space)
{
 4014fd0:	defffa04 	addi	sp,sp,-24
 4014fd4:	dfc00515 	stw	ra,20(sp)
 4014fd8:	df000415 	stw	fp,16(sp)
 4014fdc:	df000404 	addi	fp,sp,16
 4014fe0:	e13ffd15 	stw	r4,-12(fp)
 4014fe4:	e17ffe15 	stw	r5,-8(fp)
 4014fe8:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
 4014fec:	e0bffd17 	ldw	r2,-12(fp)
 4014ff0:	10800017 	ldw	r2,0(r2)
 4014ff4:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_jtag_uart_write(&dev->state, buffer, space,
 4014ff8:	e0bffc17 	ldw	r2,-16(fp)
 4014ffc:	10c00a04 	addi	r3,r2,40
 4015000:	e0bffd17 	ldw	r2,-12(fp)
 4015004:	10800217 	ldw	r2,8(r2)
 4015008:	100f883a 	mov	r7,r2
 401500c:	e1bfff17 	ldw	r6,-4(fp)
 4015010:	e17ffe17 	ldw	r5,-8(fp)
 4015014:	1809883a 	mov	r4,r3
 4015018:	40157b40 	call	40157b4 <altera_avalon_jtag_uart_write>
      fd->fd_flags);
}
 401501c:	e037883a 	mov	sp,fp
 4015020:	dfc00117 	ldw	ra,4(sp)
 4015024:	df000017 	ldw	fp,0(sp)
 4015028:	dec00204 	addi	sp,sp,8
 401502c:	f800283a 	ret

04015030 <altera_avalon_jtag_uart_close_fd>:

#ifndef ALTERA_AVALON_JTAG_UART_SMALL

int 
altera_avalon_jtag_uart_close_fd(alt_fd* fd)
{
 4015030:	defffc04 	addi	sp,sp,-16
 4015034:	dfc00315 	stw	ra,12(sp)
 4015038:	df000215 	stw	fp,8(sp)
 401503c:	df000204 	addi	fp,sp,8
 4015040:	e13fff15 	stw	r4,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
 4015044:	e0bfff17 	ldw	r2,-4(fp)
 4015048:	10800017 	ldw	r2,0(r2)
 401504c:	e0bffe15 	stw	r2,-8(fp)

    return altera_avalon_jtag_uart_close(&dev->state, fd->fd_flags);
 4015050:	e0bffe17 	ldw	r2,-8(fp)
 4015054:	10c00a04 	addi	r3,r2,40
 4015058:	e0bfff17 	ldw	r2,-4(fp)
 401505c:	10800217 	ldw	r2,8(r2)
 4015060:	100b883a 	mov	r5,r2
 4015064:	1809883a 	mov	r4,r3
 4015068:	40154400 	call	4015440 <altera_avalon_jtag_uart_close>
}
 401506c:	e037883a 	mov	sp,fp
 4015070:	dfc00117 	ldw	ra,4(sp)
 4015074:	df000017 	ldw	fp,0(sp)
 4015078:	dec00204 	addi	sp,sp,8
 401507c:	f800283a 	ret

04015080 <altera_avalon_jtag_uart_ioctl_fd>:

int 
altera_avalon_jtag_uart_ioctl_fd(alt_fd* fd, int req, void* arg)
{
 4015080:	defffa04 	addi	sp,sp,-24
 4015084:	dfc00515 	stw	ra,20(sp)
 4015088:	df000415 	stw	fp,16(sp)
 401508c:	df000404 	addi	fp,sp,16
 4015090:	e13ffd15 	stw	r4,-12(fp)
 4015094:	e17ffe15 	stw	r5,-8(fp)
 4015098:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev;
 401509c:	e0bffd17 	ldw	r2,-12(fp)
 40150a0:	10800017 	ldw	r2,0(r2)
 40150a4:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_jtag_uart_ioctl(&dev->state, req, arg);
 40150a8:	e0bffc17 	ldw	r2,-16(fp)
 40150ac:	10800a04 	addi	r2,r2,40
 40150b0:	e1bfff17 	ldw	r6,-4(fp)
 40150b4:	e17ffe17 	ldw	r5,-8(fp)
 40150b8:	1009883a 	mov	r4,r2
 40150bc:	40154a80 	call	40154a8 <altera_avalon_jtag_uart_ioctl>
}
 40150c0:	e037883a 	mov	sp,fp
 40150c4:	dfc00117 	ldw	ra,4(sp)
 40150c8:	df000017 	ldw	fp,0(sp)
 40150cc:	dec00204 	addi	sp,sp,8
 40150d0:	f800283a 	ret

040150d4 <altera_avalon_jtag_uart_init>:
 * Return 1 on sucessful IRQ register and 0 on failure.
 */

void altera_avalon_jtag_uart_init(altera_avalon_jtag_uart_state* sp, 
                                  int irq_controller_id, int irq)
{
 40150d4:	defffa04 	addi	sp,sp,-24
 40150d8:	dfc00515 	stw	ra,20(sp)
 40150dc:	df000415 	stw	fp,16(sp)
 40150e0:	df000404 	addi	fp,sp,16
 40150e4:	e13ffd15 	stw	r4,-12(fp)
 40150e8:	e17ffe15 	stw	r5,-8(fp)
 40150ec:	e1bfff15 	stw	r6,-4(fp)
  ALT_FLAG_CREATE(&sp->events, 0);
  ALT_SEM_CREATE(&sp->read_lock, 1);
  ALT_SEM_CREATE(&sp->write_lock, 1);

  /* enable read interrupts at the device */
  sp->irq_enable = ALTERA_AVALON_JTAG_UART_CONTROL_RE_MSK;
 40150f0:	e0bffd17 	ldw	r2,-12(fp)
 40150f4:	00c00044 	movi	r3,1
 40150f8:	10c00815 	stw	r3,32(r2)

  IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable); 
 40150fc:	e0bffd17 	ldw	r2,-12(fp)
 4015100:	10800017 	ldw	r2,0(r2)
 4015104:	10800104 	addi	r2,r2,4
 4015108:	1007883a 	mov	r3,r2
 401510c:	e0bffd17 	ldw	r2,-12(fp)
 4015110:	10800817 	ldw	r2,32(r2)
 4015114:	18800035 	stwio	r2,0(r3)
  
  /* register the interrupt handler */
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
  alt_ic_isr_register(irq_controller_id, irq, altera_avalon_jtag_uart_irq, 
 4015118:	e0bffe17 	ldw	r2,-8(fp)
 401511c:	e0ffff17 	ldw	r3,-4(fp)
 4015120:	d8000015 	stw	zero,0(sp)
 4015124:	e1fffd17 	ldw	r7,-12(fp)
 4015128:	01810074 	movhi	r6,1025
 401512c:	31946504 	addi	r6,r6,20884
 4015130:	180b883a 	mov	r5,r3
 4015134:	1009883a 	mov	r4,r2
 4015138:	40141f80 	call	40141f8 <alt_ic_isr_register>
#else
  alt_irq_register(irq, sp, altera_avalon_jtag_uart_irq);
#endif  

  /* Register an alarm to go off every second to check for presence of host */
  sp->host_inactive = 0;
 401513c:	e0bffd17 	ldw	r2,-12(fp)
 4015140:	10000915 	stw	zero,36(r2)

  if (alt_alarm_start(&sp->alarm, alt_ticks_per_second(), 
 4015144:	e0bffd17 	ldw	r2,-12(fp)
 4015148:	10800204 	addi	r2,r2,8
 * Obtain the system clock rate in ticks/s. 
 */

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_ticks_per_second (void)
{
  return _alt_tick_rate;
 401514c:	d0e70817 	ldw	r3,-25568(gp)
 4015150:	e1fffd17 	ldw	r7,-12(fp)
 4015154:	01810074 	movhi	r6,1025
 4015158:	3194e804 	addi	r6,r6,21408
 401515c:	180b883a 	mov	r5,r3
 4015160:	1009883a 	mov	r4,r2
 4015164:	4015f500 	call	4015f50 <alt_alarm_start>
 4015168:	1000040e 	bge	r2,zero,401517c <altera_avalon_jtag_uart_init+0xa8>
    &altera_avalon_jtag_uart_timeout, sp) < 0)
  {
    /* If we can't set the alarm then record "don't know if host present" 
     * and behave as though the host is present.
     */
    sp->timeout = INT_MAX;
 401516c:	e0fffd17 	ldw	r3,-12(fp)
 4015170:	00a00034 	movhi	r2,32768
 4015174:	10bfffc4 	addi	r2,r2,-1
 4015178:	18800115 	stw	r2,4(r3)
  }

  /* ALT_LOG - see altera_hal/HAL/inc/sys/alt_log_printf.h */ 
  ALT_LOG_JTAG_UART_ALARM_REGISTER(sp, sp->base);
}
 401517c:	0001883a 	nop
 4015180:	e037883a 	mov	sp,fp
 4015184:	dfc00117 	ldw	ra,4(sp)
 4015188:	df000017 	ldw	fp,0(sp)
 401518c:	dec00204 	addi	sp,sp,8
 4015190:	f800283a 	ret

04015194 <altera_avalon_jtag_uart_irq>:
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
static void altera_avalon_jtag_uart_irq(void* context)
#else
static void altera_avalon_jtag_uart_irq(void* context, alt_u32 id)
#endif
{
 4015194:	defff804 	addi	sp,sp,-32
 4015198:	df000715 	stw	fp,28(sp)
 401519c:	df000704 	addi	fp,sp,28
 40151a0:	e13fff15 	stw	r4,-4(fp)
  altera_avalon_jtag_uart_state* sp = (altera_avalon_jtag_uart_state*) context;
 40151a4:	e0bfff17 	ldw	r2,-4(fp)
 40151a8:	e0bffb15 	stw	r2,-20(fp)
  unsigned int base = sp->base;
 40151ac:	e0bffb17 	ldw	r2,-20(fp)
 40151b0:	10800017 	ldw	r2,0(r2)
 40151b4:	e0bffc15 	stw	r2,-16(fp)
  /* ALT_LOG - see altera_hal/HAL/inc/sys/alt_log_printf.h */ 
  ALT_LOG_JTAG_UART_ISR_FUNCTION(base, sp);

  for ( ; ; )
  {
    unsigned int control = IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
 40151b8:	e0bffc17 	ldw	r2,-16(fp)
 40151bc:	10800104 	addi	r2,r2,4
 40151c0:	10800037 	ldwio	r2,0(r2)
 40151c4:	e0bffd15 	stw	r2,-12(fp)

    /* Return once nothing more to do */
    if ((control & (ALTERA_AVALON_JTAG_UART_CONTROL_RI_MSK | ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)) == 0)
 40151c8:	e0bffd17 	ldw	r2,-12(fp)
 40151cc:	1080c00c 	andi	r2,r2,768
 40151d0:	10006d26 	beq	r2,zero,4015388 <altera_avalon_jtag_uart_irq+0x1f4>
      break;

    if (control & ALTERA_AVALON_JTAG_UART_CONTROL_RI_MSK)
 40151d4:	e0bffd17 	ldw	r2,-12(fp)
 40151d8:	1080400c 	andi	r2,r2,256
 40151dc:	10003526 	beq	r2,zero,40152b4 <altera_avalon_jtag_uart_irq+0x120>
    {
      /* process a read irq.  Start by assuming that there is data in the
       * receive FIFO (otherwise why would we have been interrupted?)
       */
      unsigned int data = 1 << ALTERA_AVALON_JTAG_UART_DATA_RAVAIL_OFST;
 40151e0:	00800074 	movhi	r2,1
 40151e4:	e0bff915 	stw	r2,-28(fp)
      for ( ; ; )
      {
        /* Check whether there is space in the buffer.  If not then we must not
         * read any characters from the buffer as they will be lost.
         */
        unsigned int next = (sp->rx_in + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
 40151e8:	e0bffb17 	ldw	r2,-20(fp)
 40151ec:	10800a17 	ldw	r2,40(r2)
 40151f0:	10800044 	addi	r2,r2,1
 40151f4:	1081ffcc 	andi	r2,r2,2047
 40151f8:	e0bffe15 	stw	r2,-8(fp)
        if (next == sp->rx_out)
 40151fc:	e0bffb17 	ldw	r2,-20(fp)
 4015200:	10c00b17 	ldw	r3,44(r2)
 4015204:	e0bffe17 	ldw	r2,-8(fp)
 4015208:	18801526 	beq	r3,r2,4015260 <altera_avalon_jtag_uart_irq+0xcc>
          break;

        /* Try to remove a character from the FIFO and find out whether there
         * are any more characters remaining.
         */
        data = IORD_ALTERA_AVALON_JTAG_UART_DATA(base);
 401520c:	e0bffc17 	ldw	r2,-16(fp)
 4015210:	10800037 	ldwio	r2,0(r2)
 4015214:	e0bff915 	stw	r2,-28(fp)
        
        if ((data & ALTERA_AVALON_JTAG_UART_DATA_RVALID_MSK) == 0)
 4015218:	e0bff917 	ldw	r2,-28(fp)
 401521c:	10a0000c 	andi	r2,r2,32768
 4015220:	10001126 	beq	r2,zero,4015268 <altera_avalon_jtag_uart_irq+0xd4>
          break;

        sp->rx_buf[sp->rx_in] = (data & ALTERA_AVALON_JTAG_UART_DATA_DATA_MSK) >> ALTERA_AVALON_JTAG_UART_DATA_DATA_OFST;
 4015224:	e0bffb17 	ldw	r2,-20(fp)
 4015228:	10800a17 	ldw	r2,40(r2)
 401522c:	e0fff917 	ldw	r3,-28(fp)
 4015230:	1809883a 	mov	r4,r3
 4015234:	e0fffb17 	ldw	r3,-20(fp)
 4015238:	1885883a 	add	r2,r3,r2
 401523c:	10800e04 	addi	r2,r2,56
 4015240:	11000005 	stb	r4,0(r2)
        sp->rx_in = (sp->rx_in + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
 4015244:	e0bffb17 	ldw	r2,-20(fp)
 4015248:	10800a17 	ldw	r2,40(r2)
 401524c:	10800044 	addi	r2,r2,1
 4015250:	10c1ffcc 	andi	r3,r2,2047
 4015254:	e0bffb17 	ldw	r2,-20(fp)
 4015258:	10c00a15 	stw	r3,40(r2)

        /* Post an event to notify jtag_uart_read that a character has been read */
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_READ_RDY, OS_FLAG_SET);
      }
 401525c:	003fe206 	br	40151e8 <_gp+0xffff49ac>
        /* Check whether there is space in the buffer.  If not then we must not
         * read any characters from the buffer as they will be lost.
         */
        unsigned int next = (sp->rx_in + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
        if (next == sp->rx_out)
          break;
 4015260:	0001883a 	nop
 4015264:	00000106 	br	401526c <altera_avalon_jtag_uart_irq+0xd8>
         * are any more characters remaining.
         */
        data = IORD_ALTERA_AVALON_JTAG_UART_DATA(base);
        
        if ((data & ALTERA_AVALON_JTAG_UART_DATA_RVALID_MSK) == 0)
          break;
 4015268:	0001883a 	nop

        /* Post an event to notify jtag_uart_read that a character has been read */
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_READ_RDY, OS_FLAG_SET);
      }

      if (data & ALTERA_AVALON_JTAG_UART_DATA_RAVAIL_MSK)
 401526c:	e0bff917 	ldw	r2,-28(fp)
 4015270:	10bfffec 	andhi	r2,r2,65535
 4015274:	10000f26 	beq	r2,zero,40152b4 <altera_avalon_jtag_uart_irq+0x120>
      {
        /* If there is still data available here then the buffer is full 
         * so turn off receive interrupts until some space becomes available.
         */
        sp->irq_enable &= ~ALTERA_AVALON_JTAG_UART_CONTROL_RE_MSK;
 4015278:	e0bffb17 	ldw	r2,-20(fp)
 401527c:	10c00817 	ldw	r3,32(r2)
 4015280:	00bfff84 	movi	r2,-2
 4015284:	1886703a 	and	r3,r3,r2
 4015288:	e0bffb17 	ldw	r2,-20(fp)
 401528c:	10c00815 	stw	r3,32(r2)
        IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(base, sp->irq_enable);
 4015290:	e0bffc17 	ldw	r2,-16(fp)
 4015294:	10800104 	addi	r2,r2,4
 4015298:	1007883a 	mov	r3,r2
 401529c:	e0bffb17 	ldw	r2,-20(fp)
 40152a0:	10800817 	ldw	r2,32(r2)
 40152a4:	18800035 	stwio	r2,0(r3)
        
        /* Dummy read to ensure IRQ is cleared prior to ISR completion */
        IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
 40152a8:	e0bffc17 	ldw	r2,-16(fp)
 40152ac:	10800104 	addi	r2,r2,4
 40152b0:	10800037 	ldwio	r2,0(r2)
      }
    }

    if (control & ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)
 40152b4:	e0bffd17 	ldw	r2,-12(fp)
 40152b8:	1080800c 	andi	r2,r2,512
 40152bc:	103fbe26 	beq	r2,zero,40151b8 <_gp+0xffff497c>
    {
      /* process a write irq */
      unsigned int space = (control & ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_MSK) >> ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_OFST;
 40152c0:	e0bffd17 	ldw	r2,-12(fp)
 40152c4:	1004d43a 	srli	r2,r2,16
 40152c8:	e0bffa15 	stw	r2,-24(fp)

      while (space > 0 && sp->tx_out != sp->tx_in)
 40152cc:	00001406 	br	4015320 <altera_avalon_jtag_uart_irq+0x18c>
      {
        IOWR_ALTERA_AVALON_JTAG_UART_DATA(base, sp->tx_buf[sp->tx_out]);
 40152d0:	e0bffc17 	ldw	r2,-16(fp)
 40152d4:	e0fffb17 	ldw	r3,-20(fp)
 40152d8:	18c00d17 	ldw	r3,52(r3)
 40152dc:	e13ffb17 	ldw	r4,-20(fp)
 40152e0:	20c7883a 	add	r3,r4,r3
 40152e4:	18c20e04 	addi	r3,r3,2104
 40152e8:	18c00003 	ldbu	r3,0(r3)
 40152ec:	18c03fcc 	andi	r3,r3,255
 40152f0:	18c0201c 	xori	r3,r3,128
 40152f4:	18ffe004 	addi	r3,r3,-128
 40152f8:	10c00035 	stwio	r3,0(r2)

        sp->tx_out = (sp->tx_out + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
 40152fc:	e0bffb17 	ldw	r2,-20(fp)
 4015300:	10800d17 	ldw	r2,52(r2)
 4015304:	10800044 	addi	r2,r2,1
 4015308:	10c1ffcc 	andi	r3,r2,2047
 401530c:	e0bffb17 	ldw	r2,-20(fp)
 4015310:	10c00d15 	stw	r3,52(r2)

        /* Post an event to notify jtag_uart_write that a character has been written */
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_WRITE_RDY, OS_FLAG_SET);

        space--;
 4015314:	e0bffa17 	ldw	r2,-24(fp)
 4015318:	10bfffc4 	addi	r2,r2,-1
 401531c:	e0bffa15 	stw	r2,-24(fp)
    if (control & ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)
    {
      /* process a write irq */
      unsigned int space = (control & ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_MSK) >> ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_OFST;

      while (space > 0 && sp->tx_out != sp->tx_in)
 4015320:	e0bffa17 	ldw	r2,-24(fp)
 4015324:	10000526 	beq	r2,zero,401533c <altera_avalon_jtag_uart_irq+0x1a8>
 4015328:	e0bffb17 	ldw	r2,-20(fp)
 401532c:	10c00d17 	ldw	r3,52(r2)
 4015330:	e0bffb17 	ldw	r2,-20(fp)
 4015334:	10800c17 	ldw	r2,48(r2)
 4015338:	18bfe51e 	bne	r3,r2,40152d0 <_gp+0xffff4a94>
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_WRITE_RDY, OS_FLAG_SET);

        space--;
      }

      if (space > 0)
 401533c:	e0bffa17 	ldw	r2,-24(fp)
 4015340:	103f9d26 	beq	r2,zero,40151b8 <_gp+0xffff497c>
      {
        /* If we don't have any more data available then turn off the TX interrupt */
        sp->irq_enable &= ~ALTERA_AVALON_JTAG_UART_CONTROL_WE_MSK;
 4015344:	e0bffb17 	ldw	r2,-20(fp)
 4015348:	10c00817 	ldw	r3,32(r2)
 401534c:	00bfff44 	movi	r2,-3
 4015350:	1886703a 	and	r3,r3,r2
 4015354:	e0bffb17 	ldw	r2,-20(fp)
 4015358:	10c00815 	stw	r3,32(r2)
        IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
 401535c:	e0bffb17 	ldw	r2,-20(fp)
 4015360:	10800017 	ldw	r2,0(r2)
 4015364:	10800104 	addi	r2,r2,4
 4015368:	1007883a 	mov	r3,r2
 401536c:	e0bffb17 	ldw	r2,-20(fp)
 4015370:	10800817 	ldw	r2,32(r2)
 4015374:	18800035 	stwio	r2,0(r3)
        
        /* Dummy read to ensure IRQ is cleared prior to ISR completion */
        IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
 4015378:	e0bffc17 	ldw	r2,-16(fp)
 401537c:	10800104 	addi	r2,r2,4
 4015380:	10800037 	ldwio	r2,0(r2)
      }
    }
  }
 4015384:	003f8c06 	br	40151b8 <_gp+0xffff497c>
  {
    unsigned int control = IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);

    /* Return once nothing more to do */
    if ((control & (ALTERA_AVALON_JTAG_UART_CONTROL_RI_MSK | ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)) == 0)
      break;
 4015388:	0001883a 	nop
        /* Dummy read to ensure IRQ is cleared prior to ISR completion */
        IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
      }
    }
  }
}
 401538c:	0001883a 	nop
 4015390:	e037883a 	mov	sp,fp
 4015394:	df000017 	ldw	fp,0(sp)
 4015398:	dec00104 	addi	sp,sp,4
 401539c:	f800283a 	ret

040153a0 <altera_avalon_jtag_uart_timeout>:
 * Timeout routine is called every second
 */

static alt_u32 
altera_avalon_jtag_uart_timeout(void* context) 
{
 40153a0:	defff804 	addi	sp,sp,-32
 40153a4:	df000715 	stw	fp,28(sp)
 40153a8:	df000704 	addi	fp,sp,28
 40153ac:	e13ffb15 	stw	r4,-20(fp)
  altera_avalon_jtag_uart_state* sp = (altera_avalon_jtag_uart_state *) context;
 40153b0:	e0bffb17 	ldw	r2,-20(fp)
 40153b4:	e0bff915 	stw	r2,-28(fp)

  unsigned int control = IORD_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base);
 40153b8:	e0bff917 	ldw	r2,-28(fp)
 40153bc:	10800017 	ldw	r2,0(r2)
 40153c0:	10800104 	addi	r2,r2,4
 40153c4:	10800037 	ldwio	r2,0(r2)
 40153c8:	e0bffa15 	stw	r2,-24(fp)

  if (control & ALTERA_AVALON_JTAG_UART_CONTROL_AC_MSK)
 40153cc:	e0bffa17 	ldw	r2,-24(fp)
 40153d0:	1081000c 	andi	r2,r2,1024
 40153d4:	10000b26 	beq	r2,zero,4015404 <altera_avalon_jtag_uart_timeout+0x64>
  {
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable | ALTERA_AVALON_JTAG_UART_CONTROL_AC_MSK);
 40153d8:	e0bff917 	ldw	r2,-28(fp)
 40153dc:	10800017 	ldw	r2,0(r2)
 40153e0:	10800104 	addi	r2,r2,4
 40153e4:	1007883a 	mov	r3,r2
 40153e8:	e0bff917 	ldw	r2,-28(fp)
 40153ec:	10800817 	ldw	r2,32(r2)
 40153f0:	10810014 	ori	r2,r2,1024
 40153f4:	18800035 	stwio	r2,0(r3)
    sp->host_inactive = 0;
 40153f8:	e0bff917 	ldw	r2,-28(fp)
 40153fc:	10000915 	stw	zero,36(r2)
 4015400:	00000a06 	br	401542c <altera_avalon_jtag_uart_timeout+0x8c>
  }
  else if (sp->host_inactive < INT_MAX - 2) {
 4015404:	e0bff917 	ldw	r2,-28(fp)
 4015408:	10c00917 	ldw	r3,36(r2)
 401540c:	00a00034 	movhi	r2,32768
 4015410:	10bfff04 	addi	r2,r2,-4
 4015414:	10c00536 	bltu	r2,r3,401542c <altera_avalon_jtag_uart_timeout+0x8c>
    sp->host_inactive++;
 4015418:	e0bff917 	ldw	r2,-28(fp)
 401541c:	10800917 	ldw	r2,36(r2)
 4015420:	10c00044 	addi	r3,r2,1
 4015424:	e0bff917 	ldw	r2,-28(fp)
 4015428:	10c00915 	stw	r3,36(r2)
 401542c:	d0a70817 	ldw	r2,-25568(gp)
      ALT_FLAG_POST (sp->events, ALT_JTAG_UART_TIMEOUT, OS_FLAG_SET);
    }
  }

  return alt_ticks_per_second();
}
 4015430:	e037883a 	mov	sp,fp
 4015434:	df000017 	ldw	fp,0(sp)
 4015438:	dec00104 	addi	sp,sp,4
 401543c:	f800283a 	ret

04015440 <altera_avalon_jtag_uart_close>:
 * The close routine is not implemented for the small driver; instead it will
 * map to null. This is because the small driver simply waits while characters
 * are transmitted; there is no interrupt-serviced buffer to empty 
 */
int altera_avalon_jtag_uart_close(altera_avalon_jtag_uart_state* sp, int flags)
{
 4015440:	defffd04 	addi	sp,sp,-12
 4015444:	df000215 	stw	fp,8(sp)
 4015448:	df000204 	addi	fp,sp,8
 401544c:	e13ffe15 	stw	r4,-8(fp)
 4015450:	e17fff15 	stw	r5,-4(fp)
  /* 
   * Wait for all transmit data to be emptied by the JTAG UART ISR, or
   * for a host-inactivity timeout, in which case transmit data will be lost
   */
  while ( (sp->tx_out != sp->tx_in) && (sp->host_inactive < sp->timeout) ) {
 4015454:	00000506 	br	401546c <altera_avalon_jtag_uart_close+0x2c>
    if (flags & O_NONBLOCK) {
 4015458:	e0bfff17 	ldw	r2,-4(fp)
 401545c:	1090000c 	andi	r2,r2,16384
 4015460:	10000226 	beq	r2,zero,401546c <altera_avalon_jtag_uart_close+0x2c>
      return -EWOULDBLOCK; 
 4015464:	00bffd44 	movi	r2,-11
 4015468:	00000b06 	br	4015498 <altera_avalon_jtag_uart_close+0x58>
{
  /* 
   * Wait for all transmit data to be emptied by the JTAG UART ISR, or
   * for a host-inactivity timeout, in which case transmit data will be lost
   */
  while ( (sp->tx_out != sp->tx_in) && (sp->host_inactive < sp->timeout) ) {
 401546c:	e0bffe17 	ldw	r2,-8(fp)
 4015470:	10c00d17 	ldw	r3,52(r2)
 4015474:	e0bffe17 	ldw	r2,-8(fp)
 4015478:	10800c17 	ldw	r2,48(r2)
 401547c:	18800526 	beq	r3,r2,4015494 <altera_avalon_jtag_uart_close+0x54>
 4015480:	e0bffe17 	ldw	r2,-8(fp)
 4015484:	10c00917 	ldw	r3,36(r2)
 4015488:	e0bffe17 	ldw	r2,-8(fp)
 401548c:	10800117 	ldw	r2,4(r2)
 4015490:	18bff136 	bltu	r3,r2,4015458 <_gp+0xffff4c1c>
    if (flags & O_NONBLOCK) {
      return -EWOULDBLOCK; 
    }
  }

  return 0;
 4015494:	0005883a 	mov	r2,zero
}
 4015498:	e037883a 	mov	sp,fp
 401549c:	df000017 	ldw	fp,0(sp)
 40154a0:	dec00104 	addi	sp,sp,4
 40154a4:	f800283a 	ret

040154a8 <altera_avalon_jtag_uart_ioctl>:
/* ----------------------------------------------------------- */

int 
altera_avalon_jtag_uart_ioctl(altera_avalon_jtag_uart_state* sp, int req,
  void* arg)
{
 40154a8:	defffa04 	addi	sp,sp,-24
 40154ac:	df000515 	stw	fp,20(sp)
 40154b0:	df000504 	addi	fp,sp,20
 40154b4:	e13ffd15 	stw	r4,-12(fp)
 40154b8:	e17ffe15 	stw	r5,-8(fp)
 40154bc:	e1bfff15 	stw	r6,-4(fp)
  int rc = -ENOTTY;
 40154c0:	00bff9c4 	movi	r2,-25
 40154c4:	e0bffb15 	stw	r2,-20(fp)

  switch (req)
 40154c8:	e0bffe17 	ldw	r2,-8(fp)
 40154cc:	10da8060 	cmpeqi	r3,r2,27137
 40154d0:	1800031e 	bne	r3,zero,40154e0 <altera_avalon_jtag_uart_ioctl+0x38>
 40154d4:	109a80a0 	cmpeqi	r2,r2,27138
 40154d8:	1000181e 	bne	r2,zero,401553c <altera_avalon_jtag_uart_ioctl+0x94>
      rc = 0;
    }
    break;

  default:
    break;
 40154dc:	00002906 	br	4015584 <altera_avalon_jtag_uart_ioctl+0xdc>

  switch (req)
  {
  case TIOCSTIMEOUT:
    /* Set the time to wait until assuming host is not connected */
    if (sp->timeout != INT_MAX)
 40154e0:	e0bffd17 	ldw	r2,-12(fp)
 40154e4:	10c00117 	ldw	r3,4(r2)
 40154e8:	00a00034 	movhi	r2,32768
 40154ec:	10bfffc4 	addi	r2,r2,-1
 40154f0:	18802126 	beq	r3,r2,4015578 <altera_avalon_jtag_uart_ioctl+0xd0>
    {
      int timeout = *((int *)arg);
 40154f4:	e0bfff17 	ldw	r2,-4(fp)
 40154f8:	10800017 	ldw	r2,0(r2)
 40154fc:	e0bffc15 	stw	r2,-16(fp)
      sp->timeout = (timeout >= 2 && timeout < INT_MAX) ? timeout : INT_MAX - 1;
 4015500:	e0bffc17 	ldw	r2,-16(fp)
 4015504:	10800090 	cmplti	r2,r2,2
 4015508:	1000061e 	bne	r2,zero,4015524 <altera_avalon_jtag_uart_ioctl+0x7c>
 401550c:	e0fffc17 	ldw	r3,-16(fp)
 4015510:	00a00034 	movhi	r2,32768
 4015514:	10bfffc4 	addi	r2,r2,-1
 4015518:	18800226 	beq	r3,r2,4015524 <altera_avalon_jtag_uart_ioctl+0x7c>
 401551c:	e0bffc17 	ldw	r2,-16(fp)
 4015520:	00000206 	br	401552c <altera_avalon_jtag_uart_ioctl+0x84>
 4015524:	00a00034 	movhi	r2,32768
 4015528:	10bfff84 	addi	r2,r2,-2
 401552c:	e0fffd17 	ldw	r3,-12(fp)
 4015530:	18800115 	stw	r2,4(r3)
      rc = 0;
 4015534:	e03ffb15 	stw	zero,-20(fp)
    }
    break;
 4015538:	00000f06 	br	4015578 <altera_avalon_jtag_uart_ioctl+0xd0>

  case TIOCGCONNECTED:
    /* Find out whether host is connected */
    if (sp->timeout != INT_MAX)
 401553c:	e0bffd17 	ldw	r2,-12(fp)
 4015540:	10c00117 	ldw	r3,4(r2)
 4015544:	00a00034 	movhi	r2,32768
 4015548:	10bfffc4 	addi	r2,r2,-1
 401554c:	18800c26 	beq	r3,r2,4015580 <altera_avalon_jtag_uart_ioctl+0xd8>
    {
      *((int *)arg) = (sp->host_inactive < sp->timeout) ? 1 : 0;
 4015550:	e0bffd17 	ldw	r2,-12(fp)
 4015554:	10c00917 	ldw	r3,36(r2)
 4015558:	e0bffd17 	ldw	r2,-12(fp)
 401555c:	10800117 	ldw	r2,4(r2)
 4015560:	1885803a 	cmpltu	r2,r3,r2
 4015564:	10c03fcc 	andi	r3,r2,255
 4015568:	e0bfff17 	ldw	r2,-4(fp)
 401556c:	10c00015 	stw	r3,0(r2)
      rc = 0;
 4015570:	e03ffb15 	stw	zero,-20(fp)
    }
    break;
 4015574:	00000206 	br	4015580 <altera_avalon_jtag_uart_ioctl+0xd8>
    {
      int timeout = *((int *)arg);
      sp->timeout = (timeout >= 2 && timeout < INT_MAX) ? timeout : INT_MAX - 1;
      rc = 0;
    }
    break;
 4015578:	0001883a 	nop
 401557c:	00000106 	br	4015584 <altera_avalon_jtag_uart_ioctl+0xdc>
    if (sp->timeout != INT_MAX)
    {
      *((int *)arg) = (sp->host_inactive < sp->timeout) ? 1 : 0;
      rc = 0;
    }
    break;
 4015580:	0001883a 	nop

  default:
    break;
  }

  return rc;
 4015584:	e0bffb17 	ldw	r2,-20(fp)
}
 4015588:	e037883a 	mov	sp,fp
 401558c:	df000017 	ldw	fp,0(sp)
 4015590:	dec00104 	addi	sp,sp,4
 4015594:	f800283a 	ret

04015598 <altera_avalon_jtag_uart_read>:
/* ----------------------------------------------------------- */

int 
altera_avalon_jtag_uart_read(altera_avalon_jtag_uart_state* sp, 
  char * buffer, int space, int flags)
{
 4015598:	defff304 	addi	sp,sp,-52
 401559c:	dfc00c15 	stw	ra,48(sp)
 40155a0:	df000b15 	stw	fp,44(sp)
 40155a4:	df000b04 	addi	fp,sp,44
 40155a8:	e13ffc15 	stw	r4,-16(fp)
 40155ac:	e17ffd15 	stw	r5,-12(fp)
 40155b0:	e1bffe15 	stw	r6,-8(fp)
 40155b4:	e1ffff15 	stw	r7,-4(fp)
  char * ptr = buffer;
 40155b8:	e0bffd17 	ldw	r2,-12(fp)
 40155bc:	e0bff515 	stw	r2,-44(fp)
   * When running in a multi threaded environment, obtain the "read_lock"
   * semaphore. This ensures that reading from the device is thread-safe.
   */
  ALT_SEM_PEND (sp->read_lock, 0);

  while (space > 0)
 40155c0:	00004706 	br	40156e0 <altera_avalon_jtag_uart_read+0x148>
    unsigned int in, out;

    /* Read as much data as possible */
    do
    {
      in  = sp->rx_in;
 40155c4:	e0bffc17 	ldw	r2,-16(fp)
 40155c8:	10800a17 	ldw	r2,40(r2)
 40155cc:	e0bff715 	stw	r2,-36(fp)
      out = sp->rx_out;
 40155d0:	e0bffc17 	ldw	r2,-16(fp)
 40155d4:	10800b17 	ldw	r2,44(r2)
 40155d8:	e0bff815 	stw	r2,-32(fp)

      if (in >= out)
 40155dc:	e0fff717 	ldw	r3,-36(fp)
 40155e0:	e0bff817 	ldw	r2,-32(fp)
 40155e4:	18800536 	bltu	r3,r2,40155fc <altera_avalon_jtag_uart_read+0x64>
        n = in - out;
 40155e8:	e0fff717 	ldw	r3,-36(fp)
 40155ec:	e0bff817 	ldw	r2,-32(fp)
 40155f0:	1885c83a 	sub	r2,r3,r2
 40155f4:	e0bff615 	stw	r2,-40(fp)
 40155f8:	00000406 	br	401560c <altera_avalon_jtag_uart_read+0x74>
      else
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - out;
 40155fc:	00c20004 	movi	r3,2048
 4015600:	e0bff817 	ldw	r2,-32(fp)
 4015604:	1885c83a 	sub	r2,r3,r2
 4015608:	e0bff615 	stw	r2,-40(fp)

      if (n == 0)
 401560c:	e0bff617 	ldw	r2,-40(fp)
 4015610:	10001e26 	beq	r2,zero,401568c <altera_avalon_jtag_uart_read+0xf4>
        break; /* No more data available */

      if (n > space)
 4015614:	e0fffe17 	ldw	r3,-8(fp)
 4015618:	e0bff617 	ldw	r2,-40(fp)
 401561c:	1880022e 	bgeu	r3,r2,4015628 <altera_avalon_jtag_uart_read+0x90>
        n = space;
 4015620:	e0bffe17 	ldw	r2,-8(fp)
 4015624:	e0bff615 	stw	r2,-40(fp)

      memcpy(ptr, sp->rx_buf + out, n);
 4015628:	e0bffc17 	ldw	r2,-16(fp)
 401562c:	10c00e04 	addi	r3,r2,56
 4015630:	e0bff817 	ldw	r2,-32(fp)
 4015634:	1885883a 	add	r2,r3,r2
 4015638:	e1bff617 	ldw	r6,-40(fp)
 401563c:	100b883a 	mov	r5,r2
 4015640:	e13ff517 	ldw	r4,-44(fp)
 4015644:	4011d140 	call	4011d14 <memcpy>
      ptr   += n;
 4015648:	e0fff517 	ldw	r3,-44(fp)
 401564c:	e0bff617 	ldw	r2,-40(fp)
 4015650:	1885883a 	add	r2,r3,r2
 4015654:	e0bff515 	stw	r2,-44(fp)
      space -= n;
 4015658:	e0fffe17 	ldw	r3,-8(fp)
 401565c:	e0bff617 	ldw	r2,-40(fp)
 4015660:	1885c83a 	sub	r2,r3,r2
 4015664:	e0bffe15 	stw	r2,-8(fp)

      sp->rx_out = (out + n) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
 4015668:	e0fff817 	ldw	r3,-32(fp)
 401566c:	e0bff617 	ldw	r2,-40(fp)
 4015670:	1885883a 	add	r2,r3,r2
 4015674:	10c1ffcc 	andi	r3,r2,2047
 4015678:	e0bffc17 	ldw	r2,-16(fp)
 401567c:	10c00b15 	stw	r3,44(r2)
    }
    while (space > 0);
 4015680:	e0bffe17 	ldw	r2,-8(fp)
 4015684:	00bfcf16 	blt	zero,r2,40155c4 <_gp+0xffff4d88>
 4015688:	00000106 	br	4015690 <altera_avalon_jtag_uart_read+0xf8>
        n = in - out;
      else
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - out;

      if (n == 0)
        break; /* No more data available */
 401568c:	0001883a 	nop
      sp->rx_out = (out + n) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
    }
    while (space > 0);

    /* If we read any data then return it */
    if (ptr != buffer)
 4015690:	e0fff517 	ldw	r3,-44(fp)
 4015694:	e0bffd17 	ldw	r2,-12(fp)
 4015698:	1880141e 	bne	r3,r2,40156ec <altera_avalon_jtag_uart_read+0x154>
      break;

    /* If in non-blocking mode then return error */
    if (flags & O_NONBLOCK)
 401569c:	e0bfff17 	ldw	r2,-4(fp)
 40156a0:	1090000c 	andi	r2,r2,16384
 40156a4:	1000131e 	bne	r2,zero,40156f4 <altera_avalon_jtag_uart_read+0x15c>
      while (in == sp->rx_in && sp->host_inactive < sp->timeout)
        ;
    }
#else
    /* No OS: Always spin */
    while (in == sp->rx_in && sp->host_inactive < sp->timeout)
 40156a8:	0001883a 	nop
 40156ac:	e0bffc17 	ldw	r2,-16(fp)
 40156b0:	10c00a17 	ldw	r3,40(r2)
 40156b4:	e0bff717 	ldw	r2,-36(fp)
 40156b8:	1880051e 	bne	r3,r2,40156d0 <altera_avalon_jtag_uart_read+0x138>
 40156bc:	e0bffc17 	ldw	r2,-16(fp)
 40156c0:	10c00917 	ldw	r3,36(r2)
 40156c4:	e0bffc17 	ldw	r2,-16(fp)
 40156c8:	10800117 	ldw	r2,4(r2)
 40156cc:	18bff736 	bltu	r3,r2,40156ac <_gp+0xffff4e70>
      ;
#endif /* __ucosii__ */

    if (in == sp->rx_in)
 40156d0:	e0bffc17 	ldw	r2,-16(fp)
 40156d4:	10c00a17 	ldw	r3,40(r2)
 40156d8:	e0bff717 	ldw	r2,-36(fp)
 40156dc:	18800726 	beq	r3,r2,40156fc <altera_avalon_jtag_uart_read+0x164>
   * When running in a multi threaded environment, obtain the "read_lock"
   * semaphore. This ensures that reading from the device is thread-safe.
   */
  ALT_SEM_PEND (sp->read_lock, 0);

  while (space > 0)
 40156e0:	e0bffe17 	ldw	r2,-8(fp)
 40156e4:	00bfb716 	blt	zero,r2,40155c4 <_gp+0xffff4d88>
 40156e8:	00000506 	br	4015700 <altera_avalon_jtag_uart_read+0x168>
    }
    while (space > 0);

    /* If we read any data then return it */
    if (ptr != buffer)
      break;
 40156ec:	0001883a 	nop
 40156f0:	00000306 	br	4015700 <altera_avalon_jtag_uart_read+0x168>

    /* If in non-blocking mode then return error */
    if (flags & O_NONBLOCK)
      break;
 40156f4:	0001883a 	nop
 40156f8:	00000106 	br	4015700 <altera_avalon_jtag_uart_read+0x168>
    while (in == sp->rx_in && sp->host_inactive < sp->timeout)
      ;
#endif /* __ucosii__ */

    if (in == sp->rx_in)
      break;
 40156fc:	0001883a 	nop
   * semaphore so that other threads can access the buffer.
   */

  ALT_SEM_POST (sp->read_lock);

  if (ptr != buffer)
 4015700:	e0fff517 	ldw	r3,-44(fp)
 4015704:	e0bffd17 	ldw	r2,-12(fp)
 4015708:	18801826 	beq	r3,r2,401576c <altera_avalon_jtag_uart_read+0x1d4>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 401570c:	0005303a 	rdctl	r2,status
 4015710:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 4015714:	e0fffb17 	ldw	r3,-20(fp)
 4015718:	00bfff84 	movi	r2,-2
 401571c:	1884703a 	and	r2,r3,r2
 4015720:	1001703a 	wrctl	status,r2
  
  return context;
 4015724:	e0bffb17 	ldw	r2,-20(fp)
  {
    /* If we read any data then there is space in the buffer so enable interrupts */
    context = alt_irq_disable_all();
 4015728:	e0bffa15 	stw	r2,-24(fp)
    sp->irq_enable |= ALTERA_AVALON_JTAG_UART_CONTROL_RE_MSK;
 401572c:	e0bffc17 	ldw	r2,-16(fp)
 4015730:	10800817 	ldw	r2,32(r2)
 4015734:	10c00054 	ori	r3,r2,1
 4015738:	e0bffc17 	ldw	r2,-16(fp)
 401573c:	10c00815 	stw	r3,32(r2)
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
 4015740:	e0bffc17 	ldw	r2,-16(fp)
 4015744:	10800017 	ldw	r2,0(r2)
 4015748:	10800104 	addi	r2,r2,4
 401574c:	1007883a 	mov	r3,r2
 4015750:	e0bffc17 	ldw	r2,-16(fp)
 4015754:	10800817 	ldw	r2,32(r2)
 4015758:	18800035 	stwio	r2,0(r3)
 401575c:	e0bffa17 	ldw	r2,-24(fp)
 4015760:	e0bff915 	stw	r2,-28(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 4015764:	e0bff917 	ldw	r2,-28(fp)
 4015768:	1001703a 	wrctl	status,r2
    alt_irq_enable_all(context);
  }

  if (ptr != buffer)
 401576c:	e0fff517 	ldw	r3,-44(fp)
 4015770:	e0bffd17 	ldw	r2,-12(fp)
 4015774:	18800426 	beq	r3,r2,4015788 <altera_avalon_jtag_uart_read+0x1f0>
    return ptr - buffer;
 4015778:	e0fff517 	ldw	r3,-44(fp)
 401577c:	e0bffd17 	ldw	r2,-12(fp)
 4015780:	1885c83a 	sub	r2,r3,r2
 4015784:	00000606 	br	40157a0 <altera_avalon_jtag_uart_read+0x208>
  else if (flags & O_NONBLOCK)
 4015788:	e0bfff17 	ldw	r2,-4(fp)
 401578c:	1090000c 	andi	r2,r2,16384
 4015790:	10000226 	beq	r2,zero,401579c <altera_avalon_jtag_uart_read+0x204>
    return -EWOULDBLOCK;
 4015794:	00bffd44 	movi	r2,-11
 4015798:	00000106 	br	40157a0 <altera_avalon_jtag_uart_read+0x208>
  else
    return -EIO;
 401579c:	00bffec4 	movi	r2,-5
}
 40157a0:	e037883a 	mov	sp,fp
 40157a4:	dfc00117 	ldw	ra,4(sp)
 40157a8:	df000017 	ldw	fp,0(sp)
 40157ac:	dec00204 	addi	sp,sp,8
 40157b0:	f800283a 	ret

040157b4 <altera_avalon_jtag_uart_write>:
/* ----------------------------------------------------------- */

int 
altera_avalon_jtag_uart_write(altera_avalon_jtag_uart_state* sp, 
  const char * ptr, int count, int flags)
{
 40157b4:	defff304 	addi	sp,sp,-52
 40157b8:	dfc00c15 	stw	ra,48(sp)
 40157bc:	df000b15 	stw	fp,44(sp)
 40157c0:	df000b04 	addi	fp,sp,44
 40157c4:	e13ffc15 	stw	r4,-16(fp)
 40157c8:	e17ffd15 	stw	r5,-12(fp)
 40157cc:	e1bffe15 	stw	r6,-8(fp)
 40157d0:	e1ffff15 	stw	r7,-4(fp)
  /* Remove warning at optimisation level 03 by seting out to 0 */
  unsigned int in, out=0;
 40157d4:	e03ff515 	stw	zero,-44(fp)
  unsigned int n;
  alt_irq_context context;

  const char * start = ptr;
 40157d8:	e0bffd17 	ldw	r2,-12(fp)
 40157dc:	e0bff715 	stw	r2,-36(fp)
  ALT_SEM_PEND (sp->write_lock, 0);

  do
  {
    /* Copy as much as we can into the transmit buffer */
    while (count > 0)
 40157e0:	00003706 	br	40158c0 <altera_avalon_jtag_uart_write+0x10c>
    {
      /* We need a stable value of the out pointer to calculate the space available */
      in  = sp->tx_in;
 40157e4:	e0bffc17 	ldw	r2,-16(fp)
 40157e8:	10800c17 	ldw	r2,48(r2)
 40157ec:	e0bff915 	stw	r2,-28(fp)
      out = sp->tx_out;
 40157f0:	e0bffc17 	ldw	r2,-16(fp)
 40157f4:	10800d17 	ldw	r2,52(r2)
 40157f8:	e0bff515 	stw	r2,-44(fp)

      if (in < out)
 40157fc:	e0fff917 	ldw	r3,-28(fp)
 4015800:	e0bff517 	ldw	r2,-44(fp)
 4015804:	1880062e 	bgeu	r3,r2,4015820 <altera_avalon_jtag_uart_write+0x6c>
        n = out - 1 - in;
 4015808:	e0fff517 	ldw	r3,-44(fp)
 401580c:	e0bff917 	ldw	r2,-28(fp)
 4015810:	1885c83a 	sub	r2,r3,r2
 4015814:	10bfffc4 	addi	r2,r2,-1
 4015818:	e0bff615 	stw	r2,-40(fp)
 401581c:	00000b06 	br	401584c <altera_avalon_jtag_uart_write+0x98>
      else if (out > 0)
 4015820:	e0bff517 	ldw	r2,-44(fp)
 4015824:	10000526 	beq	r2,zero,401583c <altera_avalon_jtag_uart_write+0x88>
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - in;
 4015828:	00c20004 	movi	r3,2048
 401582c:	e0bff917 	ldw	r2,-28(fp)
 4015830:	1885c83a 	sub	r2,r3,r2
 4015834:	e0bff615 	stw	r2,-40(fp)
 4015838:	00000406 	br	401584c <altera_avalon_jtag_uart_write+0x98>
      else
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - 1 - in;
 401583c:	00c1ffc4 	movi	r3,2047
 4015840:	e0bff917 	ldw	r2,-28(fp)
 4015844:	1885c83a 	sub	r2,r3,r2
 4015848:	e0bff615 	stw	r2,-40(fp)

      if (n == 0)
 401584c:	e0bff617 	ldw	r2,-40(fp)
 4015850:	10001e26 	beq	r2,zero,40158cc <altera_avalon_jtag_uart_write+0x118>
        break;

      if (n > count)
 4015854:	e0fffe17 	ldw	r3,-8(fp)
 4015858:	e0bff617 	ldw	r2,-40(fp)
 401585c:	1880022e 	bgeu	r3,r2,4015868 <altera_avalon_jtag_uart_write+0xb4>
        n = count;
 4015860:	e0bffe17 	ldw	r2,-8(fp)
 4015864:	e0bff615 	stw	r2,-40(fp)

      memcpy(sp->tx_buf + in, ptr, n);
 4015868:	e0bffc17 	ldw	r2,-16(fp)
 401586c:	10c20e04 	addi	r3,r2,2104
 4015870:	e0bff917 	ldw	r2,-28(fp)
 4015874:	1885883a 	add	r2,r3,r2
 4015878:	e1bff617 	ldw	r6,-40(fp)
 401587c:	e17ffd17 	ldw	r5,-12(fp)
 4015880:	1009883a 	mov	r4,r2
 4015884:	4011d140 	call	4011d14 <memcpy>
      ptr   += n;
 4015888:	e0fffd17 	ldw	r3,-12(fp)
 401588c:	e0bff617 	ldw	r2,-40(fp)
 4015890:	1885883a 	add	r2,r3,r2
 4015894:	e0bffd15 	stw	r2,-12(fp)
      count -= n;
 4015898:	e0fffe17 	ldw	r3,-8(fp)
 401589c:	e0bff617 	ldw	r2,-40(fp)
 40158a0:	1885c83a 	sub	r2,r3,r2
 40158a4:	e0bffe15 	stw	r2,-8(fp)

      sp->tx_in = (in + n) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
 40158a8:	e0fff917 	ldw	r3,-28(fp)
 40158ac:	e0bff617 	ldw	r2,-40(fp)
 40158b0:	1885883a 	add	r2,r3,r2
 40158b4:	10c1ffcc 	andi	r3,r2,2047
 40158b8:	e0bffc17 	ldw	r2,-16(fp)
 40158bc:	10c00c15 	stw	r3,48(r2)
  ALT_SEM_PEND (sp->write_lock, 0);

  do
  {
    /* Copy as much as we can into the transmit buffer */
    while (count > 0)
 40158c0:	e0bffe17 	ldw	r2,-8(fp)
 40158c4:	00bfc716 	blt	zero,r2,40157e4 <_gp+0xffff4fa8>
 40158c8:	00000106 	br	40158d0 <altera_avalon_jtag_uart_write+0x11c>
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - in;
      else
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - 1 - in;

      if (n == 0)
        break;
 40158cc:	0001883a 	nop
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 40158d0:	0005303a 	rdctl	r2,status
 40158d4:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 40158d8:	e0fffb17 	ldw	r3,-20(fp)
 40158dc:	00bfff84 	movi	r2,-2
 40158e0:	1884703a 	and	r2,r3,r2
 40158e4:	1001703a 	wrctl	status,r2
  
  return context;
 40158e8:	e0bffb17 	ldw	r2,-20(fp)
     * to enable interrupts if there is no space left in the FIFO
     *
     * For now kick the interrupt routine every time to make it transmit 
     * the data 
     */
    context = alt_irq_disable_all();
 40158ec:	e0bffa15 	stw	r2,-24(fp)
    sp->irq_enable |= ALTERA_AVALON_JTAG_UART_CONTROL_WE_MSK;
 40158f0:	e0bffc17 	ldw	r2,-16(fp)
 40158f4:	10800817 	ldw	r2,32(r2)
 40158f8:	10c00094 	ori	r3,r2,2
 40158fc:	e0bffc17 	ldw	r2,-16(fp)
 4015900:	10c00815 	stw	r3,32(r2)
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
 4015904:	e0bffc17 	ldw	r2,-16(fp)
 4015908:	10800017 	ldw	r2,0(r2)
 401590c:	10800104 	addi	r2,r2,4
 4015910:	1007883a 	mov	r3,r2
 4015914:	e0bffc17 	ldw	r2,-16(fp)
 4015918:	10800817 	ldw	r2,32(r2)
 401591c:	18800035 	stwio	r2,0(r3)
 4015920:	e0bffa17 	ldw	r2,-24(fp)
 4015924:	e0bff815 	stw	r2,-32(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 4015928:	e0bff817 	ldw	r2,-32(fp)
 401592c:	1001703a 	wrctl	status,r2
    /* 
     * If there is any data left then either return now or block until 
     * some has been sent 
     */
    /* consider: test whether there is anything there while doing this and delay for at most 2s. */
    if (count > 0)
 4015930:	e0bffe17 	ldw	r2,-8(fp)
 4015934:	0080100e 	bge	zero,r2,4015978 <altera_avalon_jtag_uart_write+0x1c4>
    {
      if (flags & O_NONBLOCK)
 4015938:	e0bfff17 	ldw	r2,-4(fp)
 401593c:	1090000c 	andi	r2,r2,16384
 4015940:	1000101e 	bne	r2,zero,4015984 <altera_avalon_jtag_uart_write+0x1d0>
      /*
       * No OS present: Always wait for data to be removed from buffer.  Once
       * the interrupt routine has removed some data then we will be able to
       * insert some more.
       */
      while (out == sp->tx_out && sp->host_inactive < sp->timeout)
 4015944:	0001883a 	nop
 4015948:	e0bffc17 	ldw	r2,-16(fp)
 401594c:	10c00d17 	ldw	r3,52(r2)
 4015950:	e0bff517 	ldw	r2,-44(fp)
 4015954:	1880051e 	bne	r3,r2,401596c <altera_avalon_jtag_uart_write+0x1b8>
 4015958:	e0bffc17 	ldw	r2,-16(fp)
 401595c:	10c00917 	ldw	r3,36(r2)
 4015960:	e0bffc17 	ldw	r2,-16(fp)
 4015964:	10800117 	ldw	r2,4(r2)
 4015968:	18bff736 	bltu	r3,r2,4015948 <_gp+0xffff510c>
        ;
#endif /* __ucosii__ */

      if  (sp->host_inactive)
 401596c:	e0bffc17 	ldw	r2,-16(fp)
 4015970:	10800917 	ldw	r2,36(r2)
 4015974:	1000051e 	bne	r2,zero,401598c <altera_avalon_jtag_uart_write+0x1d8>
         break;
    }
  }
  while (count > 0);
 4015978:	e0bffe17 	ldw	r2,-8(fp)
 401597c:	00bfd016 	blt	zero,r2,40158c0 <_gp+0xffff5084>
 4015980:	00000306 	br	4015990 <altera_avalon_jtag_uart_write+0x1dc>
     */
    /* consider: test whether there is anything there while doing this and delay for at most 2s. */
    if (count > 0)
    {
      if (flags & O_NONBLOCK)
        break;
 4015984:	0001883a 	nop
 4015988:	00000106 	br	4015990 <altera_avalon_jtag_uart_write+0x1dc>
      while (out == sp->tx_out && sp->host_inactive < sp->timeout)
        ;
#endif /* __ucosii__ */

      if  (sp->host_inactive)
         break;
 401598c:	0001883a 	nop
   * Now that access to the circular buffer is complete, release the write
   * semaphore so that other threads can access the buffer.
   */
  ALT_SEM_POST (sp->write_lock);

  if (ptr != start)
 4015990:	e0fffd17 	ldw	r3,-12(fp)
 4015994:	e0bff717 	ldw	r2,-36(fp)
 4015998:	18800426 	beq	r3,r2,40159ac <altera_avalon_jtag_uart_write+0x1f8>
    return ptr - start;
 401599c:	e0fffd17 	ldw	r3,-12(fp)
 40159a0:	e0bff717 	ldw	r2,-36(fp)
 40159a4:	1885c83a 	sub	r2,r3,r2
 40159a8:	00000606 	br	40159c4 <altera_avalon_jtag_uart_write+0x210>
  else if (flags & O_NONBLOCK)
 40159ac:	e0bfff17 	ldw	r2,-4(fp)
 40159b0:	1090000c 	andi	r2,r2,16384
 40159b4:	10000226 	beq	r2,zero,40159c0 <altera_avalon_jtag_uart_write+0x20c>
    return -EWOULDBLOCK;
 40159b8:	00bffd44 	movi	r2,-11
 40159bc:	00000106 	br	40159c4 <altera_avalon_jtag_uart_write+0x210>
    sp->tx_out = sp->tx_in = 0;
    return ptr - start + count;
  }
#endif
  else
    return -EIO; /* Host not connected */
 40159c0:	00bffec4 	movi	r2,-5
}
 40159c4:	e037883a 	mov	sp,fp
 40159c8:	dfc00117 	ldw	ra,4(sp)
 40159cc:	df000017 	ldw	fp,0(sp)
 40159d0:	dec00204 	addi	sp,sp,8
 40159d4:	f800283a 	ret

040159d8 <alt_avalon_timer_sc_irq>:
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
static void alt_avalon_timer_sc_irq (void* base)
#else
static void alt_avalon_timer_sc_irq (void* base, alt_u32 id)
#endif
{
 40159d8:	defffa04 	addi	sp,sp,-24
 40159dc:	dfc00515 	stw	ra,20(sp)
 40159e0:	df000415 	stw	fp,16(sp)
 40159e4:	df000404 	addi	fp,sp,16
 40159e8:	e13fff15 	stw	r4,-4(fp)
  alt_irq_context cpu_sr;
  
  /* clear the interrupt */
  IOWR_ALTERA_AVALON_TIMER_STATUS (base, 0);
 40159ec:	0007883a 	mov	r3,zero
 40159f0:	e0bfff17 	ldw	r2,-4(fp)
 40159f4:	10c00035 	stwio	r3,0(r2)
  /* 
   * Dummy read to ensure IRQ is negated before the ISR returns.
   * The control register is read because reading the status
   * register has side-effects per the register map documentation.
   */
  IORD_ALTERA_AVALON_TIMER_CONTROL (base);
 40159f8:	e0bfff17 	ldw	r2,-4(fp)
 40159fc:	10800104 	addi	r2,r2,4
 4015a00:	10800037 	ldwio	r2,0(r2)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 4015a04:	0005303a 	rdctl	r2,status
 4015a08:	e0bffd15 	stw	r2,-12(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 4015a0c:	e0fffd17 	ldw	r3,-12(fp)
 4015a10:	00bfff84 	movi	r2,-2
 4015a14:	1884703a 	and	r2,r3,r2
 4015a18:	1001703a 	wrctl	status,r2
  
  return context;
 4015a1c:	e0bffd17 	ldw	r2,-12(fp)

  /* 
   * Notify the system of a clock tick. disable interrupts 
   * during this time to safely support ISR preemption
   */
  cpu_sr = alt_irq_disable_all();
 4015a20:	e0bffc15 	stw	r2,-16(fp)
  alt_tick ();
 4015a24:	40167d00 	call	40167d0 <alt_tick>
 4015a28:	e0bffc17 	ldw	r2,-16(fp)
 4015a2c:	e0bffe15 	stw	r2,-8(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 4015a30:	e0bffe17 	ldw	r2,-8(fp)
 4015a34:	1001703a 	wrctl	status,r2
  alt_irq_enable_all(cpu_sr);
}
 4015a38:	0001883a 	nop
 4015a3c:	e037883a 	mov	sp,fp
 4015a40:	dfc00117 	ldw	ra,4(sp)
 4015a44:	df000017 	ldw	fp,0(sp)
 4015a48:	dec00204 	addi	sp,sp,8
 4015a4c:	f800283a 	ret

04015a50 <alt_avalon_timer_sc_init>:
 * auto-generated alt_sys_init() function.
 */

void alt_avalon_timer_sc_init (void* base, alt_u32 irq_controller_id, 
                                alt_u32 irq, alt_u32 freq)
{
 4015a50:	defff804 	addi	sp,sp,-32
 4015a54:	dfc00715 	stw	ra,28(sp)
 4015a58:	df000615 	stw	fp,24(sp)
 4015a5c:	df000604 	addi	fp,sp,24
 4015a60:	e13ffc15 	stw	r4,-16(fp)
 4015a64:	e17ffd15 	stw	r5,-12(fp)
 4015a68:	e1bffe15 	stw	r6,-8(fp)
 4015a6c:	e1ffff15 	stw	r7,-4(fp)
 4015a70:	e0bfff17 	ldw	r2,-4(fp)
 4015a74:	e0bffb15 	stw	r2,-20(fp)
 * in order to initialise the value of the clock frequency.
 */

static ALT_INLINE int ALT_ALWAYS_INLINE alt_sysclk_init (alt_u32 nticks)
{
  if (! _alt_tick_rate)
 4015a78:	d0a70817 	ldw	r2,-25568(gp)
 4015a7c:	1000021e 	bne	r2,zero,4015a88 <alt_avalon_timer_sc_init+0x38>
  {
    _alt_tick_rate = nticks;
 4015a80:	e0bffb17 	ldw	r2,-20(fp)
 4015a84:	d0a70815 	stw	r2,-25568(gp)
  
  alt_sysclk_init (freq);
  
  /* set to free running mode */
  
  IOWR_ALTERA_AVALON_TIMER_CONTROL (base, 
 4015a88:	e0bffc17 	ldw	r2,-16(fp)
 4015a8c:	10800104 	addi	r2,r2,4
 4015a90:	00c001c4 	movi	r3,7
 4015a94:	10c00035 	stwio	r3,0(r2)
            ALTERA_AVALON_TIMER_CONTROL_CONT_MSK |
            ALTERA_AVALON_TIMER_CONTROL_START_MSK);

  /* register the interrupt handler, and enable the interrupt */
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
  alt_ic_isr_register(irq_controller_id, irq, alt_avalon_timer_sc_irq, 
 4015a98:	d8000015 	stw	zero,0(sp)
 4015a9c:	e1fffc17 	ldw	r7,-16(fp)
 4015aa0:	01810074 	movhi	r6,1025
 4015aa4:	31967604 	addi	r6,r6,23000
 4015aa8:	e17ffe17 	ldw	r5,-8(fp)
 4015aac:	e13ffd17 	ldw	r4,-12(fp)
 4015ab0:	40141f80 	call	40141f8 <alt_ic_isr_register>
                      base, NULL);
#else
  alt_irq_register (irq, base, alt_avalon_timer_sc_irq);
#endif  
}
 4015ab4:	0001883a 	nop
 4015ab8:	e037883a 	mov	sp,fp
 4015abc:	dfc00117 	ldw	ra,4(sp)
 4015ac0:	df000017 	ldw	fp,0(sp)
 4015ac4:	dec00204 	addi	sp,sp,8
 4015ac8:	f800283a 	ret

04015acc <alt_hostfs_open>:
* alt_hostfs_open
*
* If we can't find anything return -1
*/
int alt_hostfs_open(alt_fd* fd, const char * name, int flags, int mode)
{
 4015acc:	defff404 	addi	sp,sp,-48
 4015ad0:	df000b15 	stw	fp,44(sp)
 4015ad4:	df000b04 	addi	fp,sp,44
 4015ad8:	e13ffc15 	stw	r4,-16(fp)
 4015adc:	e17ffd15 	stw	r5,-12(fp)
 4015ae0:	e1bffe15 	stw	r6,-8(fp)
 4015ae4:	e1ffff15 	stw	r7,-4(fp)
  static const struct HOSTCALL_INFO hcinfo = { 0x0103, "open" };

  alt_hostfs_dev* dev= (alt_hostfs_dev*)fd->dev;
 4015ae8:	e0bffc17 	ldw	r2,-16(fp)
 4015aec:	10800017 	ldw	r2,0(r2)
 4015af0:	e0bff515 	stw	r2,-44(fp)
#endif

  /* Mount point names don't end with a slash, so we must skip over the
   * slash following the mount point name.
  */
  name += inline_strlen(dev->fs_dev.name) + 1;
 4015af4:	e0bff517 	ldw	r2,-44(fp)
 4015af8:	10800217 	ldw	r2,8(r2)
 4015afc:	e0bff615 	stw	r2,-40(fp)
};

static inline int inline_strlen(const char * string) ALT_ALWAYS_INLINE;
static inline int inline_strlen(const char * string)
{
  const char * ptr = string - 1;
 4015b00:	e0bff617 	ldw	r2,-40(fp)
 4015b04:	10bfffc4 	addi	r2,r2,-1
 4015b08:	e0bffb15 	stw	r2,-20(fp)

  while (*++ptr != 0)
 4015b0c:	e0bffb17 	ldw	r2,-20(fp)
 4015b10:	10800044 	addi	r2,r2,1
 4015b14:	e0bffb15 	stw	r2,-20(fp)
 4015b18:	e0bffb17 	ldw	r2,-20(fp)
 4015b1c:	10800003 	ldbu	r2,0(r2)
 4015b20:	10803fcc 	andi	r2,r2,255
 4015b24:	1080201c 	xori	r2,r2,128
 4015b28:	10bfe004 	addi	r2,r2,-128
 4015b2c:	103ff71e 	bne	r2,zero,4015b0c <_gp+0xffff52d0>
    ;

  return ptr - string;
 4015b30:	e0fffb17 	ldw	r3,-20(fp)
 4015b34:	e0bff617 	ldw	r2,-40(fp)
 4015b38:	1885c83a 	sub	r2,r3,r2
#endif

  /* Mount point names don't end with a slash, so we must skip over the
   * slash following the mount point name.
  */
  name += inline_strlen(dev->fs_dev.name) + 1;
 4015b3c:	10800044 	addi	r2,r2,1
 4015b40:	1007883a 	mov	r3,r2
 4015b44:	e0bffd17 	ldw	r2,-12(fp)
 4015b48:	10c5883a 	add	r2,r2,r3
 4015b4c:	e0bffd15 	stw	r2,-12(fp)

  r3 = (int)&hcinfo;
 4015b50:	d0a01104 	addi	r2,gp,-32700
 4015b54:	1007883a 	mov	r3,r2
  r4 = (int)name;
 4015b58:	e0bffd17 	ldw	r2,-12(fp)
 4015b5c:	1009883a 	mov	r4,r2
  r5 = flags;
 4015b60:	e17ffe17 	ldw	r5,-8(fp)
  r6 = mode;
 4015b64:	e1bfff17 	ldw	r6,-4(fp)
 4015b68:	e0bffd17 	ldw	r2,-12(fp)
 4015b6c:	e0bff915 	stw	r2,-28(fp)
};

static inline int inline_strlen(const char * string) ALT_ALWAYS_INLINE;
static inline int inline_strlen(const char * string)
{
  const char * ptr = string - 1;
 4015b70:	e0bff917 	ldw	r2,-28(fp)
 4015b74:	10bfffc4 	addi	r2,r2,-1
 4015b78:	e0bffa15 	stw	r2,-24(fp)

  while (*++ptr != 0)
 4015b7c:	e0bffa17 	ldw	r2,-24(fp)
 4015b80:	10800044 	addi	r2,r2,1
 4015b84:	e0bffa15 	stw	r2,-24(fp)
 4015b88:	e0bffa17 	ldw	r2,-24(fp)
 4015b8c:	10800003 	ldbu	r2,0(r2)
 4015b90:	10803fcc 	andi	r2,r2,255
 4015b94:	1080201c 	xori	r2,r2,128
 4015b98:	10bfe004 	addi	r2,r2,-128
 4015b9c:	103ff71e 	bne	r2,zero,4015b7c <_gp+0xffff5340>
    ;

  return ptr - string;
 4015ba0:	e1fffa17 	ldw	r7,-24(fp)
 4015ba4:	e0bff917 	ldw	r2,-28(fp)
 4015ba8:	3885c83a 	sub	r2,r7,r2

  r3 = (int)&hcinfo;
  r4 = (int)name;
  r5 = flags;
  r6 = mode;
  r7 = inline_strlen(name);
 4015bac:	100f883a 	mov	r7,r2

  __asm__ volatile("break 1" : "=r" (r2), "+r" (r3) : "r" (r4), "r" (r5), "r" (r6), "r" (r7) : "memory" );
 4015bb0:	003da07a 	break	1

  handle = (void *)r2;
 4015bb4:	e0bff715 	stw	r2,-36(fp)
  error = r3;
 4015bb8:	e0fff815 	stw	r3,-32(fp)

  if (error == 0)
 4015bbc:	e0bff817 	ldw	r2,-32(fp)
 4015bc0:	1000031e 	bne	r2,zero,4015bd0 <alt_hostfs_open+0x104>
    fd->priv = handle;
 4015bc4:	e0bffc17 	ldw	r2,-16(fp)
 4015bc8:	e0fff717 	ldw	r3,-36(fp)
 4015bcc:	10c00115 	stw	r3,4(r2)

  return -error;
 4015bd0:	e0bff817 	ldw	r2,-32(fp)
 4015bd4:	0085c83a 	sub	r2,zero,r2
}
 4015bd8:	e037883a 	mov	sp,fp
 4015bdc:	df000017 	ldw	fp,0(sp)
 4015be0:	dec00104 	addi	sp,sp,4
 4015be4:	f800283a 	ret

04015be8 <alt_hostfs_close>:
* alt_hostfs_close
*
* Read the file
*/
int alt_hostfs_close(alt_fd* fd)
{
 4015be8:	defffd04 	addi	sp,sp,-12
 4015bec:	df000215 	stw	fp,8(sp)
 4015bf0:	df000204 	addi	fp,sp,8
 4015bf4:	e13fff15 	stw	r4,-4(fp)

  /* Input and output parameters for the hostcall */
  register int r3 asm ("r3");
  register int r4 asm ("r4");

  r3 = (int)&hcinfo;
 4015bf8:	d0a01404 	addi	r2,gp,-32688
 4015bfc:	1007883a 	mov	r3,r2
  r4 = (int)fd->priv;
 4015c00:	e0bfff17 	ldw	r2,-4(fp)
 4015c04:	10800117 	ldw	r2,4(r2)
 4015c08:	1009883a 	mov	r4,r2

  __asm__ volatile("break 1" : "+r" (r3) : "r" (r4) );
 4015c0c:	003da07a 	break	1

  error = r3;
 4015c10:	e0fffe15 	stw	r3,-8(fp)

  return -error;
 4015c14:	e0bffe17 	ldw	r2,-8(fp)
 4015c18:	0085c83a 	sub	r2,zero,r2
}
 4015c1c:	e037883a 	mov	sp,fp
 4015c20:	df000017 	ldw	fp,0(sp)
 4015c24:	dec00104 	addi	sp,sp,4
 4015c28:	f800283a 	ret

04015c2c <alt_hostfs_read>:
* alt_hostfs_read
*
* Read the file
*/
int alt_hostfs_read(alt_fd* fd, char * ptr, int len)
{
 4015c2c:	defffa04 	addi	sp,sp,-24
 4015c30:	df000515 	stw	fp,20(sp)
 4015c34:	df000504 	addi	fp,sp,20
 4015c38:	e13ffd15 	stw	r4,-12(fp)
 4015c3c:	e17ffe15 	stw	r5,-8(fp)
 4015c40:	e1bfff15 	stw	r6,-4(fp)
  register int r4 asm ("r4");
  register int r5 asm ("r5");
  register int r6 asm ("r6");


  r3 = (int)&hcinfo;
 4015c44:	d0a01704 	addi	r2,gp,-32676
 4015c48:	1007883a 	mov	r3,r2
  r4 = (int)fd->priv;
 4015c4c:	e0bffd17 	ldw	r2,-12(fp)
 4015c50:	10800117 	ldw	r2,4(r2)
 4015c54:	1009883a 	mov	r4,r2
  r5 = (int)ptr;
 4015c58:	e0bffe17 	ldw	r2,-8(fp)
 4015c5c:	100b883a 	mov	r5,r2
  r6 = len;
 4015c60:	e1bfff17 	ldw	r6,-4(fp)

  __asm__ volatile("break 1" : "=r" (r2), "+r" (r3) : "r" (r4), "r" (r5), "r" (r6) : "memory" );
 4015c64:	003da07a 	break	1

  rc = r2;
 4015c68:	e0bffb15 	stw	r2,-20(fp)
  error = r3;
 4015c6c:	e0fffc15 	stw	r3,-16(fp)

  return (error == 0) ? rc : -error;
 4015c70:	e0bffc17 	ldw	r2,-16(fp)
 4015c74:	10000326 	beq	r2,zero,4015c84 <alt_hostfs_read+0x58>
 4015c78:	e0bffc17 	ldw	r2,-16(fp)
 4015c7c:	0085c83a 	sub	r2,zero,r2
 4015c80:	00000106 	br	4015c88 <alt_hostfs_read+0x5c>
 4015c84:	e0bffb17 	ldw	r2,-20(fp)
}
 4015c88:	e037883a 	mov	sp,fp
 4015c8c:	df000017 	ldw	fp,0(sp)
 4015c90:	dec00104 	addi	sp,sp,4
 4015c94:	f800283a 	ret

04015c98 <alt_hostfs_write>:
* alt_hostfs_write
*
* Read the file
*/
int alt_hostfs_write(alt_fd* fd, const char * ptr, int len)
{
 4015c98:	defffa04 	addi	sp,sp,-24
 4015c9c:	df000515 	stw	fp,20(sp)
 4015ca0:	df000504 	addi	fp,sp,20
 4015ca4:	e13ffd15 	stw	r4,-12(fp)
 4015ca8:	e17ffe15 	stw	r5,-8(fp)
 4015cac:	e1bfff15 	stw	r6,-4(fp)
  register int r3 asm ("r3");
  register int r4 asm ("r4");
  register int r5 asm ("r5");
  register int r6 asm ("r6");

  r3 = (int)&hcinfo;
 4015cb0:	d0a01a04 	addi	r2,gp,-32664
 4015cb4:	1007883a 	mov	r3,r2
  r4 = (int)fd->priv;
 4015cb8:	e0bffd17 	ldw	r2,-12(fp)
 4015cbc:	10800117 	ldw	r2,4(r2)
 4015cc0:	1009883a 	mov	r4,r2
  r5 = (int)ptr;
 4015cc4:	e0bffe17 	ldw	r2,-8(fp)
 4015cc8:	100b883a 	mov	r5,r2
  r6 = len;
 4015ccc:	e1bfff17 	ldw	r6,-4(fp)

  __asm__ volatile("break 1" : "=r" (r2), "+r" (r3) : "r" (r4), "r" (r5), "r" (r6) : "memory" );
 4015cd0:	003da07a 	break	1

  rc = r2;
 4015cd4:	e0bffb15 	stw	r2,-20(fp)
  error = r3;
 4015cd8:	e0fffc15 	stw	r3,-16(fp)

  return (error == 0) ? rc : -error;
 4015cdc:	e0bffc17 	ldw	r2,-16(fp)
 4015ce0:	10000326 	beq	r2,zero,4015cf0 <alt_hostfs_write+0x58>
 4015ce4:	e0bffc17 	ldw	r2,-16(fp)
 4015ce8:	0085c83a 	sub	r2,zero,r2
 4015cec:	00000106 	br	4015cf4 <alt_hostfs_write+0x5c>
 4015cf0:	e0bffb17 	ldw	r2,-20(fp)
}
 4015cf4:	e037883a 	mov	sp,fp
 4015cf8:	df000017 	ldw	fp,0(sp)
 4015cfc:	dec00104 	addi	sp,sp,4
 4015d00:	f800283a 	ret

04015d04 <alt_hostfs_seek>:
* Move around within a file
*
* returns -errno for an error or the offset within the file
*/
int alt_hostfs_seek(alt_fd* fd, int ptr, int dir)
{
 4015d04:	defffa04 	addi	sp,sp,-24
 4015d08:	df000515 	stw	fp,20(sp)
 4015d0c:	df000504 	addi	fp,sp,20
 4015d10:	e13ffd15 	stw	r4,-12(fp)
 4015d14:	e17ffe15 	stw	r5,-8(fp)
 4015d18:	e1bfff15 	stw	r6,-4(fp)
  register int r3 asm ("r3");
  register int r4 asm ("r4");
  register int r5 asm ("r5");
  register int r6 asm ("r6");

  r3 = (int)&hcinfo;
 4015d1c:	d0a01d04 	addi	r2,gp,-32652
 4015d20:	1007883a 	mov	r3,r2
  r4 = (int)fd->priv;
 4015d24:	e0bffd17 	ldw	r2,-12(fp)
 4015d28:	10800117 	ldw	r2,4(r2)
 4015d2c:	1009883a 	mov	r4,r2
  r5 = ptr;
 4015d30:	e17ffe17 	ldw	r5,-8(fp)
  r6 = dir;
 4015d34:	e1bfff17 	ldw	r6,-4(fp)

  __asm__ volatile("break 1" : "=r" (r2), "+r" (r3) : "r" (r4), "r" (r5), "r" (r6) : "memory" );
 4015d38:	003da07a 	break	1

  rc = r2;
 4015d3c:	e0bffb15 	stw	r2,-20(fp)
  error = r3;
 4015d40:	e0fffc15 	stw	r3,-16(fp)

  return (error == 0) ? rc : -error;
 4015d44:	e0bffc17 	ldw	r2,-16(fp)
 4015d48:	10000326 	beq	r2,zero,4015d58 <alt_hostfs_seek+0x54>
 4015d4c:	e0bffc17 	ldw	r2,-16(fp)
 4015d50:	0085c83a 	sub	r2,zero,r2
 4015d54:	00000106 	br	4015d5c <alt_hostfs_seek+0x58>
 4015d58:	e0bffb17 	ldw	r2,-20(fp)
}
 4015d5c:	e037883a 	mov	sp,fp
 4015d60:	df000017 	ldw	fp,0(sp)
 4015d64:	dec00104 	addi	sp,sp,4
 4015d68:	f800283a 	ret

04015d6c <alt_hostfs_fstat>:
* at the lower address.
* We need to copy the structure and byte swap it to make it match our local
* layout of struct stat.
*/
int alt_hostfs_fstat(alt_fd* fd, struct stat* st)
{
 4015d6c:	deffe904 	addi	sp,sp,-92
 4015d70:	df001615 	stw	fp,88(sp)
 4015d74:	df001604 	addi	fp,sp,88
 4015d78:	e13ffe15 	stw	r4,-8(fp)
 4015d7c:	e17fff15 	stw	r5,-4(fp)
  register int r2 asm ("r2");
  register int r3 asm ("r3");
  register int r4 asm ("r4");
  register int r5 asm ("r5");

  r3 = (int)&hcinfo;
 4015d80:	d0a02004 	addi	r2,gp,-32640
 4015d84:	1007883a 	mov	r3,r2
  r4 = (int)fd->priv;
 4015d88:	e0bffe17 	ldw	r2,-8(fp)
 4015d8c:	10800117 	ldw	r2,4(r2)
 4015d90:	1009883a 	mov	r4,r2
  r5 = (int)&hoststat;
 4015d94:	e0bfee04 	addi	r2,fp,-72
 4015d98:	100b883a 	mov	r5,r2

  __asm__ volatile("break 1" : "=r" (r2), "+r" (r3) : "r" (r4), "r" (r5) : "memory" );
 4015d9c:	003da07a 	break	1

  rc = r2;
 4015da0:	e0bfeb15 	stw	r2,-84(fp)
  error = r3;
 4015da4:	e0ffec15 	stw	r3,-80(fp)

  if (error == 0)
 4015da8:	e0bfec17 	ldw	r2,-80(fp)
 4015dac:	1000621e 	bne	r2,zero,4015f38 <alt_hostfs_fstat+0x1cc>
     * no change is required.  On a little-endian processor we need to swap
     * the bytes in each word.
     */

#ifndef ALT_BIGENDIAN
    ptr = (alt_u32 *)&hoststat;
 4015db0:	e0bfee04 	addi	r2,fp,-72
 4015db4:	e0bfea15 	stw	r2,-88(fp)
    end = (alt_u32 *)((char *)ptr + sizeof(struct fio_stat));
 4015db8:	e0bfea17 	ldw	r2,-88(fp)
 4015dbc:	10801004 	addi	r2,r2,64
 4015dc0:	e0bfed15 	stw	r2,-76(fp)
    for ( ; ptr < end ; ptr++)
 4015dc4:	00001606 	br	4015e20 <alt_hostfs_fstat+0xb4>
      *ptr = ((*ptr & 0xFF000000) >> 24) |
 4015dc8:	e0bfea17 	ldw	r2,-88(fp)
 4015dcc:	10800017 	ldw	r2,0(r2)
 4015dd0:	1006d63a 	srli	r3,r2,24
             ((*ptr & 0x00FF0000) >> 8)  |
 4015dd4:	e0bfea17 	ldw	r2,-88(fp)
 4015dd8:	10800017 	ldw	r2,0(r2)
 4015ddc:	10803fec 	andhi	r2,r2,255
 4015de0:	1004d23a 	srli	r2,r2,8

#ifndef ALT_BIGENDIAN
    ptr = (alt_u32 *)&hoststat;
    end = (alt_u32 *)((char *)ptr + sizeof(struct fio_stat));
    for ( ; ptr < end ; ptr++)
      *ptr = ((*ptr & 0xFF000000) >> 24) |
 4015de4:	1886b03a 	or	r3,r3,r2
             ((*ptr & 0x00FF0000) >> 8)  |
             ((*ptr & 0x0000FF00) << 8)  |
 4015de8:	e0bfea17 	ldw	r2,-88(fp)
 4015dec:	10800017 	ldw	r2,0(r2)
 4015df0:	10bfc00c 	andi	r2,r2,65280
 4015df4:	1004923a 	slli	r2,r2,8
#ifndef ALT_BIGENDIAN
    ptr = (alt_u32 *)&hoststat;
    end = (alt_u32 *)((char *)ptr + sizeof(struct fio_stat));
    for ( ; ptr < end ; ptr++)
      *ptr = ((*ptr & 0xFF000000) >> 24) |
             ((*ptr & 0x00FF0000) >> 8)  |
 4015df8:	1886b03a 	or	r3,r3,r2
             ((*ptr & 0x0000FF00) << 8)  |
             ((*ptr & 0x000000FF) << 24);
 4015dfc:	e0bfea17 	ldw	r2,-88(fp)
 4015e00:	10800017 	ldw	r2,0(r2)
 4015e04:	1004963a 	slli	r2,r2,24
    ptr = (alt_u32 *)&hoststat;
    end = (alt_u32 *)((char *)ptr + sizeof(struct fio_stat));
    for ( ; ptr < end ; ptr++)
      *ptr = ((*ptr & 0xFF000000) >> 24) |
             ((*ptr & 0x00FF0000) >> 8)  |
             ((*ptr & 0x0000FF00) << 8)  |
 4015e08:	1886b03a 	or	r3,r3,r2

#ifndef ALT_BIGENDIAN
    ptr = (alt_u32 *)&hoststat;
    end = (alt_u32 *)((char *)ptr + sizeof(struct fio_stat));
    for ( ; ptr < end ; ptr++)
      *ptr = ((*ptr & 0xFF000000) >> 24) |
 4015e0c:	e0bfea17 	ldw	r2,-88(fp)
 4015e10:	10c00015 	stw	r3,0(r2)
     */

#ifndef ALT_BIGENDIAN
    ptr = (alt_u32 *)&hoststat;
    end = (alt_u32 *)((char *)ptr + sizeof(struct fio_stat));
    for ( ; ptr < end ; ptr++)
 4015e14:	e0bfea17 	ldw	r2,-88(fp)
 4015e18:	10800104 	addi	r2,r2,4
 4015e1c:	e0bfea15 	stw	r2,-88(fp)
 4015e20:	e0ffea17 	ldw	r3,-88(fp)
 4015e24:	e0bfed17 	ldw	r2,-76(fp)
 4015e28:	18bfe736 	bltu	r3,r2,4015dc8 <_gp+0xffff558c>
             ((*ptr & 0x0000FF00) << 8)  |
             ((*ptr & 0x000000FF) << 24);
#endif

    /* Zero the unused parts of struct stat */
    ptr = (alt_u32 *)st;
 4015e2c:	e0bfff17 	ldw	r2,-4(fp)
 4015e30:	e0bfea15 	stw	r2,-88(fp)
    end = (alt_u32 *)((char *)ptr + sizeof(struct stat));
 4015e34:	e0bfea17 	ldw	r2,-88(fp)
 4015e38:	10800f04 	addi	r2,r2,60
 4015e3c:	e0bfed15 	stw	r2,-76(fp)
    for ( ; ptr < end ; ptr++)
 4015e40:	00000506 	br	4015e58 <alt_hostfs_fstat+0xec>
      *ptr = 0;
 4015e44:	e0bfea17 	ldw	r2,-88(fp)
 4015e48:	10000015 	stw	zero,0(r2)
#endif

    /* Zero the unused parts of struct stat */
    ptr = (alt_u32 *)st;
    end = (alt_u32 *)((char *)ptr + sizeof(struct stat));
    for ( ; ptr < end ; ptr++)
 4015e4c:	e0bfea17 	ldw	r2,-88(fp)
 4015e50:	10800104 	addi	r2,r2,4
 4015e54:	e0bfea15 	stw	r2,-88(fp)
 4015e58:	e0ffea17 	ldw	r3,-88(fp)
 4015e5c:	e0bfed17 	ldw	r2,-76(fp)
 4015e60:	18bff836 	bltu	r3,r2,4015e44 <_gp+0xffff5608>

    /* Copy the data provided by the host into our local copy, for data which
     * is provided as 64bit values by the host we just use the least
     * significant word.
     */
    st->st_dev     = hoststat.fst_dev;
 4015e64:	e0bfee17 	ldw	r2,-72(fp)
 4015e68:	1007883a 	mov	r3,r2
 4015e6c:	e0bfff17 	ldw	r2,-4(fp)
 4015e70:	10c0000d 	sth	r3,0(r2)
    st->st_ino     = hoststat.fst_ino;
 4015e74:	e0bfef17 	ldw	r2,-68(fp)
 4015e78:	1007883a 	mov	r3,r2
 4015e7c:	e0bfff17 	ldw	r2,-4(fp)
 4015e80:	10c0008d 	sth	r3,2(r2)
    st->st_mode    = hoststat.fst_mode;
 4015e84:	e0fff017 	ldw	r3,-64(fp)
 4015e88:	e0bfff17 	ldw	r2,-4(fp)
 4015e8c:	10c00115 	stw	r3,4(r2)
    st->st_nlink   = hoststat.fst_nlink;
 4015e90:	e0bff117 	ldw	r2,-60(fp)
 4015e94:	1007883a 	mov	r3,r2
 4015e98:	e0bfff17 	ldw	r2,-4(fp)
 4015e9c:	10c0020d 	sth	r3,8(r2)
    st->st_uid     = hoststat.fst_uid;
 4015ea0:	e0bff217 	ldw	r2,-56(fp)
 4015ea4:	1007883a 	mov	r3,r2
 4015ea8:	e0bfff17 	ldw	r2,-4(fp)
 4015eac:	10c0028d 	sth	r3,10(r2)
    st->st_gid     = hoststat.fst_gid;
 4015eb0:	e0bff317 	ldw	r2,-52(fp)
 4015eb4:	1007883a 	mov	r3,r2
 4015eb8:	e0bfff17 	ldw	r2,-4(fp)
 4015ebc:	10c0030d 	sth	r3,12(r2)
    st->st_rdev    = hoststat.fst_rdev;
 4015ec0:	e0bff417 	ldw	r2,-48(fp)
 4015ec4:	1007883a 	mov	r3,r2
 4015ec8:	e0bfff17 	ldw	r2,-4(fp)
 4015ecc:	10c0038d 	sth	r3,14(r2)
    st->st_size    = hoststat.fst_size[1];
 4015ed0:	e0bff617 	ldw	r2,-40(fp)
 4015ed4:	1007883a 	mov	r3,r2
 4015ed8:	e0bfff17 	ldw	r2,-4(fp)
 4015edc:	10c00415 	stw	r3,16(r2)

    st->st_atime   = hoststat.fst_atime;
 4015ee0:	e0bffb17 	ldw	r2,-20(fp)
 4015ee4:	1007883a 	mov	r3,r2
 4015ee8:	e0bfff17 	ldw	r2,-4(fp)
 4015eec:	10c00515 	stw	r3,20(r2)
    st->st_mtime   = hoststat.fst_mtime;
 4015ef0:	e0bffc17 	ldw	r2,-16(fp)
 4015ef4:	1007883a 	mov	r3,r2
 4015ef8:	e0bfff17 	ldw	r2,-4(fp)
 4015efc:	10c00715 	stw	r3,28(r2)
    st->st_ctime   = hoststat.fst_ctime;
 4015f00:	e0bffd17 	ldw	r2,-12(fp)
 4015f04:	1007883a 	mov	r3,r2
 4015f08:	e0bfff17 	ldw	r2,-4(fp)
 4015f0c:	10c00915 	stw	r3,36(r2)

    st->st_blksize = hoststat.fst_blksize[1];
 4015f10:	e0bff817 	ldw	r2,-32(fp)
 4015f14:	1007883a 	mov	r3,r2
 4015f18:	e0bfff17 	ldw	r2,-4(fp)
 4015f1c:	10c00b15 	stw	r3,44(r2)
    st->st_blocks  = hoststat.fst_blocks[1];
 4015f20:	e0bffa17 	ldw	r2,-24(fp)
 4015f24:	1007883a 	mov	r3,r2
 4015f28:	e0bfff17 	ldw	r2,-4(fp)
 4015f2c:	10c00c15 	stw	r3,48(r2)

    return rc;
 4015f30:	e0bfeb17 	ldw	r2,-84(fp)
 4015f34:	00000206 	br	4015f40 <alt_hostfs_fstat+0x1d4>
  }
  else
    return -error;
 4015f38:	e0bfec17 	ldw	r2,-80(fp)
 4015f3c:	0085c83a 	sub	r2,zero,r2
}
 4015f40:	e037883a 	mov	sp,fp
 4015f44:	df000017 	ldw	fp,0(sp)
 4015f48:	dec00104 	addi	sp,sp,4
 4015f4c:	f800283a 	ret

04015f50 <alt_alarm_start>:
 */ 

int alt_alarm_start (alt_alarm* alarm, alt_u32 nticks,
                     alt_u32 (*callback) (void* context),
                     void* context)
{
 4015f50:	defff504 	addi	sp,sp,-44
 4015f54:	df000a15 	stw	fp,40(sp)
 4015f58:	df000a04 	addi	fp,sp,40
 4015f5c:	e13ffc15 	stw	r4,-16(fp)
 4015f60:	e17ffd15 	stw	r5,-12(fp)
 4015f64:	e1bffe15 	stw	r6,-8(fp)
 4015f68:	e1ffff15 	stw	r7,-4(fp)
  alt_irq_context irq_context;
  alt_u32 current_nticks = 0;
 4015f6c:	e03ff615 	stw	zero,-40(fp)
 * Obtain the system clock rate in ticks/s. 
 */

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_ticks_per_second (void)
{
  return _alt_tick_rate;
 4015f70:	d0a70817 	ldw	r2,-25568(gp)
  
  if (alt_ticks_per_second ())
 4015f74:	10003c26 	beq	r2,zero,4016068 <alt_alarm_start+0x118>
  {
    if (alarm)
 4015f78:	e0bffc17 	ldw	r2,-16(fp)
 4015f7c:	10003826 	beq	r2,zero,4016060 <alt_alarm_start+0x110>
    {
      alarm->callback = callback;
 4015f80:	e0bffc17 	ldw	r2,-16(fp)
 4015f84:	e0fffe17 	ldw	r3,-8(fp)
 4015f88:	10c00315 	stw	r3,12(r2)
      alarm->context  = context;
 4015f8c:	e0bffc17 	ldw	r2,-16(fp)
 4015f90:	e0ffff17 	ldw	r3,-4(fp)
 4015f94:	10c00515 	stw	r3,20(r2)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 4015f98:	0005303a 	rdctl	r2,status
 4015f9c:	e0bff915 	stw	r2,-28(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 4015fa0:	e0fff917 	ldw	r3,-28(fp)
 4015fa4:	00bfff84 	movi	r2,-2
 4015fa8:	1884703a 	and	r2,r3,r2
 4015fac:	1001703a 	wrctl	status,r2
  
  return context;
 4015fb0:	e0bff917 	ldw	r2,-28(fp)
 
      irq_context = alt_irq_disable_all ();
 4015fb4:	e0bff815 	stw	r2,-32(fp)
 * alt_nticks() returns the elapsed number of system clock ticks since reset.
 */

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_nticks (void)
{
  return _alt_nticks;
 4015fb8:	d0a70917 	ldw	r2,-25564(gp)
      
      current_nticks = alt_nticks();
 4015fbc:	e0bff615 	stw	r2,-40(fp)
      
      alarm->time = nticks + current_nticks + 1; 
 4015fc0:	e0fffd17 	ldw	r3,-12(fp)
 4015fc4:	e0bff617 	ldw	r2,-40(fp)
 4015fc8:	1885883a 	add	r2,r3,r2
 4015fcc:	10c00044 	addi	r3,r2,1
 4015fd0:	e0bffc17 	ldw	r2,-16(fp)
 4015fd4:	10c00215 	stw	r3,8(r2)
      /* 
       * If the desired alarm time causes a roll-over, set the rollover
       * flag. This will prevent the subsequent tick event from causing
       * an alarm too early.
       */
      if(alarm->time < current_nticks)
 4015fd8:	e0bffc17 	ldw	r2,-16(fp)
 4015fdc:	10c00217 	ldw	r3,8(r2)
 4015fe0:	e0bff617 	ldw	r2,-40(fp)
 4015fe4:	1880042e 	bgeu	r3,r2,4015ff8 <alt_alarm_start+0xa8>
      {
        alarm->rollover = 1;
 4015fe8:	e0bffc17 	ldw	r2,-16(fp)
 4015fec:	00c00044 	movi	r3,1
 4015ff0:	10c00405 	stb	r3,16(r2)
 4015ff4:	00000206 	br	4016000 <alt_alarm_start+0xb0>
      }
      else
      {
        alarm->rollover = 0;
 4015ff8:	e0bffc17 	ldw	r2,-16(fp)
 4015ffc:	10000405 	stb	zero,16(r2)
      }
    
      alt_llist_insert (&alt_alarm_list, &alarm->llist);
 4016000:	e0bffc17 	ldw	r2,-16(fp)
 4016004:	d0e02304 	addi	r3,gp,-32628
 4016008:	e0fffa15 	stw	r3,-24(fp)
 401600c:	e0bffb15 	stw	r2,-20(fp)
 */

static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_insert(alt_llist* list, 
                alt_llist* entry)
{
  entry->previous = list;
 4016010:	e0bffb17 	ldw	r2,-20(fp)
 4016014:	e0fffa17 	ldw	r3,-24(fp)
 4016018:	10c00115 	stw	r3,4(r2)
  entry->next     = list->next;
 401601c:	e0bffa17 	ldw	r2,-24(fp)
 4016020:	10c00017 	ldw	r3,0(r2)
 4016024:	e0bffb17 	ldw	r2,-20(fp)
 4016028:	10c00015 	stw	r3,0(r2)

  list->next->previous = entry;
 401602c:	e0bffa17 	ldw	r2,-24(fp)
 4016030:	10800017 	ldw	r2,0(r2)
 4016034:	e0fffb17 	ldw	r3,-20(fp)
 4016038:	10c00115 	stw	r3,4(r2)
  list->next           = entry;
 401603c:	e0bffa17 	ldw	r2,-24(fp)
 4016040:	e0fffb17 	ldw	r3,-20(fp)
 4016044:	10c00015 	stw	r3,0(r2)
 4016048:	e0bff817 	ldw	r2,-32(fp)
 401604c:	e0bff715 	stw	r2,-36(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 4016050:	e0bff717 	ldw	r2,-36(fp)
 4016054:	1001703a 	wrctl	status,r2
      alt_irq_enable_all (irq_context);

      return 0;
 4016058:	0005883a 	mov	r2,zero
 401605c:	00000306 	br	401606c <alt_alarm_start+0x11c>
    }
    else
    {
      return -EINVAL;
 4016060:	00bffa84 	movi	r2,-22
 4016064:	00000106 	br	401606c <alt_alarm_start+0x11c>
    }
  }
  else
  {
    return -ENOTSUP;
 4016068:	00bfde84 	movi	r2,-134
  }
}
 401606c:	e037883a 	mov	sp,fp
 4016070:	df000017 	ldw	fp,0(sp)
 4016074:	dec00104 	addi	sp,sp,4
 4016078:	f800283a 	ret

0401607c <alt_dcache_flush_all>:
/*
 * alt_dcache_flush_all() is called to flush the entire data cache.
 */

void alt_dcache_flush_all (void)
{
 401607c:	deffff04 	addi	sp,sp,-4
 4016080:	df000015 	stw	fp,0(sp)
 4016084:	d839883a 	mov	fp,sp
  for (i = (char*) 0; i < (char*) NIOS2_DCACHE_SIZE; i+= NIOS2_DCACHE_LINE_SIZE)
  { 
    __asm__ volatile ("flushd (%0)" :: "r" (i));
  }
#endif /* NIOS2_DCACHE_SIZE > 0 */
}
 4016088:	0001883a 	nop
 401608c:	e037883a 	mov	sp,fp
 4016090:	df000017 	ldw	fp,0(sp)
 4016094:	dec00104 	addi	sp,sp,4
 4016098:	f800283a 	ret

0401609c <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
 401609c:	defffe04 	addi	sp,sp,-8
 40160a0:	dfc00115 	stw	ra,4(sp)
 40160a4:	df000015 	stw	fp,0(sp)
 40160a8:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
 40160ac:	d0a00e17 	ldw	r2,-32712(gp)
 40160b0:	10000326 	beq	r2,zero,40160c0 <alt_get_errno+0x24>
 40160b4:	d0a00e17 	ldw	r2,-32712(gp)
 40160b8:	103ee83a 	callr	r2
 40160bc:	00000106 	br	40160c4 <alt_get_errno+0x28>
 40160c0:	d0a6ff04 	addi	r2,gp,-25604
}
 40160c4:	e037883a 	mov	sp,fp
 40160c8:	dfc00117 	ldw	ra,4(sp)
 40160cc:	df000017 	ldw	fp,0(sp)
 40160d0:	dec00204 	addi	sp,sp,8
 40160d4:	f800283a 	ret

040160d8 <alt_dev_llist_insert>:
/*
 *
 */

int alt_dev_llist_insert (alt_dev_llist* dev, alt_llist* list)
{
 40160d8:	defffa04 	addi	sp,sp,-24
 40160dc:	dfc00515 	stw	ra,20(sp)
 40160e0:	df000415 	stw	fp,16(sp)
 40160e4:	df000404 	addi	fp,sp,16
 40160e8:	e13ffe15 	stw	r4,-8(fp)
 40160ec:	e17fff15 	stw	r5,-4(fp)
  /*
   * check that the device exists, and that it has a valid name.
   */

  if (!dev || !dev->name)
 40160f0:	e0bffe17 	ldw	r2,-8(fp)
 40160f4:	10000326 	beq	r2,zero,4016104 <alt_dev_llist_insert+0x2c>
 40160f8:	e0bffe17 	ldw	r2,-8(fp)
 40160fc:	10800217 	ldw	r2,8(r2)
 4016100:	1000061e 	bne	r2,zero,401611c <alt_dev_llist_insert+0x44>
  {
    ALT_ERRNO = EINVAL;
 4016104:	401609c0 	call	401609c <alt_get_errno>
 4016108:	1007883a 	mov	r3,r2
 401610c:	00800584 	movi	r2,22
 4016110:	18800015 	stw	r2,0(r3)
    return -EINVAL;
 4016114:	00bffa84 	movi	r2,-22
 4016118:	00001306 	br	4016168 <alt_dev_llist_insert+0x90>
  
  /*
   * register the device.
   */
  
  alt_llist_insert(list, &dev->llist);
 401611c:	e0bffe17 	ldw	r2,-8(fp)
 4016120:	e0ffff17 	ldw	r3,-4(fp)
 4016124:	e0fffc15 	stw	r3,-16(fp)
 4016128:	e0bffd15 	stw	r2,-12(fp)
 */

static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_insert(alt_llist* list, 
                alt_llist* entry)
{
  entry->previous = list;
 401612c:	e0bffd17 	ldw	r2,-12(fp)
 4016130:	e0fffc17 	ldw	r3,-16(fp)
 4016134:	10c00115 	stw	r3,4(r2)
  entry->next     = list->next;
 4016138:	e0bffc17 	ldw	r2,-16(fp)
 401613c:	10c00017 	ldw	r3,0(r2)
 4016140:	e0bffd17 	ldw	r2,-12(fp)
 4016144:	10c00015 	stw	r3,0(r2)

  list->next->previous = entry;
 4016148:	e0bffc17 	ldw	r2,-16(fp)
 401614c:	10800017 	ldw	r2,0(r2)
 4016150:	e0fffd17 	ldw	r3,-12(fp)
 4016154:	10c00115 	stw	r3,4(r2)
  list->next           = entry;
 4016158:	e0bffc17 	ldw	r2,-16(fp)
 401615c:	e0fffd17 	ldw	r3,-12(fp)
 4016160:	10c00015 	stw	r3,0(r2)

  return 0;  
 4016164:	0005883a 	mov	r2,zero
}
 4016168:	e037883a 	mov	sp,fp
 401616c:	dfc00117 	ldw	ra,4(sp)
 4016170:	df000017 	ldw	fp,0(sp)
 4016174:	dec00204 	addi	sp,sp,8
 4016178:	f800283a 	ret

0401617c <_do_ctors>:
/*
 * Run the C++ static constructors.
 */

void _do_ctors(void)
{
 401617c:	defffd04 	addi	sp,sp,-12
 4016180:	dfc00215 	stw	ra,8(sp)
 4016184:	df000115 	stw	fp,4(sp)
 4016188:	df000104 	addi	fp,sp,4
  constructor* ctor;

  for (ctor = &__CTOR_END__[-1]; ctor >= __CTOR_LIST__; ctor--)
 401618c:	00810074 	movhi	r2,1025
 4016190:	109b2304 	addi	r2,r2,27788
 4016194:	e0bfff15 	stw	r2,-4(fp)
 4016198:	00000606 	br	40161b4 <_do_ctors+0x38>
        (*ctor) (); 
 401619c:	e0bfff17 	ldw	r2,-4(fp)
 40161a0:	10800017 	ldw	r2,0(r2)
 40161a4:	103ee83a 	callr	r2

void _do_ctors(void)
{
  constructor* ctor;

  for (ctor = &__CTOR_END__[-1]; ctor >= __CTOR_LIST__; ctor--)
 40161a8:	e0bfff17 	ldw	r2,-4(fp)
 40161ac:	10bfff04 	addi	r2,r2,-4
 40161b0:	e0bfff15 	stw	r2,-4(fp)
 40161b4:	e0ffff17 	ldw	r3,-4(fp)
 40161b8:	00810074 	movhi	r2,1025
 40161bc:	109b2404 	addi	r2,r2,27792
 40161c0:	18bff62e 	bgeu	r3,r2,401619c <_gp+0xffff5960>
        (*ctor) (); 
}
 40161c4:	0001883a 	nop
 40161c8:	e037883a 	mov	sp,fp
 40161cc:	dfc00117 	ldw	ra,4(sp)
 40161d0:	df000017 	ldw	fp,0(sp)
 40161d4:	dec00204 	addi	sp,sp,8
 40161d8:	f800283a 	ret

040161dc <_do_dtors>:
/*
 * Run the C++ static destructors.
 */

void _do_dtors(void)
{
 40161dc:	defffd04 	addi	sp,sp,-12
 40161e0:	dfc00215 	stw	ra,8(sp)
 40161e4:	df000115 	stw	fp,4(sp)
 40161e8:	df000104 	addi	fp,sp,4
  destructor* dtor;

  for (dtor = &__DTOR_END__[-1]; dtor >= __DTOR_LIST__; dtor--)
 40161ec:	00810074 	movhi	r2,1025
 40161f0:	109b2304 	addi	r2,r2,27788
 40161f4:	e0bfff15 	stw	r2,-4(fp)
 40161f8:	00000606 	br	4016214 <_do_dtors+0x38>
        (*dtor) (); 
 40161fc:	e0bfff17 	ldw	r2,-4(fp)
 4016200:	10800017 	ldw	r2,0(r2)
 4016204:	103ee83a 	callr	r2

void _do_dtors(void)
{
  destructor* dtor;

  for (dtor = &__DTOR_END__[-1]; dtor >= __DTOR_LIST__; dtor--)
 4016208:	e0bfff17 	ldw	r2,-4(fp)
 401620c:	10bfff04 	addi	r2,r2,-4
 4016210:	e0bfff15 	stw	r2,-4(fp)
 4016214:	e0ffff17 	ldw	r3,-4(fp)
 4016218:	00810074 	movhi	r2,1025
 401621c:	109b2404 	addi	r2,r2,27792
 4016220:	18bff62e 	bgeu	r3,r2,40161fc <_gp+0xffff59c0>
        (*dtor) (); 
}
 4016224:	0001883a 	nop
 4016228:	e037883a 	mov	sp,fp
 401622c:	dfc00117 	ldw	ra,4(sp)
 4016230:	df000017 	ldw	fp,0(sp)
 4016234:	dec00204 	addi	sp,sp,8
 4016238:	f800283a 	ret

0401623c <alt_find_dev>:
 * "name" must be an exact match for the devices registered name for a match to
 * be found.
 */
 
alt_dev* alt_find_dev(const char* name, alt_llist* llist)
{
 401623c:	defffa04 	addi	sp,sp,-24
 4016240:	dfc00515 	stw	ra,20(sp)
 4016244:	df000415 	stw	fp,16(sp)
 4016248:	df000404 	addi	fp,sp,16
 401624c:	e13ffe15 	stw	r4,-8(fp)
 4016250:	e17fff15 	stw	r5,-4(fp)
  alt_dev* next = (alt_dev*) llist->next;
 4016254:	e0bfff17 	ldw	r2,-4(fp)
 4016258:	10800017 	ldw	r2,0(r2)
 401625c:	e0bffc15 	stw	r2,-16(fp)
  alt_32 len;

  len  = strlen(name) + 1;
 4016260:	e13ffe17 	ldw	r4,-8(fp)
 4016264:	40124380 	call	4012438 <strlen>
 4016268:	10800044 	addi	r2,r2,1
 401626c:	e0bffd15 	stw	r2,-12(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 

  while (next != (alt_dev*) llist)
 4016270:	00000d06 	br	40162a8 <alt_find_dev+0x6c>
    /* 
     * memcmp() is used here rather than strcmp() in order to reduce the size
     * of the executable.
     */

    if (!memcmp (next->name, name, len))
 4016274:	e0bffc17 	ldw	r2,-16(fp)
 4016278:	10800217 	ldw	r2,8(r2)
 401627c:	e0fffd17 	ldw	r3,-12(fp)
 4016280:	180d883a 	mov	r6,r3
 4016284:	e17ffe17 	ldw	r5,-8(fp)
 4016288:	1009883a 	mov	r4,r2
 401628c:	40169480 	call	4016948 <memcmp>
 4016290:	1000021e 	bne	r2,zero,401629c <alt_find_dev+0x60>
    {
      /* match found */

      return next;
 4016294:	e0bffc17 	ldw	r2,-16(fp)
 4016298:	00000706 	br	40162b8 <alt_find_dev+0x7c>
    }
    next = (alt_dev*) next->llist.next;
 401629c:	e0bffc17 	ldw	r2,-16(fp)
 40162a0:	10800017 	ldw	r2,0(r2)
 40162a4:	e0bffc15 	stw	r2,-16(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 

  while (next != (alt_dev*) llist)
 40162a8:	e0fffc17 	ldw	r3,-16(fp)
 40162ac:	e0bfff17 	ldw	r2,-4(fp)
 40162b0:	18bff01e 	bne	r3,r2,4016274 <_gp+0xffff5a38>
    next = (alt_dev*) next->llist.next;
  }
  
  /* No match found */
  
  return NULL;
 40162b4:	0005883a 	mov	r2,zero
}
 40162b8:	e037883a 	mov	sp,fp
 40162bc:	dfc00117 	ldw	ra,4(sp)
 40162c0:	df000017 	ldw	fp,0(sp)
 40162c4:	dec00204 	addi	sp,sp,8
 40162c8:	f800283a 	ret

040162cc <alt_find_file>:
 * either '/' or '\0' is the prefix of the filename. For example the filename:
 * "/myfilesystem/junk.txt" would match: "/myfilesystem", but not: "/myfile". 
 */
 
alt_dev* alt_find_file (const char* name)
{
 40162cc:	defffb04 	addi	sp,sp,-20
 40162d0:	dfc00415 	stw	ra,16(sp)
 40162d4:	df000315 	stw	fp,12(sp)
 40162d8:	df000304 	addi	fp,sp,12
 40162dc:	e13fff15 	stw	r4,-4(fp)
  alt_dev* next = (alt_dev*) alt_fs_list.next;   
 40162e0:	d0a00917 	ldw	r2,-32732(gp)
 40162e4:	e0bffd15 	stw	r2,-12(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 
 
  while (next != (alt_dev*) &alt_fs_list)
 40162e8:	00003106 	br	40163b0 <alt_find_file+0xe4>
  {
    len = strlen(next->name);
 40162ec:	e0bffd17 	ldw	r2,-12(fp)
 40162f0:	10800217 	ldw	r2,8(r2)
 40162f4:	1009883a 	mov	r4,r2
 40162f8:	40124380 	call	4012438 <strlen>
 40162fc:	e0bffe15 	stw	r2,-8(fp)
    
    if (next->name[len-1] == '/')
 4016300:	e0bffd17 	ldw	r2,-12(fp)
 4016304:	10c00217 	ldw	r3,8(r2)
 4016308:	e0bffe17 	ldw	r2,-8(fp)
 401630c:	10bfffc4 	addi	r2,r2,-1
 4016310:	1885883a 	add	r2,r3,r2
 4016314:	10800003 	ldbu	r2,0(r2)
 4016318:	10803fcc 	andi	r2,r2,255
 401631c:	1080201c 	xori	r2,r2,128
 4016320:	10bfe004 	addi	r2,r2,-128
 4016324:	10800bd8 	cmpnei	r2,r2,47
 4016328:	1000031e 	bne	r2,zero,4016338 <alt_find_file+0x6c>
    {
      len -= 1;
 401632c:	e0bffe17 	ldw	r2,-8(fp)
 4016330:	10bfffc4 	addi	r2,r2,-1
 4016334:	e0bffe15 	stw	r2,-8(fp)
    }

    if (((name[len] == '/') || (name[len] == '\0')) && 
 4016338:	e0bffe17 	ldw	r2,-8(fp)
 401633c:	e0ffff17 	ldw	r3,-4(fp)
 4016340:	1885883a 	add	r2,r3,r2
 4016344:	10800003 	ldbu	r2,0(r2)
 4016348:	10803fcc 	andi	r2,r2,255
 401634c:	1080201c 	xori	r2,r2,128
 4016350:	10bfe004 	addi	r2,r2,-128
 4016354:	10800be0 	cmpeqi	r2,r2,47
 4016358:	1000081e 	bne	r2,zero,401637c <alt_find_file+0xb0>
 401635c:	e0bffe17 	ldw	r2,-8(fp)
 4016360:	e0ffff17 	ldw	r3,-4(fp)
 4016364:	1885883a 	add	r2,r3,r2
 4016368:	10800003 	ldbu	r2,0(r2)
 401636c:	10803fcc 	andi	r2,r2,255
 4016370:	1080201c 	xori	r2,r2,128
 4016374:	10bfe004 	addi	r2,r2,-128
 4016378:	10000a1e 	bne	r2,zero,40163a4 <alt_find_file+0xd8>
        !memcmp (next->name, name, len))
 401637c:	e0bffd17 	ldw	r2,-12(fp)
 4016380:	10800217 	ldw	r2,8(r2)
 4016384:	e0fffe17 	ldw	r3,-8(fp)
 4016388:	180d883a 	mov	r6,r3
 401638c:	e17fff17 	ldw	r5,-4(fp)
 4016390:	1009883a 	mov	r4,r2
 4016394:	40169480 	call	4016948 <memcmp>
    if (next->name[len-1] == '/')
    {
      len -= 1;
    }

    if (((name[len] == '/') || (name[len] == '\0')) && 
 4016398:	1000021e 	bne	r2,zero,40163a4 <alt_find_file+0xd8>
        !memcmp (next->name, name, len))
    {
      /* match found */

      return next;
 401639c:	e0bffd17 	ldw	r2,-12(fp)
 40163a0:	00000706 	br	40163c0 <alt_find_file+0xf4>
    }
    next = (alt_dev*) next->llist.next;
 40163a4:	e0bffd17 	ldw	r2,-12(fp)
 40163a8:	10800017 	ldw	r2,0(r2)
 40163ac:	e0bffd15 	stw	r2,-12(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 
 
  while (next != (alt_dev*) &alt_fs_list)
 40163b0:	e0fffd17 	ldw	r3,-12(fp)
 40163b4:	d0a00904 	addi	r2,gp,-32732
 40163b8:	18bfcc1e 	bne	r3,r2,40162ec <_gp+0xffff5ab0>
    next = (alt_dev*) next->llist.next;
  }
  
  /* No match found */
  
  return NULL;     
 40163bc:	0005883a 	mov	r2,zero
}
 40163c0:	e037883a 	mov	sp,fp
 40163c4:	dfc00117 	ldw	ra,4(sp)
 40163c8:	df000017 	ldw	fp,0(sp)
 40163cc:	dec00204 	addi	sp,sp,8
 40163d0:	f800283a 	ret

040163d4 <alt_fs_reg>:
 * A return value of zero indicates success. A negative return value indicates
 * failure. 
 */
 
int alt_fs_reg (alt_dev* dev)
{
 40163d4:	defffc04 	addi	sp,sp,-16
 40163d8:	df000315 	stw	fp,12(sp)
 40163dc:	df000304 	addi	fp,sp,12
 40163e0:	e13fff15 	stw	r4,-4(fp)
  /*
   * check that the device has a name.
   */

  if (!dev->name)
 40163e4:	e0bfff17 	ldw	r2,-4(fp)
 40163e8:	10800217 	ldw	r2,8(r2)
 40163ec:	1000021e 	bne	r2,zero,40163f8 <alt_fs_reg+0x24>
  {
    return -ENODEV;
 40163f0:	00bffb44 	movi	r2,-19
 40163f4:	00001306 	br	4016444 <alt_fs_reg+0x70>
  
  /*
   * register the file system.
   */

  alt_llist_insert(&alt_fs_list, &dev->llist);
 40163f8:	e0bfff17 	ldw	r2,-4(fp)
 40163fc:	d0e00904 	addi	r3,gp,-32732
 4016400:	e0fffd15 	stw	r3,-12(fp)
 4016404:	e0bffe15 	stw	r2,-8(fp)
 */

static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_insert(alt_llist* list, 
                alt_llist* entry)
{
  entry->previous = list;
 4016408:	e0bffe17 	ldw	r2,-8(fp)
 401640c:	e0fffd17 	ldw	r3,-12(fp)
 4016410:	10c00115 	stw	r3,4(r2)
  entry->next     = list->next;
 4016414:	e0bffd17 	ldw	r2,-12(fp)
 4016418:	10c00017 	ldw	r3,0(r2)
 401641c:	e0bffe17 	ldw	r2,-8(fp)
 4016420:	10c00015 	stw	r3,0(r2)

  list->next->previous = entry;
 4016424:	e0bffd17 	ldw	r2,-12(fp)
 4016428:	10800017 	ldw	r2,0(r2)
 401642c:	e0fffe17 	ldw	r3,-8(fp)
 4016430:	10c00115 	stw	r3,4(r2)
  list->next           = entry;
 4016434:	e0bffd17 	ldw	r2,-12(fp)
 4016438:	e0fffe17 	ldw	r3,-8(fp)
 401643c:	10c00015 	stw	r3,0(r2)

  return 0;
 4016440:	0005883a 	mov	r2,zero
} 
 4016444:	e037883a 	mov	sp,fp
 4016448:	df000017 	ldw	fp,0(sp)
 401644c:	dec00104 	addi	sp,sp,4
 4016450:	f800283a 	ret

04016454 <alt_get_fd>:
 * the offset of the file descriptor within the file descriptor array). A
 * negative value indicates failure.
 */

int alt_get_fd (alt_dev* dev)
{
 4016454:	defffa04 	addi	sp,sp,-24
 4016458:	dfc00515 	stw	ra,20(sp)
 401645c:	df000415 	stw	fp,16(sp)
 4016460:	dc000315 	stw	r16,12(sp)
 4016464:	df000404 	addi	fp,sp,16
 4016468:	e13ffe15 	stw	r4,-8(fp)
  alt_32 i;
  int rc = -EMFILE;
 401646c:	00bffa04 	movi	r2,-24
 4016470:	e0bffd15 	stw	r2,-12(fp)
   * indicates the highest file descriptor ever allocated. This is used to
   * improve efficency when searching the file descriptor list, and 
   * therefore reduce contention on the alt_fd_list_lock semaphore. 
   */

  for (i = 0; i < ALT_MAX_FD; i++)
 4016474:	e03ffc15 	stw	zero,-16(fp)
 4016478:	00001d06 	br	40164f0 <alt_get_fd+0x9c>
  {
    if (!alt_fd_list[i].dev)
 401647c:	04010074 	movhi	r16,1025
 4016480:	841d7504 	addi	r16,r16,30164
 4016484:	e0bffc17 	ldw	r2,-16(fp)
 4016488:	01400304 	movi	r5,12
 401648c:	1009883a 	mov	r4,r2
 4016490:	4013f9c0 	call	4013f9c <__mulsi3>
 4016494:	8085883a 	add	r2,r16,r2
 4016498:	10800017 	ldw	r2,0(r2)
 401649c:	1000111e 	bne	r2,zero,40164e4 <alt_get_fd+0x90>
    {
      alt_fd_list[i].dev = dev;
 40164a0:	04010074 	movhi	r16,1025
 40164a4:	841d7504 	addi	r16,r16,30164
 40164a8:	e0bffc17 	ldw	r2,-16(fp)
 40164ac:	01400304 	movi	r5,12
 40164b0:	1009883a 	mov	r4,r2
 40164b4:	4013f9c0 	call	4013f9c <__mulsi3>
 40164b8:	8085883a 	add	r2,r16,r2
 40164bc:	e0fffe17 	ldw	r3,-8(fp)
 40164c0:	10c00015 	stw	r3,0(r2)
      if (i > alt_max_fd)
 40164c4:	d0e00d17 	ldw	r3,-32716(gp)
 40164c8:	e0bffc17 	ldw	r2,-16(fp)
 40164cc:	1880020e 	bge	r3,r2,40164d8 <alt_get_fd+0x84>
      {
        alt_max_fd = i;
 40164d0:	e0bffc17 	ldw	r2,-16(fp)
 40164d4:	d0a00d15 	stw	r2,-32716(gp)
      }
      rc = i;
 40164d8:	e0bffc17 	ldw	r2,-16(fp)
 40164dc:	e0bffd15 	stw	r2,-12(fp)
      goto alt_get_fd_exit;
 40164e0:	00000606 	br	40164fc <alt_get_fd+0xa8>
   * indicates the highest file descriptor ever allocated. This is used to
   * improve efficency when searching the file descriptor list, and 
   * therefore reduce contention on the alt_fd_list_lock semaphore. 
   */

  for (i = 0; i < ALT_MAX_FD; i++)
 40164e4:	e0bffc17 	ldw	r2,-16(fp)
 40164e8:	10800044 	addi	r2,r2,1
 40164ec:	e0bffc15 	stw	r2,-16(fp)
 40164f0:	e0bffc17 	ldw	r2,-16(fp)
 40164f4:	10800810 	cmplti	r2,r2,32
 40164f8:	103fe01e 	bne	r2,zero,401647c <_gp+0xffff5c40>
   * file descriptor pool.
   */

  ALT_SEM_POST(alt_fd_list_lock);

  return rc;
 40164fc:	e0bffd17 	ldw	r2,-12(fp)
}
 4016500:	e6ffff04 	addi	sp,fp,-4
 4016504:	dfc00217 	ldw	ra,8(sp)
 4016508:	df000117 	ldw	fp,4(sp)
 401650c:	dc000017 	ldw	r16,0(sp)
 4016510:	dec00304 	addi	sp,sp,12
 4016514:	f800283a 	ret

04016518 <alt_icache_flush_all>:
/*
 * alt_icache_flush_all() is called to flush the entire instruction cache.
 */

void alt_icache_flush_all (void)
{
 4016518:	deffff04 	addi	sp,sp,-4
 401651c:	df000015 	stw	fp,0(sp)
 4016520:	d839883a 	mov	fp,sp
#if NIOS2_ICACHE_SIZE > 0
  alt_icache_flush (0, NIOS2_ICACHE_SIZE);
#endif
}
 4016524:	0001883a 	nop
 4016528:	e037883a 	mov	sp,fp
 401652c:	df000017 	ldw	fp,0(sp)
 4016530:	dec00104 	addi	sp,sp,4
 4016534:	f800283a 	ret

04016538 <alt_exception_cause_generated_bad_addr>:
 * Return: 1: BADADDR (bad_addr argument to handler) is valid
 *         0: BADADDR is not valid
 */
int 
alt_exception_cause_generated_bad_addr(alt_exception_cause cause)
{
 4016538:	defffe04 	addi	sp,sp,-8
 401653c:	df000115 	stw	fp,4(sp)
 4016540:	df000104 	addi	fp,sp,4
 4016544:	e13fff15 	stw	r4,-4(fp)
  switch (cause) {
 4016548:	e0bfff17 	ldw	r2,-4(fp)
 401654c:	10bffe84 	addi	r2,r2,-6
 4016550:	10c00428 	cmpgeui	r3,r2,16
 4016554:	18001a1e 	bne	r3,zero,40165c0 <alt_exception_cause_generated_bad_addr+0x88>
 4016558:	100690ba 	slli	r3,r2,2
 401655c:	00810074 	movhi	r2,1025
 4016560:	10995c04 	addi	r2,r2,25968
 4016564:	1885883a 	add	r2,r3,r2
 4016568:	10800017 	ldw	r2,0(r2)
 401656c:	1000683a 	jmp	r2
 4016570:	040165b0 	cmpltui	r16,zero,1430
 4016574:	040165b0 	cmpltui	r16,zero,1430
 4016578:	040165c0 	call	40165c <__alt_mem_new_sdram_controller_0+0x40165c>
 401657c:	040165c0 	call	40165c <__alt_mem_new_sdram_controller_0+0x40165c>
 4016580:	040165c0 	call	40165c <__alt_mem_new_sdram_controller_0+0x40165c>
 4016584:	040165b0 	cmpltui	r16,zero,1430
 4016588:	040165b8 	rdprs	r16,zero,1430
 401658c:	040165c0 	call	40165c <__alt_mem_new_sdram_controller_0+0x40165c>
 4016590:	040165b0 	cmpltui	r16,zero,1430
 4016594:	040165b0 	cmpltui	r16,zero,1430
 4016598:	040165c0 	call	40165c <__alt_mem_new_sdram_controller_0+0x40165c>
 401659c:	040165b0 	cmpltui	r16,zero,1430
 40165a0:	040165b8 	rdprs	r16,zero,1430
 40165a4:	040165c0 	call	40165c <__alt_mem_new_sdram_controller_0+0x40165c>
 40165a8:	040165c0 	call	40165c <__alt_mem_new_sdram_controller_0+0x40165c>
 40165ac:	040165b0 	cmpltui	r16,zero,1430
  case NIOS2_EXCEPTION_MISALIGNED_TARGET_PC:
  case NIOS2_EXCEPTION_TLB_READ_PERM_VIOLATION:
  case NIOS2_EXCEPTION_TLB_WRITE_PERM_VIOLATION:
  case NIOS2_EXCEPTION_MPU_DATA_REGION_VIOLATION:
  case NIOS2_EXCEPTION_ECC_DATA_ERR:
    return 1;
 40165b0:	00800044 	movi	r2,1
 40165b4:	00000306 	br	40165c4 <alt_exception_cause_generated_bad_addr+0x8c>

  case NIOS2_EXCEPTION_TLB_MISS:
  case NIOS2_EXCEPTION_ECC_TLB_ERR:
    return 0;
 40165b8:	0005883a 	mov	r2,zero
 40165bc:	00000106 	br	40165c4 <alt_exception_cause_generated_bad_addr+0x8c>

  default:
    return 0;
 40165c0:	0005883a 	mov	r2,zero
  }
}
 40165c4:	e037883a 	mov	sp,fp
 40165c8:	df000017 	ldw	fp,0(sp)
 40165cc:	dec00104 	addi	sp,sp,4
 40165d0:	f800283a 	ret

040165d4 <alt_open_fd>:
 * If the device can not be succesfully opened, then the input file descriptor
 * remains unchanged.
 */

static void alt_open_fd(alt_fd* fd, const char* name, int flags, int mode)
{
 40165d4:	defff804 	addi	sp,sp,-32
 40165d8:	dfc00715 	stw	ra,28(sp)
 40165dc:	df000615 	stw	fp,24(sp)
 40165e0:	dc000515 	stw	r16,20(sp)
 40165e4:	df000604 	addi	fp,sp,24
 40165e8:	e13ffb15 	stw	r4,-20(fp)
 40165ec:	e17ffc15 	stw	r5,-16(fp)
 40165f0:	e1bffd15 	stw	r6,-12(fp)
 40165f4:	e1fffe15 	stw	r7,-8(fp)
  int old;

  old = open (name, flags, mode);
 40165f8:	e1bffe17 	ldw	r6,-8(fp)
 40165fc:	e17ffd17 	ldw	r5,-12(fp)
 4016600:	e13ffc17 	ldw	r4,-16(fp)
 4016604:	40149700 	call	4014970 <open>
 4016608:	e0bffa15 	stw	r2,-24(fp)

  if (old >= 0)
 401660c:	e0bffa17 	ldw	r2,-24(fp)
 4016610:	10002216 	blt	r2,zero,401669c <alt_open_fd+0xc8>
  {
    fd->dev      = alt_fd_list[old].dev;
 4016614:	04010074 	movhi	r16,1025
 4016618:	841d7504 	addi	r16,r16,30164
 401661c:	e0bffa17 	ldw	r2,-24(fp)
 4016620:	01400304 	movi	r5,12
 4016624:	1009883a 	mov	r4,r2
 4016628:	4013f9c0 	call	4013f9c <__mulsi3>
 401662c:	8085883a 	add	r2,r16,r2
 4016630:	10c00017 	ldw	r3,0(r2)
 4016634:	e0bffb17 	ldw	r2,-20(fp)
 4016638:	10c00015 	stw	r3,0(r2)
    fd->priv     = alt_fd_list[old].priv;
 401663c:	04010074 	movhi	r16,1025
 4016640:	841d7504 	addi	r16,r16,30164
 4016644:	e0bffa17 	ldw	r2,-24(fp)
 4016648:	01400304 	movi	r5,12
 401664c:	1009883a 	mov	r4,r2
 4016650:	4013f9c0 	call	4013f9c <__mulsi3>
 4016654:	8085883a 	add	r2,r16,r2
 4016658:	10800104 	addi	r2,r2,4
 401665c:	10c00017 	ldw	r3,0(r2)
 4016660:	e0bffb17 	ldw	r2,-20(fp)
 4016664:	10c00115 	stw	r3,4(r2)
    fd->fd_flags = alt_fd_list[old].fd_flags;
 4016668:	04010074 	movhi	r16,1025
 401666c:	841d7504 	addi	r16,r16,30164
 4016670:	e0bffa17 	ldw	r2,-24(fp)
 4016674:	01400304 	movi	r5,12
 4016678:	1009883a 	mov	r4,r2
 401667c:	4013f9c0 	call	4013f9c <__mulsi3>
 4016680:	8085883a 	add	r2,r16,r2
 4016684:	10800204 	addi	r2,r2,8
 4016688:	10c00017 	ldw	r3,0(r2)
 401668c:	e0bffb17 	ldw	r2,-20(fp)
 4016690:	10c00215 	stw	r3,8(r2)

    alt_release_fd (old);
 4016694:	e13ffa17 	ldw	r4,-24(fp)
 4016698:	4014c0c0 	call	4014c0c <alt_release_fd>
  }
} 
 401669c:	0001883a 	nop
 40166a0:	e6ffff04 	addi	sp,fp,-4
 40166a4:	dfc00217 	ldw	ra,8(sp)
 40166a8:	df000117 	ldw	fp,4(sp)
 40166ac:	dc000017 	ldw	r16,0(sp)
 40166b0:	dec00304 	addi	sp,sp,12
 40166b4:	f800283a 	ret

040166b8 <alt_io_redirect>:
 */
 
void alt_io_redirect(const char* stdout_dev, 
                     const char* stdin_dev, 
                     const char* stderr_dev)
{
 40166b8:	defffb04 	addi	sp,sp,-20
 40166bc:	dfc00415 	stw	ra,16(sp)
 40166c0:	df000315 	stw	fp,12(sp)
 40166c4:	df000304 	addi	fp,sp,12
 40166c8:	e13ffd15 	stw	r4,-12(fp)
 40166cc:	e17ffe15 	stw	r5,-8(fp)
 40166d0:	e1bfff15 	stw	r6,-4(fp)
  /* Redirect the channels */

  alt_open_fd (&alt_fd_list[STDOUT_FILENO], stdout_dev, O_WRONLY, 0777);
 40166d4:	01c07fc4 	movi	r7,511
 40166d8:	01800044 	movi	r6,1
 40166dc:	e17ffd17 	ldw	r5,-12(fp)
 40166e0:	01010074 	movhi	r4,1025
 40166e4:	211d7804 	addi	r4,r4,30176
 40166e8:	40165d40 	call	40165d4 <alt_open_fd>
  alt_open_fd (&alt_fd_list[STDIN_FILENO], stdin_dev, O_RDONLY, 0777);
 40166ec:	01c07fc4 	movi	r7,511
 40166f0:	000d883a 	mov	r6,zero
 40166f4:	e17ffe17 	ldw	r5,-8(fp)
 40166f8:	01010074 	movhi	r4,1025
 40166fc:	211d7504 	addi	r4,r4,30164
 4016700:	40165d40 	call	40165d4 <alt_open_fd>
  alt_open_fd (&alt_fd_list[STDERR_FILENO], stderr_dev, O_WRONLY, 0777);
 4016704:	01c07fc4 	movi	r7,511
 4016708:	01800044 	movi	r6,1
 401670c:	e17fff17 	ldw	r5,-4(fp)
 4016710:	01010074 	movhi	r4,1025
 4016714:	211d7b04 	addi	r4,r4,30188
 4016718:	40165d40 	call	40165d4 <alt_open_fd>
}  
 401671c:	0001883a 	nop
 4016720:	e037883a 	mov	sp,fp
 4016724:	dfc00117 	ldw	ra,4(sp)
 4016728:	df000017 	ldw	fp,0(sp)
 401672c:	dec00204 	addi	sp,sp,8
 4016730:	f800283a 	ret

04016734 <alt_alarm_stop>:
 * alarms. Alternatively an alarm can unregister itself by returning zero when 
 * the alarm executes.
 */

void alt_alarm_stop (alt_alarm* alarm)
{
 4016734:	defffa04 	addi	sp,sp,-24
 4016738:	df000515 	stw	fp,20(sp)
 401673c:	df000504 	addi	fp,sp,20
 4016740:	e13fff15 	stw	r4,-4(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 4016744:	0005303a 	rdctl	r2,status
 4016748:	e0bffc15 	stw	r2,-16(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 401674c:	e0fffc17 	ldw	r3,-16(fp)
 4016750:	00bfff84 	movi	r2,-2
 4016754:	1884703a 	and	r2,r3,r2
 4016758:	1001703a 	wrctl	status,r2
  
  return context;
 401675c:	e0bffc17 	ldw	r2,-16(fp)
  alt_irq_context irq_context;

  irq_context = alt_irq_disable_all();
 4016760:	e0bffb15 	stw	r2,-20(fp)
  alt_llist_remove (&alarm->llist);
 4016764:	e0bfff17 	ldw	r2,-4(fp)
 4016768:	e0bffd15 	stw	r2,-12(fp)
 * input argument is the element to remove.
 */
     
static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_remove(alt_llist* entry)
{
  entry->next->previous = entry->previous;
 401676c:	e0bffd17 	ldw	r2,-12(fp)
 4016770:	10800017 	ldw	r2,0(r2)
 4016774:	e0fffd17 	ldw	r3,-12(fp)
 4016778:	18c00117 	ldw	r3,4(r3)
 401677c:	10c00115 	stw	r3,4(r2)
  entry->previous->next = entry->next;
 4016780:	e0bffd17 	ldw	r2,-12(fp)
 4016784:	10800117 	ldw	r2,4(r2)
 4016788:	e0fffd17 	ldw	r3,-12(fp)
 401678c:	18c00017 	ldw	r3,0(r3)
 4016790:	10c00015 	stw	r3,0(r2)
  /* 
   * Set the entry to point to itself, so that any further calls to
   * alt_llist_remove() are harmless.
   */

  entry->previous = entry;
 4016794:	e0bffd17 	ldw	r2,-12(fp)
 4016798:	e0fffd17 	ldw	r3,-12(fp)
 401679c:	10c00115 	stw	r3,4(r2)
  entry->next     = entry;
 40167a0:	e0bffd17 	ldw	r2,-12(fp)
 40167a4:	e0fffd17 	ldw	r3,-12(fp)
 40167a8:	10c00015 	stw	r3,0(r2)
 40167ac:	e0bffb17 	ldw	r2,-20(fp)
 40167b0:	e0bffe15 	stw	r2,-8(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 40167b4:	e0bffe17 	ldw	r2,-8(fp)
 40167b8:	1001703a 	wrctl	status,r2
  alt_irq_enable_all (irq_context);
}
 40167bc:	0001883a 	nop
 40167c0:	e037883a 	mov	sp,fp
 40167c4:	df000017 	ldw	fp,0(sp)
 40167c8:	dec00104 	addi	sp,sp,4
 40167cc:	f800283a 	ret

040167d0 <alt_tick>:
 * 
 * alt_tick() is expected to run at interrupt level.
 */

void alt_tick (void)
{
 40167d0:	defffb04 	addi	sp,sp,-20
 40167d4:	dfc00415 	stw	ra,16(sp)
 40167d8:	df000315 	stw	fp,12(sp)
 40167dc:	df000304 	addi	fp,sp,12
  alt_alarm* next;
  alt_alarm* alarm = (alt_alarm*) alt_alarm_list.next;
 40167e0:	d0a02317 	ldw	r2,-32628(gp)
 40167e4:	e0bffd15 	stw	r2,-12(fp)

  alt_u32    next_callback;

  /* update the tick counter */

  _alt_nticks++;
 40167e8:	d0a70917 	ldw	r2,-25564(gp)
 40167ec:	10800044 	addi	r2,r2,1
 40167f0:	d0a70915 	stw	r2,-25564(gp)

  /* process the registered callbacks */

  while (alarm != (alt_alarm*) &alt_alarm_list)
 40167f4:	00002e06 	br	40168b0 <alt_tick+0xe0>
  {
    next = (alt_alarm*) alarm->llist.next;
 40167f8:	e0bffd17 	ldw	r2,-12(fp)
 40167fc:	10800017 	ldw	r2,0(r2)
 4016800:	e0bffe15 	stw	r2,-8(fp)
    /* 
     * Upon the tick-counter rolling over it is safe to clear the 
     * roll-over flag; once the flag is cleared this (or subsequnt)
     * tick events are enabled to generate an alarm event. 
     */
    if ((alarm->rollover) && (_alt_nticks == 0))
 4016804:	e0bffd17 	ldw	r2,-12(fp)
 4016808:	10800403 	ldbu	r2,16(r2)
 401680c:	10803fcc 	andi	r2,r2,255
 4016810:	10000426 	beq	r2,zero,4016824 <alt_tick+0x54>
 4016814:	d0a70917 	ldw	r2,-25564(gp)
 4016818:	1000021e 	bne	r2,zero,4016824 <alt_tick+0x54>
    {
      alarm->rollover = 0;
 401681c:	e0bffd17 	ldw	r2,-12(fp)
 4016820:	10000405 	stb	zero,16(r2)
    }
    
    /* if the alarm period has expired, make the callback */    
    if ((alarm->time <= _alt_nticks) && (alarm->rollover == 0))
 4016824:	e0bffd17 	ldw	r2,-12(fp)
 4016828:	10800217 	ldw	r2,8(r2)
 401682c:	d0e70917 	ldw	r3,-25564(gp)
 4016830:	18801d36 	bltu	r3,r2,40168a8 <alt_tick+0xd8>
 4016834:	e0bffd17 	ldw	r2,-12(fp)
 4016838:	10800403 	ldbu	r2,16(r2)
 401683c:	10803fcc 	andi	r2,r2,255
 4016840:	1000191e 	bne	r2,zero,40168a8 <alt_tick+0xd8>
    {
      next_callback = alarm->callback (alarm->context);
 4016844:	e0bffd17 	ldw	r2,-12(fp)
 4016848:	10800317 	ldw	r2,12(r2)
 401684c:	e0fffd17 	ldw	r3,-12(fp)
 4016850:	18c00517 	ldw	r3,20(r3)
 4016854:	1809883a 	mov	r4,r3
 4016858:	103ee83a 	callr	r2
 401685c:	e0bfff15 	stw	r2,-4(fp)

      /* deactivate the alarm if the return value is zero */

      if (next_callback == 0)
 4016860:	e0bfff17 	ldw	r2,-4(fp)
 4016864:	1000031e 	bne	r2,zero,4016874 <alt_tick+0xa4>
      {
        alt_alarm_stop (alarm);
 4016868:	e13ffd17 	ldw	r4,-12(fp)
 401686c:	40167340 	call	4016734 <alt_alarm_stop>
 4016870:	00000d06 	br	40168a8 <alt_tick+0xd8>
      }
      else
      {
        alarm->time += next_callback;
 4016874:	e0bffd17 	ldw	r2,-12(fp)
 4016878:	10c00217 	ldw	r3,8(r2)
 401687c:	e0bfff17 	ldw	r2,-4(fp)
 4016880:	1887883a 	add	r3,r3,r2
 4016884:	e0bffd17 	ldw	r2,-12(fp)
 4016888:	10c00215 	stw	r3,8(r2)
        /* 
         * If the desired alarm time causes a roll-over, set the rollover
         * flag. This will prevent the subsequent tick event from causing
         * an alarm too early.
         */
        if(alarm->time < _alt_nticks)
 401688c:	e0bffd17 	ldw	r2,-12(fp)
 4016890:	10c00217 	ldw	r3,8(r2)
 4016894:	d0a70917 	ldw	r2,-25564(gp)
 4016898:	1880032e 	bgeu	r3,r2,40168a8 <alt_tick+0xd8>
        {
          alarm->rollover = 1;
 401689c:	e0bffd17 	ldw	r2,-12(fp)
 40168a0:	00c00044 	movi	r3,1
 40168a4:	10c00405 	stb	r3,16(r2)
        }
      }
    }
    alarm = next;
 40168a8:	e0bffe17 	ldw	r2,-8(fp)
 40168ac:	e0bffd15 	stw	r2,-12(fp)

  _alt_nticks++;

  /* process the registered callbacks */

  while (alarm != (alt_alarm*) &alt_alarm_list)
 40168b0:	e0fffd17 	ldw	r3,-12(fp)
 40168b4:	d0a02304 	addi	r2,gp,-32628
 40168b8:	18bfcf1e 	bne	r3,r2,40167f8 <_gp+0xffff5fbc>

  /* 
   * Update the operating system specific timer facilities.
   */

  ALT_OS_TIME_TICK();
 40168bc:	0001883a 	nop
}
 40168c0:	0001883a 	nop
 40168c4:	e037883a 	mov	sp,fp
 40168c8:	dfc00117 	ldw	ra,4(sp)
 40168cc:	df000017 	ldw	fp,0(sp)
 40168d0:	dec00204 	addi	sp,sp,8
 40168d4:	f800283a 	ret

040168d8 <altera_nios2_gen2_irq_init>:
/*
 * To initialize the internal interrupt controller, just clear the IENABLE
 * register so that all possible IRQs are disabled.
 */
void altera_nios2_gen2_irq_init(void) 
{
 40168d8:	deffff04 	addi	sp,sp,-4
 40168dc:	df000015 	stw	fp,0(sp)
 40168e0:	d839883a 	mov	fp,sp
    NIOS2_WRITE_IENABLE(0);
 40168e4:	000170fa 	wrctl	ienable,zero
}
 40168e8:	0001883a 	nop
 40168ec:	e037883a 	mov	sp,fp
 40168f0:	df000017 	ldw	fp,0(sp)
 40168f4:	dec00104 	addi	sp,sp,4
 40168f8:	f800283a 	ret

040168fc <atexit>:
 40168fc:	200b883a 	mov	r5,r4
 4016900:	000f883a 	mov	r7,zero
 4016904:	000d883a 	mov	r6,zero
 4016908:	0009883a 	mov	r4,zero
 401690c:	40169c41 	jmpi	40169c4 <__register_exitproc>

04016910 <exit>:
 4016910:	defffe04 	addi	sp,sp,-8
 4016914:	000b883a 	mov	r5,zero
 4016918:	dc000015 	stw	r16,0(sp)
 401691c:	dfc00115 	stw	ra,4(sp)
 4016920:	2021883a 	mov	r16,r4
 4016924:	4016adc0 	call	4016adc <__call_exitprocs>
 4016928:	008100b4 	movhi	r2,1026
 401692c:	10a21404 	addi	r2,r2,-30640
 4016930:	11000017 	ldw	r4,0(r2)
 4016934:	20800f17 	ldw	r2,60(r4)
 4016938:	10000126 	beq	r2,zero,4016940 <exit+0x30>
 401693c:	103ee83a 	callr	r2
 4016940:	8009883a 	mov	r4,r16
 4016944:	4016c5c0 	call	4016c5c <_exit>

04016948 <memcmp>:
 4016948:	01c000c4 	movi	r7,3
 401694c:	3980192e 	bgeu	r7,r6,40169b4 <memcmp+0x6c>
 4016950:	2144b03a 	or	r2,r4,r5
 4016954:	11c4703a 	and	r2,r2,r7
 4016958:	10000f26 	beq	r2,zero,4016998 <memcmp+0x50>
 401695c:	20800003 	ldbu	r2,0(r4)
 4016960:	28c00003 	ldbu	r3,0(r5)
 4016964:	10c0151e 	bne	r2,r3,40169bc <memcmp+0x74>
 4016968:	31bfff84 	addi	r6,r6,-2
 401696c:	01ffffc4 	movi	r7,-1
 4016970:	00000406 	br	4016984 <memcmp+0x3c>
 4016974:	20800003 	ldbu	r2,0(r4)
 4016978:	28c00003 	ldbu	r3,0(r5)
 401697c:	31bfffc4 	addi	r6,r6,-1
 4016980:	10c00e1e 	bne	r2,r3,40169bc <memcmp+0x74>
 4016984:	21000044 	addi	r4,r4,1
 4016988:	29400044 	addi	r5,r5,1
 401698c:	31fff91e 	bne	r6,r7,4016974 <_gp+0xffff6138>
 4016990:	0005883a 	mov	r2,zero
 4016994:	f800283a 	ret
 4016998:	20c00017 	ldw	r3,0(r4)
 401699c:	28800017 	ldw	r2,0(r5)
 40169a0:	18bfee1e 	bne	r3,r2,401695c <_gp+0xffff6120>
 40169a4:	31bfff04 	addi	r6,r6,-4
 40169a8:	21000104 	addi	r4,r4,4
 40169ac:	29400104 	addi	r5,r5,4
 40169b0:	39bff936 	bltu	r7,r6,4016998 <_gp+0xffff615c>
 40169b4:	303fe91e 	bne	r6,zero,401695c <_gp+0xffff6120>
 40169b8:	003ff506 	br	4016990 <_gp+0xffff6154>
 40169bc:	10c5c83a 	sub	r2,r2,r3
 40169c0:	f800283a 	ret

040169c4 <__register_exitproc>:
 40169c4:	defffa04 	addi	sp,sp,-24
 40169c8:	dc000315 	stw	r16,12(sp)
 40169cc:	040100b4 	movhi	r16,1026
 40169d0:	84221404 	addi	r16,r16,-30640
 40169d4:	80c00017 	ldw	r3,0(r16)
 40169d8:	dc400415 	stw	r17,16(sp)
 40169dc:	dfc00515 	stw	ra,20(sp)
 40169e0:	18805217 	ldw	r2,328(r3)
 40169e4:	2023883a 	mov	r17,r4
 40169e8:	10003726 	beq	r2,zero,4016ac8 <__register_exitproc+0x104>
 40169ec:	10c00117 	ldw	r3,4(r2)
 40169f0:	010007c4 	movi	r4,31
 40169f4:	20c00e16 	blt	r4,r3,4016a30 <__register_exitproc+0x6c>
 40169f8:	1a000044 	addi	r8,r3,1
 40169fc:	8800221e 	bne	r17,zero,4016a88 <__register_exitproc+0xc4>
 4016a00:	18c00084 	addi	r3,r3,2
 4016a04:	18c7883a 	add	r3,r3,r3
 4016a08:	18c7883a 	add	r3,r3,r3
 4016a0c:	12000115 	stw	r8,4(r2)
 4016a10:	10c7883a 	add	r3,r2,r3
 4016a14:	19400015 	stw	r5,0(r3)
 4016a18:	0005883a 	mov	r2,zero
 4016a1c:	dfc00517 	ldw	ra,20(sp)
 4016a20:	dc400417 	ldw	r17,16(sp)
 4016a24:	dc000317 	ldw	r16,12(sp)
 4016a28:	dec00604 	addi	sp,sp,24
 4016a2c:	f800283a 	ret
 4016a30:	00800034 	movhi	r2,0
 4016a34:	10800004 	addi	r2,r2,0
 4016a38:	10002626 	beq	r2,zero,4016ad4 <__register_exitproc+0x110>
 4016a3c:	01006404 	movi	r4,400
 4016a40:	d9400015 	stw	r5,0(sp)
 4016a44:	d9800115 	stw	r6,4(sp)
 4016a48:	d9c00215 	stw	r7,8(sp)
 4016a4c:	00000000 	call	0 <__alt_mem_new_sdram_controller_0>
 4016a50:	d9400017 	ldw	r5,0(sp)
 4016a54:	d9800117 	ldw	r6,4(sp)
 4016a58:	d9c00217 	ldw	r7,8(sp)
 4016a5c:	10001d26 	beq	r2,zero,4016ad4 <__register_exitproc+0x110>
 4016a60:	81000017 	ldw	r4,0(r16)
 4016a64:	10000115 	stw	zero,4(r2)
 4016a68:	02000044 	movi	r8,1
 4016a6c:	22405217 	ldw	r9,328(r4)
 4016a70:	0007883a 	mov	r3,zero
 4016a74:	12400015 	stw	r9,0(r2)
 4016a78:	20805215 	stw	r2,328(r4)
 4016a7c:	10006215 	stw	zero,392(r2)
 4016a80:	10006315 	stw	zero,396(r2)
 4016a84:	883fde26 	beq	r17,zero,4016a00 <_gp+0xffff61c4>
 4016a88:	18c9883a 	add	r4,r3,r3
 4016a8c:	2109883a 	add	r4,r4,r4
 4016a90:	1109883a 	add	r4,r2,r4
 4016a94:	21802215 	stw	r6,136(r4)
 4016a98:	01800044 	movi	r6,1
 4016a9c:	12406217 	ldw	r9,392(r2)
 4016aa0:	30cc983a 	sll	r6,r6,r3
 4016aa4:	4992b03a 	or	r9,r9,r6
 4016aa8:	12406215 	stw	r9,392(r2)
 4016aac:	21c04215 	stw	r7,264(r4)
 4016ab0:	01000084 	movi	r4,2
 4016ab4:	893fd21e 	bne	r17,r4,4016a00 <_gp+0xffff61c4>
 4016ab8:	11006317 	ldw	r4,396(r2)
 4016abc:	218cb03a 	or	r6,r4,r6
 4016ac0:	11806315 	stw	r6,396(r2)
 4016ac4:	003fce06 	br	4016a00 <_gp+0xffff61c4>
 4016ac8:	18805304 	addi	r2,r3,332
 4016acc:	18805215 	stw	r2,328(r3)
 4016ad0:	003fc606 	br	40169ec <_gp+0xffff61b0>
 4016ad4:	00bfffc4 	movi	r2,-1
 4016ad8:	003fd006 	br	4016a1c <_gp+0xffff61e0>

04016adc <__call_exitprocs>:
 4016adc:	defff504 	addi	sp,sp,-44
 4016ae0:	df000915 	stw	fp,36(sp)
 4016ae4:	dd400615 	stw	r21,24(sp)
 4016ae8:	dc800315 	stw	r18,12(sp)
 4016aec:	dfc00a15 	stw	ra,40(sp)
 4016af0:	ddc00815 	stw	r23,32(sp)
 4016af4:	dd800715 	stw	r22,28(sp)
 4016af8:	dd000515 	stw	r20,20(sp)
 4016afc:	dcc00415 	stw	r19,16(sp)
 4016b00:	dc400215 	stw	r17,8(sp)
 4016b04:	dc000115 	stw	r16,4(sp)
 4016b08:	d9000015 	stw	r4,0(sp)
 4016b0c:	2839883a 	mov	fp,r5
 4016b10:	04800044 	movi	r18,1
 4016b14:	057fffc4 	movi	r21,-1
 4016b18:	008100b4 	movhi	r2,1026
 4016b1c:	10a21404 	addi	r2,r2,-30640
 4016b20:	12000017 	ldw	r8,0(r2)
 4016b24:	45005217 	ldw	r20,328(r8)
 4016b28:	44c05204 	addi	r19,r8,328
 4016b2c:	a0001c26 	beq	r20,zero,4016ba0 <__call_exitprocs+0xc4>
 4016b30:	a0800117 	ldw	r2,4(r20)
 4016b34:	15ffffc4 	addi	r23,r2,-1
 4016b38:	b8000d16 	blt	r23,zero,4016b70 <__call_exitprocs+0x94>
 4016b3c:	14000044 	addi	r16,r2,1
 4016b40:	8421883a 	add	r16,r16,r16
 4016b44:	8421883a 	add	r16,r16,r16
 4016b48:	84402004 	addi	r17,r16,128
 4016b4c:	a463883a 	add	r17,r20,r17
 4016b50:	a421883a 	add	r16,r20,r16
 4016b54:	e0001e26 	beq	fp,zero,4016bd0 <__call_exitprocs+0xf4>
 4016b58:	80804017 	ldw	r2,256(r16)
 4016b5c:	e0801c26 	beq	fp,r2,4016bd0 <__call_exitprocs+0xf4>
 4016b60:	bdffffc4 	addi	r23,r23,-1
 4016b64:	843fff04 	addi	r16,r16,-4
 4016b68:	8c7fff04 	addi	r17,r17,-4
 4016b6c:	bd7ff91e 	bne	r23,r21,4016b54 <_gp+0xffff6318>
 4016b70:	00800034 	movhi	r2,0
 4016b74:	10800004 	addi	r2,r2,0
 4016b78:	10000926 	beq	r2,zero,4016ba0 <__call_exitprocs+0xc4>
 4016b7c:	a0800117 	ldw	r2,4(r20)
 4016b80:	1000301e 	bne	r2,zero,4016c44 <__call_exitprocs+0x168>
 4016b84:	a0800017 	ldw	r2,0(r20)
 4016b88:	10003226 	beq	r2,zero,4016c54 <__call_exitprocs+0x178>
 4016b8c:	a009883a 	mov	r4,r20
 4016b90:	98800015 	stw	r2,0(r19)
 4016b94:	00000000 	call	0 <__alt_mem_new_sdram_controller_0>
 4016b98:	9d000017 	ldw	r20,0(r19)
 4016b9c:	a03fe41e 	bne	r20,zero,4016b30 <_gp+0xffff62f4>
 4016ba0:	dfc00a17 	ldw	ra,40(sp)
 4016ba4:	df000917 	ldw	fp,36(sp)
 4016ba8:	ddc00817 	ldw	r23,32(sp)
 4016bac:	dd800717 	ldw	r22,28(sp)
 4016bb0:	dd400617 	ldw	r21,24(sp)
 4016bb4:	dd000517 	ldw	r20,20(sp)
 4016bb8:	dcc00417 	ldw	r19,16(sp)
 4016bbc:	dc800317 	ldw	r18,12(sp)
 4016bc0:	dc400217 	ldw	r17,8(sp)
 4016bc4:	dc000117 	ldw	r16,4(sp)
 4016bc8:	dec00b04 	addi	sp,sp,44
 4016bcc:	f800283a 	ret
 4016bd0:	a0800117 	ldw	r2,4(r20)
 4016bd4:	80c00017 	ldw	r3,0(r16)
 4016bd8:	10bfffc4 	addi	r2,r2,-1
 4016bdc:	15c01426 	beq	r2,r23,4016c30 <__call_exitprocs+0x154>
 4016be0:	80000015 	stw	zero,0(r16)
 4016be4:	183fde26 	beq	r3,zero,4016b60 <_gp+0xffff6324>
 4016be8:	95c8983a 	sll	r4,r18,r23
 4016bec:	a0806217 	ldw	r2,392(r20)
 4016bf0:	a5800117 	ldw	r22,4(r20)
 4016bf4:	2084703a 	and	r2,r4,r2
 4016bf8:	10000b26 	beq	r2,zero,4016c28 <__call_exitprocs+0x14c>
 4016bfc:	a0806317 	ldw	r2,396(r20)
 4016c00:	2088703a 	and	r4,r4,r2
 4016c04:	20000c1e 	bne	r4,zero,4016c38 <__call_exitprocs+0x15c>
 4016c08:	89400017 	ldw	r5,0(r17)
 4016c0c:	d9000017 	ldw	r4,0(sp)
 4016c10:	183ee83a 	callr	r3
 4016c14:	a0800117 	ldw	r2,4(r20)
 4016c18:	15bfbf1e 	bne	r2,r22,4016b18 <_gp+0xffff62dc>
 4016c1c:	98800017 	ldw	r2,0(r19)
 4016c20:	153fcf26 	beq	r2,r20,4016b60 <_gp+0xffff6324>
 4016c24:	003fbc06 	br	4016b18 <_gp+0xffff62dc>
 4016c28:	183ee83a 	callr	r3
 4016c2c:	003ff906 	br	4016c14 <_gp+0xffff63d8>
 4016c30:	a5c00115 	stw	r23,4(r20)
 4016c34:	003feb06 	br	4016be4 <_gp+0xffff63a8>
 4016c38:	89000017 	ldw	r4,0(r17)
 4016c3c:	183ee83a 	callr	r3
 4016c40:	003ff406 	br	4016c14 <_gp+0xffff63d8>
 4016c44:	a0800017 	ldw	r2,0(r20)
 4016c48:	a027883a 	mov	r19,r20
 4016c4c:	1029883a 	mov	r20,r2
 4016c50:	003fb606 	br	4016b2c <_gp+0xffff62f0>
 4016c54:	0005883a 	mov	r2,zero
 4016c58:	003ffb06 	br	4016c48 <_gp+0xffff640c>

04016c5c <_exit>:
 *
 * ALT_EXIT is mapped onto the _exit() system call in alt_syscall.h
 */

void ALT_EXIT (int exit_code)
{
 4016c5c:	defffd04 	addi	sp,sp,-12
 4016c60:	df000215 	stw	fp,8(sp)
 4016c64:	df000204 	addi	fp,sp,8
 4016c68:	e13fff15 	stw	r4,-4(fp)
  ALT_LOG_PRINT_BOOT("[alt_exit.c] Entering _exit() function.\r\n");
  ALT_LOG_PRINT_BOOT("[alt_exit.c] Exit code from main was %d.\r\n",exit_code);
  /* Stop all other threads */

  ALT_LOG_PRINT_BOOT("[alt_exit.c] Calling ALT_OS_STOP().\r\n");
  ALT_OS_STOP();
 4016c6c:	0001883a 	nop
 4016c70:	e0bfff17 	ldw	r2,-4(fp)
 4016c74:	e0bffe15 	stw	r2,-8(fp)
/*
 * Routine called on exit.
 */
static ALT_INLINE ALT_ALWAYS_INLINE void alt_sim_halt(int exit_code)
{
  register int r2 asm ("r2") = exit_code;
 4016c78:	e0bffe17 	ldw	r2,-8(fp)
  __asm__ volatile ("\n0:\n\taddi %0,%0, -1\n\tbgt %0,zero,0b" : : "r" (ALT_CPU_FREQ/100) ); /* Delay for >30ms */

  __asm__ volatile ("break 2" : : "r"(r2), "r"(r3) ALT_GMON_DATA );

#else /* !DEBUG_STUB */
  if (r2) {
 4016c7c:	10000226 	beq	r2,zero,4016c88 <_exit+0x2c>
    ALT_SIM_FAIL();
 4016c80:	002af070 	cmpltui	zero,zero,43969
 4016c84:	00000106 	br	4016c8c <_exit+0x30>
  } else {
    ALT_SIM_PASS();
 4016c88:	002af0b0 	cmpltui	zero,zero,43970
  ALT_SIM_HALT(exit_code);

  /* spin forever, since there's no where to go back to */

  ALT_LOG_PRINT_BOOT("[alt_exit.c] Spinning forever.\r\n");
  while (1);
 4016c8c:	003fff06 	br	4016c8c <_gp+0xffff6450>
