
lab6_part5_APP.elf:     file format elf32-littlenios2
lab6_part5_APP.elf
architecture: nios2:r1, flags 0x00000112:
EXEC_P, HAS_SYMS, D_PAGED
start address 0x00004230

Program Header:
    LOAD off    0x00001000 vaddr 0x00004000 paddr 0x00004000 align 2**12
         filesz 0x00000020 memsz 0x00000020 flags r-x
    LOAD off    0x00001020 vaddr 0x00004020 paddr 0x00004020 align 2**12
         filesz 0x00002518 memsz 0x00002518 flags r-x
    LOAD off    0x00003538 vaddr 0x00006538 paddr 0x00006818 align 2**12
         filesz 0x000002e0 memsz 0x000002e0 flags rw-
    LOAD off    0x00003af8 vaddr 0x00006af8 paddr 0x00006af8 align 2**12
         filesz 0x00000000 memsz 0x00000118 flags rw-

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .entry        00000020  00004000  00004000  00001000  2**5
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .exceptions   00000210  00004020  00004020  00001020  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .text         0000220c  00004230  00004230  00001230  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  3 .rodata       000000fc  0000643c  0000643c  0000343c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .rwdata       000002e0  00006538  00006818  00003538  2**2
                  CONTENTS, ALLOC, LOAD, DATA, SMALL_DATA
  5 .bss          00000118  00006af8  00006af8  00003af8  2**2
                  ALLOC, SMALL_DATA
  6 .onchip_memory2_0 00000000  00006c10  00006c10  00003818  2**0
                  CONTENTS
  7 .comment      00000023  00000000  00000000  00003818  2**0
                  CONTENTS, READONLY
  8 .debug_aranges 00000598  00000000  00000000  00003840  2**3
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_info   00007768  00000000  00000000  00003dd8  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_abbrev 000027d6  00000000  00000000  0000b540  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_line   00002c1e  00000000  00000000  0000dd16  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_frame  00000ad4  00000000  00000000  00010934  2**2
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_str    00001be5  00000000  00000000  00011408  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_loc    000013ee  00000000  00000000  00012fed  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_alt_sim_info 00000010  00000000  00000000  000143dc  2**2
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_ranges 000002a0  00000000  00000000  000143f0  2**3
                  CONTENTS, READONLY, DEBUGGING
 17 .thread_model 00000003  00000000  00000000  00015fe2  2**0
                  CONTENTS, READONLY
 18 .cpu          0000000c  00000000  00000000  00015fe5  2**0
                  CONTENTS, READONLY
 19 .qsys         00000001  00000000  00000000  00015ff1  2**0
                  CONTENTS, READONLY
 20 .simulation_enabled 00000001  00000000  00000000  00015ff2  2**0
                  CONTENTS, READONLY
 21 .sysid_hash   00000004  00000000  00000000  00015ff3  2**0
                  CONTENTS, READONLY
 22 .sysid_base   00000004  00000000  00000000  00015ff7  2**0
                  CONTENTS, READONLY
 23 .sysid_time   00000004  00000000  00000000  00015ffb  2**0
                  CONTENTS, READONLY
 24 .stderr_dev   0000000b  00000000  00000000  00015fff  2**0
                  CONTENTS, READONLY
 25 .stdin_dev    0000000b  00000000  00000000  0001600a  2**0
                  CONTENTS, READONLY
 26 .stdout_dev   0000000b  00000000  00000000  00016015  2**0
                  CONTENTS, READONLY
 27 .sopc_system_name 0000000b  00000000  00000000  00016020  2**0
                  CONTENTS, READONLY
 28 .quartus_project_dir 0000002e  00000000  00000000  0001602b  2**0
                  CONTENTS, READONLY
 29 .jdi          00005213  00000000  00000000  00016059  2**0
                  CONTENTS, READONLY
 30 .sopcinfo     00042d14  00000000  00000000  0001b26c  2**0
                  CONTENTS, READONLY
SYMBOL TABLE:
00004000 l    d  .entry	00000000 .entry
00004020 l    d  .exceptions	00000000 .exceptions
00004230 l    d  .text	00000000 .text
0000643c l    d  .rodata	00000000 .rodata
00006538 l    d  .rwdata	00000000 .rwdata
00006af8 l    d  .bss	00000000 .bss
00006c10 l    d  .onchip_memory2_0	00000000 .onchip_memory2_0
00000000 l    d  .comment	00000000 .comment
00000000 l    d  .debug_aranges	00000000 .debug_aranges
00000000 l    d  .debug_info	00000000 .debug_info
00000000 l    d  .debug_abbrev	00000000 .debug_abbrev
00000000 l    d  .debug_line	00000000 .debug_line
00000000 l    d  .debug_frame	00000000 .debug_frame
00000000 l    d  .debug_str	00000000 .debug_str
00000000 l    d  .debug_loc	00000000 .debug_loc
00000000 l    d  .debug_alt_sim_info	00000000 .debug_alt_sim_info
00000000 l    d  .debug_ranges	00000000 .debug_ranges
00000000 l    df *ABS*	00000000 ../lab6_part5_APP_bsp//obj/HAL/src/crt0.o
00004268 l       .text	00000000 alt_after_alt_main
00000000 l    df *ABS*	00000000 alt_irq_handler.c
00000000 l    df *ABS*	00000000 alt_instruction_exception_entry.c
00000000 l    df *ABS*	00000000 lab6_part5.c
00000000 l    df *ABS*	00000000 exit.c
00000000 l    df *ABS*	00000000 printf.c
00000000 l    df *ABS*	00000000 puts.c
00000000 l    df *ABS*	00000000 strlen.c
00000000 l    df *ABS*	00000000 vfprintf.c
000047ac l     F .text	0000006c print_repeat
00000000 l    df *ABS*	00000000 __call_atexit.c
00000000 l    df *ABS*	00000000 fvwrite_small_dev.c
00000000 l    df *ABS*	00000000 impure.c
00006538 l     O .rwdata	000000e0 impure_data
00000000 l    df *ABS*	00000000 writer.c
00000000 l    df *ABS*	00000000 int_errno.c
00000000 l    df *ABS*	00000000 lib2-divmod.c
00000000 l    df *ABS*	00000000 lib2-mul.c
00000000 l    df *ABS*	00000000 alt_exit.c
00000000 l    df *ABS*	00000000 alt_iic.c
00000000 l    df *ABS*	00000000 alt_iic_isr_register.c
00000000 l    df *ABS*	00000000 alt_irq_vars.c
00000000 l    df *ABS*	00000000 alt_load.c
000054b0 l     F .text	00000068 alt_load_section
00000000 l    df *ABS*	00000000 alt_main.c
00000000 l    df *ABS*	00000000 alt_write.c
00005608 l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_sys_init.c
00005744 l     F .text	00000034 alt_dev_reg
00006618 l     O .rwdata	0000002c jtag_uart_0
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_fd.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_read.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_write.c
00000000 l    df *ABS*	00000000 alt_close.c
00005a28 l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_dcache_flush_all.c
00000000 l    df *ABS*	00000000 alt_dev.c
00005b5c l     F .text	0000002c alt_dev_null_write
00000000 l    df *ABS*	00000000 alt_dev_llist_insert.c
00005b88 l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_errno.c
00000000 l    df *ABS*	00000000 alt_icache_flush_all.c
00000000 l    df *ABS*	00000000 alt_io_redirect.c
00005d24 l     F .text	000000e4 alt_open_fd
00000000 l    df *ABS*	00000000 alt_open.c
00005e84 l     F .text	0000003c alt_get_errno
00005ec0 l     F .text	000000ec alt_file_locked
00000000 l    df *ABS*	00000000 alt_release_fd.c
00000000 l    df *ABS*	00000000 altera_nios2_gen2_irq.c
00000000 l    df *ABS*	00000000 alt_find_dev.c
00000000 l    df *ABS*	00000000 alt_find_file.c
00000000 l    df *ABS*	00000000 alt_get_fd.c
00000000 l    df *ABS*	00000000 memcmp.c
00006b0c g     O .bss	00000004 alt_instruction_exception_handler
0000559c g     F .text	0000006c alt_main
000046fc g     F .text	00000080 _puts_r
00006b10 g     O .bss	00000100 alt_irq
00006818 g       *ABS*	00000000 __flash_rwdata_start
000046b0 g     F .text	0000004c printf
0000618c g     F .text	00000024 altera_nios2_gen2_irq_init
00004000 g     F .entry	0000000c __reset
00004020 g       *ABS*	00000000 __flash_exceptions_start
00006af8 g     O .bss	00000004 errno
00006b04 g     O .bss	00000004 alt_argv
0000e7ec g       *ABS*	00000000 _gp
0000666c g     O .rwdata	00000180 alt_fd_list
000061b0 g     F .text	00000090 alt_find_dev
0000426c g     F .text	000000f8 test_a
00005e08 g     F .text	0000007c alt_io_redirect
0000477c g     F .text	00000014 puts
00005c88 g     F .text	0000009c alt_exception_cause_generated_bad_addr
000058a8 g     F .text	000000ec altera_avalon_jtag_uart_read
00004674 g     F .text	0000003c _printf_r
00004000 g       *ABS*	00000000 __alt_mem_onchip_memory2_0
000050f8 g     F .text	00000064 .hidden __udivsi3
000067ec g     O .rwdata	00000004 ledPtr
00006810 g     O .rwdata	00000004 alt_max_fd
000067f4 g     O .rwdata	00000004 _global_impure_ptr
00006c10 g       *ABS*	00000000 __bss_end
000053c0 g     F .text	000000f0 alt_iic_isr_register
00005374 g     F .text	0000004c alt_ic_irq_enabled
00006afc g     O .bss	00000004 alt_irq_active
000040fc g     F .exceptions	000000d4 alt_irq_handler
00006644 g     O .rwdata	00000028 alt_dev_null
00005b3c g     F .text	00000020 alt_dcache_flush_all
00006818 g       *ABS*	00000000 __ram_rwdata_end
00006808 g     O .rwdata	00000008 alt_dev_list
00005644 g     F .text	00000100 write
00006538 g       *ABS*	00000000 __ram_rodata_end
0000515c g     F .text	00000058 .hidden __umodsi3
00006c10 g       *ABS*	00000000 end
000041d0 g     F .exceptions	00000060 alt_instruction_exception_entry
00008000 g       *ABS*	00000000 __alt_stack_pointer
00005994 g     F .text	00000094 altera_avalon_jtag_uart_write
00004818 g     F .text	0000052c ___vfprintf_internal_r
00004d60 g     F .text	00000190 __call_exitprocs
00004230 g     F .text	0000003c _start
000057b0 g     F .text	00000038 alt_sys_init
000051b4 g     F .text	00000028 .hidden __mulsi3
00006538 g       *ABS*	00000000 __ram_rwdata_start
0000643c g       *ABS*	00000000 __ram_rodata_start
000057e8 g     F .text	00000060 altera_avalon_jtag_uart_read_fd
00006348 g     F .text	000000c4 alt_get_fd
0000640c g     F .text	00000030 memcmp
00006c10 g       *ABS*	00000000 __alt_stack_base
00006240 g     F .text	00000108 alt_find_file
00005bc4 g     F .text	000000a4 alt_dev_llist_insert
00004364 g     F .text	00000110 test_b
00004ef0 g     F .text	000000b8 __sfvwrite_small_dev
00006af8 g       *ABS*	00000000 __bss_start
000045cc g     F .text	00000088 main
00006b08 g     O .bss	00000004 alt_envp
00005848 g     F .text	00000060 altera_avalon_jtag_uart_write_fd
0000458c g     F .text	00000040 key1_isr
00006814 g     O .rwdata	00000004 alt_errno
00005000 g     F .text	00000084 .hidden __divsi3
0000643c g       *ABS*	00000000 __flash_rodata_start
00005778 g     F .text	00000038 alt_irq_init
00006108 g     F .text	00000084 alt_release_fd
00004fa8 g     F .text	00000058 _write_r
000067f8 g     O .rwdata	00000004 _impure_ptr
00006b00 g     O .bss	00000004 alt_argc
00004020 g       .exceptions	00000000 alt_irq_entry
00006800 g     O .rwdata	00000008 alt_fs_list
00004020 g       *ABS*	00000000 __ram_exceptions_start
00005210 g     F .text	00000050 alt_ic_isr_register
00006818 g       *ABS*	00000000 _edata
00006c10 g       *ABS*	00000000 _end
00004230 g       *ABS*	00000000 __ram_exceptions_end
000052e8 g     F .text	0000008c alt_ic_irq_disable
00004654 g     F .text	00000020 exit
00005084 g     F .text	00000074 .hidden __modsi3
00008000 g       *ABS*	00000000 __alt_data_end
00004020 g     F .exceptions	00000000 alt_exception
000051dc g     F .text	00000034 _exit
00004790 g     F .text	0000001c strlen
00005fac g     F .text	0000015c open
000067f0 g     O .rwdata	00000004 key1Ptr
00005c68 g     F .text	00000020 alt_icache_flush_all
000067fc g     O .rwdata	00000004 alt_priority_mask
00005260 g     F .text	00000088 alt_ic_irq_enable
00004d44 g     F .text	0000001c __vfprintf_internal
00005a64 g     F .text	000000d8 close
00005518 g     F .text	00000084 alt_load
00004474 g     F .text	00000118 test_c



Disassembly of section .entry:

00004000 <__reset>:
 * Jump to the _start entry point in the .text section if reset code
 * is allowed or if optimizing for RTL simulation.
 */
#if defined(ALT_ALLOW_CODE_AT_RESET) || defined(ALT_SIM_OPTIMIZE)
    /* Jump to the _start entry point in the .text section. */
    movhi r1, %hi(_start)
    4000:	00400034 	movhi	at,0
    ori r1, r1, %lo(_start)
    4004:	08508c14 	ori	at,at,16944
    jmp r1
    4008:	0800683a 	jmp	at
	...

Disassembly of section .exceptions:

00004020 <alt_exception>:

#else /* ALT_EXCEPTION_STACK disabled */
        /* 
         * Reserve space on normal stack for registers about to be pushed.
         */
        addi  sp, sp, -76
    4020:	deffed04 	addi	sp,sp,-76
         * documentation for details).
         *
         * Leave a gap in the stack frame at 4(sp) for the muldiv handler to
         * store zero into.
         */
        stw   ra,  0(sp)
    4024:	dfc00015 	stw	ra,0(sp)
        stw   r1,   8(sp)
    4028:	d8400215 	stw	at,8(sp)
        stw   r2,  12(sp)
    402c:	d8800315 	stw	r2,12(sp)
        stw   r3,  16(sp)
    4030:	d8c00415 	stw	r3,16(sp)
        stw   r4,  20(sp)
    4034:	d9000515 	stw	r4,20(sp)
        stw   r5,  24(sp)
    4038:	d9400615 	stw	r5,24(sp)
        stw   r6,  28(sp)
    403c:	d9800715 	stw	r6,28(sp)
        stw   r7,  32(sp)
    4040:	d9c00815 	stw	r7,32(sp)
        rdctl r5, estatus   /* Read early to avoid usage stall */
    4044:	000b307a 	rdctl	r5,estatus
        stw   r8,  36(sp)
    4048:	da000915 	stw	r8,36(sp)
        stw   r9,  40(sp)
    404c:	da400a15 	stw	r9,40(sp)
        stw   r10, 44(sp)
    4050:	da800b15 	stw	r10,44(sp)
        stw   r11, 48(sp)
    4054:	dac00c15 	stw	r11,48(sp)
        stw   r12, 52(sp)
    4058:	db000d15 	stw	r12,52(sp)
        stw   r13, 56(sp)
    405c:	db400e15 	stw	r13,56(sp)
        stw   r14, 60(sp)
    4060:	db800f15 	stw	r14,60(sp)
        stw   r15, 64(sp)
    4064:	dbc01015 	stw	r15,64(sp)
        /*
         * ea-4 contains the address of the instruction being executed
         * when the exception occured. For interrupt exceptions, we will
         * will be re-issue the isntruction. Store it in 72(sp)
         */
        stw   r5,  68(sp)  /* estatus */
    4068:	d9401115 	stw	r5,68(sp)
        addi  r15, ea, -4  /* instruction that caused exception */
    406c:	ebffff04 	addi	r15,ea,-4
        stw   r15,  72(sp)
    4070:	dbc01215 	stw	r15,72(sp)
#else
        /*
         * Test to see if the exception was a software exception or caused 
         * by an external interrupt, and vector accordingly.
         */
        rdctl r4, ipending
    4074:	0009313a 	rdctl	r4,ipending
        andi  r2, r5, 1
    4078:	2880004c 	andi	r2,r5,1
        beq   r2, zero, .Lnot_irq
    407c:	10000326 	beq	r2,zero,408c <alt_exception+0x6c>
        beq   r4, zero, .Lnot_irq
    4080:	20000226 	beq	r4,zero,408c <alt_exception+0x6c>
        /*
         * Now that all necessary registers have been preserved, call 
         * alt_irq_handler() to process the interrupts.
         */

        call alt_irq_handler
    4084:	00040fc0 	call	40fc <alt_irq_handler>

        .section .exceptions.irqreturn, "xa"

        br    .Lexception_exit
    4088:	00000706 	br	40a8 <alt_exception+0x88>
         * upon completion, so we write ea (address of instruction *after*
         * the one where the exception occured) into 72(sp). The actual
         * instruction that caused the exception is written in r2, which these
         * handlers will utilize.
         */
        stw ea, 72(sp) /* EA is PC+4 so will skip over instruction causing exception */
    408c:	df401215 	stw	ea,72(sp)
.Lunknown_16bit:
        addi.n r4, r4, 2 /* Need PC+2 to skip over instruction causing exception */
        stw r4, 72(sp)

#else /* CDX is not Enabled and all instructions are 32bits */
        ldw r2, -4(ea) /* Instruction value that caused exception */
    4090:	e8bfff17 	ldw	r2,-4(ea)
         * debugger is present) or go into an infinite loop since the
         * handling behavior is undefined; in that case we will not return here.
         */

        /* Load exception-causing address as first argument (r4) */
        addi   r4, ea, -4
    4094:	e93fff04 	addi	r4,ea,-4

        /* Call the instruction-exception entry */
        call   alt_instruction_exception_entry
    4098:	00041d00 	call	41d0 <alt_instruction_exception_entry>
         * instruction
         *
         * Return code was 0: Skip. The instruction after the exception is
         * already stored in 72(sp).
         */
        bne   r2, r0, .Lexception_exit
    409c:	1000021e 	bne	r2,zero,40a8 <alt_exception+0x88>

        /*
         * Otherwise, modify 72(sp) to re-issue the instruction that caused the
         * exception.
         */
        addi  r15, ea, -4  /* instruction that caused exception */
    40a0:	ebffff04 	addi	r15,ea,-4
        stw   r15,  72(sp)
    40a4:	dbc01215 	stw	r15,72(sp)
        /* 
         * Restore the saved registers, so that all general purpose registers 
         * have been restored to their state at the time the interrupt occured.
         */

        ldw   r5,  68(sp)
    40a8:	d9401117 	ldw	r5,68(sp)
        ldw   ea,  72(sp)  /* This becomes the PC once eret is executed */
    40ac:	df401217 	ldw	ea,72(sp)
        ldw   ra,   0(sp)
    40b0:	dfc00017 	ldw	ra,0(sp)

        wrctl estatus, r5
    40b4:	2801707a 	wrctl	estatus,r5

        ldw   r1,   8(sp)
    40b8:	d8400217 	ldw	at,8(sp)
        ldw   r2,  12(sp)
    40bc:	d8800317 	ldw	r2,12(sp)
        ldw   r3,  16(sp)
    40c0:	d8c00417 	ldw	r3,16(sp)
        ldw   r4,  20(sp)
    40c4:	d9000517 	ldw	r4,20(sp)
        ldw   r5,  24(sp)
    40c8:	d9400617 	ldw	r5,24(sp)
        ldw   r6,  28(sp)
    40cc:	d9800717 	ldw	r6,28(sp)
        ldw   r7,  32(sp)
    40d0:	d9c00817 	ldw	r7,32(sp)

#if defined(ALT_EXCEPTION_STACK) && defined(ALT_STACK_CHECK)
        ldw   et, %gprel(alt_exception_old_stack_limit)(gp)
#endif

        ldw   r8,  36(sp)
    40d4:	da000917 	ldw	r8,36(sp)
        ldw   r9,  40(sp)
    40d8:	da400a17 	ldw	r9,40(sp)
        ldw   r10, 44(sp)
    40dc:	da800b17 	ldw	r10,44(sp)
        ldw   r11, 48(sp)
    40e0:	dac00c17 	ldw	r11,48(sp)
        ldw   r12, 52(sp)
    40e4:	db000d17 	ldw	r12,52(sp)
        ldw   r13, 56(sp)
    40e8:	db400e17 	ldw	r13,56(sp)
        ldw   r14, 60(sp)
    40ec:	db800f17 	ldw	r14,60(sp)
        ldw   r15, 64(sp)
    40f0:	dbc01017 	ldw	r15,64(sp)
        stw   et, %gprel(alt_stack_limit_value)(gp)
        stw   zero, %gprel(alt_exception_old_stack_limit)(gp)
#endif /* ALT_STACK_CHECK */
        ldw   sp,  76(sp)
#else /* ALT_EXCEPTION_STACK disabled */
        addi  sp, sp, 76
    40f4:	dec01304 	addi	sp,sp,76

        /*
         * Return to the interrupted instruction.
         */

        eret
    40f8:	ef80083a 	eret

000040fc <alt_irq_handler>:
 * instruction is present if the macro ALT_CI_INTERRUPT_VECTOR defined.
 */

void alt_irq_handler (void) __attribute__ ((section (".exceptions")));
void alt_irq_handler (void)
{
    40fc:	defff904 	addi	sp,sp,-28
    4100:	dfc00615 	stw	ra,24(sp)
    4104:	df000515 	stw	fp,20(sp)
    4108:	df000504 	addi	fp,sp,20
  
  /*
   * Notify the operating system that we are at interrupt level.
   */ 
  
  ALT_OS_INT_ENTER();
    410c:	0001883a 	nop
#ifndef NIOS2_EIC_PRESENT
static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_irq_pending (void)
{
  alt_u32 active;

  NIOS2_READ_IPENDING (active);
    4110:	0005313a 	rdctl	r2,ipending
    4114:	e0bffe15 	stw	r2,-8(fp)

  return active;
    4118:	e0bffe17 	ldw	r2,-8(fp)
   * Consider the case where the high priority interupt is asserted during
   * the interrupt entry sequence for a lower priority interrupt to see why
   * this is the case.
   */

  active = alt_irq_pending ();
    411c:	e0bffb15 	stw	r2,-20(fp)

  do
  {
    i = 0;
    4120:	e03ffd15 	stw	zero,-12(fp)
    mask = 1;
    4124:	00800044 	movi	r2,1
    4128:	e0bffc15 	stw	r2,-16(fp)
     * called to clear the interrupt condition.
     */

    do
    {
      if (active & mask)
    412c:	e0fffb17 	ldw	r3,-20(fp)
    4130:	e0bffc17 	ldw	r2,-16(fp)
    4134:	1884703a 	and	r2,r3,r2
    4138:	10001426 	beq	r2,zero,418c <alt_irq_handler+0x90>
      { 
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
        alt_irq[i].handler(alt_irq[i].context); 
    413c:	00800034 	movhi	r2,0
    4140:	109ac404 	addi	r2,r2,27408
    4144:	e0fffd17 	ldw	r3,-12(fp)
    4148:	180690fa 	slli	r3,r3,3
    414c:	10c5883a 	add	r2,r2,r3
    4150:	10c00017 	ldw	r3,0(r2)
    4154:	00800034 	movhi	r2,0
    4158:	109ac404 	addi	r2,r2,27408
    415c:	e13ffd17 	ldw	r4,-12(fp)
    4160:	200890fa 	slli	r4,r4,3
    4164:	1105883a 	add	r2,r2,r4
    4168:	10800104 	addi	r2,r2,4
    416c:	10800017 	ldw	r2,0(r2)
    4170:	1009883a 	mov	r4,r2
    4174:	183ee83a 	callr	r3
#else
        alt_irq[i].handler(alt_irq[i].context, i); 
#endif
        break;
    4178:	0001883a 	nop
#ifndef NIOS2_EIC_PRESENT
static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_irq_pending (void)
{
  alt_u32 active;

  NIOS2_READ_IPENDING (active);
    417c:	0005313a 	rdctl	r2,ipending
    4180:	e0bfff15 	stw	r2,-4(fp)

  return active;
    4184:	e0bfff17 	ldw	r2,-4(fp)
    4188:	00000706 	br	41a8 <alt_irq_handler+0xac>
      }
      mask <<= 1;
    418c:	e0bffc17 	ldw	r2,-16(fp)
    4190:	1085883a 	add	r2,r2,r2
    4194:	e0bffc15 	stw	r2,-16(fp)
      i++;
    4198:	e0bffd17 	ldw	r2,-12(fp)
    419c:	10800044 	addi	r2,r2,1
    41a0:	e0bffd15 	stw	r2,-12(fp)

    } while (1);
    41a4:	003fe106 	br	412c <_gp+0xffff5940>

    active = alt_irq_pending ();
    41a8:	e0bffb15 	stw	r2,-20(fp)
    
  } while (active);
    41ac:	e0bffb17 	ldw	r2,-20(fp)
    41b0:	103fdb1e 	bne	r2,zero,4120 <_gp+0xffff5934>

  /*
   * Notify the operating system that interrupt processing is complete.
   */ 

  ALT_OS_INT_EXIT();
    41b4:	0001883a 	nop
}
    41b8:	0001883a 	nop
    41bc:	e037883a 	mov	sp,fp
    41c0:	dfc00117 	ldw	ra,4(sp)
    41c4:	df000017 	ldw	fp,0(sp)
    41c8:	dec00204 	addi	sp,sp,8
    41cc:	f800283a 	ret

000041d0 <alt_instruction_exception_entry>:
 * that handler if it has been registered. Absent a handler, it will
 * break break or hang as discussed below.
 */
int 
alt_instruction_exception_entry (alt_u32 exception_pc)
{
    41d0:	defffb04 	addi	sp,sp,-20
    41d4:	dfc00415 	stw	ra,16(sp)
    41d8:	df000315 	stw	fp,12(sp)
    41dc:	df000304 	addi	fp,sp,12
    41e0:	e13fff15 	stw	r4,-4(fp)
  cause = ( (cause & NIOS2_EXCEPTION_REG_CAUSE_MASK) >>
              NIOS2_EXCEPTION_REG_CAUSE_OFST );

  NIOS2_READ_BADADDR(badaddr);
#else
  cause = NIOS2_EXCEPTION_CAUSE_NOT_PRESENT;
    41e4:	00bfffc4 	movi	r2,-1
    41e8:	e0bffd15 	stw	r2,-12(fp)
  badaddr = 0;
    41ec:	e03ffe15 	stw	zero,-8(fp)
#endif /* NIOS2_HAS_EXTRA_EXCEPTION_INFO */

  if(alt_instruction_exception_handler) {
    41f0:	d0a0c817 	ldw	r2,-31968(gp)
    41f4:	10000726 	beq	r2,zero,4214 <alt_instruction_exception_entry+0x44>
     * Call handler. Its return value indicates whether the exception-causing
     * instruction should be re-issued. The code that called us,
     * alt_eceptions_entry.S, will look at this value and adjust the ea
     * register as necessary
     */
    return alt_instruction_exception_handler(cause, exception_pc, badaddr);
    41f8:	d0a0c817 	ldw	r2,-31968(gp)
    41fc:	e0fffd17 	ldw	r3,-12(fp)
    4200:	e1bffe17 	ldw	r6,-8(fp)
    4204:	e17fff17 	ldw	r5,-4(fp)
    4208:	1809883a 	mov	r4,r3
    420c:	103ee83a 	callr	r2
    4210:	00000206 	br	421c <alt_instruction_exception_entry+0x4c>
   *    (a peripheral which negates its interrupt output before its
   *    interrupt handler has been executed will cause spurious interrupts)
   */
  else {
#ifdef NIOS2_HAS_DEBUG_STUB
    NIOS2_BREAK();
    4214:	003da03a 	break	0
      ;
#endif /* NIOS2_HAS_DEBUG_STUB */
  }

  /* We should not get here. Remove compiler warning. */
  return NIOS2_EXCEPTION_RETURN_REISSUE_INST;
    4218:	0005883a 	mov	r2,zero
}
    421c:	e037883a 	mov	sp,fp
    4220:	dfc00117 	ldw	ra,4(sp)
    4224:	df000017 	ldw	fp,0(sp)
    4228:	dec00204 	addi	sp,sp,8
    422c:	f800283a 	ret

Disassembly of section .text:

00004230 <_start>:

    /*
     * Now that the caches are initialized, set up the stack pointer and global pointer.
     * The values provided by the linker are assumed to be correctly aligned.
     */
    movhi sp, %hi(__alt_stack_pointer)
    4230:	06c00034 	movhi	sp,0
    ori sp, sp, %lo(__alt_stack_pointer)
    4234:	dee00014 	ori	sp,sp,32768
    movhi gp, %hi(_gp)
    4238:	06800034 	movhi	gp,0
    ori gp, gp, %lo(_gp)
    423c:	d6b9fb14 	ori	gp,gp,59372
 */
#ifndef ALT_SIM_OPTIMIZE
    /* Log that the BSS is about to be cleared. */
    ALT_LOG_PUTS(alt_log_msg_bss)

    movhi r2, %hi(__bss_start)
    4240:	00800034 	movhi	r2,0
    ori r2, r2, %lo(__bss_start)
    4244:	109abe14 	ori	r2,r2,27384

    movhi r3, %hi(__bss_end)
    4248:	00c00034 	movhi	r3,0
    ori r3, r3, %lo(__bss_end)
    424c:	18db0414 	ori	r3,r3,27664

    beq r2, r3, 1f
    4250:	10c00326 	beq	r2,r3,4260 <_start+0x30>

0:
    stw zero, (r2)
    4254:	10000015 	stw	zero,0(r2)
    addi r2, r2, 4
    4258:	10800104 	addi	r2,r2,4
    bltu r2, r3, 0b
    425c:	10fffd36 	bltu	r2,r3,4254 <_gp+0xffff5a68>
     * section aren't defined until alt_load() has been called).
     */
    mov   et, zero
#endif

    call alt_load
    4260:	00055180 	call	5518 <alt_load>

    /* Log that alt_main is about to be called. */
    ALT_LOG_PUTS(alt_log_msg_alt_main)

    /* Call the C entry point. It should never return. */
    call alt_main
    4264:	000559c0 	call	559c <alt_main>

00004268 <alt_after_alt_main>:

    /* Wait in infinite loop in case alt_main does return. */
alt_after_alt_main:
    br alt_after_alt_main
    4268:	003fff06 	br	4268 <_gp+0xffff5a7c>

0000426c <test_a>:
// function that starts from a provided address and writes
// to the end of the ram in bytes
// address: starting memory address
// testData: data to write to memory
// ramSize: size of memory
void test_a(uint32 address, uint32 testData, int ramSize){
    426c:	defff704 	addi	sp,sp,-36
    4270:	dfc00815 	stw	ra,32(sp)
    4274:	df000715 	stw	fp,28(sp)
    4278:	df000704 	addi	fp,sp,28
    427c:	e13ffd15 	stw	r4,-12(fp)
    4280:	e17ffe15 	stw	r5,-8(fp)
    4284:	e1bfff15 	stw	r6,-4(fp)
	uint8 *bytePtr = (uint8*)address;	// pointer that increments by bytes
    4288:	e0bffd17 	ldw	r2,-12(fp)
    428c:	e0bffb15 	stw	r2,-20(fp)
	uint8 read = 0x00;					// variable for reading values back from memory
    4290:	e03ffc05 	stb	zero,-16(fp)

	*ledPtr = 0x00;	// clear leds
    4294:	d0a00017 	ldw	r2,-32768(gp)
    4298:	10000015 	stw	zero,0(r2)

	for (int i = (int)address; i <= ramSize; i++){	// write to all requested memory locations
    429c:	e0bffd17 	ldw	r2,-12(fp)
    42a0:	e0bff915 	stw	r2,-28(fp)
    42a4:	00000806 	br	42c8 <test_a+0x5c>
		*(bytePtr + i) = testData;
    42a8:	e0bff917 	ldw	r2,-28(fp)
    42ac:	e0fffb17 	ldw	r3,-20(fp)
    42b0:	1885883a 	add	r2,r3,r2
    42b4:	e0fffe17 	ldw	r3,-8(fp)
    42b8:	10c00005 	stb	r3,0(r2)
	uint8 *bytePtr = (uint8*)address;	// pointer that increments by bytes
	uint8 read = 0x00;					// variable for reading values back from memory

	*ledPtr = 0x00;	// clear leds

	for (int i = (int)address; i <= ramSize; i++){	// write to all requested memory locations
    42bc:	e0bff917 	ldw	r2,-28(fp)
    42c0:	10800044 	addi	r2,r2,1
    42c4:	e0bff915 	stw	r2,-28(fp)
    42c8:	e0bff917 	ldw	r2,-28(fp)
    42cc:	e0ffff17 	ldw	r3,-4(fp)
    42d0:	18bff50e 	bge	r3,r2,42a8 <_gp+0xffff5abc>
		*(bytePtr + i) = testData;
	}

	for (int i = (int)address; i <= ramSize; i++){	// read from all requested memory locations
    42d4:	e0bffd17 	ldw	r2,-12(fp)
    42d8:	e0bffa15 	stw	r2,-24(fp)
    42dc:	00001806 	br	4340 <test_a+0xd4>
		read = *(bytePtr + i);
    42e0:	e0bffa17 	ldw	r2,-24(fp)
    42e4:	e0fffb17 	ldw	r3,-20(fp)
    42e8:	1885883a 	add	r2,r3,r2
    42ec:	10800003 	ldbu	r2,0(r2)
    42f0:	e0bffc05 	stb	r2,-16(fp)

		if (read != testData){	// if read data does not match write
    42f4:	e0fffc03 	ldbu	r3,-16(fp)
    42f8:	e0bffe17 	ldw	r2,-8(fp)
    42fc:	18800d26 	beq	r3,r2,4334 <test_a+0xc8>
			*ledPtr = 0xFF;		// trigger leds
    4300:	d0a00017 	ldw	r2,-32768(gp)
    4304:	00c03fc4 	movi	r3,255
    4308:	10c00015 	stw	r3,0(r2)
			printf("ERROR:  Address: 0x%08x   Read: 0x%02x   Expected: 0x%02x \n", bytePtr+i, read, testData);
    430c:	e0bffa17 	ldw	r2,-24(fp)
    4310:	e0fffb17 	ldw	r3,-20(fp)
    4314:	1885883a 	add	r2,r3,r2
    4318:	e0fffc03 	ldbu	r3,-16(fp)
    431c:	e1fffe17 	ldw	r7,-8(fp)
    4320:	180d883a 	mov	r6,r3
    4324:	100b883a 	mov	r5,r2
    4328:	01000034 	movhi	r4,0
    432c:	21190f04 	addi	r4,r4,25660
    4330:	00046b00 	call	46b0 <printf>

	for (int i = (int)address; i <= ramSize; i++){	// write to all requested memory locations
		*(bytePtr + i) = testData;
	}

	for (int i = (int)address; i <= ramSize; i++){	// read from all requested memory locations
    4334:	e0bffa17 	ldw	r2,-24(fp)
    4338:	10800044 	addi	r2,r2,1
    433c:	e0bffa15 	stw	r2,-24(fp)
    4340:	e0bffa17 	ldw	r2,-24(fp)
    4344:	e0ffff17 	ldw	r3,-4(fp)
    4348:	18bfe50e 	bge	r3,r2,42e0 <_gp+0xffff5af4>
			printf("ERROR:  Address: 0x%08x   Read: 0x%02x   Expected: 0x%02x \n", bytePtr+i, read, testData);
		}

	}

}
    434c:	0001883a 	nop
    4350:	e037883a 	mov	sp,fp
    4354:	dfc00117 	ldw	ra,4(sp)
    4358:	df000017 	ldw	fp,0(sp)
    435c:	dec00204 	addi	sp,sp,8
    4360:	f800283a 	ret

00004364 <test_b>:

// same functionality as test_a, but now tests half word storage
void test_b(uint32 address, uint32 testData, int ramSize){
    4364:	defff704 	addi	sp,sp,-36
    4368:	dfc00815 	stw	ra,32(sp)
    436c:	df000715 	stw	fp,28(sp)
    4370:	df000704 	addi	fp,sp,28
    4374:	e13ffd15 	stw	r4,-12(fp)
    4378:	e17ffe15 	stw	r5,-8(fp)
    437c:	e1bfff15 	stw	r6,-4(fp)
	uint16 *hwordPtr = (uint16*)address;
    4380:	e0bffd17 	ldw	r2,-12(fp)
    4384:	e0bffb15 	stw	r2,-20(fp)
	uint16 read = 0x0000;
    4388:	e03ffc0d 	sth	zero,-16(fp)

	*ledPtr = 0x00;	// clear leds
    438c:	d0a00017 	ldw	r2,-32768(gp)
    4390:	10000015 	stw	zero,0(r2)

	for (int i = (int)address; i <= ramSize; i++){	// write to all requested memory locations
    4394:	e0bffd17 	ldw	r2,-12(fp)
    4398:	e0bff915 	stw	r2,-28(fp)
    439c:	00000a06 	br	43c8 <test_b+0x64>
		*(hwordPtr + i) = testData;
    43a0:	e0bff917 	ldw	r2,-28(fp)
    43a4:	1085883a 	add	r2,r2,r2
    43a8:	1007883a 	mov	r3,r2
    43ac:	e0bffb17 	ldw	r2,-20(fp)
    43b0:	10c5883a 	add	r2,r2,r3
    43b4:	e0fffe17 	ldw	r3,-8(fp)
    43b8:	10c0000d 	sth	r3,0(r2)
	uint16 *hwordPtr = (uint16*)address;
	uint16 read = 0x0000;

	*ledPtr = 0x00;	// clear leds

	for (int i = (int)address; i <= ramSize; i++){	// write to all requested memory locations
    43bc:	e0bff917 	ldw	r2,-28(fp)
    43c0:	10800044 	addi	r2,r2,1
    43c4:	e0bff915 	stw	r2,-28(fp)
    43c8:	e0bff917 	ldw	r2,-28(fp)
    43cc:	e0ffff17 	ldw	r3,-4(fp)
    43d0:	18bff30e 	bge	r3,r2,43a0 <_gp+0xffff5bb4>
		*(hwordPtr + i) = testData;
	}

	for (int i = (int)address; i <= ramSize; i++){	// read from all requested memory locations
    43d4:	e0bffd17 	ldw	r2,-12(fp)
    43d8:	e0bffa15 	stw	r2,-24(fp)
    43dc:	00001c06 	br	4450 <test_b+0xec>
		read = *(hwordPtr + i);
    43e0:	e0bffa17 	ldw	r2,-24(fp)
    43e4:	1085883a 	add	r2,r2,r2
    43e8:	1007883a 	mov	r3,r2
    43ec:	e0bffb17 	ldw	r2,-20(fp)
    43f0:	10c5883a 	add	r2,r2,r3
    43f4:	1080000b 	ldhu	r2,0(r2)
    43f8:	e0bffc0d 	sth	r2,-16(fp)

		if (read != testData){	// if read data does not match write
    43fc:	e0fffc0b 	ldhu	r3,-16(fp)
    4400:	e0bffe17 	ldw	r2,-8(fp)
    4404:	18800f26 	beq	r3,r2,4444 <test_b+0xe0>
			*ledPtr = 0xFF;		// trigger leds
    4408:	d0a00017 	ldw	r2,-32768(gp)
    440c:	00c03fc4 	movi	r3,255
    4410:	10c00015 	stw	r3,0(r2)
			printf("ERROR:  Address: 0x%08x   Read: 0x%04x   Expected: 0x%04x \n", hwordPtr+i, read, testData);
    4414:	e0bffa17 	ldw	r2,-24(fp)
    4418:	1085883a 	add	r2,r2,r2
    441c:	1007883a 	mov	r3,r2
    4420:	e0bffb17 	ldw	r2,-20(fp)
    4424:	10c5883a 	add	r2,r2,r3
    4428:	e0fffc0b 	ldhu	r3,-16(fp)
    442c:	e1fffe17 	ldw	r7,-8(fp)
    4430:	180d883a 	mov	r6,r3
    4434:	100b883a 	mov	r5,r2
    4438:	01000034 	movhi	r4,0
    443c:	21191e04 	addi	r4,r4,25720
    4440:	00046b00 	call	46b0 <printf>

	for (int i = (int)address; i <= ramSize; i++){	// write to all requested memory locations
		*(hwordPtr + i) = testData;
	}

	for (int i = (int)address; i <= ramSize; i++){	// read from all requested memory locations
    4444:	e0bffa17 	ldw	r2,-24(fp)
    4448:	10800044 	addi	r2,r2,1
    444c:	e0bffa15 	stw	r2,-24(fp)
    4450:	e0bffa17 	ldw	r2,-24(fp)
    4454:	e0ffff17 	ldw	r3,-4(fp)
    4458:	18bfe10e 	bge	r3,r2,43e0 <_gp+0xffff5bf4>
			printf("ERROR:  Address: 0x%08x   Read: 0x%04x   Expected: 0x%04x \n", hwordPtr+i, read, testData);
		}

	}

}
    445c:	0001883a 	nop
    4460:	e037883a 	mov	sp,fp
    4464:	dfc00117 	ldw	ra,4(sp)
    4468:	df000017 	ldw	fp,0(sp)
    446c:	dec00204 	addi	sp,sp,8
    4470:	f800283a 	ret

00004474 <test_c>:

// same functionality as test_a, but now tests word storage
void test_c(uint32 address, uint32 testData, int ramSize){
    4474:	defff704 	addi	sp,sp,-36
    4478:	dfc00815 	stw	ra,32(sp)
    447c:	df000715 	stw	fp,28(sp)
    4480:	df000704 	addi	fp,sp,28
    4484:	e13ffd15 	stw	r4,-12(fp)
    4488:	e17ffe15 	stw	r5,-8(fp)
    448c:	e1bfff15 	stw	r6,-4(fp)
	uint32 *wordPtr = (uint32*)address;
    4490:	e0bffd17 	ldw	r2,-12(fp)
    4494:	e0bffb15 	stw	r2,-20(fp)
	uint32 read = 0x0000;
    4498:	e03ffc15 	stw	zero,-16(fp)

	*ledPtr = 0x00;	// clear leds
    449c:	d0a00017 	ldw	r2,-32768(gp)
    44a0:	10000015 	stw	zero,0(r2)

	for (int i = (int)address; i <= ramSize; i++){	// write to all requested memory locations
    44a4:	e0bffd17 	ldw	r2,-12(fp)
    44a8:	e0bff915 	stw	r2,-28(fp)
    44ac:	00000b06 	br	44dc <test_c+0x68>
		*(wordPtr + i) = testData;
    44b0:	e0bff917 	ldw	r2,-28(fp)
    44b4:	1085883a 	add	r2,r2,r2
    44b8:	1085883a 	add	r2,r2,r2
    44bc:	1007883a 	mov	r3,r2
    44c0:	e0bffb17 	ldw	r2,-20(fp)
    44c4:	10c5883a 	add	r2,r2,r3
    44c8:	e0fffe17 	ldw	r3,-8(fp)
    44cc:	10c00015 	stw	r3,0(r2)
	uint32 *wordPtr = (uint32*)address;
	uint32 read = 0x0000;

	*ledPtr = 0x00;	// clear leds

	for (int i = (int)address; i <= ramSize; i++){	// write to all requested memory locations
    44d0:	e0bff917 	ldw	r2,-28(fp)
    44d4:	10800044 	addi	r2,r2,1
    44d8:	e0bff915 	stw	r2,-28(fp)
    44dc:	e0bff917 	ldw	r2,-28(fp)
    44e0:	e0ffff17 	ldw	r3,-4(fp)
    44e4:	18bff20e 	bge	r3,r2,44b0 <_gp+0xffff5cc4>
		*(wordPtr + i) = testData;
	}

	for (int i = (int)address; i <= ramSize; i++){	// read from all requested memory locations
    44e8:	e0bffd17 	ldw	r2,-12(fp)
    44ec:	e0bffa15 	stw	r2,-24(fp)
    44f0:	00001d06 	br	4568 <test_c+0xf4>
		read = *(wordPtr + i);
    44f4:	e0bffa17 	ldw	r2,-24(fp)
    44f8:	1085883a 	add	r2,r2,r2
    44fc:	1085883a 	add	r2,r2,r2
    4500:	1007883a 	mov	r3,r2
    4504:	e0bffb17 	ldw	r2,-20(fp)
    4508:	10c5883a 	add	r2,r2,r3
    450c:	10800017 	ldw	r2,0(r2)
    4510:	e0bffc15 	stw	r2,-16(fp)

		if (read != testData){	// if read data does not match write
    4514:	e0fffc17 	ldw	r3,-16(fp)
    4518:	e0bffe17 	ldw	r2,-8(fp)
    451c:	18800f26 	beq	r3,r2,455c <test_c+0xe8>
			*ledPtr = 0xFF;		// trigger leds
    4520:	d0a00017 	ldw	r2,-32768(gp)
    4524:	00c03fc4 	movi	r3,255
    4528:	10c00015 	stw	r3,0(r2)
			printf("ERROR:  Address: 0x%08x   Read: 0x%08x   Expected: 0x%08x \n", wordPtr+i, read, testData);
    452c:	e0bffa17 	ldw	r2,-24(fp)
    4530:	1085883a 	add	r2,r2,r2
    4534:	1085883a 	add	r2,r2,r2
    4538:	1007883a 	mov	r3,r2
    453c:	e0bffb17 	ldw	r2,-20(fp)
    4540:	10c5883a 	add	r2,r2,r3
    4544:	e1fffe17 	ldw	r7,-8(fp)
    4548:	e1bffc17 	ldw	r6,-16(fp)
    454c:	100b883a 	mov	r5,r2
    4550:	01000034 	movhi	r4,0
    4554:	21192d04 	addi	r4,r4,25780
    4558:	00046b00 	call	46b0 <printf>

	for (int i = (int)address; i <= ramSize; i++){	// write to all requested memory locations
		*(wordPtr + i) = testData;
	}

	for (int i = (int)address; i <= ramSize; i++){	// read from all requested memory locations
    455c:	e0bffa17 	ldw	r2,-24(fp)
    4560:	10800044 	addi	r2,r2,1
    4564:	e0bffa15 	stw	r2,-24(fp)
    4568:	e0bffa17 	ldw	r2,-24(fp)
    456c:	e0ffff17 	ldw	r3,-4(fp)
    4570:	18bfe00e 	bge	r3,r2,44f4 <_gp+0xffff5d08>
			printf("ERROR:  Address: 0x%08x   Read: 0x%08x   Expected: 0x%08x \n", wordPtr+i, read, testData);
		}

	}

}
    4574:	0001883a 	nop
    4578:	e037883a 	mov	sp,fp
    457c:	dfc00117 	ldw	ra,4(sp)
    4580:	df000017 	ldw	fp,0(sp)
    4584:	dec00204 	addi	sp,sp,8
    4588:	f800283a 	ret

0000458c <key1_isr>:

// isr handler for key 1
void key1_isr(void *context){
    458c:	defffd04 	addi	sp,sp,-12
    4590:	dfc00215 	stw	ra,8(sp)
    4594:	df000115 	stw	fp,4(sp)
    4598:	df000104 	addi	fp,sp,4
    459c:	e13fff15 	stw	r4,-4(fp)

	*(key1Ptr + 3) = 0;		// clear key1 interrupt
    45a0:	d0a00117 	ldw	r2,-32764(gp)
    45a4:	10800304 	addi	r2,r2,12
    45a8:	10000015 	stw	zero,0(r2)

	*ledPtr = 0xAA;
    45ac:	d0a00017 	ldw	r2,-32768(gp)
    45b0:	00c02a84 	movi	r3,170
    45b4:	10c00015 	stw	r3,0(r2)
	printf("RAM TEST DONE \n");
    45b8:	01000034 	movhi	r4,0
    45bc:	21193c04 	addi	r4,r4,25840
    45c0:	000477c0 	call	477c <puts>

	exit(0);	// exit program successfully
    45c4:	0009883a 	mov	r4,zero
    45c8:	00046540 	call	4654 <exit>

000045cc <main>:

}

int main(){
    45cc:	defffd04 	addi	sp,sp,-12
    45d0:	dfc00215 	stw	ra,8(sp)
    45d4:	df000115 	stw	fp,4(sp)
    45d8:	df000104 	addi	fp,sp,4
	// enable NIOS II to accept a pushbutton interrupt
	// assign interrupt handler key1_isr
	alt_ic_isr_register(KEY1_IRQ_INTERRUPT_CONTROLLER_ID,KEY1_IRQ,key1_isr,0,0);
    45dc:	d8000015 	stw	zero,0(sp)
    45e0:	000f883a 	mov	r7,zero
    45e4:	01800034 	movhi	r6,0
    45e8:	31916304 	addi	r6,r6,17804
    45ec:	000b883a 	mov	r5,zero
    45f0:	0009883a 	mov	r4,zero
    45f4:	00052100 	call	5210 <alt_ic_isr_register>

	*(key1Ptr + 2) = 1;		// enable interrupts on key1
    45f8:	d0a00117 	ldw	r2,-32764(gp)
    45fc:	10800204 	addi	r2,r2,8
    4600:	00c00044 	movi	r3,1
    4604:	10c00015 	stw	r3,0(r2)
	*(key1Ptr + 3) = 0;		// clear key1 interrupt
    4608:	d0a00117 	ldw	r2,-32764(gp)
    460c:	10800304 	addi	r2,r2,12
    4610:	10000015 	stw	zero,0(r2)

	*ledPtr = 0x00;	// clear leds
    4614:	d0a00017 	ldw	r2,-32768(gp)
    4618:	10000015 	stw	zero,0(r2)
	//test_a(0x000, 0x00, 4095);	// clear memory

	while(1){	// program loop

		test_a(0x000, 0x00, 4095);		// perform memory tests
    461c:	0183ffc4 	movi	r6,4095
    4620:	000b883a 	mov	r5,zero
    4624:	0009883a 	mov	r4,zero
    4628:	000426c0 	call	426c <test_a>
		test_b(0x000, 0x1234, 2047);
    462c:	0181ffc4 	movi	r6,2047
    4630:	01448d04 	movi	r5,4660
    4634:	0009883a 	mov	r4,zero
    4638:	00043640 	call	4364 <test_b>
		test_c(0x000, 0xABCDEF90, 1023);
    463c:	0180ffc4 	movi	r6,1023
    4640:	016af3b4 	movhi	r5,43982
    4644:	297be404 	addi	r5,r5,-4208
    4648:	0009883a 	mov	r4,zero
    464c:	00044740 	call	4474 <test_c>

	}
    4650:	003ff206 	br	461c <_gp+0xffff5e30>

00004654 <exit>:
    4654:	defffe04 	addi	sp,sp,-8
    4658:	000b883a 	mov	r5,zero
    465c:	dc000015 	stw	r16,0(sp)
    4660:	dfc00115 	stw	ra,4(sp)
    4664:	2021883a 	mov	r16,r4
    4668:	0004d600 	call	4d60 <__call_exitprocs>
    466c:	8009883a 	mov	r4,r16
    4670:	00051dc0 	call	51dc <_exit>

00004674 <_printf_r>:
    4674:	defffd04 	addi	sp,sp,-12
    4678:	dfc00015 	stw	ra,0(sp)
    467c:	d9800115 	stw	r6,4(sp)
    4680:	d9c00215 	stw	r7,8(sp)
    4684:	20c00217 	ldw	r3,8(r4)
    4688:	01800034 	movhi	r6,0
    468c:	3193bc04 	addi	r6,r6,20208
    4690:	19800115 	stw	r6,4(r3)
    4694:	280d883a 	mov	r6,r5
    4698:	21400217 	ldw	r5,8(r4)
    469c:	d9c00104 	addi	r7,sp,4
    46a0:	00048180 	call	4818 <___vfprintf_internal_r>
    46a4:	dfc00017 	ldw	ra,0(sp)
    46a8:	dec00304 	addi	sp,sp,12
    46ac:	f800283a 	ret

000046b0 <printf>:
    46b0:	defffc04 	addi	sp,sp,-16
    46b4:	dfc00015 	stw	ra,0(sp)
    46b8:	d9400115 	stw	r5,4(sp)
    46bc:	d9800215 	stw	r6,8(sp)
    46c0:	d9c00315 	stw	r7,12(sp)
    46c4:	00800034 	movhi	r2,0
    46c8:	1099fe04 	addi	r2,r2,26616
    46cc:	10800017 	ldw	r2,0(r2)
    46d0:	01400034 	movhi	r5,0
    46d4:	2953bc04 	addi	r5,r5,20208
    46d8:	10c00217 	ldw	r3,8(r2)
    46dc:	d9800104 	addi	r6,sp,4
    46e0:	19400115 	stw	r5,4(r3)
    46e4:	200b883a 	mov	r5,r4
    46e8:	11000217 	ldw	r4,8(r2)
    46ec:	0004d440 	call	4d44 <__vfprintf_internal>
    46f0:	dfc00017 	ldw	ra,0(sp)
    46f4:	dec00404 	addi	sp,sp,16
    46f8:	f800283a 	ret

000046fc <_puts_r>:
    46fc:	defffd04 	addi	sp,sp,-12
    4700:	dc000015 	stw	r16,0(sp)
    4704:	2021883a 	mov	r16,r4
    4708:	2809883a 	mov	r4,r5
    470c:	dfc00215 	stw	ra,8(sp)
    4710:	dc400115 	stw	r17,4(sp)
    4714:	2823883a 	mov	r17,r5
    4718:	00047900 	call	4790 <strlen>
    471c:	81400217 	ldw	r5,8(r16)
    4720:	01000034 	movhi	r4,0
    4724:	2113bc04 	addi	r4,r4,20208
    4728:	29000115 	stw	r4,4(r5)
    472c:	100f883a 	mov	r7,r2
    4730:	880d883a 	mov	r6,r17
    4734:	8009883a 	mov	r4,r16
    4738:	0004ef00 	call	4ef0 <__sfvwrite_small_dev>
    473c:	00ffffc4 	movi	r3,-1
    4740:	10c00926 	beq	r2,r3,4768 <_puts_r+0x6c>
    4744:	81400217 	ldw	r5,8(r16)
    4748:	01800034 	movhi	r6,0
    474c:	01c00044 	movi	r7,1
    4750:	28800117 	ldw	r2,4(r5)
    4754:	31994004 	addi	r6,r6,25856
    4758:	8009883a 	mov	r4,r16
    475c:	103ee83a 	callr	r2
    4760:	10bfffe0 	cmpeqi	r2,r2,-1
    4764:	0085c83a 	sub	r2,zero,r2
    4768:	dfc00217 	ldw	ra,8(sp)
    476c:	dc400117 	ldw	r17,4(sp)
    4770:	dc000017 	ldw	r16,0(sp)
    4774:	dec00304 	addi	sp,sp,12
    4778:	f800283a 	ret

0000477c <puts>:
    477c:	00800034 	movhi	r2,0
    4780:	1099fe04 	addi	r2,r2,26616
    4784:	200b883a 	mov	r5,r4
    4788:	11000017 	ldw	r4,0(r2)
    478c:	00046fc1 	jmpi	46fc <_puts_r>

00004790 <strlen>:
    4790:	2005883a 	mov	r2,r4
    4794:	10c00007 	ldb	r3,0(r2)
    4798:	18000226 	beq	r3,zero,47a4 <strlen+0x14>
    479c:	10800044 	addi	r2,r2,1
    47a0:	003ffc06 	br	4794 <_gp+0xffff5fa8>
    47a4:	1105c83a 	sub	r2,r2,r4
    47a8:	f800283a 	ret

000047ac <print_repeat>:
    47ac:	defffb04 	addi	sp,sp,-20
    47b0:	dc800315 	stw	r18,12(sp)
    47b4:	dc400215 	stw	r17,8(sp)
    47b8:	dc000115 	stw	r16,4(sp)
    47bc:	dfc00415 	stw	ra,16(sp)
    47c0:	2025883a 	mov	r18,r4
    47c4:	2823883a 	mov	r17,r5
    47c8:	d9800005 	stb	r6,0(sp)
    47cc:	3821883a 	mov	r16,r7
    47d0:	04000a0e 	bge	zero,r16,47fc <print_repeat+0x50>
    47d4:	88800117 	ldw	r2,4(r17)
    47d8:	01c00044 	movi	r7,1
    47dc:	d80d883a 	mov	r6,sp
    47e0:	880b883a 	mov	r5,r17
    47e4:	9009883a 	mov	r4,r18
    47e8:	103ee83a 	callr	r2
    47ec:	843fffc4 	addi	r16,r16,-1
    47f0:	103ff726 	beq	r2,zero,47d0 <_gp+0xffff5fe4>
    47f4:	00bfffc4 	movi	r2,-1
    47f8:	00000106 	br	4800 <print_repeat+0x54>
    47fc:	0005883a 	mov	r2,zero
    4800:	dfc00417 	ldw	ra,16(sp)
    4804:	dc800317 	ldw	r18,12(sp)
    4808:	dc400217 	ldw	r17,8(sp)
    480c:	dc000117 	ldw	r16,4(sp)
    4810:	dec00504 	addi	sp,sp,20
    4814:	f800283a 	ret

00004818 <___vfprintf_internal_r>:
    4818:	deffe504 	addi	sp,sp,-108
    481c:	d8c00804 	addi	r3,sp,32
    4820:	ddc01815 	stw	r23,96(sp)
    4824:	dd801715 	stw	r22,92(sp)
    4828:	dd401615 	stw	r21,88(sp)
    482c:	dd001515 	stw	r20,84(sp)
    4830:	dcc01415 	stw	r19,80(sp)
    4834:	dc801315 	stw	r18,76(sp)
    4838:	dc401215 	stw	r17,72(sp)
    483c:	dc001115 	stw	r16,68(sp)
    4840:	dfc01a15 	stw	ra,104(sp)
    4844:	df001915 	stw	fp,100(sp)
    4848:	2029883a 	mov	r20,r4
    484c:	2823883a 	mov	r17,r5
    4850:	382d883a 	mov	r22,r7
    4854:	d9800f15 	stw	r6,60(sp)
    4858:	0021883a 	mov	r16,zero
    485c:	d8000e15 	stw	zero,56(sp)
    4860:	d8000a15 	stw	zero,40(sp)
    4864:	002b883a 	mov	r21,zero
    4868:	0027883a 	mov	r19,zero
    486c:	0025883a 	mov	r18,zero
    4870:	d8000c15 	stw	zero,48(sp)
    4874:	d8000b15 	stw	zero,44(sp)
    4878:	002f883a 	mov	r23,zero
    487c:	d8c00915 	stw	r3,36(sp)
    4880:	d8c00f17 	ldw	r3,60(sp)
    4884:	19000003 	ldbu	r4,0(r3)
    4888:	20803fcc 	andi	r2,r4,255
    488c:	1080201c 	xori	r2,r2,128
    4890:	10bfe004 	addi	r2,r2,-128
    4894:	10011e26 	beq	r2,zero,4d10 <___vfprintf_internal_r+0x4f8>
    4898:	00c00044 	movi	r3,1
    489c:	b8c01426 	beq	r23,r3,48f0 <___vfprintf_internal_r+0xd8>
    48a0:	1dc00216 	blt	r3,r23,48ac <___vfprintf_internal_r+0x94>
    48a4:	b8000626 	beq	r23,zero,48c0 <___vfprintf_internal_r+0xa8>
    48a8:	00011506 	br	4d00 <___vfprintf_internal_r+0x4e8>
    48ac:	01400084 	movi	r5,2
    48b0:	b9401d26 	beq	r23,r5,4928 <___vfprintf_internal_r+0x110>
    48b4:	014000c4 	movi	r5,3
    48b8:	b9402b26 	beq	r23,r5,4968 <___vfprintf_internal_r+0x150>
    48bc:	00011006 	br	4d00 <___vfprintf_internal_r+0x4e8>
    48c0:	01400944 	movi	r5,37
    48c4:	1140fc26 	beq	r2,r5,4cb8 <___vfprintf_internal_r+0x4a0>
    48c8:	88800117 	ldw	r2,4(r17)
    48cc:	d9000005 	stb	r4,0(sp)
    48d0:	01c00044 	movi	r7,1
    48d4:	d80d883a 	mov	r6,sp
    48d8:	880b883a 	mov	r5,r17
    48dc:	a009883a 	mov	r4,r20
    48e0:	103ee83a 	callr	r2
    48e4:	1000d81e 	bne	r2,zero,4c48 <___vfprintf_internal_r+0x430>
    48e8:	84000044 	addi	r16,r16,1
    48ec:	00010406 	br	4d00 <___vfprintf_internal_r+0x4e8>
    48f0:	01400c04 	movi	r5,48
    48f4:	1140fa26 	beq	r2,r5,4ce0 <___vfprintf_internal_r+0x4c8>
    48f8:	01400944 	movi	r5,37
    48fc:	11400a1e 	bne	r2,r5,4928 <___vfprintf_internal_r+0x110>
    4900:	d8800005 	stb	r2,0(sp)
    4904:	88800117 	ldw	r2,4(r17)
    4908:	b80f883a 	mov	r7,r23
    490c:	d80d883a 	mov	r6,sp
    4910:	880b883a 	mov	r5,r17
    4914:	a009883a 	mov	r4,r20
    4918:	103ee83a 	callr	r2
    491c:	1000ca1e 	bne	r2,zero,4c48 <___vfprintf_internal_r+0x430>
    4920:	84000044 	addi	r16,r16,1
    4924:	0000f506 	br	4cfc <___vfprintf_internal_r+0x4e4>
    4928:	25fff404 	addi	r23,r4,-48
    492c:	bdc03fcc 	andi	r23,r23,255
    4930:	00c00244 	movi	r3,9
    4934:	1dc00936 	bltu	r3,r23,495c <___vfprintf_internal_r+0x144>
    4938:	00bfffc4 	movi	r2,-1
    493c:	90800426 	beq	r18,r2,4950 <___vfprintf_internal_r+0x138>
    4940:	01400284 	movi	r5,10
    4944:	9009883a 	mov	r4,r18
    4948:	00051b40 	call	51b4 <__mulsi3>
    494c:	00000106 	br	4954 <___vfprintf_internal_r+0x13c>
    4950:	0005883a 	mov	r2,zero
    4954:	b8a5883a 	add	r18,r23,r2
    4958:	0000e206 	br	4ce4 <___vfprintf_internal_r+0x4cc>
    495c:	01400b84 	movi	r5,46
    4960:	1140e426 	beq	r2,r5,4cf4 <___vfprintf_internal_r+0x4dc>
    4964:	05c00084 	movi	r23,2
    4968:	213ff404 	addi	r4,r4,-48
    496c:	27003fcc 	andi	fp,r4,255
    4970:	00c00244 	movi	r3,9
    4974:	1f000936 	bltu	r3,fp,499c <___vfprintf_internal_r+0x184>
    4978:	00bfffc4 	movi	r2,-1
    497c:	98800426 	beq	r19,r2,4990 <___vfprintf_internal_r+0x178>
    4980:	01400284 	movi	r5,10
    4984:	9809883a 	mov	r4,r19
    4988:	00051b40 	call	51b4 <__mulsi3>
    498c:	00000106 	br	4994 <___vfprintf_internal_r+0x17c>
    4990:	0005883a 	mov	r2,zero
    4994:	e0a7883a 	add	r19,fp,r2
    4998:	0000d906 	br	4d00 <___vfprintf_internal_r+0x4e8>
    499c:	00c01b04 	movi	r3,108
    49a0:	10c0d226 	beq	r2,r3,4cec <___vfprintf_internal_r+0x4d4>
    49a4:	013fffc4 	movi	r4,-1
    49a8:	99000226 	beq	r19,r4,49b4 <___vfprintf_internal_r+0x19c>
    49ac:	d8000b15 	stw	zero,44(sp)
    49b0:	00000106 	br	49b8 <___vfprintf_internal_r+0x1a0>
    49b4:	04c00044 	movi	r19,1
    49b8:	01001a44 	movi	r4,105
    49bc:	11001626 	beq	r2,r4,4a18 <___vfprintf_internal_r+0x200>
    49c0:	20800916 	blt	r4,r2,49e8 <___vfprintf_internal_r+0x1d0>
    49c4:	010018c4 	movi	r4,99
    49c8:	11008826 	beq	r2,r4,4bec <___vfprintf_internal_r+0x3d4>
    49cc:	01001904 	movi	r4,100
    49d0:	11001126 	beq	r2,r4,4a18 <___vfprintf_internal_r+0x200>
    49d4:	01001604 	movi	r4,88
    49d8:	1100c81e 	bne	r2,r4,4cfc <___vfprintf_internal_r+0x4e4>
    49dc:	00c00044 	movi	r3,1
    49e0:	d8c00e15 	stw	r3,56(sp)
    49e4:	00001506 	br	4a3c <___vfprintf_internal_r+0x224>
    49e8:	01001cc4 	movi	r4,115
    49ec:	11009826 	beq	r2,r4,4c50 <___vfprintf_internal_r+0x438>
    49f0:	20800416 	blt	r4,r2,4a04 <___vfprintf_internal_r+0x1ec>
    49f4:	01001bc4 	movi	r4,111
    49f8:	1100c01e 	bne	r2,r4,4cfc <___vfprintf_internal_r+0x4e4>
    49fc:	05400204 	movi	r21,8
    4a00:	00000f06 	br	4a40 <___vfprintf_internal_r+0x228>
    4a04:	01001d44 	movi	r4,117
    4a08:	11000d26 	beq	r2,r4,4a40 <___vfprintf_internal_r+0x228>
    4a0c:	01001e04 	movi	r4,120
    4a10:	11000a26 	beq	r2,r4,4a3c <___vfprintf_internal_r+0x224>
    4a14:	0000b906 	br	4cfc <___vfprintf_internal_r+0x4e4>
    4a18:	d8c00a17 	ldw	r3,40(sp)
    4a1c:	b7000104 	addi	fp,r22,4
    4a20:	18000726 	beq	r3,zero,4a40 <___vfprintf_internal_r+0x228>
    4a24:	df000d15 	stw	fp,52(sp)
    4a28:	b5c00017 	ldw	r23,0(r22)
    4a2c:	b800080e 	bge	r23,zero,4a50 <___vfprintf_internal_r+0x238>
    4a30:	05efc83a 	sub	r23,zero,r23
    4a34:	02400044 	movi	r9,1
    4a38:	00000606 	br	4a54 <___vfprintf_internal_r+0x23c>
    4a3c:	05400404 	movi	r21,16
    4a40:	b0c00104 	addi	r3,r22,4
    4a44:	d8c00d15 	stw	r3,52(sp)
    4a48:	b5c00017 	ldw	r23,0(r22)
    4a4c:	d8000a15 	stw	zero,40(sp)
    4a50:	0013883a 	mov	r9,zero
    4a54:	d839883a 	mov	fp,sp
    4a58:	b8001726 	beq	r23,zero,4ab8 <___vfprintf_internal_r+0x2a0>
    4a5c:	a80b883a 	mov	r5,r21
    4a60:	b809883a 	mov	r4,r23
    4a64:	da401015 	stw	r9,64(sp)
    4a68:	00050f80 	call	50f8 <__udivsi3>
    4a6c:	a80b883a 	mov	r5,r21
    4a70:	1009883a 	mov	r4,r2
    4a74:	102d883a 	mov	r22,r2
    4a78:	00051b40 	call	51b4 <__mulsi3>
    4a7c:	b885c83a 	sub	r2,r23,r2
    4a80:	00c00244 	movi	r3,9
    4a84:	da401017 	ldw	r9,64(sp)
    4a88:	18800216 	blt	r3,r2,4a94 <___vfprintf_internal_r+0x27c>
    4a8c:	10800c04 	addi	r2,r2,48
    4a90:	00000506 	br	4aa8 <___vfprintf_internal_r+0x290>
    4a94:	d8c00e17 	ldw	r3,56(sp)
    4a98:	18000226 	beq	r3,zero,4aa4 <___vfprintf_internal_r+0x28c>
    4a9c:	10800dc4 	addi	r2,r2,55
    4aa0:	00000106 	br	4aa8 <___vfprintf_internal_r+0x290>
    4aa4:	108015c4 	addi	r2,r2,87
    4aa8:	e0800005 	stb	r2,0(fp)
    4aac:	b02f883a 	mov	r23,r22
    4ab0:	e7000044 	addi	fp,fp,1
    4ab4:	003fe806 	br	4a58 <_gp+0xffff626c>
    4ab8:	e6efc83a 	sub	r23,fp,sp
    4abc:	9dc5c83a 	sub	r2,r19,r23
    4ac0:	0080090e 	bge	zero,r2,4ae8 <___vfprintf_internal_r+0x2d0>
    4ac4:	e085883a 	add	r2,fp,r2
    4ac8:	01400c04 	movi	r5,48
    4acc:	d8c00917 	ldw	r3,36(sp)
    4ad0:	e009883a 	mov	r4,fp
    4ad4:	e0c0032e 	bgeu	fp,r3,4ae4 <___vfprintf_internal_r+0x2cc>
    4ad8:	e7000044 	addi	fp,fp,1
    4adc:	21400005 	stb	r5,0(r4)
    4ae0:	e0bffa1e 	bne	fp,r2,4acc <_gp+0xffff62e0>
    4ae4:	e6efc83a 	sub	r23,fp,sp
    4ae8:	d8c00b17 	ldw	r3,44(sp)
    4aec:	4dd1883a 	add	r8,r9,r23
    4af0:	922dc83a 	sub	r22,r18,r8
    4af4:	18001626 	beq	r3,zero,4b50 <___vfprintf_internal_r+0x338>
    4af8:	48000a26 	beq	r9,zero,4b24 <___vfprintf_internal_r+0x30c>
    4afc:	00800b44 	movi	r2,45
    4b00:	d8800805 	stb	r2,32(sp)
    4b04:	88800117 	ldw	r2,4(r17)
    4b08:	01c00044 	movi	r7,1
    4b0c:	d9800804 	addi	r6,sp,32
    4b10:	880b883a 	mov	r5,r17
    4b14:	a009883a 	mov	r4,r20
    4b18:	103ee83a 	callr	r2
    4b1c:	10004a1e 	bne	r2,zero,4c48 <___vfprintf_internal_r+0x430>
    4b20:	84000044 	addi	r16,r16,1
    4b24:	0580070e 	bge	zero,r22,4b44 <___vfprintf_internal_r+0x32c>
    4b28:	b00f883a 	mov	r7,r22
    4b2c:	01800c04 	movi	r6,48
    4b30:	880b883a 	mov	r5,r17
    4b34:	a009883a 	mov	r4,r20
    4b38:	00047ac0 	call	47ac <print_repeat>
    4b3c:	1000421e 	bne	r2,zero,4c48 <___vfprintf_internal_r+0x430>
    4b40:	85a1883a 	add	r16,r16,r22
    4b44:	e02d883a 	mov	r22,fp
    4b48:	bf2fc83a 	sub	r23,r23,fp
    4b4c:	00002006 	br	4bd0 <___vfprintf_internal_r+0x3b8>
    4b50:	0580090e 	bge	zero,r22,4b78 <___vfprintf_internal_r+0x360>
    4b54:	b00f883a 	mov	r7,r22
    4b58:	01800804 	movi	r6,32
    4b5c:	880b883a 	mov	r5,r17
    4b60:	a009883a 	mov	r4,r20
    4b64:	da401015 	stw	r9,64(sp)
    4b68:	00047ac0 	call	47ac <print_repeat>
    4b6c:	da401017 	ldw	r9,64(sp)
    4b70:	1000351e 	bne	r2,zero,4c48 <___vfprintf_internal_r+0x430>
    4b74:	85a1883a 	add	r16,r16,r22
    4b78:	483ff226 	beq	r9,zero,4b44 <_gp+0xffff6358>
    4b7c:	00800b44 	movi	r2,45
    4b80:	d8800805 	stb	r2,32(sp)
    4b84:	88800117 	ldw	r2,4(r17)
    4b88:	01c00044 	movi	r7,1
    4b8c:	d9800804 	addi	r6,sp,32
    4b90:	880b883a 	mov	r5,r17
    4b94:	a009883a 	mov	r4,r20
    4b98:	103ee83a 	callr	r2
    4b9c:	10002a1e 	bne	r2,zero,4c48 <___vfprintf_internal_r+0x430>
    4ba0:	84000044 	addi	r16,r16,1
    4ba4:	003fe706 	br	4b44 <_gp+0xffff6358>
    4ba8:	b5bfffc4 	addi	r22,r22,-1
    4bac:	b0800003 	ldbu	r2,0(r22)
    4bb0:	01c00044 	movi	r7,1
    4bb4:	d9800804 	addi	r6,sp,32
    4bb8:	d8800805 	stb	r2,32(sp)
    4bbc:	88800117 	ldw	r2,4(r17)
    4bc0:	880b883a 	mov	r5,r17
    4bc4:	a009883a 	mov	r4,r20
    4bc8:	103ee83a 	callr	r2
    4bcc:	10001e1e 	bne	r2,zero,4c48 <___vfprintf_internal_r+0x430>
    4bd0:	8585c83a 	sub	r2,r16,r22
    4bd4:	b5c9883a 	add	r4,r22,r23
    4bd8:	e085883a 	add	r2,fp,r2
    4bdc:	013ff216 	blt	zero,r4,4ba8 <_gp+0xffff63bc>
    4be0:	1021883a 	mov	r16,r2
    4be4:	dd800d17 	ldw	r22,52(sp)
    4be8:	00004406 	br	4cfc <___vfprintf_internal_r+0x4e4>
    4bec:	00800044 	movi	r2,1
    4bf0:	1480080e 	bge	r2,r18,4c14 <___vfprintf_internal_r+0x3fc>
    4bf4:	95ffffc4 	addi	r23,r18,-1
    4bf8:	b80f883a 	mov	r7,r23
    4bfc:	01800804 	movi	r6,32
    4c00:	880b883a 	mov	r5,r17
    4c04:	a009883a 	mov	r4,r20
    4c08:	00047ac0 	call	47ac <print_repeat>
    4c0c:	10000e1e 	bne	r2,zero,4c48 <___vfprintf_internal_r+0x430>
    4c10:	85e1883a 	add	r16,r16,r23
    4c14:	b0800017 	ldw	r2,0(r22)
    4c18:	01c00044 	movi	r7,1
    4c1c:	d80d883a 	mov	r6,sp
    4c20:	d8800005 	stb	r2,0(sp)
    4c24:	88800117 	ldw	r2,4(r17)
    4c28:	880b883a 	mov	r5,r17
    4c2c:	a009883a 	mov	r4,r20
    4c30:	b5c00104 	addi	r23,r22,4
    4c34:	103ee83a 	callr	r2
    4c38:	1000031e 	bne	r2,zero,4c48 <___vfprintf_internal_r+0x430>
    4c3c:	84000044 	addi	r16,r16,1
    4c40:	b82d883a 	mov	r22,r23
    4c44:	00002d06 	br	4cfc <___vfprintf_internal_r+0x4e4>
    4c48:	00bfffc4 	movi	r2,-1
    4c4c:	00003106 	br	4d14 <___vfprintf_internal_r+0x4fc>
    4c50:	b5c00017 	ldw	r23,0(r22)
    4c54:	b7000104 	addi	fp,r22,4
    4c58:	b809883a 	mov	r4,r23
    4c5c:	00047900 	call	4790 <strlen>
    4c60:	9091c83a 	sub	r8,r18,r2
    4c64:	102d883a 	mov	r22,r2
    4c68:	0200090e 	bge	zero,r8,4c90 <___vfprintf_internal_r+0x478>
    4c6c:	400f883a 	mov	r7,r8
    4c70:	01800804 	movi	r6,32
    4c74:	880b883a 	mov	r5,r17
    4c78:	a009883a 	mov	r4,r20
    4c7c:	da001015 	stw	r8,64(sp)
    4c80:	00047ac0 	call	47ac <print_repeat>
    4c84:	da001017 	ldw	r8,64(sp)
    4c88:	103fef1e 	bne	r2,zero,4c48 <_gp+0xffff645c>
    4c8c:	8221883a 	add	r16,r16,r8
    4c90:	88800117 	ldw	r2,4(r17)
    4c94:	b00f883a 	mov	r7,r22
    4c98:	b80d883a 	mov	r6,r23
    4c9c:	880b883a 	mov	r5,r17
    4ca0:	a009883a 	mov	r4,r20
    4ca4:	103ee83a 	callr	r2
    4ca8:	103fe71e 	bne	r2,zero,4c48 <_gp+0xffff645c>
    4cac:	85a1883a 	add	r16,r16,r22
    4cb0:	e02d883a 	mov	r22,fp
    4cb4:	00001106 	br	4cfc <___vfprintf_internal_r+0x4e4>
    4cb8:	00c00044 	movi	r3,1
    4cbc:	04ffffc4 	movi	r19,-1
    4cc0:	d8000e15 	stw	zero,56(sp)
    4cc4:	d8c00a15 	stw	r3,40(sp)
    4cc8:	05400284 	movi	r21,10
    4ccc:	9825883a 	mov	r18,r19
    4cd0:	d8000c15 	stw	zero,48(sp)
    4cd4:	d8000b15 	stw	zero,44(sp)
    4cd8:	182f883a 	mov	r23,r3
    4cdc:	00000806 	br	4d00 <___vfprintf_internal_r+0x4e8>
    4ce0:	ddc00b15 	stw	r23,44(sp)
    4ce4:	05c00084 	movi	r23,2
    4ce8:	00000506 	br	4d00 <___vfprintf_internal_r+0x4e8>
    4cec:	00c00044 	movi	r3,1
    4cf0:	d8c00c15 	stw	r3,48(sp)
    4cf4:	05c000c4 	movi	r23,3
    4cf8:	00000106 	br	4d00 <___vfprintf_internal_r+0x4e8>
    4cfc:	002f883a 	mov	r23,zero
    4d00:	d8c00f17 	ldw	r3,60(sp)
    4d04:	18c00044 	addi	r3,r3,1
    4d08:	d8c00f15 	stw	r3,60(sp)
    4d0c:	003edc06 	br	4880 <_gp+0xffff6094>
    4d10:	8005883a 	mov	r2,r16
    4d14:	dfc01a17 	ldw	ra,104(sp)
    4d18:	df001917 	ldw	fp,100(sp)
    4d1c:	ddc01817 	ldw	r23,96(sp)
    4d20:	dd801717 	ldw	r22,92(sp)
    4d24:	dd401617 	ldw	r21,88(sp)
    4d28:	dd001517 	ldw	r20,84(sp)
    4d2c:	dcc01417 	ldw	r19,80(sp)
    4d30:	dc801317 	ldw	r18,76(sp)
    4d34:	dc401217 	ldw	r17,72(sp)
    4d38:	dc001117 	ldw	r16,68(sp)
    4d3c:	dec01b04 	addi	sp,sp,108
    4d40:	f800283a 	ret

00004d44 <__vfprintf_internal>:
    4d44:	00800034 	movhi	r2,0
    4d48:	1099fe04 	addi	r2,r2,26616
    4d4c:	300f883a 	mov	r7,r6
    4d50:	280d883a 	mov	r6,r5
    4d54:	200b883a 	mov	r5,r4
    4d58:	11000017 	ldw	r4,0(r2)
    4d5c:	00048181 	jmpi	4818 <___vfprintf_internal_r>

00004d60 <__call_exitprocs>:
    4d60:	defff504 	addi	sp,sp,-44
    4d64:	dd000515 	stw	r20,20(sp)
    4d68:	05000034 	movhi	r20,0
    4d6c:	dc800315 	stw	r18,12(sp)
    4d70:	dfc00a15 	stw	ra,40(sp)
    4d74:	df000915 	stw	fp,36(sp)
    4d78:	ddc00815 	stw	r23,32(sp)
    4d7c:	dd800715 	stw	r22,28(sp)
    4d80:	dd400615 	stw	r21,24(sp)
    4d84:	dcc00415 	stw	r19,16(sp)
    4d88:	dc400215 	stw	r17,8(sp)
    4d8c:	dc000115 	stw	r16,4(sp)
    4d90:	d9000015 	stw	r4,0(sp)
    4d94:	2825883a 	mov	r18,r5
    4d98:	a519fd04 	addi	r20,r20,26612
    4d9c:	a4400017 	ldw	r17,0(r20)
    4da0:	8cc00c17 	ldw	r19,48(r17)
    4da4:	8c400c04 	addi	r17,r17,48
    4da8:	98004526 	beq	r19,zero,4ec0 <__call_exitprocs+0x160>
    4dac:	9c000117 	ldw	r16,4(r19)
    4db0:	00900034 	movhi	r2,16384
    4db4:	10bfffc4 	addi	r2,r2,-1
    4db8:	9d402217 	ldw	r21,136(r19)
    4dbc:	85bfffc4 	addi	r22,r16,-1
    4dc0:	80a1883a 	add	r16,r16,r2
    4dc4:	8421883a 	add	r16,r16,r16
    4dc8:	8421883a 	add	r16,r16,r16
    4dcc:	ac2f883a 	add	r23,r21,r16
    4dd0:	84000204 	addi	r16,r16,8
    4dd4:	9c21883a 	add	r16,r19,r16
    4dd8:	b0002716 	blt	r22,zero,4e78 <__call_exitprocs+0x118>
    4ddc:	90000726 	beq	r18,zero,4dfc <__call_exitprocs+0x9c>
    4de0:	a800041e 	bne	r21,zero,4df4 <__call_exitprocs+0x94>
    4de4:	b5bfffc4 	addi	r22,r22,-1
    4de8:	bdffff04 	addi	r23,r23,-4
    4dec:	843fff04 	addi	r16,r16,-4
    4df0:	003ff906 	br	4dd8 <_gp+0xffff65ec>
    4df4:	b9002017 	ldw	r4,128(r23)
    4df8:	913ffa1e 	bne	r18,r4,4de4 <_gp+0xffff65f8>
    4dfc:	99000117 	ldw	r4,4(r19)
    4e00:	82000017 	ldw	r8,0(r16)
    4e04:	213fffc4 	addi	r4,r4,-1
    4e08:	b100021e 	bne	r22,r4,4e14 <__call_exitprocs+0xb4>
    4e0c:	9d800115 	stw	r22,4(r19)
    4e10:	00000106 	br	4e18 <__call_exitprocs+0xb8>
    4e14:	80000015 	stw	zero,0(r16)
    4e18:	403ff226 	beq	r8,zero,4de4 <_gp+0xffff65f8>
    4e1c:	9f000117 	ldw	fp,4(r19)
    4e20:	a8000526 	beq	r21,zero,4e38 <__call_exitprocs+0xd8>
    4e24:	00800044 	movi	r2,1
    4e28:	1592983a 	sll	r9,r2,r22
    4e2c:	a9404017 	ldw	r5,256(r21)
    4e30:	494a703a 	and	r5,r9,r5
    4e34:	2800021e 	bne	r5,zero,4e40 <__call_exitprocs+0xe0>
    4e38:	403ee83a 	callr	r8
    4e3c:	00000906 	br	4e64 <__call_exitprocs+0x104>
    4e40:	a9004117 	ldw	r4,260(r21)
    4e44:	4908703a 	and	r4,r9,r4
    4e48:	2000041e 	bne	r4,zero,4e5c <__call_exitprocs+0xfc>
    4e4c:	b9400017 	ldw	r5,0(r23)
    4e50:	d9000017 	ldw	r4,0(sp)
    4e54:	403ee83a 	callr	r8
    4e58:	00000206 	br	4e64 <__call_exitprocs+0x104>
    4e5c:	b9000017 	ldw	r4,0(r23)
    4e60:	403ee83a 	callr	r8
    4e64:	99000117 	ldw	r4,4(r19)
    4e68:	e13fcc1e 	bne	fp,r4,4d9c <_gp+0xffff65b0>
    4e6c:	89000017 	ldw	r4,0(r17)
    4e70:	993fdc26 	beq	r19,r4,4de4 <_gp+0xffff65f8>
    4e74:	003fc906 	br	4d9c <_gp+0xffff65b0>
    4e78:	00800034 	movhi	r2,0
    4e7c:	10800004 	addi	r2,r2,0
    4e80:	10000f26 	beq	r2,zero,4ec0 <__call_exitprocs+0x160>
    4e84:	99400117 	ldw	r5,4(r19)
    4e88:	99000017 	ldw	r4,0(r19)
    4e8c:	2800091e 	bne	r5,zero,4eb4 <__call_exitprocs+0x154>
    4e90:	20000826 	beq	r4,zero,4eb4 <__call_exitprocs+0x154>
    4e94:	89000015 	stw	r4,0(r17)
    4e98:	a8000226 	beq	r21,zero,4ea4 <__call_exitprocs+0x144>
    4e9c:	a809883a 	mov	r4,r21
    4ea0:	00000000 	call	0 <__alt_mem_onchip_memory2_0-0x4000>
    4ea4:	9809883a 	mov	r4,r19
    4ea8:	00000000 	call	0 <__alt_mem_onchip_memory2_0-0x4000>
    4eac:	8cc00017 	ldw	r19,0(r17)
    4eb0:	003fbd06 	br	4da8 <_gp+0xffff65bc>
    4eb4:	9823883a 	mov	r17,r19
    4eb8:	2027883a 	mov	r19,r4
    4ebc:	003fba06 	br	4da8 <_gp+0xffff65bc>
    4ec0:	dfc00a17 	ldw	ra,40(sp)
    4ec4:	df000917 	ldw	fp,36(sp)
    4ec8:	ddc00817 	ldw	r23,32(sp)
    4ecc:	dd800717 	ldw	r22,28(sp)
    4ed0:	dd400617 	ldw	r21,24(sp)
    4ed4:	dd000517 	ldw	r20,20(sp)
    4ed8:	dcc00417 	ldw	r19,16(sp)
    4edc:	dc800317 	ldw	r18,12(sp)
    4ee0:	dc400217 	ldw	r17,8(sp)
    4ee4:	dc000117 	ldw	r16,4(sp)
    4ee8:	dec00b04 	addi	sp,sp,44
    4eec:	f800283a 	ret

00004ef0 <__sfvwrite_small_dev>:
    4ef0:	2880000b 	ldhu	r2,0(r5)
    4ef4:	1080020c 	andi	r2,r2,8
    4ef8:	10002126 	beq	r2,zero,4f80 <__sfvwrite_small_dev+0x90>
    4efc:	2880008f 	ldh	r2,2(r5)
    4f00:	defffa04 	addi	sp,sp,-24
    4f04:	dc000015 	stw	r16,0(sp)
    4f08:	dfc00515 	stw	ra,20(sp)
    4f0c:	dd000415 	stw	r20,16(sp)
    4f10:	dcc00315 	stw	r19,12(sp)
    4f14:	dc800215 	stw	r18,8(sp)
    4f18:	dc400115 	stw	r17,4(sp)
    4f1c:	2821883a 	mov	r16,r5
    4f20:	10001216 	blt	r2,zero,4f6c <__sfvwrite_small_dev+0x7c>
    4f24:	2027883a 	mov	r19,r4
    4f28:	3025883a 	mov	r18,r6
    4f2c:	3823883a 	mov	r17,r7
    4f30:	05010004 	movi	r20,1024
    4f34:	04400b0e 	bge	zero,r17,4f64 <__sfvwrite_small_dev+0x74>
    4f38:	880f883a 	mov	r7,r17
    4f3c:	a440010e 	bge	r20,r17,4f44 <__sfvwrite_small_dev+0x54>
    4f40:	01c10004 	movi	r7,1024
    4f44:	8140008f 	ldh	r5,2(r16)
    4f48:	900d883a 	mov	r6,r18
    4f4c:	9809883a 	mov	r4,r19
    4f50:	0004fa80 	call	4fa8 <_write_r>
    4f54:	0080050e 	bge	zero,r2,4f6c <__sfvwrite_small_dev+0x7c>
    4f58:	88a3c83a 	sub	r17,r17,r2
    4f5c:	90a5883a 	add	r18,r18,r2
    4f60:	003ff406 	br	4f34 <_gp+0xffff6748>
    4f64:	0005883a 	mov	r2,zero
    4f68:	00000706 	br	4f88 <__sfvwrite_small_dev+0x98>
    4f6c:	8080000b 	ldhu	r2,0(r16)
    4f70:	10801014 	ori	r2,r2,64
    4f74:	8080000d 	sth	r2,0(r16)
    4f78:	00bfffc4 	movi	r2,-1
    4f7c:	00000206 	br	4f88 <__sfvwrite_small_dev+0x98>
    4f80:	00bfffc4 	movi	r2,-1
    4f84:	f800283a 	ret
    4f88:	dfc00517 	ldw	ra,20(sp)
    4f8c:	dd000417 	ldw	r20,16(sp)
    4f90:	dcc00317 	ldw	r19,12(sp)
    4f94:	dc800217 	ldw	r18,8(sp)
    4f98:	dc400117 	ldw	r17,4(sp)
    4f9c:	dc000017 	ldw	r16,0(sp)
    4fa0:	dec00604 	addi	sp,sp,24
    4fa4:	f800283a 	ret

00004fa8 <_write_r>:
    4fa8:	defffd04 	addi	sp,sp,-12
    4fac:	dc000015 	stw	r16,0(sp)
    4fb0:	04000034 	movhi	r16,0
    4fb4:	dc400115 	stw	r17,4(sp)
    4fb8:	841abe04 	addi	r16,r16,27384
    4fbc:	2023883a 	mov	r17,r4
    4fc0:	2809883a 	mov	r4,r5
    4fc4:	300b883a 	mov	r5,r6
    4fc8:	380d883a 	mov	r6,r7
    4fcc:	dfc00215 	stw	ra,8(sp)
    4fd0:	80000015 	stw	zero,0(r16)
    4fd4:	00056440 	call	5644 <write>
    4fd8:	00ffffc4 	movi	r3,-1
    4fdc:	10c0031e 	bne	r2,r3,4fec <_write_r+0x44>
    4fe0:	80c00017 	ldw	r3,0(r16)
    4fe4:	18000126 	beq	r3,zero,4fec <_write_r+0x44>
    4fe8:	88c00015 	stw	r3,0(r17)
    4fec:	dfc00217 	ldw	ra,8(sp)
    4ff0:	dc400117 	ldw	r17,4(sp)
    4ff4:	dc000017 	ldw	r16,0(sp)
    4ff8:	dec00304 	addi	sp,sp,12
    4ffc:	f800283a 	ret

00005000 <__divsi3>:
    5000:	20001b16 	blt	r4,zero,5070 <__divsi3+0x70>
    5004:	000f883a 	mov	r7,zero
    5008:	28001616 	blt	r5,zero,5064 <__divsi3+0x64>
    500c:	200d883a 	mov	r6,r4
    5010:	29001a2e 	bgeu	r5,r4,507c <__divsi3+0x7c>
    5014:	00800804 	movi	r2,32
    5018:	00c00044 	movi	r3,1
    501c:	00000106 	br	5024 <__divsi3+0x24>
    5020:	10000d26 	beq	r2,zero,5058 <__divsi3+0x58>
    5024:	294b883a 	add	r5,r5,r5
    5028:	10bfffc4 	addi	r2,r2,-1
    502c:	18c7883a 	add	r3,r3,r3
    5030:	293ffb36 	bltu	r5,r4,5020 <_gp+0xffff6834>
    5034:	0005883a 	mov	r2,zero
    5038:	18000726 	beq	r3,zero,5058 <__divsi3+0x58>
    503c:	0005883a 	mov	r2,zero
    5040:	31400236 	bltu	r6,r5,504c <__divsi3+0x4c>
    5044:	314dc83a 	sub	r6,r6,r5
    5048:	10c4b03a 	or	r2,r2,r3
    504c:	1806d07a 	srli	r3,r3,1
    5050:	280ad07a 	srli	r5,r5,1
    5054:	183ffa1e 	bne	r3,zero,5040 <_gp+0xffff6854>
    5058:	38000126 	beq	r7,zero,5060 <__divsi3+0x60>
    505c:	0085c83a 	sub	r2,zero,r2
    5060:	f800283a 	ret
    5064:	014bc83a 	sub	r5,zero,r5
    5068:	39c0005c 	xori	r7,r7,1
    506c:	003fe706 	br	500c <_gp+0xffff6820>
    5070:	0109c83a 	sub	r4,zero,r4
    5074:	01c00044 	movi	r7,1
    5078:	003fe306 	br	5008 <_gp+0xffff681c>
    507c:	00c00044 	movi	r3,1
    5080:	003fee06 	br	503c <_gp+0xffff6850>

00005084 <__modsi3>:
    5084:	20001716 	blt	r4,zero,50e4 <__modsi3+0x60>
    5088:	000f883a 	mov	r7,zero
    508c:	2005883a 	mov	r2,r4
    5090:	28001216 	blt	r5,zero,50dc <__modsi3+0x58>
    5094:	2900162e 	bgeu	r5,r4,50f0 <__modsi3+0x6c>
    5098:	01800804 	movi	r6,32
    509c:	00c00044 	movi	r3,1
    50a0:	00000106 	br	50a8 <__modsi3+0x24>
    50a4:	30000a26 	beq	r6,zero,50d0 <__modsi3+0x4c>
    50a8:	294b883a 	add	r5,r5,r5
    50ac:	31bfffc4 	addi	r6,r6,-1
    50b0:	18c7883a 	add	r3,r3,r3
    50b4:	293ffb36 	bltu	r5,r4,50a4 <_gp+0xffff68b8>
    50b8:	18000526 	beq	r3,zero,50d0 <__modsi3+0x4c>
    50bc:	1806d07a 	srli	r3,r3,1
    50c0:	11400136 	bltu	r2,r5,50c8 <__modsi3+0x44>
    50c4:	1145c83a 	sub	r2,r2,r5
    50c8:	280ad07a 	srli	r5,r5,1
    50cc:	183ffb1e 	bne	r3,zero,50bc <_gp+0xffff68d0>
    50d0:	38000126 	beq	r7,zero,50d8 <__modsi3+0x54>
    50d4:	0085c83a 	sub	r2,zero,r2
    50d8:	f800283a 	ret
    50dc:	014bc83a 	sub	r5,zero,r5
    50e0:	003fec06 	br	5094 <_gp+0xffff68a8>
    50e4:	0109c83a 	sub	r4,zero,r4
    50e8:	01c00044 	movi	r7,1
    50ec:	003fe706 	br	508c <_gp+0xffff68a0>
    50f0:	00c00044 	movi	r3,1
    50f4:	003ff106 	br	50bc <_gp+0xffff68d0>

000050f8 <__udivsi3>:
    50f8:	200d883a 	mov	r6,r4
    50fc:	2900152e 	bgeu	r5,r4,5154 <__udivsi3+0x5c>
    5100:	28001416 	blt	r5,zero,5154 <__udivsi3+0x5c>
    5104:	00800804 	movi	r2,32
    5108:	00c00044 	movi	r3,1
    510c:	00000206 	br	5118 <__udivsi3+0x20>
    5110:	10000e26 	beq	r2,zero,514c <__udivsi3+0x54>
    5114:	28000516 	blt	r5,zero,512c <__udivsi3+0x34>
    5118:	294b883a 	add	r5,r5,r5
    511c:	10bfffc4 	addi	r2,r2,-1
    5120:	18c7883a 	add	r3,r3,r3
    5124:	293ffa36 	bltu	r5,r4,5110 <_gp+0xffff6924>
    5128:	18000826 	beq	r3,zero,514c <__udivsi3+0x54>
    512c:	0005883a 	mov	r2,zero
    5130:	31400236 	bltu	r6,r5,513c <__udivsi3+0x44>
    5134:	314dc83a 	sub	r6,r6,r5
    5138:	10c4b03a 	or	r2,r2,r3
    513c:	1806d07a 	srli	r3,r3,1
    5140:	280ad07a 	srli	r5,r5,1
    5144:	183ffa1e 	bne	r3,zero,5130 <_gp+0xffff6944>
    5148:	f800283a 	ret
    514c:	0005883a 	mov	r2,zero
    5150:	f800283a 	ret
    5154:	00c00044 	movi	r3,1
    5158:	003ff406 	br	512c <_gp+0xffff6940>

0000515c <__umodsi3>:
    515c:	2005883a 	mov	r2,r4
    5160:	2900122e 	bgeu	r5,r4,51ac <__umodsi3+0x50>
    5164:	28001116 	blt	r5,zero,51ac <__umodsi3+0x50>
    5168:	01800804 	movi	r6,32
    516c:	00c00044 	movi	r3,1
    5170:	00000206 	br	517c <__umodsi3+0x20>
    5174:	30000c26 	beq	r6,zero,51a8 <__umodsi3+0x4c>
    5178:	28000516 	blt	r5,zero,5190 <__umodsi3+0x34>
    517c:	294b883a 	add	r5,r5,r5
    5180:	31bfffc4 	addi	r6,r6,-1
    5184:	18c7883a 	add	r3,r3,r3
    5188:	293ffa36 	bltu	r5,r4,5174 <_gp+0xffff6988>
    518c:	18000626 	beq	r3,zero,51a8 <__umodsi3+0x4c>
    5190:	1806d07a 	srli	r3,r3,1
    5194:	11400136 	bltu	r2,r5,519c <__umodsi3+0x40>
    5198:	1145c83a 	sub	r2,r2,r5
    519c:	280ad07a 	srli	r5,r5,1
    51a0:	183ffb1e 	bne	r3,zero,5190 <_gp+0xffff69a4>
    51a4:	f800283a 	ret
    51a8:	f800283a 	ret
    51ac:	00c00044 	movi	r3,1
    51b0:	003ff706 	br	5190 <_gp+0xffff69a4>

000051b4 <__mulsi3>:
    51b4:	0005883a 	mov	r2,zero
    51b8:	20000726 	beq	r4,zero,51d8 <__mulsi3+0x24>
    51bc:	20c0004c 	andi	r3,r4,1
    51c0:	2008d07a 	srli	r4,r4,1
    51c4:	18000126 	beq	r3,zero,51cc <__mulsi3+0x18>
    51c8:	1145883a 	add	r2,r2,r5
    51cc:	294b883a 	add	r5,r5,r5
    51d0:	203ffa1e 	bne	r4,zero,51bc <_gp+0xffff69d0>
    51d4:	f800283a 	ret
    51d8:	f800283a 	ret

000051dc <_exit>:
 *
 * ALT_EXIT is mapped onto the _exit() system call in alt_syscall.h
 */

void ALT_EXIT (int exit_code)
{
    51dc:	defffd04 	addi	sp,sp,-12
    51e0:	df000215 	stw	fp,8(sp)
    51e4:	df000204 	addi	fp,sp,8
    51e8:	e13fff15 	stw	r4,-4(fp)
  ALT_LOG_PRINT_BOOT("[alt_exit.c] Entering _exit() function.\r\n");
  ALT_LOG_PRINT_BOOT("[alt_exit.c] Exit code from main was %d.\r\n",exit_code);
  /* Stop all other threads */

  ALT_LOG_PRINT_BOOT("[alt_exit.c] Calling ALT_OS_STOP().\r\n");
  ALT_OS_STOP();
    51ec:	0001883a 	nop
    51f0:	e0bfff17 	ldw	r2,-4(fp)
    51f4:	e0bffe15 	stw	r2,-8(fp)
/*
 * Routine called on exit.
 */
static ALT_INLINE ALT_ALWAYS_INLINE void alt_sim_halt(int exit_code)
{
  register int r2 asm ("r2") = exit_code;
    51f8:	e0bffe17 	ldw	r2,-8(fp)
  __asm__ volatile ("\n0:\n\taddi %0,%0, -1\n\tbgt %0,zero,0b" : : "r" (ALT_CPU_FREQ/100) ); /* Delay for >30ms */

  __asm__ volatile ("break 2" : : "r"(r2), "r"(r3) ALT_GMON_DATA );

#else /* !DEBUG_STUB */
  if (r2) {
    51fc:	10000226 	beq	r2,zero,5208 <_exit+0x2c>
    ALT_SIM_FAIL();
    5200:	002af070 	cmpltui	zero,zero,43969
    5204:	00000106 	br	520c <_exit+0x30>
  } else {
    ALT_SIM_PASS();
    5208:	002af0b0 	cmpltui	zero,zero,43970
  ALT_SIM_HALT(exit_code);

  /* spin forever, since there's no where to go back to */

  ALT_LOG_PRINT_BOOT("[alt_exit.c] Spinning forever.\r\n");
  while (1);
    520c:	003fff06 	br	520c <_gp+0xffff6a20>

00005210 <alt_ic_isr_register>:
  * @param irq              IRQ number
  * @return                 0 if successful, else error (-1)
  */
int alt_ic_isr_register(alt_u32 ic_id, alt_u32 irq, alt_isr_func isr, 
  void *isr_context, void *flags)
{
    5210:	defff904 	addi	sp,sp,-28
    5214:	dfc00615 	stw	ra,24(sp)
    5218:	df000515 	stw	fp,20(sp)
    521c:	df000504 	addi	fp,sp,20
    5220:	e13ffc15 	stw	r4,-16(fp)
    5224:	e17ffd15 	stw	r5,-12(fp)
    5228:	e1bffe15 	stw	r6,-8(fp)
    522c:	e1ffff15 	stw	r7,-4(fp)
    return alt_iic_isr_register(ic_id, irq, isr, isr_context, flags);
    5230:	e0800217 	ldw	r2,8(fp)
    5234:	d8800015 	stw	r2,0(sp)
    5238:	e1ffff17 	ldw	r7,-4(fp)
    523c:	e1bffe17 	ldw	r6,-8(fp)
    5240:	e17ffd17 	ldw	r5,-12(fp)
    5244:	e13ffc17 	ldw	r4,-16(fp)
    5248:	00053c00 	call	53c0 <alt_iic_isr_register>
}  
    524c:	e037883a 	mov	sp,fp
    5250:	dfc00117 	ldw	ra,4(sp)
    5254:	df000017 	ldw	fp,0(sp)
    5258:	dec00204 	addi	sp,sp,8
    525c:	f800283a 	ret

00005260 <alt_ic_irq_enable>:
  * @param ic_id            Ignored.
  * @param irq              IRQ number
  * @return                 0 if successful, else error (-1)
  */
int alt_ic_irq_enable (alt_u32 ic_id, alt_u32 irq)
{
    5260:	defff904 	addi	sp,sp,-28
    5264:	df000615 	stw	fp,24(sp)
    5268:	df000604 	addi	fp,sp,24
    526c:	e13ffe15 	stw	r4,-8(fp)
    5270:	e17fff15 	stw	r5,-4(fp)
    5274:	e0bfff17 	ldw	r2,-4(fp)
    5278:	e0bffa15 	stw	r2,-24(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
    527c:	0005303a 	rdctl	r2,status
    5280:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
    5284:	e0fffb17 	ldw	r3,-20(fp)
    5288:	00bfff84 	movi	r2,-2
    528c:	1884703a 	and	r2,r3,r2
    5290:	1001703a 	wrctl	status,r2
  
  return context;
    5294:	e0bffb17 	ldw	r2,-20(fp)
static ALT_INLINE int ALT_ALWAYS_INLINE alt_irq_enable (alt_u32 id)
{
  alt_irq_context  status;
  extern volatile alt_u32 alt_irq_active;

  status = alt_irq_disable_all ();
    5298:	e0bffc15 	stw	r2,-16(fp)

  alt_irq_active |= (1 << id);
    529c:	00c00044 	movi	r3,1
    52a0:	e0bffa17 	ldw	r2,-24(fp)
    52a4:	1884983a 	sll	r2,r3,r2
    52a8:	1007883a 	mov	r3,r2
    52ac:	d0a0c417 	ldw	r2,-31984(gp)
    52b0:	1884b03a 	or	r2,r3,r2
    52b4:	d0a0c415 	stw	r2,-31984(gp)
  NIOS2_WRITE_IENABLE (alt_irq_active);
    52b8:	d0a0c417 	ldw	r2,-31984(gp)
    52bc:	100170fa 	wrctl	ienable,r2
    52c0:	e0bffc17 	ldw	r2,-16(fp)
    52c4:	e0bffd15 	stw	r2,-12(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
    52c8:	e0bffd17 	ldw	r2,-12(fp)
    52cc:	1001703a 	wrctl	status,r2

  alt_irq_enable_all(status);

  return 0;
    52d0:	0005883a 	mov	r2,zero
    return alt_irq_enable(irq);
    52d4:	0001883a 	nop
}
    52d8:	e037883a 	mov	sp,fp
    52dc:	df000017 	ldw	fp,0(sp)
    52e0:	dec00104 	addi	sp,sp,4
    52e4:	f800283a 	ret

000052e8 <alt_ic_irq_disable>:
  * @param ic_id            Ignored.
  * @param irq              IRQ number
  * @return                 0 if successful, else error (-1)
  */
int alt_ic_irq_disable(alt_u32 ic_id, alt_u32 irq)
{
    52e8:	defff904 	addi	sp,sp,-28
    52ec:	df000615 	stw	fp,24(sp)
    52f0:	df000604 	addi	fp,sp,24
    52f4:	e13ffe15 	stw	r4,-8(fp)
    52f8:	e17fff15 	stw	r5,-4(fp)
    52fc:	e0bfff17 	ldw	r2,-4(fp)
    5300:	e0bffa15 	stw	r2,-24(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
    5304:	0005303a 	rdctl	r2,status
    5308:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
    530c:	e0fffb17 	ldw	r3,-20(fp)
    5310:	00bfff84 	movi	r2,-2
    5314:	1884703a 	and	r2,r3,r2
    5318:	1001703a 	wrctl	status,r2
  
  return context;
    531c:	e0bffb17 	ldw	r2,-20(fp)
static ALT_INLINE int ALT_ALWAYS_INLINE alt_irq_disable (alt_u32 id)
{
  alt_irq_context  status;
  extern volatile alt_u32 alt_irq_active;

  status = alt_irq_disable_all ();
    5320:	e0bffc15 	stw	r2,-16(fp)

  alt_irq_active &= ~(1 << id);
    5324:	00c00044 	movi	r3,1
    5328:	e0bffa17 	ldw	r2,-24(fp)
    532c:	1884983a 	sll	r2,r3,r2
    5330:	0084303a 	nor	r2,zero,r2
    5334:	1007883a 	mov	r3,r2
    5338:	d0a0c417 	ldw	r2,-31984(gp)
    533c:	1884703a 	and	r2,r3,r2
    5340:	d0a0c415 	stw	r2,-31984(gp)
  NIOS2_WRITE_IENABLE (alt_irq_active);
    5344:	d0a0c417 	ldw	r2,-31984(gp)
    5348:	100170fa 	wrctl	ienable,r2
    534c:	e0bffc17 	ldw	r2,-16(fp)
    5350:	e0bffd15 	stw	r2,-12(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
    5354:	e0bffd17 	ldw	r2,-12(fp)
    5358:	1001703a 	wrctl	status,r2

  alt_irq_enable_all(status);

  return 0;
    535c:	0005883a 	mov	r2,zero
    return alt_irq_disable(irq);
    5360:	0001883a 	nop
}
    5364:	e037883a 	mov	sp,fp
    5368:	df000017 	ldw	fp,0(sp)
    536c:	dec00104 	addi	sp,sp,4
    5370:	f800283a 	ret

00005374 <alt_ic_irq_enabled>:
  * @param irq              IRQ number
  * @return                 Zero if corresponding interrupt is disabled and
  *                         non-zero otherwise.
  */
alt_u32 alt_ic_irq_enabled(alt_u32 ic_id, alt_u32 irq)
{
    5374:	defffc04 	addi	sp,sp,-16
    5378:	df000315 	stw	fp,12(sp)
    537c:	df000304 	addi	fp,sp,12
    5380:	e13ffe15 	stw	r4,-8(fp)
    5384:	e17fff15 	stw	r5,-4(fp)
    alt_u32 irq_enabled;

    NIOS2_READ_IENABLE(irq_enabled);
    5388:	000530fa 	rdctl	r2,ienable
    538c:	e0bffd15 	stw	r2,-12(fp)

    return (irq_enabled & (1 << irq)) ? 1: 0;
    5390:	00c00044 	movi	r3,1
    5394:	e0bfff17 	ldw	r2,-4(fp)
    5398:	1884983a 	sll	r2,r3,r2
    539c:	1007883a 	mov	r3,r2
    53a0:	e0bffd17 	ldw	r2,-12(fp)
    53a4:	1884703a 	and	r2,r3,r2
    53a8:	1004c03a 	cmpne	r2,r2,zero
    53ac:	10803fcc 	andi	r2,r2,255
}
    53b0:	e037883a 	mov	sp,fp
    53b4:	df000017 	ldw	fp,0(sp)
    53b8:	dec00104 	addi	sp,sp,4
    53bc:	f800283a 	ret

000053c0 <alt_iic_isr_register>:
  * @param flags            
  * @return                 0 if successful, else error (-1)
  */
int alt_iic_isr_register(alt_u32 ic_id, alt_u32 irq, alt_isr_func isr, 
  void *isr_context, void *flags)
{
    53c0:	defff504 	addi	sp,sp,-44
    53c4:	dfc00a15 	stw	ra,40(sp)
    53c8:	df000915 	stw	fp,36(sp)
    53cc:	df000904 	addi	fp,sp,36
    53d0:	e13ffc15 	stw	r4,-16(fp)
    53d4:	e17ffd15 	stw	r5,-12(fp)
    53d8:	e1bffe15 	stw	r6,-8(fp)
    53dc:	e1ffff15 	stw	r7,-4(fp)
  int rc = -EINVAL;  
    53e0:	00bffa84 	movi	r2,-22
    53e4:	e0bff715 	stw	r2,-36(fp)
  int id = irq;             /* IRQ interpreted as the interrupt ID. */
    53e8:	e0bffd17 	ldw	r2,-12(fp)
    53ec:	e0bff815 	stw	r2,-32(fp)
  alt_irq_context status;

  if (id < ALT_NIRQ)
    53f0:	e0bff817 	ldw	r2,-32(fp)
    53f4:	10800808 	cmpgei	r2,r2,32
    53f8:	1000271e 	bne	r2,zero,5498 <alt_iic_isr_register+0xd8>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
    53fc:	0005303a 	rdctl	r2,status
    5400:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
    5404:	e0fffb17 	ldw	r3,-20(fp)
    5408:	00bfff84 	movi	r2,-2
    540c:	1884703a 	and	r2,r3,r2
    5410:	1001703a 	wrctl	status,r2
  
  return context;
    5414:	e0bffb17 	ldw	r2,-20(fp)
     * interrupts are disabled while the handler tables are updated to ensure
     * that an interrupt doesn't occur while the tables are in an inconsistant
     * state.
     */

    status = alt_irq_disable_all();
    5418:	e0bffa15 	stw	r2,-24(fp)

    alt_irq[id].handler = isr;
    541c:	00800034 	movhi	r2,0
    5420:	109ac404 	addi	r2,r2,27408
    5424:	e0fff817 	ldw	r3,-32(fp)
    5428:	180690fa 	slli	r3,r3,3
    542c:	10c5883a 	add	r2,r2,r3
    5430:	e0fffe17 	ldw	r3,-8(fp)
    5434:	10c00015 	stw	r3,0(r2)
    alt_irq[id].context = isr_context;
    5438:	00800034 	movhi	r2,0
    543c:	109ac404 	addi	r2,r2,27408
    5440:	e0fff817 	ldw	r3,-32(fp)
    5444:	180690fa 	slli	r3,r3,3
    5448:	10c5883a 	add	r2,r2,r3
    544c:	10800104 	addi	r2,r2,4
    5450:	e0ffff17 	ldw	r3,-4(fp)
    5454:	10c00015 	stw	r3,0(r2)

    rc = (isr) ? alt_ic_irq_enable(ic_id, id) : alt_ic_irq_disable(ic_id, id);
    5458:	e0bffe17 	ldw	r2,-8(fp)
    545c:	10000526 	beq	r2,zero,5474 <alt_iic_isr_register+0xb4>
    5460:	e0bff817 	ldw	r2,-32(fp)
    5464:	100b883a 	mov	r5,r2
    5468:	e13ffc17 	ldw	r4,-16(fp)
    546c:	00052600 	call	5260 <alt_ic_irq_enable>
    5470:	00000406 	br	5484 <alt_iic_isr_register+0xc4>
    5474:	e0bff817 	ldw	r2,-32(fp)
    5478:	100b883a 	mov	r5,r2
    547c:	e13ffc17 	ldw	r4,-16(fp)
    5480:	00052e80 	call	52e8 <alt_ic_irq_disable>
    5484:	e0bff715 	stw	r2,-36(fp)
    5488:	e0bffa17 	ldw	r2,-24(fp)
    548c:	e0bff915 	stw	r2,-28(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
    5490:	e0bff917 	ldw	r2,-28(fp)
    5494:	1001703a 	wrctl	status,r2

    alt_irq_enable_all(status);
  }

  return rc; 
    5498:	e0bff717 	ldw	r2,-36(fp)
}
    549c:	e037883a 	mov	sp,fp
    54a0:	dfc00117 	ldw	ra,4(sp)
    54a4:	df000017 	ldw	fp,0(sp)
    54a8:	dec00204 	addi	sp,sp,8
    54ac:	f800283a 	ret

000054b0 <alt_load_section>:
 */

static void ALT_INLINE alt_load_section (alt_u32* from, 
                                         alt_u32* to, 
                                         alt_u32* end)
{
    54b0:	defffc04 	addi	sp,sp,-16
    54b4:	df000315 	stw	fp,12(sp)
    54b8:	df000304 	addi	fp,sp,12
    54bc:	e13ffd15 	stw	r4,-12(fp)
    54c0:	e17ffe15 	stw	r5,-8(fp)
    54c4:	e1bfff15 	stw	r6,-4(fp)
  if (to != from)
    54c8:	e0fffe17 	ldw	r3,-8(fp)
    54cc:	e0bffd17 	ldw	r2,-12(fp)
    54d0:	18800c26 	beq	r3,r2,5504 <alt_load_section+0x54>
  {
    while( to != end )
    54d4:	00000806 	br	54f8 <alt_load_section+0x48>
    {
      *to++ = *from++;
    54d8:	e0bffe17 	ldw	r2,-8(fp)
    54dc:	10c00104 	addi	r3,r2,4
    54e0:	e0fffe15 	stw	r3,-8(fp)
    54e4:	e0fffd17 	ldw	r3,-12(fp)
    54e8:	19000104 	addi	r4,r3,4
    54ec:	e13ffd15 	stw	r4,-12(fp)
    54f0:	18c00017 	ldw	r3,0(r3)
    54f4:	10c00015 	stw	r3,0(r2)
                                         alt_u32* to, 
                                         alt_u32* end)
{
  if (to != from)
  {
    while( to != end )
    54f8:	e0fffe17 	ldw	r3,-8(fp)
    54fc:	e0bfff17 	ldw	r2,-4(fp)
    5500:	18bff51e 	bne	r3,r2,54d8 <_gp+0xffff6cec>
    {
      *to++ = *from++;
    }
  }
}
    5504:	0001883a 	nop
    5508:	e037883a 	mov	sp,fp
    550c:	df000017 	ldw	fp,0(sp)
    5510:	dec00104 	addi	sp,sp,4
    5514:	f800283a 	ret

00005518 <alt_load>:
 * there is no bootloader, so this application is responsible for loading to
 * RAM any sections that are required.
 */  

void alt_load (void)
{
    5518:	defffe04 	addi	sp,sp,-8
    551c:	dfc00115 	stw	ra,4(sp)
    5520:	df000015 	stw	fp,0(sp)
    5524:	d839883a 	mov	fp,sp
  /* 
   * Copy the .rwdata section. 
   */

  alt_load_section (&__flash_rwdata_start, 
    5528:	01800034 	movhi	r6,0
    552c:	319a0604 	addi	r6,r6,26648
    5530:	01400034 	movhi	r5,0
    5534:	29594e04 	addi	r5,r5,25912
    5538:	01000034 	movhi	r4,0
    553c:	211a0604 	addi	r4,r4,26648
    5540:	00054b00 	call	54b0 <alt_load_section>

  /*
   * Copy the exception handler.
   */

  alt_load_section (&__flash_exceptions_start, 
    5544:	01800034 	movhi	r6,0
    5548:	31908c04 	addi	r6,r6,16944
    554c:	01400034 	movhi	r5,0
    5550:	29500804 	addi	r5,r5,16416
    5554:	01000034 	movhi	r4,0
    5558:	21100804 	addi	r4,r4,16416
    555c:	00054b00 	call	54b0 <alt_load_section>

  /*
   * Copy the .rodata section.
   */

  alt_load_section (&__flash_rodata_start, 
    5560:	01800034 	movhi	r6,0
    5564:	31994e04 	addi	r6,r6,25912
    5568:	01400034 	movhi	r5,0
    556c:	29590f04 	addi	r5,r5,25660
    5570:	01000034 	movhi	r4,0
    5574:	21190f04 	addi	r4,r4,25660
    5578:	00054b00 	call	54b0 <alt_load_section>
  
  /*
   * Now ensure that the caches are in synch.
   */
  
  alt_dcache_flush_all();
    557c:	0005b3c0 	call	5b3c <alt_dcache_flush_all>
  alt_icache_flush_all();
    5580:	0005c680 	call	5c68 <alt_icache_flush_all>
}
    5584:	0001883a 	nop
    5588:	e037883a 	mov	sp,fp
    558c:	dfc00117 	ldw	ra,4(sp)
    5590:	df000017 	ldw	fp,0(sp)
    5594:	dec00204 	addi	sp,sp,8
    5598:	f800283a 	ret

0000559c <alt_main>:
 * devices/filesystems/components in the system; and call the entry point for
 * the users application, i.e. main().
 */

void alt_main (void)
{
    559c:	defffd04 	addi	sp,sp,-12
    55a0:	dfc00215 	stw	ra,8(sp)
    55a4:	df000115 	stw	fp,4(sp)
    55a8:	df000104 	addi	fp,sp,4
#endif

  /* ALT LOG - please see HAL/sys/alt_log_printf.h for details */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Entering alt_main, calling alt_irq_init.\r\n");
  /* Initialize the interrupt controller. */
  alt_irq_init (NULL);
    55ac:	0009883a 	mov	r4,zero
    55b0:	00057780 	call	5778 <alt_irq_init>

  /* Initialize the operating system */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Done alt_irq_init, calling alt_os_init.\r\n");
  ALT_OS_INIT();
    55b4:	0001883a 	nop
  ALT_LOG_PRINT_BOOT("[alt_main.c] Done OS Init, calling alt_sem_create.\r\n");
  ALT_SEM_CREATE (&alt_fd_list_lock, 1);

  /* Initialize the device drivers/software components. */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling alt_sys_init.\r\n");
  alt_sys_init();
    55b8:	00057b00 	call	57b0 <alt_sys_init>
   * devices be present (not equal to /dev/null) and if direct drivers
   * aren't being used.
   */

    ALT_LOG_PRINT_BOOT("[alt_main.c] Redirecting IO.\r\n");
    alt_io_redirect(ALT_STDOUT, ALT_STDIN, ALT_STDERR);
    55bc:	01800034 	movhi	r6,0
    55c0:	31994104 	addi	r6,r6,25860
    55c4:	01400034 	movhi	r5,0
    55c8:	29594104 	addi	r5,r5,25860
    55cc:	01000034 	movhi	r4,0
    55d0:	21194104 	addi	r4,r4,25860
    55d4:	0005e080 	call	5e08 <alt_io_redirect>
  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling main.\r\n");

#ifdef ALT_NO_EXIT
  main (alt_argc, alt_argv, alt_envp);
#else
  result = main (alt_argc, alt_argv, alt_envp);
    55d8:	d0a0c517 	ldw	r2,-31980(gp)
    55dc:	d0e0c617 	ldw	r3,-31976(gp)
    55e0:	d120c717 	ldw	r4,-31972(gp)
    55e4:	200d883a 	mov	r6,r4
    55e8:	180b883a 	mov	r5,r3
    55ec:	1009883a 	mov	r4,r2
    55f0:	00045cc0 	call	45cc <main>
    55f4:	e0bfff15 	stw	r2,-4(fp)
  close(STDOUT_FILENO);
    55f8:	01000044 	movi	r4,1
    55fc:	0005a640 	call	5a64 <close>
  exit (result);
    5600:	e13fff17 	ldw	r4,-4(fp)
    5604:	00046540 	call	4654 <exit>

00005608 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
    5608:	defffe04 	addi	sp,sp,-8
    560c:	dfc00115 	stw	ra,4(sp)
    5610:	df000015 	stw	fp,0(sp)
    5614:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
    5618:	d0a00a17 	ldw	r2,-32728(gp)
    561c:	10000326 	beq	r2,zero,562c <alt_get_errno+0x24>
    5620:	d0a00a17 	ldw	r2,-32728(gp)
    5624:	103ee83a 	callr	r2
    5628:	00000106 	br	5630 <alt_get_errno+0x28>
    562c:	d0a0c304 	addi	r2,gp,-31988
}
    5630:	e037883a 	mov	sp,fp
    5634:	dfc00117 	ldw	ra,4(sp)
    5638:	df000017 	ldw	fp,0(sp)
    563c:	dec00204 	addi	sp,sp,8
    5640:	f800283a 	ret

00005644 <write>:
}

#else /* !ALT_USE_DIRECT_DRIVERS */

int ALT_WRITE (int file, const void *ptr, size_t len)
{
    5644:	defff904 	addi	sp,sp,-28
    5648:	dfc00615 	stw	ra,24(sp)
    564c:	df000515 	stw	fp,20(sp)
    5650:	df000504 	addi	fp,sp,20
    5654:	e13ffd15 	stw	r4,-12(fp)
    5658:	e17ffe15 	stw	r5,-8(fp)
    565c:	e1bfff15 	stw	r6,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
    5660:	e0bffd17 	ldw	r2,-12(fp)
    5664:	10000816 	blt	r2,zero,5688 <write+0x44>
    5668:	01400304 	movi	r5,12
    566c:	e13ffd17 	ldw	r4,-12(fp)
    5670:	00051b40 	call	51b4 <__mulsi3>
    5674:	1007883a 	mov	r3,r2
    5678:	00800034 	movhi	r2,0
    567c:	10999b04 	addi	r2,r2,26220
    5680:	1885883a 	add	r2,r3,r2
    5684:	00000106 	br	568c <write+0x48>
    5688:	0005883a 	mov	r2,zero
    568c:	e0bffb15 	stw	r2,-20(fp)
  
  if (fd)
    5690:	e0bffb17 	ldw	r2,-20(fp)
    5694:	10002126 	beq	r2,zero,571c <write+0xd8>
     * If the file has not been opened with write access, or if the driver does
     * not provide an implementation of write(), generate an error. Otherwise
     * call the drivers write() function to process the request.
     */

    if (((fd->fd_flags & O_ACCMODE) != O_RDONLY) && fd->dev->write)
    5698:	e0bffb17 	ldw	r2,-20(fp)
    569c:	10800217 	ldw	r2,8(r2)
    56a0:	108000cc 	andi	r2,r2,3
    56a4:	10001826 	beq	r2,zero,5708 <write+0xc4>
    56a8:	e0bffb17 	ldw	r2,-20(fp)
    56ac:	10800017 	ldw	r2,0(r2)
    56b0:	10800617 	ldw	r2,24(r2)
    56b4:	10001426 	beq	r2,zero,5708 <write+0xc4>
    {
      
      /* ALT_LOG - see altera_hal/HAL/inc/sys/alt_log_printf.h */
      ALT_LOG_WRITE_FUNCTION(ptr,len);

      if ((rval = fd->dev->write(fd, ptr, len)) < 0)
    56b8:	e0bffb17 	ldw	r2,-20(fp)
    56bc:	10800017 	ldw	r2,0(r2)
    56c0:	10800617 	ldw	r2,24(r2)
    56c4:	e0ffff17 	ldw	r3,-4(fp)
    56c8:	180d883a 	mov	r6,r3
    56cc:	e17ffe17 	ldw	r5,-8(fp)
    56d0:	e13ffb17 	ldw	r4,-20(fp)
    56d4:	103ee83a 	callr	r2
    56d8:	e0bffc15 	stw	r2,-16(fp)
    56dc:	e0bffc17 	ldw	r2,-16(fp)
    56e0:	1000070e 	bge	r2,zero,5700 <write+0xbc>
      {
        ALT_ERRNO = -rval;
    56e4:	00056080 	call	5608 <alt_get_errno>
    56e8:	1007883a 	mov	r3,r2
    56ec:	e0bffc17 	ldw	r2,-16(fp)
    56f0:	0085c83a 	sub	r2,zero,r2
    56f4:	18800015 	stw	r2,0(r3)
        return -1;
    56f8:	00bfffc4 	movi	r2,-1
    56fc:	00000c06 	br	5730 <write+0xec>
      }
      return rval;
    5700:	e0bffc17 	ldw	r2,-16(fp)
    5704:	00000a06 	br	5730 <write+0xec>
    }
    else
    {
      ALT_ERRNO = EACCES;
    5708:	00056080 	call	5608 <alt_get_errno>
    570c:	1007883a 	mov	r3,r2
    5710:	00800344 	movi	r2,13
    5714:	18800015 	stw	r2,0(r3)
    5718:	00000406 	br	572c <write+0xe8>
    }
  }
  else  
  {
    ALT_ERRNO = EBADFD;
    571c:	00056080 	call	5608 <alt_get_errno>
    5720:	1007883a 	mov	r3,r2
    5724:	00801444 	movi	r2,81
    5728:	18800015 	stw	r2,0(r3)
  }
  return -1;
    572c:	00bfffc4 	movi	r2,-1
}
    5730:	e037883a 	mov	sp,fp
    5734:	dfc00117 	ldw	ra,4(sp)
    5738:	df000017 	ldw	fp,0(sp)
    573c:	dec00204 	addi	sp,sp,8
    5740:	f800283a 	ret

00005744 <alt_dev_reg>:
 */

extern int alt_fs_reg  (alt_dev* dev); 

static ALT_INLINE int alt_dev_reg (alt_dev* dev)
{
    5744:	defffd04 	addi	sp,sp,-12
    5748:	dfc00215 	stw	ra,8(sp)
    574c:	df000115 	stw	fp,4(sp)
    5750:	df000104 	addi	fp,sp,4
    5754:	e13fff15 	stw	r4,-4(fp)
  extern alt_llist alt_dev_list;

  return alt_dev_llist_insert ((alt_dev_llist*) dev, &alt_dev_list);
    5758:	d1600704 	addi	r5,gp,-32740
    575c:	e13fff17 	ldw	r4,-4(fp)
    5760:	0005bc40 	call	5bc4 <alt_dev_llist_insert>
}
    5764:	e037883a 	mov	sp,fp
    5768:	dfc00117 	ldw	ra,4(sp)
    576c:	df000017 	ldw	fp,0(sp)
    5770:	dec00204 	addi	sp,sp,8
    5774:	f800283a 	ret

00005778 <alt_irq_init>:
 * The "base" parameter is ignored and only
 * present for backwards-compatibility.
 */

void alt_irq_init ( const void* base )
{
    5778:	defffd04 	addi	sp,sp,-12
    577c:	dfc00215 	stw	ra,8(sp)
    5780:	df000115 	stw	fp,4(sp)
    5784:	df000104 	addi	fp,sp,4
    5788:	e13fff15 	stw	r4,-4(fp)
    ALTERA_NIOS2_GEN2_IRQ_INIT ( NIOS2_GEN2_0, nios2_gen2_0);
    578c:	000618c0 	call	618c <altera_nios2_gen2_irq_init>
 * alt_irq_cpu_enable_interrupts() enables the CPU to start taking interrupts.
 */
static ALT_INLINE void ALT_ALWAYS_INLINE 
       alt_irq_cpu_enable_interrupts (void)
{
    NIOS2_WRITE_STATUS(NIOS2_STATUS_PIE_MSK
    5790:	00800044 	movi	r2,1
    5794:	1001703a 	wrctl	status,r2
    alt_irq_cpu_enable_interrupts();
}
    5798:	0001883a 	nop
    579c:	e037883a 	mov	sp,fp
    57a0:	dfc00117 	ldw	ra,4(sp)
    57a4:	df000017 	ldw	fp,0(sp)
    57a8:	dec00204 	addi	sp,sp,8
    57ac:	f800283a 	ret

000057b0 <alt_sys_init>:
 * Initialize the non-interrupt controller devices.
 * Called after alt_irq_init().
 */

void alt_sys_init( void )
{
    57b0:	defffe04 	addi	sp,sp,-8
    57b4:	dfc00115 	stw	ra,4(sp)
    57b8:	df000015 	stw	fp,0(sp)
    57bc:	d839883a 	mov	fp,sp
    ALTERA_AVALON_JTAG_UART_INIT ( JTAG_UART_0, jtag_uart_0);
    57c0:	01000034 	movhi	r4,0
    57c4:	21198604 	addi	r4,r4,26136
    57c8:	00057440 	call	5744 <alt_dev_reg>
    ALTERA_AVALON_SYSID_QSYS_INIT ( SYSID_QSYS_0, sysid_qsys_0);
    57cc:	0001883a 	nop
}
    57d0:	0001883a 	nop
    57d4:	e037883a 	mov	sp,fp
    57d8:	dfc00117 	ldw	ra,4(sp)
    57dc:	df000017 	ldw	fp,0(sp)
    57e0:	dec00204 	addi	sp,sp,8
    57e4:	f800283a 	ret

000057e8 <altera_avalon_jtag_uart_read_fd>:
 *
 */

int 
altera_avalon_jtag_uart_read_fd(alt_fd* fd, char* buffer, int space)
{
    57e8:	defffa04 	addi	sp,sp,-24
    57ec:	dfc00515 	stw	ra,20(sp)
    57f0:	df000415 	stw	fp,16(sp)
    57f4:	df000404 	addi	fp,sp,16
    57f8:	e13ffd15 	stw	r4,-12(fp)
    57fc:	e17ffe15 	stw	r5,-8(fp)
    5800:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
    5804:	e0bffd17 	ldw	r2,-12(fp)
    5808:	10800017 	ldw	r2,0(r2)
    580c:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_jtag_uart_read(&dev->state, buffer, space,
    5810:	e0bffc17 	ldw	r2,-16(fp)
    5814:	10c00a04 	addi	r3,r2,40
    5818:	e0bffd17 	ldw	r2,-12(fp)
    581c:	10800217 	ldw	r2,8(r2)
    5820:	100f883a 	mov	r7,r2
    5824:	e1bfff17 	ldw	r6,-4(fp)
    5828:	e17ffe17 	ldw	r5,-8(fp)
    582c:	1809883a 	mov	r4,r3
    5830:	00058a80 	call	58a8 <altera_avalon_jtag_uart_read>
      fd->fd_flags);
}
    5834:	e037883a 	mov	sp,fp
    5838:	dfc00117 	ldw	ra,4(sp)
    583c:	df000017 	ldw	fp,0(sp)
    5840:	dec00204 	addi	sp,sp,8
    5844:	f800283a 	ret

00005848 <altera_avalon_jtag_uart_write_fd>:

int 
altera_avalon_jtag_uart_write_fd(alt_fd* fd, const char* buffer, int space)
{
    5848:	defffa04 	addi	sp,sp,-24
    584c:	dfc00515 	stw	ra,20(sp)
    5850:	df000415 	stw	fp,16(sp)
    5854:	df000404 	addi	fp,sp,16
    5858:	e13ffd15 	stw	r4,-12(fp)
    585c:	e17ffe15 	stw	r5,-8(fp)
    5860:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
    5864:	e0bffd17 	ldw	r2,-12(fp)
    5868:	10800017 	ldw	r2,0(r2)
    586c:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_jtag_uart_write(&dev->state, buffer, space,
    5870:	e0bffc17 	ldw	r2,-16(fp)
    5874:	10c00a04 	addi	r3,r2,40
    5878:	e0bffd17 	ldw	r2,-12(fp)
    587c:	10800217 	ldw	r2,8(r2)
    5880:	100f883a 	mov	r7,r2
    5884:	e1bfff17 	ldw	r6,-4(fp)
    5888:	e17ffe17 	ldw	r5,-8(fp)
    588c:	1809883a 	mov	r4,r3
    5890:	00059940 	call	5994 <altera_avalon_jtag_uart_write>
      fd->fd_flags);
}
    5894:	e037883a 	mov	sp,fp
    5898:	dfc00117 	ldw	ra,4(sp)
    589c:	df000017 	ldw	fp,0(sp)
    58a0:	dec00204 	addi	sp,sp,8
    58a4:	f800283a 	ret

000058a8 <altera_avalon_jtag_uart_read>:
 */

int 
altera_avalon_jtag_uart_read(altera_avalon_jtag_uart_state* sp, 
  char* buffer, int space, int flags)
{
    58a8:	defff704 	addi	sp,sp,-36
    58ac:	df000815 	stw	fp,32(sp)
    58b0:	df000804 	addi	fp,sp,32
    58b4:	e13ffc15 	stw	r4,-16(fp)
    58b8:	e17ffd15 	stw	r5,-12(fp)
    58bc:	e1bffe15 	stw	r6,-8(fp)
    58c0:	e1ffff15 	stw	r7,-4(fp)
  unsigned int base = sp->base;
    58c4:	e0bffc17 	ldw	r2,-16(fp)
    58c8:	10800017 	ldw	r2,0(r2)
    58cc:	e0bff915 	stw	r2,-28(fp)

  char * ptr = buffer;
    58d0:	e0bffd17 	ldw	r2,-12(fp)
    58d4:	e0bff815 	stw	r2,-32(fp)
  char * end = buffer + space;
    58d8:	e0bffe17 	ldw	r2,-8(fp)
    58dc:	e0fffd17 	ldw	r3,-12(fp)
    58e0:	1885883a 	add	r2,r3,r2
    58e4:	e0bffa15 	stw	r2,-24(fp)

  while (ptr < end)
    58e8:	00001206 	br	5934 <altera_avalon_jtag_uart_read+0x8c>
  {
    unsigned int data = IORD_ALTERA_AVALON_JTAG_UART_DATA(base);
    58ec:	e0bff917 	ldw	r2,-28(fp)
    58f0:	10800037 	ldwio	r2,0(r2)
    58f4:	e0bffb15 	stw	r2,-20(fp)

    if (data & ALTERA_AVALON_JTAG_UART_DATA_RVALID_MSK)
    58f8:	e0bffb17 	ldw	r2,-20(fp)
    58fc:	10a0000c 	andi	r2,r2,32768
    5900:	10000626 	beq	r2,zero,591c <altera_avalon_jtag_uart_read+0x74>
      *ptr++ = (data & ALTERA_AVALON_JTAG_UART_DATA_DATA_MSK) >> ALTERA_AVALON_JTAG_UART_DATA_DATA_OFST;
    5904:	e0bff817 	ldw	r2,-32(fp)
    5908:	10c00044 	addi	r3,r2,1
    590c:	e0fff815 	stw	r3,-32(fp)
    5910:	e0fffb17 	ldw	r3,-20(fp)
    5914:	10c00005 	stb	r3,0(r2)
    5918:	00000606 	br	5934 <altera_avalon_jtag_uart_read+0x8c>
    else if (ptr != buffer)
    591c:	e0fff817 	ldw	r3,-32(fp)
    5920:	e0bffd17 	ldw	r2,-12(fp)
    5924:	1880071e 	bne	r3,r2,5944 <altera_avalon_jtag_uart_read+0x9c>
      break;
    else if(flags & O_NONBLOCK)
    5928:	e0bfff17 	ldw	r2,-4(fp)
    592c:	1090000c 	andi	r2,r2,16384
    5930:	1000061e 	bne	r2,zero,594c <altera_avalon_jtag_uart_read+0xa4>
  unsigned int base = sp->base;

  char * ptr = buffer;
  char * end = buffer + space;

  while (ptr < end)
    5934:	e0fff817 	ldw	r3,-32(fp)
    5938:	e0bffa17 	ldw	r2,-24(fp)
    593c:	18bfeb36 	bltu	r3,r2,58ec <_gp+0xffff7100>
    5940:	00000306 	br	5950 <altera_avalon_jtag_uart_read+0xa8>
    unsigned int data = IORD_ALTERA_AVALON_JTAG_UART_DATA(base);

    if (data & ALTERA_AVALON_JTAG_UART_DATA_RVALID_MSK)
      *ptr++ = (data & ALTERA_AVALON_JTAG_UART_DATA_DATA_MSK) >> ALTERA_AVALON_JTAG_UART_DATA_DATA_OFST;
    else if (ptr != buffer)
      break;
    5944:	0001883a 	nop
    5948:	00000106 	br	5950 <altera_avalon_jtag_uart_read+0xa8>
    else if(flags & O_NONBLOCK)
      break;   
    594c:	0001883a 	nop
    
  }

  if (ptr != buffer)
    5950:	e0fff817 	ldw	r3,-32(fp)
    5954:	e0bffd17 	ldw	r2,-12(fp)
    5958:	18800426 	beq	r3,r2,596c <altera_avalon_jtag_uart_read+0xc4>
    return ptr - buffer;
    595c:	e0fff817 	ldw	r3,-32(fp)
    5960:	e0bffd17 	ldw	r2,-12(fp)
    5964:	1885c83a 	sub	r2,r3,r2
    5968:	00000606 	br	5984 <altera_avalon_jtag_uart_read+0xdc>
  else if (flags & O_NONBLOCK)
    596c:	e0bfff17 	ldw	r2,-4(fp)
    5970:	1090000c 	andi	r2,r2,16384
    5974:	10000226 	beq	r2,zero,5980 <altera_avalon_jtag_uart_read+0xd8>
    return -EWOULDBLOCK;
    5978:	00bffd44 	movi	r2,-11
    597c:	00000106 	br	5984 <altera_avalon_jtag_uart_read+0xdc>
  else
    return -EIO;
    5980:	00bffec4 	movi	r2,-5
}
    5984:	e037883a 	mov	sp,fp
    5988:	df000017 	ldw	fp,0(sp)
    598c:	dec00104 	addi	sp,sp,4
    5990:	f800283a 	ret

00005994 <altera_avalon_jtag_uart_write>:
 * one FIFOs worth of data.  But you said you didn't want to use interrupts :-)
 */

int altera_avalon_jtag_uart_write(altera_avalon_jtag_uart_state* sp, 
  const char * ptr, int count, int flags)
{
    5994:	defff904 	addi	sp,sp,-28
    5998:	df000615 	stw	fp,24(sp)
    599c:	df000604 	addi	fp,sp,24
    59a0:	e13ffc15 	stw	r4,-16(fp)
    59a4:	e17ffd15 	stw	r5,-12(fp)
    59a8:	e1bffe15 	stw	r6,-8(fp)
    59ac:	e1ffff15 	stw	r7,-4(fp)
  unsigned int base = sp->base;
    59b0:	e0bffc17 	ldw	r2,-16(fp)
    59b4:	10800017 	ldw	r2,0(r2)
    59b8:	e0bffa15 	stw	r2,-24(fp)

  const char * end = ptr + count;
    59bc:	e0bffe17 	ldw	r2,-8(fp)
    59c0:	e0fffd17 	ldw	r3,-12(fp)
    59c4:	1885883a 	add	r2,r3,r2
    59c8:	e0bffb15 	stw	r2,-20(fp)

  while (ptr < end)
    59cc:	00000e06 	br	5a08 <altera_avalon_jtag_uart_write+0x74>
    if ((IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base) & ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_MSK) != 0)
    59d0:	e0bffa17 	ldw	r2,-24(fp)
    59d4:	10800104 	addi	r2,r2,4
    59d8:	10800037 	ldwio	r2,0(r2)
    59dc:	10bfffec 	andhi	r2,r2,65535
    59e0:	10000926 	beq	r2,zero,5a08 <altera_avalon_jtag_uart_write+0x74>
      IOWR_ALTERA_AVALON_JTAG_UART_DATA(base, *ptr++);
    59e4:	e0fffa17 	ldw	r3,-24(fp)
    59e8:	e0bffd17 	ldw	r2,-12(fp)
    59ec:	11000044 	addi	r4,r2,1
    59f0:	e13ffd15 	stw	r4,-12(fp)
    59f4:	10800003 	ldbu	r2,0(r2)
    59f8:	10803fcc 	andi	r2,r2,255
    59fc:	1080201c 	xori	r2,r2,128
    5a00:	10bfe004 	addi	r2,r2,-128
    5a04:	18800035 	stwio	r2,0(r3)
{
  unsigned int base = sp->base;

  const char * end = ptr + count;

  while (ptr < end)
    5a08:	e0fffd17 	ldw	r3,-12(fp)
    5a0c:	e0bffb17 	ldw	r2,-20(fp)
    5a10:	18bfef36 	bltu	r3,r2,59d0 <_gp+0xffff71e4>
    if ((IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base) & ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_MSK) != 0)
      IOWR_ALTERA_AVALON_JTAG_UART_DATA(base, *ptr++);

  return count;
    5a14:	e0bffe17 	ldw	r2,-8(fp)
}
    5a18:	e037883a 	mov	sp,fp
    5a1c:	df000017 	ldw	fp,0(sp)
    5a20:	dec00104 	addi	sp,sp,4
    5a24:	f800283a 	ret

00005a28 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
    5a28:	defffe04 	addi	sp,sp,-8
    5a2c:	dfc00115 	stw	ra,4(sp)
    5a30:	df000015 	stw	fp,0(sp)
    5a34:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
    5a38:	d0a00a17 	ldw	r2,-32728(gp)
    5a3c:	10000326 	beq	r2,zero,5a4c <alt_get_errno+0x24>
    5a40:	d0a00a17 	ldw	r2,-32728(gp)
    5a44:	103ee83a 	callr	r2
    5a48:	00000106 	br	5a50 <alt_get_errno+0x28>
    5a4c:	d0a0c304 	addi	r2,gp,-31988
}
    5a50:	e037883a 	mov	sp,fp
    5a54:	dfc00117 	ldw	ra,4(sp)
    5a58:	df000017 	ldw	fp,0(sp)
    5a5c:	dec00204 	addi	sp,sp,8
    5a60:	f800283a 	ret

00005a64 <close>:
 *
 * ALT_CLOSE is mapped onto the close() system call in alt_syscall.h
 */
 
int ALT_CLOSE (int fildes)
{
    5a64:	defffb04 	addi	sp,sp,-20
    5a68:	dfc00415 	stw	ra,16(sp)
    5a6c:	df000315 	stw	fp,12(sp)
    5a70:	df000304 	addi	fp,sp,12
    5a74:	e13fff15 	stw	r4,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (fildes < 0) ? NULL : &alt_fd_list[fildes];
    5a78:	e0bfff17 	ldw	r2,-4(fp)
    5a7c:	10000816 	blt	r2,zero,5aa0 <close+0x3c>
    5a80:	01400304 	movi	r5,12
    5a84:	e13fff17 	ldw	r4,-4(fp)
    5a88:	00051b40 	call	51b4 <__mulsi3>
    5a8c:	1007883a 	mov	r3,r2
    5a90:	00800034 	movhi	r2,0
    5a94:	10999b04 	addi	r2,r2,26220
    5a98:	1885883a 	add	r2,r3,r2
    5a9c:	00000106 	br	5aa4 <close+0x40>
    5aa0:	0005883a 	mov	r2,zero
    5aa4:	e0bffd15 	stw	r2,-12(fp)

  if (fd)
    5aa8:	e0bffd17 	ldw	r2,-12(fp)
    5aac:	10001926 	beq	r2,zero,5b14 <close+0xb0>
    /*
     * If the associated file system/device has a close function, call it so 
     * that any necessary cleanup code can run.
     */

    rval = (fd->dev->close) ? fd->dev->close(fd) : 0;
    5ab0:	e0bffd17 	ldw	r2,-12(fp)
    5ab4:	10800017 	ldw	r2,0(r2)
    5ab8:	10800417 	ldw	r2,16(r2)
    5abc:	10000626 	beq	r2,zero,5ad8 <close+0x74>
    5ac0:	e0bffd17 	ldw	r2,-12(fp)
    5ac4:	10800017 	ldw	r2,0(r2)
    5ac8:	10800417 	ldw	r2,16(r2)
    5acc:	e13ffd17 	ldw	r4,-12(fp)
    5ad0:	103ee83a 	callr	r2
    5ad4:	00000106 	br	5adc <close+0x78>
    5ad8:	0005883a 	mov	r2,zero
    5adc:	e0bffe15 	stw	r2,-8(fp)

    /* Free the file descriptor structure and return. */

    alt_release_fd (fildes);
    5ae0:	e13fff17 	ldw	r4,-4(fp)
    5ae4:	00061080 	call	6108 <alt_release_fd>
    if (rval < 0)
    5ae8:	e0bffe17 	ldw	r2,-8(fp)
    5aec:	1000070e 	bge	r2,zero,5b0c <close+0xa8>
    {
      ALT_ERRNO = -rval;
    5af0:	0005a280 	call	5a28 <alt_get_errno>
    5af4:	1007883a 	mov	r3,r2
    5af8:	e0bffe17 	ldw	r2,-8(fp)
    5afc:	0085c83a 	sub	r2,zero,r2
    5b00:	18800015 	stw	r2,0(r3)
      return -1;
    5b04:	00bfffc4 	movi	r2,-1
    5b08:	00000706 	br	5b28 <close+0xc4>
    }
    return 0;
    5b0c:	0005883a 	mov	r2,zero
    5b10:	00000506 	br	5b28 <close+0xc4>
  }
  else
  {
    ALT_ERRNO = EBADFD;
    5b14:	0005a280 	call	5a28 <alt_get_errno>
    5b18:	1007883a 	mov	r3,r2
    5b1c:	00801444 	movi	r2,81
    5b20:	18800015 	stw	r2,0(r3)
    return -1;
    5b24:	00bfffc4 	movi	r2,-1
  }
}
    5b28:	e037883a 	mov	sp,fp
    5b2c:	dfc00117 	ldw	ra,4(sp)
    5b30:	df000017 	ldw	fp,0(sp)
    5b34:	dec00204 	addi	sp,sp,8
    5b38:	f800283a 	ret

00005b3c <alt_dcache_flush_all>:
/*
 * alt_dcache_flush_all() is called to flush the entire data cache.
 */

void alt_dcache_flush_all (void)
{
    5b3c:	deffff04 	addi	sp,sp,-4
    5b40:	df000015 	stw	fp,0(sp)
    5b44:	d839883a 	mov	fp,sp
  for (i = (char*) 0; i < (char*) NIOS2_DCACHE_SIZE; i+= NIOS2_DCACHE_LINE_SIZE)
  { 
    __asm__ volatile ("flushd (%0)" :: "r" (i));
  }
#endif /* NIOS2_DCACHE_SIZE > 0 */
}
    5b48:	0001883a 	nop
    5b4c:	e037883a 	mov	sp,fp
    5b50:	df000017 	ldw	fp,0(sp)
    5b54:	dec00104 	addi	sp,sp,4
    5b58:	f800283a 	ret

00005b5c <alt_dev_null_write>:
 * by the alt_dev_null device. It simple discards all data passed to it, and
 * indicates that the data has been successfully transmitted.
 */

static int alt_dev_null_write (alt_fd* fd, const char* ptr, int len)
{
    5b5c:	defffc04 	addi	sp,sp,-16
    5b60:	df000315 	stw	fp,12(sp)
    5b64:	df000304 	addi	fp,sp,12
    5b68:	e13ffd15 	stw	r4,-12(fp)
    5b6c:	e17ffe15 	stw	r5,-8(fp)
    5b70:	e1bfff15 	stw	r6,-4(fp)
  return len;
    5b74:	e0bfff17 	ldw	r2,-4(fp)
}
    5b78:	e037883a 	mov	sp,fp
    5b7c:	df000017 	ldw	fp,0(sp)
    5b80:	dec00104 	addi	sp,sp,4
    5b84:	f800283a 	ret

00005b88 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
    5b88:	defffe04 	addi	sp,sp,-8
    5b8c:	dfc00115 	stw	ra,4(sp)
    5b90:	df000015 	stw	fp,0(sp)
    5b94:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
    5b98:	d0a00a17 	ldw	r2,-32728(gp)
    5b9c:	10000326 	beq	r2,zero,5bac <alt_get_errno+0x24>
    5ba0:	d0a00a17 	ldw	r2,-32728(gp)
    5ba4:	103ee83a 	callr	r2
    5ba8:	00000106 	br	5bb0 <alt_get_errno+0x28>
    5bac:	d0a0c304 	addi	r2,gp,-31988
}
    5bb0:	e037883a 	mov	sp,fp
    5bb4:	dfc00117 	ldw	ra,4(sp)
    5bb8:	df000017 	ldw	fp,0(sp)
    5bbc:	dec00204 	addi	sp,sp,8
    5bc0:	f800283a 	ret

00005bc4 <alt_dev_llist_insert>:
/*
 *
 */

int alt_dev_llist_insert (alt_dev_llist* dev, alt_llist* list)
{
    5bc4:	defffa04 	addi	sp,sp,-24
    5bc8:	dfc00515 	stw	ra,20(sp)
    5bcc:	df000415 	stw	fp,16(sp)
    5bd0:	df000404 	addi	fp,sp,16
    5bd4:	e13ffe15 	stw	r4,-8(fp)
    5bd8:	e17fff15 	stw	r5,-4(fp)
  /*
   * check that the device exists, and that it has a valid name.
   */

  if (!dev || !dev->name)
    5bdc:	e0bffe17 	ldw	r2,-8(fp)
    5be0:	10000326 	beq	r2,zero,5bf0 <alt_dev_llist_insert+0x2c>
    5be4:	e0bffe17 	ldw	r2,-8(fp)
    5be8:	10800217 	ldw	r2,8(r2)
    5bec:	1000061e 	bne	r2,zero,5c08 <alt_dev_llist_insert+0x44>
  {
    ALT_ERRNO = EINVAL;
    5bf0:	0005b880 	call	5b88 <alt_get_errno>
    5bf4:	1007883a 	mov	r3,r2
    5bf8:	00800584 	movi	r2,22
    5bfc:	18800015 	stw	r2,0(r3)
    return -EINVAL;
    5c00:	00bffa84 	movi	r2,-22
    5c04:	00001306 	br	5c54 <alt_dev_llist_insert+0x90>
  
  /*
   * register the device.
   */
  
  alt_llist_insert(list, &dev->llist);
    5c08:	e0bffe17 	ldw	r2,-8(fp)
    5c0c:	e0ffff17 	ldw	r3,-4(fp)
    5c10:	e0fffc15 	stw	r3,-16(fp)
    5c14:	e0bffd15 	stw	r2,-12(fp)
 */

static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_insert(alt_llist* list, 
                alt_llist* entry)
{
  entry->previous = list;
    5c18:	e0bffd17 	ldw	r2,-12(fp)
    5c1c:	e0fffc17 	ldw	r3,-16(fp)
    5c20:	10c00115 	stw	r3,4(r2)
  entry->next     = list->next;
    5c24:	e0bffc17 	ldw	r2,-16(fp)
    5c28:	10c00017 	ldw	r3,0(r2)
    5c2c:	e0bffd17 	ldw	r2,-12(fp)
    5c30:	10c00015 	stw	r3,0(r2)

  list->next->previous = entry;
    5c34:	e0bffc17 	ldw	r2,-16(fp)
    5c38:	10800017 	ldw	r2,0(r2)
    5c3c:	e0fffd17 	ldw	r3,-12(fp)
    5c40:	10c00115 	stw	r3,4(r2)
  list->next           = entry;
    5c44:	e0bffc17 	ldw	r2,-16(fp)
    5c48:	e0fffd17 	ldw	r3,-12(fp)
    5c4c:	10c00015 	stw	r3,0(r2)

  return 0;  
    5c50:	0005883a 	mov	r2,zero
}
    5c54:	e037883a 	mov	sp,fp
    5c58:	dfc00117 	ldw	ra,4(sp)
    5c5c:	df000017 	ldw	fp,0(sp)
    5c60:	dec00204 	addi	sp,sp,8
    5c64:	f800283a 	ret

00005c68 <alt_icache_flush_all>:
/*
 * alt_icache_flush_all() is called to flush the entire instruction cache.
 */

void alt_icache_flush_all (void)
{
    5c68:	deffff04 	addi	sp,sp,-4
    5c6c:	df000015 	stw	fp,0(sp)
    5c70:	d839883a 	mov	fp,sp
#if NIOS2_ICACHE_SIZE > 0
  alt_icache_flush (0, NIOS2_ICACHE_SIZE);
#endif
}
    5c74:	0001883a 	nop
    5c78:	e037883a 	mov	sp,fp
    5c7c:	df000017 	ldw	fp,0(sp)
    5c80:	dec00104 	addi	sp,sp,4
    5c84:	f800283a 	ret

00005c88 <alt_exception_cause_generated_bad_addr>:
 * Return: 1: BADADDR (bad_addr argument to handler) is valid
 *         0: BADADDR is not valid
 */
int 
alt_exception_cause_generated_bad_addr(alt_exception_cause cause)
{
    5c88:	defffe04 	addi	sp,sp,-8
    5c8c:	df000115 	stw	fp,4(sp)
    5c90:	df000104 	addi	fp,sp,4
    5c94:	e13fff15 	stw	r4,-4(fp)
  switch (cause) {
    5c98:	e0bfff17 	ldw	r2,-4(fp)
    5c9c:	10bffe84 	addi	r2,r2,-6
    5ca0:	10c00428 	cmpgeui	r3,r2,16
    5ca4:	18001a1e 	bne	r3,zero,5d10 <alt_exception_cause_generated_bad_addr+0x88>
    5ca8:	100690ba 	slli	r3,r2,2
    5cac:	00800034 	movhi	r2,0
    5cb0:	10973004 	addi	r2,r2,23744
    5cb4:	1885883a 	add	r2,r3,r2
    5cb8:	10800017 	ldw	r2,0(r2)
    5cbc:	1000683a 	jmp	r2
    5cc0:	00005d00 	call	5d0 <__alt_mem_onchip_memory2_0-0x3a30>
    5cc4:	00005d00 	call	5d0 <__alt_mem_onchip_memory2_0-0x3a30>
    5cc8:	00005d10 	cmplti	zero,zero,372
    5ccc:	00005d10 	cmplti	zero,zero,372
    5cd0:	00005d10 	cmplti	zero,zero,372
    5cd4:	00005d00 	call	5d0 <__alt_mem_onchip_memory2_0-0x3a30>
    5cd8:	00005d08 	cmpgei	zero,zero,372
    5cdc:	00005d10 	cmplti	zero,zero,372
    5ce0:	00005d00 	call	5d0 <__alt_mem_onchip_memory2_0-0x3a30>
    5ce4:	00005d00 	call	5d0 <__alt_mem_onchip_memory2_0-0x3a30>
    5ce8:	00005d10 	cmplti	zero,zero,372
    5cec:	00005d00 	call	5d0 <__alt_mem_onchip_memory2_0-0x3a30>
    5cf0:	00005d08 	cmpgei	zero,zero,372
    5cf4:	00005d10 	cmplti	zero,zero,372
    5cf8:	00005d10 	cmplti	zero,zero,372
    5cfc:	00005d00 	call	5d0 <__alt_mem_onchip_memory2_0-0x3a30>
  case NIOS2_EXCEPTION_MISALIGNED_TARGET_PC:
  case NIOS2_EXCEPTION_TLB_READ_PERM_VIOLATION:
  case NIOS2_EXCEPTION_TLB_WRITE_PERM_VIOLATION:
  case NIOS2_EXCEPTION_MPU_DATA_REGION_VIOLATION:
  case NIOS2_EXCEPTION_ECC_DATA_ERR:
    return 1;
    5d00:	00800044 	movi	r2,1
    5d04:	00000306 	br	5d14 <alt_exception_cause_generated_bad_addr+0x8c>

  case NIOS2_EXCEPTION_TLB_MISS:
  case NIOS2_EXCEPTION_ECC_TLB_ERR:
    return 0;
    5d08:	0005883a 	mov	r2,zero
    5d0c:	00000106 	br	5d14 <alt_exception_cause_generated_bad_addr+0x8c>

  default:
    return 0;
    5d10:	0005883a 	mov	r2,zero
  }
}
    5d14:	e037883a 	mov	sp,fp
    5d18:	df000017 	ldw	fp,0(sp)
    5d1c:	dec00104 	addi	sp,sp,4
    5d20:	f800283a 	ret

00005d24 <alt_open_fd>:
 * If the device can not be succesfully opened, then the input file descriptor
 * remains unchanged.
 */

static void alt_open_fd(alt_fd* fd, const char* name, int flags, int mode)
{
    5d24:	defff804 	addi	sp,sp,-32
    5d28:	dfc00715 	stw	ra,28(sp)
    5d2c:	df000615 	stw	fp,24(sp)
    5d30:	dc000515 	stw	r16,20(sp)
    5d34:	df000604 	addi	fp,sp,24
    5d38:	e13ffb15 	stw	r4,-20(fp)
    5d3c:	e17ffc15 	stw	r5,-16(fp)
    5d40:	e1bffd15 	stw	r6,-12(fp)
    5d44:	e1fffe15 	stw	r7,-8(fp)
  int old;

  old = open (name, flags, mode);
    5d48:	e1bffe17 	ldw	r6,-8(fp)
    5d4c:	e17ffd17 	ldw	r5,-12(fp)
    5d50:	e13ffc17 	ldw	r4,-16(fp)
    5d54:	0005fac0 	call	5fac <open>
    5d58:	e0bffa15 	stw	r2,-24(fp)

  if (old >= 0)
    5d5c:	e0bffa17 	ldw	r2,-24(fp)
    5d60:	10002216 	blt	r2,zero,5dec <alt_open_fd+0xc8>
  {
    fd->dev      = alt_fd_list[old].dev;
    5d64:	04000034 	movhi	r16,0
    5d68:	84199b04 	addi	r16,r16,26220
    5d6c:	e0bffa17 	ldw	r2,-24(fp)
    5d70:	01400304 	movi	r5,12
    5d74:	1009883a 	mov	r4,r2
    5d78:	00051b40 	call	51b4 <__mulsi3>
    5d7c:	8085883a 	add	r2,r16,r2
    5d80:	10c00017 	ldw	r3,0(r2)
    5d84:	e0bffb17 	ldw	r2,-20(fp)
    5d88:	10c00015 	stw	r3,0(r2)
    fd->priv     = alt_fd_list[old].priv;
    5d8c:	04000034 	movhi	r16,0
    5d90:	84199b04 	addi	r16,r16,26220
    5d94:	e0bffa17 	ldw	r2,-24(fp)
    5d98:	01400304 	movi	r5,12
    5d9c:	1009883a 	mov	r4,r2
    5da0:	00051b40 	call	51b4 <__mulsi3>
    5da4:	8085883a 	add	r2,r16,r2
    5da8:	10800104 	addi	r2,r2,4
    5dac:	10c00017 	ldw	r3,0(r2)
    5db0:	e0bffb17 	ldw	r2,-20(fp)
    5db4:	10c00115 	stw	r3,4(r2)
    fd->fd_flags = alt_fd_list[old].fd_flags;
    5db8:	04000034 	movhi	r16,0
    5dbc:	84199b04 	addi	r16,r16,26220
    5dc0:	e0bffa17 	ldw	r2,-24(fp)
    5dc4:	01400304 	movi	r5,12
    5dc8:	1009883a 	mov	r4,r2
    5dcc:	00051b40 	call	51b4 <__mulsi3>
    5dd0:	8085883a 	add	r2,r16,r2
    5dd4:	10800204 	addi	r2,r2,8
    5dd8:	10c00017 	ldw	r3,0(r2)
    5ddc:	e0bffb17 	ldw	r2,-20(fp)
    5de0:	10c00215 	stw	r3,8(r2)

    alt_release_fd (old);
    5de4:	e13ffa17 	ldw	r4,-24(fp)
    5de8:	00061080 	call	6108 <alt_release_fd>
  }
} 
    5dec:	0001883a 	nop
    5df0:	e6ffff04 	addi	sp,fp,-4
    5df4:	dfc00217 	ldw	ra,8(sp)
    5df8:	df000117 	ldw	fp,4(sp)
    5dfc:	dc000017 	ldw	r16,0(sp)
    5e00:	dec00304 	addi	sp,sp,12
    5e04:	f800283a 	ret

00005e08 <alt_io_redirect>:
 */
 
void alt_io_redirect(const char* stdout_dev, 
                     const char* stdin_dev, 
                     const char* stderr_dev)
{
    5e08:	defffb04 	addi	sp,sp,-20
    5e0c:	dfc00415 	stw	ra,16(sp)
    5e10:	df000315 	stw	fp,12(sp)
    5e14:	df000304 	addi	fp,sp,12
    5e18:	e13ffd15 	stw	r4,-12(fp)
    5e1c:	e17ffe15 	stw	r5,-8(fp)
    5e20:	e1bfff15 	stw	r6,-4(fp)
  /* Redirect the channels */

  alt_open_fd (&alt_fd_list[STDOUT_FILENO], stdout_dev, O_WRONLY, 0777);
    5e24:	01c07fc4 	movi	r7,511
    5e28:	01800044 	movi	r6,1
    5e2c:	e17ffd17 	ldw	r5,-12(fp)
    5e30:	01000034 	movhi	r4,0
    5e34:	21199e04 	addi	r4,r4,26232
    5e38:	0005d240 	call	5d24 <alt_open_fd>
  alt_open_fd (&alt_fd_list[STDIN_FILENO], stdin_dev, O_RDONLY, 0777);
    5e3c:	01c07fc4 	movi	r7,511
    5e40:	000d883a 	mov	r6,zero
    5e44:	e17ffe17 	ldw	r5,-8(fp)
    5e48:	01000034 	movhi	r4,0
    5e4c:	21199b04 	addi	r4,r4,26220
    5e50:	0005d240 	call	5d24 <alt_open_fd>
  alt_open_fd (&alt_fd_list[STDERR_FILENO], stderr_dev, O_WRONLY, 0777);
    5e54:	01c07fc4 	movi	r7,511
    5e58:	01800044 	movi	r6,1
    5e5c:	e17fff17 	ldw	r5,-4(fp)
    5e60:	01000034 	movhi	r4,0
    5e64:	2119a104 	addi	r4,r4,26244
    5e68:	0005d240 	call	5d24 <alt_open_fd>
}  
    5e6c:	0001883a 	nop
    5e70:	e037883a 	mov	sp,fp
    5e74:	dfc00117 	ldw	ra,4(sp)
    5e78:	df000017 	ldw	fp,0(sp)
    5e7c:	dec00204 	addi	sp,sp,8
    5e80:	f800283a 	ret

00005e84 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
    5e84:	defffe04 	addi	sp,sp,-8
    5e88:	dfc00115 	stw	ra,4(sp)
    5e8c:	df000015 	stw	fp,0(sp)
    5e90:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
    5e94:	d0a00a17 	ldw	r2,-32728(gp)
    5e98:	10000326 	beq	r2,zero,5ea8 <alt_get_errno+0x24>
    5e9c:	d0a00a17 	ldw	r2,-32728(gp)
    5ea0:	103ee83a 	callr	r2
    5ea4:	00000106 	br	5eac <alt_get_errno+0x28>
    5ea8:	d0a0c304 	addi	r2,gp,-31988
}
    5eac:	e037883a 	mov	sp,fp
    5eb0:	dfc00117 	ldw	ra,4(sp)
    5eb4:	df000017 	ldw	fp,0(sp)
    5eb8:	dec00204 	addi	sp,sp,8
    5ebc:	f800283a 	ret

00005ec0 <alt_file_locked>:
 * performed for devices. Filesystems are required to handle the ioctl() call
 * themselves, and report the error from the filesystems open() function. 
 */ 

static int alt_file_locked (alt_fd* fd)
{
    5ec0:	defffb04 	addi	sp,sp,-20
    5ec4:	dfc00415 	stw	ra,16(sp)
    5ec8:	df000315 	stw	fp,12(sp)
    5ecc:	dc000215 	stw	r16,8(sp)
    5ed0:	df000304 	addi	fp,sp,12
    5ed4:	e13ffe15 	stw	r4,-8(fp)

  /*
   * Mark the file descriptor as belonging to a device.
   */

  fd->fd_flags |= ALT_FD_DEV;
    5ed8:	e0bffe17 	ldw	r2,-8(fp)
    5edc:	10800217 	ldw	r2,8(r2)
    5ee0:	10d00034 	orhi	r3,r2,16384
    5ee4:	e0bffe17 	ldw	r2,-8(fp)
    5ee8:	10c00215 	stw	r3,8(r2)
  /*
   * Loop through all current file descriptors searching for one that's locked
   * for exclusive access. If a match is found, generate an error.
   */

  for (i = 0; i <= alt_max_fd; i++)
    5eec:	e03ffd15 	stw	zero,-12(fp)
    5ef0:	00002306 	br	5f80 <alt_file_locked+0xc0>
  {
    if ((alt_fd_list[i].dev == fd->dev) &&
    5ef4:	04000034 	movhi	r16,0
    5ef8:	84199b04 	addi	r16,r16,26220
    5efc:	e0bffd17 	ldw	r2,-12(fp)
    5f00:	01400304 	movi	r5,12
    5f04:	1009883a 	mov	r4,r2
    5f08:	00051b40 	call	51b4 <__mulsi3>
    5f0c:	8085883a 	add	r2,r16,r2
    5f10:	10c00017 	ldw	r3,0(r2)
    5f14:	e0bffe17 	ldw	r2,-8(fp)
    5f18:	10800017 	ldw	r2,0(r2)
    5f1c:	1880151e 	bne	r3,r2,5f74 <alt_file_locked+0xb4>
        (alt_fd_list[i].fd_flags & ALT_FD_EXCL) &&
    5f20:	04000034 	movhi	r16,0
    5f24:	84199b04 	addi	r16,r16,26220
    5f28:	e0bffd17 	ldw	r2,-12(fp)
    5f2c:	01400304 	movi	r5,12
    5f30:	1009883a 	mov	r4,r2
    5f34:	00051b40 	call	51b4 <__mulsi3>
    5f38:	8085883a 	add	r2,r16,r2
    5f3c:	10800204 	addi	r2,r2,8
    5f40:	10800017 	ldw	r2,0(r2)
   * for exclusive access. If a match is found, generate an error.
   */

  for (i = 0; i <= alt_max_fd; i++)
  {
    if ((alt_fd_list[i].dev == fd->dev) &&
    5f44:	10000b0e 	bge	r2,zero,5f74 <alt_file_locked+0xb4>
        (alt_fd_list[i].fd_flags & ALT_FD_EXCL) &&
        (&alt_fd_list[i] != fd))
    5f48:	01400304 	movi	r5,12
    5f4c:	e13ffd17 	ldw	r4,-12(fp)
    5f50:	00051b40 	call	51b4 <__mulsi3>
    5f54:	1007883a 	mov	r3,r2
    5f58:	00800034 	movhi	r2,0
    5f5c:	10999b04 	addi	r2,r2,26220
    5f60:	1887883a 	add	r3,r3,r2
   */

  for (i = 0; i <= alt_max_fd; i++)
  {
    if ((alt_fd_list[i].dev == fd->dev) &&
        (alt_fd_list[i].fd_flags & ALT_FD_EXCL) &&
    5f64:	e0bffe17 	ldw	r2,-8(fp)
    5f68:	18800226 	beq	r3,r2,5f74 <alt_file_locked+0xb4>
        (&alt_fd_list[i] != fd))
    {
      return -EACCES;
    5f6c:	00bffcc4 	movi	r2,-13
    5f70:	00000806 	br	5f94 <alt_file_locked+0xd4>
  /*
   * Loop through all current file descriptors searching for one that's locked
   * for exclusive access. If a match is found, generate an error.
   */

  for (i = 0; i <= alt_max_fd; i++)
    5f74:	e0bffd17 	ldw	r2,-12(fp)
    5f78:	10800044 	addi	r2,r2,1
    5f7c:	e0bffd15 	stw	r2,-12(fp)
    5f80:	d0a00917 	ldw	r2,-32732(gp)
    5f84:	1007883a 	mov	r3,r2
    5f88:	e0bffd17 	ldw	r2,-12(fp)
    5f8c:	18bfd92e 	bgeu	r3,r2,5ef4 <_gp+0xffff7708>
    }
  }
  
  /* The device is not locked */
 
  return 0;
    5f90:	0005883a 	mov	r2,zero
}
    5f94:	e6ffff04 	addi	sp,fp,-4
    5f98:	dfc00217 	ldw	ra,8(sp)
    5f9c:	df000117 	ldw	fp,4(sp)
    5fa0:	dc000017 	ldw	r16,0(sp)
    5fa4:	dec00304 	addi	sp,sp,12
    5fa8:	f800283a 	ret

00005fac <open>:
 *
 * ALT_OPEN is mapped onto the open() system call in alt_syscall.h
 */
 
int ALT_OPEN (const char* file, int flags, int mode)
{ 
    5fac:	defff604 	addi	sp,sp,-40
    5fb0:	dfc00915 	stw	ra,36(sp)
    5fb4:	df000815 	stw	fp,32(sp)
    5fb8:	df000804 	addi	fp,sp,32
    5fbc:	e13ffd15 	stw	r4,-12(fp)
    5fc0:	e17ffe15 	stw	r5,-8(fp)
    5fc4:	e1bfff15 	stw	r6,-4(fp)
  alt_dev* dev;
  alt_fd*  fd;
  int index  = -1;
    5fc8:	00bfffc4 	movi	r2,-1
    5fcc:	e0bff915 	stw	r2,-28(fp)
  int status = -ENODEV;
    5fd0:	00bffb44 	movi	r2,-19
    5fd4:	e0bffa15 	stw	r2,-24(fp)
  int isafs = 0;
    5fd8:	e03ffb15 	stw	zero,-20(fp)
  /* 
   * Check the device list, to see if a device with a matching name is 
   * registered.
   */
  
  if (!(dev = alt_find_dev (file, &alt_dev_list)))
    5fdc:	d1600704 	addi	r5,gp,-32740
    5fe0:	e13ffd17 	ldw	r4,-12(fp)
    5fe4:	00061b00 	call	61b0 <alt_find_dev>
    5fe8:	e0bff815 	stw	r2,-32(fp)
    5fec:	e0bff817 	ldw	r2,-32(fp)
    5ff0:	1000051e 	bne	r2,zero,6008 <open+0x5c>
  {
    /* No matching device, so try the filesystem list */

    dev   = alt_find_file (file);
    5ff4:	e13ffd17 	ldw	r4,-12(fp)
    5ff8:	00062400 	call	6240 <alt_find_file>
    5ffc:	e0bff815 	stw	r2,-32(fp)
    isafs = 1;
    6000:	00800044 	movi	r2,1
    6004:	e0bffb15 	stw	r2,-20(fp)

  /* 
   * If a matching device or filesystem is found, allocate a file descriptor. 
   */

  if (dev)
    6008:	e0bff817 	ldw	r2,-32(fp)
    600c:	10002b26 	beq	r2,zero,60bc <open+0x110>
  {
    if ((index = alt_get_fd (dev)) < 0)
    6010:	e13ff817 	ldw	r4,-32(fp)
    6014:	00063480 	call	6348 <alt_get_fd>
    6018:	e0bff915 	stw	r2,-28(fp)
    601c:	e0bff917 	ldw	r2,-28(fp)
    6020:	1000030e 	bge	r2,zero,6030 <open+0x84>
    {
      status = index;
    6024:	e0bff917 	ldw	r2,-28(fp)
    6028:	e0bffa15 	stw	r2,-24(fp)
    602c:	00002506 	br	60c4 <open+0x118>
    }
    else
    {
      fd = &alt_fd_list[index];
    6030:	01400304 	movi	r5,12
    6034:	e13ff917 	ldw	r4,-28(fp)
    6038:	00051b40 	call	51b4 <__mulsi3>
    603c:	1007883a 	mov	r3,r2
    6040:	00800034 	movhi	r2,0
    6044:	10999b04 	addi	r2,r2,26220
    6048:	1885883a 	add	r2,r3,r2
    604c:	e0bffc15 	stw	r2,-16(fp)
      fd->fd_flags = (flags & ~ALT_FD_FLAGS_MASK);
    6050:	e0fffe17 	ldw	r3,-8(fp)
    6054:	00900034 	movhi	r2,16384
    6058:	10bfffc4 	addi	r2,r2,-1
    605c:	1886703a 	and	r3,r3,r2
    6060:	e0bffc17 	ldw	r2,-16(fp)
    6064:	10c00215 	stw	r3,8(r2)
      
      /* If this is a device, ensure it isn't already locked */

      if (isafs || ((status = alt_file_locked (fd)) >= 0))
    6068:	e0bffb17 	ldw	r2,-20(fp)
    606c:	1000051e 	bne	r2,zero,6084 <open+0xd8>
    6070:	e13ffc17 	ldw	r4,-16(fp)
    6074:	0005ec00 	call	5ec0 <alt_file_locked>
    6078:	e0bffa15 	stw	r2,-24(fp)
    607c:	e0bffa17 	ldw	r2,-24(fp)
    6080:	10001016 	blt	r2,zero,60c4 <open+0x118>
        /* 
         * If the device or filesystem provides an open() callback function,
         * call it now to perform any device/filesystem specific operations.
         */
    
        status = (dev->open) ? dev->open(fd, file, flags, mode): 0;
    6084:	e0bff817 	ldw	r2,-32(fp)
    6088:	10800317 	ldw	r2,12(r2)
    608c:	10000826 	beq	r2,zero,60b0 <open+0x104>
    6090:	e0bff817 	ldw	r2,-32(fp)
    6094:	10800317 	ldw	r2,12(r2)
    6098:	e1ffff17 	ldw	r7,-4(fp)
    609c:	e1bffe17 	ldw	r6,-8(fp)
    60a0:	e17ffd17 	ldw	r5,-12(fp)
    60a4:	e13ffc17 	ldw	r4,-16(fp)
    60a8:	103ee83a 	callr	r2
    60ac:	00000106 	br	60b4 <open+0x108>
    60b0:	0005883a 	mov	r2,zero
    60b4:	e0bffa15 	stw	r2,-24(fp)
    60b8:	00000206 	br	60c4 <open+0x118>
      }
    }
  }
  else
  {
    status = -ENODEV;
    60bc:	00bffb44 	movi	r2,-19
    60c0:	e0bffa15 	stw	r2,-24(fp)
  }

  /* Allocation failed, so clean up and return an error */ 

  if (status < 0)
    60c4:	e0bffa17 	ldw	r2,-24(fp)
    60c8:	1000090e 	bge	r2,zero,60f0 <open+0x144>
  {
    alt_release_fd (index);  
    60cc:	e13ff917 	ldw	r4,-28(fp)
    60d0:	00061080 	call	6108 <alt_release_fd>
    ALT_ERRNO = -status;
    60d4:	0005e840 	call	5e84 <alt_get_errno>
    60d8:	1007883a 	mov	r3,r2
    60dc:	e0bffa17 	ldw	r2,-24(fp)
    60e0:	0085c83a 	sub	r2,zero,r2
    60e4:	18800015 	stw	r2,0(r3)
    return -1;
    60e8:	00bfffc4 	movi	r2,-1
    60ec:	00000106 	br	60f4 <open+0x148>
  }
  
  /* return the reference upon success */

  return index;
    60f0:	e0bff917 	ldw	r2,-28(fp)
}
    60f4:	e037883a 	mov	sp,fp
    60f8:	dfc00117 	ldw	ra,4(sp)
    60fc:	df000017 	ldw	fp,0(sp)
    6100:	dec00204 	addi	sp,sp,8
    6104:	f800283a 	ret

00006108 <alt_release_fd>:
 * File descriptors correcponding to standard in, standard out and standard 
 * error cannont be released backed to the pool. They are always reserved.
 */

void alt_release_fd (int fd)
{
    6108:	defffc04 	addi	sp,sp,-16
    610c:	dfc00315 	stw	ra,12(sp)
    6110:	df000215 	stw	fp,8(sp)
    6114:	dc000115 	stw	r16,4(sp)
    6118:	df000204 	addi	fp,sp,8
    611c:	e13ffe15 	stw	r4,-8(fp)
  if (fd > 2)
    6120:	e0bffe17 	ldw	r2,-8(fp)
    6124:	108000d0 	cmplti	r2,r2,3
    6128:	1000111e 	bne	r2,zero,6170 <alt_release_fd+0x68>
  {
    alt_fd_list[fd].fd_flags = 0;
    612c:	04000034 	movhi	r16,0
    6130:	84199b04 	addi	r16,r16,26220
    6134:	e0bffe17 	ldw	r2,-8(fp)
    6138:	01400304 	movi	r5,12
    613c:	1009883a 	mov	r4,r2
    6140:	00051b40 	call	51b4 <__mulsi3>
    6144:	8085883a 	add	r2,r16,r2
    6148:	10800204 	addi	r2,r2,8
    614c:	10000015 	stw	zero,0(r2)
    alt_fd_list[fd].dev      = 0;
    6150:	04000034 	movhi	r16,0
    6154:	84199b04 	addi	r16,r16,26220
    6158:	e0bffe17 	ldw	r2,-8(fp)
    615c:	01400304 	movi	r5,12
    6160:	1009883a 	mov	r4,r2
    6164:	00051b40 	call	51b4 <__mulsi3>
    6168:	8085883a 	add	r2,r16,r2
    616c:	10000015 	stw	zero,0(r2)
  }
}
    6170:	0001883a 	nop
    6174:	e6ffff04 	addi	sp,fp,-4
    6178:	dfc00217 	ldw	ra,8(sp)
    617c:	df000117 	ldw	fp,4(sp)
    6180:	dc000017 	ldw	r16,0(sp)
    6184:	dec00304 	addi	sp,sp,12
    6188:	f800283a 	ret

0000618c <altera_nios2_gen2_irq_init>:
/*
 * To initialize the internal interrupt controller, just clear the IENABLE
 * register so that all possible IRQs are disabled.
 */
void altera_nios2_gen2_irq_init(void) 
{
    618c:	deffff04 	addi	sp,sp,-4
    6190:	df000015 	stw	fp,0(sp)
    6194:	d839883a 	mov	fp,sp
    NIOS2_WRITE_IENABLE(0);
    6198:	000170fa 	wrctl	ienable,zero
}
    619c:	0001883a 	nop
    61a0:	e037883a 	mov	sp,fp
    61a4:	df000017 	ldw	fp,0(sp)
    61a8:	dec00104 	addi	sp,sp,4
    61ac:	f800283a 	ret

000061b0 <alt_find_dev>:
 * "name" must be an exact match for the devices registered name for a match to
 * be found.
 */
 
alt_dev* alt_find_dev(const char* name, alt_llist* llist)
{
    61b0:	defffa04 	addi	sp,sp,-24
    61b4:	dfc00515 	stw	ra,20(sp)
    61b8:	df000415 	stw	fp,16(sp)
    61bc:	df000404 	addi	fp,sp,16
    61c0:	e13ffe15 	stw	r4,-8(fp)
    61c4:	e17fff15 	stw	r5,-4(fp)
  alt_dev* next = (alt_dev*) llist->next;
    61c8:	e0bfff17 	ldw	r2,-4(fp)
    61cc:	10800017 	ldw	r2,0(r2)
    61d0:	e0bffc15 	stw	r2,-16(fp)
  alt_32 len;

  len  = strlen(name) + 1;
    61d4:	e13ffe17 	ldw	r4,-8(fp)
    61d8:	00047900 	call	4790 <strlen>
    61dc:	10800044 	addi	r2,r2,1
    61e0:	e0bffd15 	stw	r2,-12(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 

  while (next != (alt_dev*) llist)
    61e4:	00000d06 	br	621c <alt_find_dev+0x6c>
    /* 
     * memcmp() is used here rather than strcmp() in order to reduce the size
     * of the executable.
     */

    if (!memcmp (next->name, name, len))
    61e8:	e0bffc17 	ldw	r2,-16(fp)
    61ec:	10800217 	ldw	r2,8(r2)
    61f0:	e0fffd17 	ldw	r3,-12(fp)
    61f4:	180d883a 	mov	r6,r3
    61f8:	e17ffe17 	ldw	r5,-8(fp)
    61fc:	1009883a 	mov	r4,r2
    6200:	000640c0 	call	640c <memcmp>
    6204:	1000021e 	bne	r2,zero,6210 <alt_find_dev+0x60>
    {
      /* match found */

      return next;
    6208:	e0bffc17 	ldw	r2,-16(fp)
    620c:	00000706 	br	622c <alt_find_dev+0x7c>
    }
    next = (alt_dev*) next->llist.next;
    6210:	e0bffc17 	ldw	r2,-16(fp)
    6214:	10800017 	ldw	r2,0(r2)
    6218:	e0bffc15 	stw	r2,-16(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 

  while (next != (alt_dev*) llist)
    621c:	e0fffc17 	ldw	r3,-16(fp)
    6220:	e0bfff17 	ldw	r2,-4(fp)
    6224:	18bff01e 	bne	r3,r2,61e8 <_gp+0xffff79fc>
    next = (alt_dev*) next->llist.next;
  }
  
  /* No match found */
  
  return NULL;
    6228:	0005883a 	mov	r2,zero
}
    622c:	e037883a 	mov	sp,fp
    6230:	dfc00117 	ldw	ra,4(sp)
    6234:	df000017 	ldw	fp,0(sp)
    6238:	dec00204 	addi	sp,sp,8
    623c:	f800283a 	ret

00006240 <alt_find_file>:
 * either '/' or '\0' is the prefix of the filename. For example the filename:
 * "/myfilesystem/junk.txt" would match: "/myfilesystem", but not: "/myfile". 
 */
 
alt_dev* alt_find_file (const char* name)
{
    6240:	defffb04 	addi	sp,sp,-20
    6244:	dfc00415 	stw	ra,16(sp)
    6248:	df000315 	stw	fp,12(sp)
    624c:	df000304 	addi	fp,sp,12
    6250:	e13fff15 	stw	r4,-4(fp)
  alt_dev* next = (alt_dev*) alt_fs_list.next;   
    6254:	d0a00517 	ldw	r2,-32748(gp)
    6258:	e0bffd15 	stw	r2,-12(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 
 
  while (next != (alt_dev*) &alt_fs_list)
    625c:	00003106 	br	6324 <alt_find_file+0xe4>
  {
    len = strlen(next->name);
    6260:	e0bffd17 	ldw	r2,-12(fp)
    6264:	10800217 	ldw	r2,8(r2)
    6268:	1009883a 	mov	r4,r2
    626c:	00047900 	call	4790 <strlen>
    6270:	e0bffe15 	stw	r2,-8(fp)
    
    if (next->name[len-1] == '/')
    6274:	e0bffd17 	ldw	r2,-12(fp)
    6278:	10c00217 	ldw	r3,8(r2)
    627c:	e0bffe17 	ldw	r2,-8(fp)
    6280:	10bfffc4 	addi	r2,r2,-1
    6284:	1885883a 	add	r2,r3,r2
    6288:	10800003 	ldbu	r2,0(r2)
    628c:	10803fcc 	andi	r2,r2,255
    6290:	1080201c 	xori	r2,r2,128
    6294:	10bfe004 	addi	r2,r2,-128
    6298:	10800bd8 	cmpnei	r2,r2,47
    629c:	1000031e 	bne	r2,zero,62ac <alt_find_file+0x6c>
    {
      len -= 1;
    62a0:	e0bffe17 	ldw	r2,-8(fp)
    62a4:	10bfffc4 	addi	r2,r2,-1
    62a8:	e0bffe15 	stw	r2,-8(fp)
    }

    if (((name[len] == '/') || (name[len] == '\0')) && 
    62ac:	e0bffe17 	ldw	r2,-8(fp)
    62b0:	e0ffff17 	ldw	r3,-4(fp)
    62b4:	1885883a 	add	r2,r3,r2
    62b8:	10800003 	ldbu	r2,0(r2)
    62bc:	10803fcc 	andi	r2,r2,255
    62c0:	1080201c 	xori	r2,r2,128
    62c4:	10bfe004 	addi	r2,r2,-128
    62c8:	10800be0 	cmpeqi	r2,r2,47
    62cc:	1000081e 	bne	r2,zero,62f0 <alt_find_file+0xb0>
    62d0:	e0bffe17 	ldw	r2,-8(fp)
    62d4:	e0ffff17 	ldw	r3,-4(fp)
    62d8:	1885883a 	add	r2,r3,r2
    62dc:	10800003 	ldbu	r2,0(r2)
    62e0:	10803fcc 	andi	r2,r2,255
    62e4:	1080201c 	xori	r2,r2,128
    62e8:	10bfe004 	addi	r2,r2,-128
    62ec:	10000a1e 	bne	r2,zero,6318 <alt_find_file+0xd8>
        !memcmp (next->name, name, len))
    62f0:	e0bffd17 	ldw	r2,-12(fp)
    62f4:	10800217 	ldw	r2,8(r2)
    62f8:	e0fffe17 	ldw	r3,-8(fp)
    62fc:	180d883a 	mov	r6,r3
    6300:	e17fff17 	ldw	r5,-4(fp)
    6304:	1009883a 	mov	r4,r2
    6308:	000640c0 	call	640c <memcmp>
    if (next->name[len-1] == '/')
    {
      len -= 1;
    }

    if (((name[len] == '/') || (name[len] == '\0')) && 
    630c:	1000021e 	bne	r2,zero,6318 <alt_find_file+0xd8>
        !memcmp (next->name, name, len))
    {
      /* match found */

      return next;
    6310:	e0bffd17 	ldw	r2,-12(fp)
    6314:	00000706 	br	6334 <alt_find_file+0xf4>
    }
    next = (alt_dev*) next->llist.next;
    6318:	e0bffd17 	ldw	r2,-12(fp)
    631c:	10800017 	ldw	r2,0(r2)
    6320:	e0bffd15 	stw	r2,-12(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 
 
  while (next != (alt_dev*) &alt_fs_list)
    6324:	e0fffd17 	ldw	r3,-12(fp)
    6328:	d0a00504 	addi	r2,gp,-32748
    632c:	18bfcc1e 	bne	r3,r2,6260 <_gp+0xffff7a74>
    next = (alt_dev*) next->llist.next;
  }
  
  /* No match found */
  
  return NULL;     
    6330:	0005883a 	mov	r2,zero
}
    6334:	e037883a 	mov	sp,fp
    6338:	dfc00117 	ldw	ra,4(sp)
    633c:	df000017 	ldw	fp,0(sp)
    6340:	dec00204 	addi	sp,sp,8
    6344:	f800283a 	ret

00006348 <alt_get_fd>:
 * the offset of the file descriptor within the file descriptor array). A
 * negative value indicates failure.
 */

int alt_get_fd (alt_dev* dev)
{
    6348:	defffa04 	addi	sp,sp,-24
    634c:	dfc00515 	stw	ra,20(sp)
    6350:	df000415 	stw	fp,16(sp)
    6354:	dc000315 	stw	r16,12(sp)
    6358:	df000404 	addi	fp,sp,16
    635c:	e13ffe15 	stw	r4,-8(fp)
  alt_32 i;
  int rc = -EMFILE;
    6360:	00bffa04 	movi	r2,-24
    6364:	e0bffd15 	stw	r2,-12(fp)
   * indicates the highest file descriptor ever allocated. This is used to
   * improve efficency when searching the file descriptor list, and 
   * therefore reduce contention on the alt_fd_list_lock semaphore. 
   */

  for (i = 0; i < ALT_MAX_FD; i++)
    6368:	e03ffc15 	stw	zero,-16(fp)
    636c:	00001d06 	br	63e4 <alt_get_fd+0x9c>
  {
    if (!alt_fd_list[i].dev)
    6370:	04000034 	movhi	r16,0
    6374:	84199b04 	addi	r16,r16,26220
    6378:	e0bffc17 	ldw	r2,-16(fp)
    637c:	01400304 	movi	r5,12
    6380:	1009883a 	mov	r4,r2
    6384:	00051b40 	call	51b4 <__mulsi3>
    6388:	8085883a 	add	r2,r16,r2
    638c:	10800017 	ldw	r2,0(r2)
    6390:	1000111e 	bne	r2,zero,63d8 <alt_get_fd+0x90>
    {
      alt_fd_list[i].dev = dev;
    6394:	04000034 	movhi	r16,0
    6398:	84199b04 	addi	r16,r16,26220
    639c:	e0bffc17 	ldw	r2,-16(fp)
    63a0:	01400304 	movi	r5,12
    63a4:	1009883a 	mov	r4,r2
    63a8:	00051b40 	call	51b4 <__mulsi3>
    63ac:	8085883a 	add	r2,r16,r2
    63b0:	e0fffe17 	ldw	r3,-8(fp)
    63b4:	10c00015 	stw	r3,0(r2)
      if (i > alt_max_fd)
    63b8:	d0e00917 	ldw	r3,-32732(gp)
    63bc:	e0bffc17 	ldw	r2,-16(fp)
    63c0:	1880020e 	bge	r3,r2,63cc <alt_get_fd+0x84>
      {
        alt_max_fd = i;
    63c4:	e0bffc17 	ldw	r2,-16(fp)
    63c8:	d0a00915 	stw	r2,-32732(gp)
      }
      rc = i;
    63cc:	e0bffc17 	ldw	r2,-16(fp)
    63d0:	e0bffd15 	stw	r2,-12(fp)
      goto alt_get_fd_exit;
    63d4:	00000606 	br	63f0 <alt_get_fd+0xa8>
   * indicates the highest file descriptor ever allocated. This is used to
   * improve efficency when searching the file descriptor list, and 
   * therefore reduce contention on the alt_fd_list_lock semaphore. 
   */

  for (i = 0; i < ALT_MAX_FD; i++)
    63d8:	e0bffc17 	ldw	r2,-16(fp)
    63dc:	10800044 	addi	r2,r2,1
    63e0:	e0bffc15 	stw	r2,-16(fp)
    63e4:	e0bffc17 	ldw	r2,-16(fp)
    63e8:	10800810 	cmplti	r2,r2,32
    63ec:	103fe01e 	bne	r2,zero,6370 <_gp+0xffff7b84>
   * file descriptor pool.
   */

  ALT_SEM_POST(alt_fd_list_lock);

  return rc;
    63f0:	e0bffd17 	ldw	r2,-12(fp)
}
    63f4:	e6ffff04 	addi	sp,fp,-4
    63f8:	dfc00217 	ldw	ra,8(sp)
    63fc:	df000117 	ldw	fp,4(sp)
    6400:	dc000017 	ldw	r16,0(sp)
    6404:	dec00304 	addi	sp,sp,12
    6408:	f800283a 	ret

0000640c <memcmp>:
    640c:	218d883a 	add	r6,r4,r6
    6410:	21800826 	beq	r4,r6,6434 <memcmp+0x28>
    6414:	20800003 	ldbu	r2,0(r4)
    6418:	28c00003 	ldbu	r3,0(r5)
    641c:	10c00226 	beq	r2,r3,6428 <memcmp+0x1c>
    6420:	10c5c83a 	sub	r2,r2,r3
    6424:	f800283a 	ret
    6428:	21000044 	addi	r4,r4,1
    642c:	29400044 	addi	r5,r5,1
    6430:	003ff706 	br	6410 <_gp+0xffff7c24>
    6434:	0005883a 	mov	r2,zero
    6438:	f800283a 	ret
