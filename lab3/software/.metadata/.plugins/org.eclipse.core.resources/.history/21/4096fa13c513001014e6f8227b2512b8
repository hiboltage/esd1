/*
 * pb_timer_int.c
 *
 *  Created on: Apr 02, 2025
 *      Author: Steven Bolt
 */

#include <stdio.h>
#include "system.h"			// include system header for base addresses
#include "alt_types.h"		// needed for interrupts
#include "sys/alt_irq.h"	// needed for interrupts
#include "altera_avalon_timer_regs.h"
#include "altera_avalon_timer.h"

// create standard embedded type definitions
typedef   signed char   sint8;              // signed 8 bit values
typedef unsigned char   uint8;              // unsigned 8 bit values
typedef   signed short  sint16;             // signed 16 bit values
typedef unsigned short  uint16;             // unsigned 16 bit values
typedef   signed long   sint32;             // signed 32 bit values
typedef unsigned long   uint32;             // unsigned 32 bit values
typedef         float   real32;             // 32 bit real values

#define ZERO	0xC0	// ssd display values
#define ONE		0xF9
#define TWO		0xA4
#define THREE	0xB0
#define FOUR	0x99
#define FIVE	0x92
#define SIX		0x82
#define SEVEN	0xF8
#define EIGHT	0x80
#define NINE	0x98

// set up pointers
uint32* timer 		= (uint32*)TIMER_0_BASE;
uint32* leds		= (uint32*)LEDS_BASE;		// output (non-volatile)
uint32* hex0 		= (uint32*)HEX0_BASE;		// output (non-volatile)
volatile uint32* sw	= (uint32*)SWITCHES_BASE;	// input (volatile)

// pushbutton pointers
volatile uint32* pb 				= (uint32*)PUSHBUTTONS_BASE;		// input (volatile)
volatile uint32* pb_int_mask 		= (uint32*)PUSHBUTTONS_BASE + 2;	// pushbutton interrupt mask register
volatile uint32* pb_edge_capture 	= (uint32*)PUSHBUTTONS_BASE + 3;	// pushbutton edge capture register

uint8 dispNums[] = {ZERO, ONE, TWO, THREE, FOUR, FIVE, SIX, SEVEN, EIGHT, NINE};	// index of display numbers
uint8 dispNum = 0;	// dispNums[dispNum]

uint8 sw0 = 0x00;		// sw0 value
uint8 led_val = 0x00;	// leds value

void timer_isr(void *context){

	static led_val;

	*timer = 0;			// clear timer interrupt

	*leds = led_val;	// write to leds
	led_val += 1;		// increase led value

}

// pushbutton ISR routine
void key1_isr(void *context){

	*pb_edge_capture = 0;	// clear pushbutton interrupt

	sw0 = 0x01 & *sw;		// check sw0 value
	if(sw0){				// if sw0 high

		if(dispNum == 9){	// overflow protection
			dispNum = 9;
		}
		else{
			dispNum += 1;	// increment display number
		}
	}
	else{					// if sw0 low

		if(dispNum == 0){	// underflow protection
			dispNum = 0;
		}
		else{
			dispNum -= 1;	// decrement display number
		}
	}

}

int main(){

	// enable NIOS II to accept a pushbutton interrupt
	// assign interrupt handler timer_isr
	alt_ic_isr_register(TIMER_0_IRQ_INTERRUPT_CONTROLLER_ID,TIMER_0_IRQ,timer_isr,0,0);

	// enable NIOS II to accept a pushbutton interrupt
	// assign interrupt handler key1_isr
	alt_ic_isr_register(PUSHBUTTONS_IRQ_INTERRUPT_CONTROLLER_ID,PUSHBUTTONS_IRQ,key1_isr,0,0);

	*pb_int_mask = 0x00000002;		// enable interrupts on key1
	*pb_edge_capture = 0x00000000;	// clear pushbutton interrupt

	*hex0 = dispNums[dispNum];	// write 0 to hex0
	*leds = led_val;			// write initial value to leds

	while(1){

		*hex0 = dispNums[dispNum];	// display number

	}	// end while(1)
	return 0;
}	// end main
