/*
 * int_enabled.c
 *
 *  Created on: Feb 11, 2025
 *      Author: Steven Bolt
 */

#include "system.h"			// include system header for base addresses
#include "alt_types.h"		// needed for interrupts
#include "sys/alt_irq.h"	// needed for interrupts

// create standard embedded type definitions
typedef   signed char   sint8;              // signed 8 bit values
typedef unsigned char   uint8;              // unsigned 8 bit values
typedef   signed short  sint16;             // signed 16 bit values
typedef unsigned short  uint16;             // unsigned 16 bit values
typedef   signed long   sint32;             // signed 32 bit values
typedef unsigned long   uint32;             // unsigned 32 bit values
typedef         float   real32;             // 32 bit real values

#define ZERO	0xC0	// ssd display values
#define ONE		0xF9
#define TWO		0xA4
#define THREE	0xB0
#define FOUR	0x99
#define FIVE	0x92
#define SIX		0x82
#define SEVEN	0xF8
#define EIGHT	0x80
#define NINE	0x98

// set up pointers
uint32* hex0 = (uint32*)HEX0_BASE;					// output (non-volatile)
volatile uint32* pb = (uint32*)PUSHBUTTONS_BASE;	// input (volatile)
volatile uint32* pb_edge_capture = (uint32*)PUSHBUTTONS_BASE + 3;					// pushbutton edge capture register
volatile uint32* sw	= (uint32*)SWITCHES_BASE;		// input (volatile)

uint8 dispNums[] = {ZERO, ONE, TWO, THREE, FOUR, FIVE, SIX, SEVEN, EIGHT, NINE};	// index of display numbers
uint8 dispNum = 0;	// dispNums[dispNum]

uint8 sw0 = 0x00;	// sw0 value

// ISR routine
void key1_isr(void *context){

	*pb_edge_capture = 0;	// clear pushbutton interrupt

	sw0 = 0x01 & *sw;		// check sw0 value
	if(sw0){				// if sw0 high

		if(dispNum == 9){	// overflow protection
			dispNum = 9;
		}
		else{
			dispNum += 1;	// increment display number
		}
	}
	else{					// if sw0 low

		if(dispNum == 0){	// underflow protection
			dispNum = 0;
		}
		else{
			dispNum -= 1;	// decrement display number
		}
	}

}

int main(){

	// enable NIOS II to accept a pushbutton interrupt
	// assign interrupt handler key1_isr
	alt_ic_isr_register(PUSHBUTTONS_IRQ_INTERRUPT_CONTROLLER_ID,PUSHBUTTONS_IRQ,key1_isr,0,0);

	volatile uint32* pb_int_mask = pb + 2;	// pushbutton interrupt mask register
	*pb_edge_capture = pb + 3;				// pushbutton edge capture register

	*pb_int_mask = 0x02;	// enable interrupts on key1

	*hex0 = dispNums[dispNum];	// write 0 to hex0

	while(1){

		*hex0 = dispNums[dispNum];	// display number

	}	// end while(1)
	return 0;
}	// end main
